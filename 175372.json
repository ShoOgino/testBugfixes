{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","commits":[{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","pathOld":"/dev/null","sourceNew":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(1l, Utils.getObjectByPath(m, true, \"violation/violation/delta\"));\n    assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n    assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m, false, \"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ae23947c41339ea2b352422bb762dfb4a17077","date":1524235117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","sourceNew":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(1L, Utils.getObjectByPath(m, true, \"violation/violation/delta\"));\n    assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n    assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m, false, \"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n  }\n\n","sourceOld":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(1l, Utils.getObjectByPath(m, true, \"violation/violation/delta\"));\n    assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n    assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m, false, \"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","sourceNew":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(1.0d, Utils.getObjectByPath(m, true, \"violation/violation/delta\"));\n    assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n    assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m, false, \"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n  }\n\n","sourceOld":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(1L, Utils.getObjectByPath(m, true, \"violation/violation/delta\"));\n    assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n    assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m, false, \"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","sourceNew":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(1.0d, Utils.getObjectByPath(m, true, \"violation/violation/delta\"));\n    assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n    assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m, false, \"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n  }\n\n","sourceOld":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(1L, Utils.getObjectByPath(m, true, \"violation/violation/delta\"));\n    assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n    assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m, false, \"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","sourceNew":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(1.0d, Utils.getObjectByPath(m, true, \"violation/violation/delta\"));\n    assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n    assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m, false, \"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n  }\n\n","sourceOld":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(1L, Utils.getObjectByPath(m, true, \"violation/violation/delta\"));\n    assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n    assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m, false, \"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","sourceNew":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    assertEquals(\"core_node2\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","sourceOld":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(1.0d, Utils.getObjectByPath(m, true, \"violation/violation/delta\"));\n    assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n    assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m, false, \"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n  }\n\n","bugFix":null,"bugIntro":["36f0252ed8dcb14c7a9129860ae8d13028d74365"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","sourceNew":"  public void testReplicaCountSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData((Map) loadFromResource(\"testReplicaCountSuggestions.json\")));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    assertEquals(\"core_node2\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","sourceOld":"  public void testReplicaCountSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData(dataproviderdata));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    assertEquals(\"core_node2\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","sourceNew":"  public void testReplicaCountSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { cores :'<10', node :'#ANY'},\" +\n          \"    { replica :'<2',  node:'#ANY'},\" +\n          \"    { nodeset:{nodeRole : overseer}, replica :0}],\" +\n          \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData((Map) loadFromResource(\"testReplicaCountSuggestions.json\")));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    assertEquals(\"core_node2\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","sourceOld":"  public void testReplicaCountSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData((Map) loadFromResource(\"testReplicaCountSuggestions.json\")));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    assertEquals(\"core_node2\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","sourceNew":"  public void testReplicaCountSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { cores :'<10', node :'#ANY'},\" +\n          \"    { replica :'<2',  node:'#ANY'},\" +\n          \"    { nodeset:{nodeRole : overseer}, replica :0}],\" +\n          \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData((Map) loadFromResource(\"testReplicaCountSuggestions.json\")));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    assertEquals(\"core_node2\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","sourceOld":"  public void testReplicaCountSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData((Map) loadFromResource(\"testReplicaCountSuggestions.json\")));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    assertEquals(\"core_node2\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f0252ed8dcb14c7a9129860ae8d13028d74365","date":1567769793,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","sourceNew":"  public void testReplicaCountSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { cores :'<10', node :'#ANY'},\" +\n          \"    { replica :'<2',  node:'#ANY'},\" +\n          \"    { nodeset:{nodeRole : overseer}, replica :0}],\" +\n          \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData((Map) loadFromResource(\"testReplicaCountSuggestions.json\")));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    /*\n     * one of the two cores on 10.0.0.6:8983_solr should move to 10.0.0.6:7574_solr and\n     * (everything else being equal) core_node1 is chosen ahead of core_node2 based on its name\n     */\n    assertEquals(\"core_node1\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","sourceOld":"  public void testReplicaCountSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { cores :'<10', node :'#ANY'},\" +\n          \"    { replica :'<2',  node:'#ANY'},\" +\n          \"    { nodeset:{nodeRole : overseer}, replica :0}],\" +\n          \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData((Map) loadFromResource(\"testReplicaCountSuggestions.json\")));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    assertEquals(\"core_node2\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","bugFix":["6428b274f6593f368c4f838379620e7f5d196d65"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","sourceNew":"  public void testReplicaCountSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { cores :'<10', node :'#ANY'},\" +\n          \"    { replica :'<2',  node:'#ANY'},\" +\n          \"    { nodeset:{nodeRole : overseer}, replica :0}],\" +\n          \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    }\n    @SuppressWarnings({\"unchecked\"})\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData((Map) loadFromResource(\"testReplicaCountSuggestions.json\")));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    /*\n     * one of the two cores on 10.0.0.6:8983_solr should move to 10.0.0.6:7574_solr and\n     * (everything else being equal) core_node1 is chosen ahead of core_node2 based on its name\n     */\n    assertEquals(\"core_node1\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","sourceOld":"  public void testReplicaCountSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { cores :'<10', node :'#ANY'},\" +\n          \"    { replica :'<2',  node:'#ANY'},\" +\n          \"    { nodeset:{nodeRole : overseer}, replica :0}],\" +\n          \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData((Map) loadFromResource(\"testReplicaCountSuggestions.json\")));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    /*\n     * one of the two cores on 10.0.0.6:8983_solr should move to 10.0.0.6:7574_solr and\n     * (everything else being equal) core_node1 is chosen ahead of core_node2 based on its name\n     */\n    assertEquals(\"core_node1\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaCountSuggestions().mjava","sourceNew":null,"sourceOld":"  public void testReplicaCountSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<10', node :'#ANY'},\" +\n        \"    { replica :'<2',  node:'#ANY'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { cores :'<10', node :'#ANY'},\" +\n          \"    { replica :'<2',  node:'#ANY'},\" +\n          \"    { nodeset:{nodeRole : overseer}, replica :0}],\" +\n          \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    }\n    @SuppressWarnings({\"unchecked\"})\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        cloudManagerWithData((Map) loadFromResource(\"testReplicaCountSuggestions.json\")));\n    assertFalse(l.isEmpty());\n\n    assertEquals(1.0d, l.get(0)._get( \"violation/violation/delta\",null));\n    assertEquals(\"POST\", l.get(0)._get(\"operation/method\",null));\n    assertEquals(\"/c/mycoll1\", l.get(0)._get( \"operation/path\",null));\n    assertNotNull(l.get(0)._get(\"operation/command/move-replica\", null));\n    assertEquals(\"10.0.0.6:7574_solr\", l.get(0)._get( \"operation/command/move-replica/targetNode\",null));\n    /*\n     * one of the two cores on 10.0.0.6:8983_solr should move to 10.0.0.6:7574_solr and\n     * (everything else being equal) core_node1 is chosen ahead of core_node2 based on its name\n     */\n    assertEquals(\"core_node1\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["36f0252ed8dcb14c7a9129860ae8d13028d74365"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"6428b274f6593f368c4f838379620e7f5d196d65":["9837f40c922407d857991971de6def18eda0857b"],"36f0252ed8dcb14c7a9129860ae8d13028d74365":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["33ae23947c41339ea2b352422bb762dfb4a17077","9837f40c922407d857991971de6def18eda0857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["f5a27e78e3d29dee02bab19ded25336471e96882","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["f5a27e78e3d29dee02bab19ded25336471e96882"],"33ae23947c41339ea2b352422bb762dfb4a17077":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9837f40c922407d857991971de6def18eda0857b":["33ae23947c41339ea2b352422bb762dfb4a17077"],"f5a27e78e3d29dee02bab19ded25336471e96882":["6428b274f6593f368c4f838379620e7f5d196d65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["33ae23947c41339ea2b352422bb762dfb4a17077","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6428b274f6593f368c4f838379620e7f5d196d65":["f5a27e78e3d29dee02bab19ded25336471e96882"],"36f0252ed8dcb14c7a9129860ae8d13028d74365":["9ba1b632c041956c93c41aa1143d16a567014891"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["36f0252ed8dcb14c7a9129860ae8d13028d74365","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"33ae23947c41339ea2b352422bb762dfb4a17077":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["33ae23947c41339ea2b352422bb762dfb4a17077"],"9837f40c922407d857991971de6def18eda0857b":["6428b274f6593f368c4f838379620e7f5d196d65","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f5a27e78e3d29dee02bab19ded25336471e96882":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}