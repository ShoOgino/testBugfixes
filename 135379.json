{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"bc669044b7422515d5ac03531ad22b2cec9e371b","date":1337720320,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.getFiles().add(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.getFiles();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfosFormat.SI_EXTENSION);\n    si.getFiles().add(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.getFiles();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb5728b83dbb3e002cdd22adfe6caf103a96ef15","date":1337791289,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.getFiles().add(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.getFiles();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","203d7d3cb7712e10ef33009a63247ae40c302d7a"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["bc669044b7422515d5ac03531ad22b2cec9e371b"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc669044b7422515d5ac03531ad22b2cec9e371b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","bc669044b7422515d5ac03531ad22b2cec9e371b"],"bc669044b7422515d5ac03531ad22b2cec9e371b":["fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}