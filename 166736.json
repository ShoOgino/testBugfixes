{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithCollectionMoveVsAddSuggestions() {\n    String clusterStateStr = \"{\" +\n        \"  'articles_coll':{\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'comments_coll': {\" +\n        \"    'withCollection' :'articles_coll',\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:7576/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7577/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7578/solr',\" +\n        \"            'node_name': 'node5',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      Map s = suggestionInfo.toMap(new LinkedHashMap<>());\n      assertEquals(\"POST\", Utils.getObjectByPath(s, true, \"operation/method\"));\n      if (Utils.getObjectByPath(s, false, \"operation/command/add-replica\") != null)  {\n        numAdds++;\n        assertEquals(1.0d, Utils.getObjectByPath(s, true, \"violation/violation/delta\"));\n        assertEquals(\"/c/articles_coll/shards\", Utils.getObjectByPath(s, true, \"operation/path\"));\n        addNodes.add((String) Utils.getObjectByPath(s, true, \"operation/command/add-replica/node\"));\n      } else if (Utils.getObjectByPath(s, false, \"operation/command/move-replica\") != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", Utils.getObjectByPath(s, true, \"operation/path\"));\n        targetNodes.add((String) Utils.getObjectByPath(s, true, \"operation/command/move-replica/targetNode\"));\n        movedReplicas.add((String) Utils.getObjectByPath(s, true, \"operation/command/move-replica/replica\"));\n      } else  {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","sourceNew":"  public void testWithCollectionMoveVsAddSuggestions() {\n    String clusterStateStr = \"{\" +\n        \"  'articles_coll':{\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'comments_coll': {\" +\n        \"    'withCollection' :'articles_coll',\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:7576/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7577/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7578/solr',\" +\n        \"            'node_name': 'node5',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      Map s = suggestionInfo.toMap(new LinkedHashMap<>());\n      assertEquals(\"POST\", Utils.getObjectByPath(s, true, \"operation/method\"));\n      if (Utils.getObjectByPath(s, false, \"operation/command/add-replica\") != null) {\n        numAdds++;\n        assertEquals(1.0d, Utils.getObjectByPath(s, true, \"violation/violation/delta\"));\n        assertEquals(\"/c/articles_coll/shards\", Utils.getObjectByPath(s, true, \"operation/path\"));\n        addNodes.add((String) Utils.getObjectByPath(s, true, \"operation/command/add-replica/node\"));\n      } else if (Utils.getObjectByPath(s, false, \"operation/command/move-replica\") != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", Utils.getObjectByPath(s, true, \"operation/path\"));\n        targetNodes.add((String) Utils.getObjectByPath(s, true, \"operation/command/move-replica/targetNode\"));\n        movedReplicas.add((String) Utils.getObjectByPath(s, true, \"operation/command/move-replica/replica\"));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","sourceOld":"  public void testWithCollectionMoveVsAddSuggestions() {\n    String clusterStateStr = \"{\" +\n        \"  'articles_coll':{\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'comments_coll': {\" +\n        \"    'withCollection' :'articles_coll',\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:7576/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7577/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7578/solr',\" +\n        \"            'node_name': 'node5',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      Map s = suggestionInfo.toMap(new LinkedHashMap<>());\n      assertEquals(\"POST\", Utils.getObjectByPath(s, true, \"operation/method\"));\n      if (Utils.getObjectByPath(s, false, \"operation/command/add-replica\") != null)  {\n        numAdds++;\n        assertEquals(1.0d, Utils.getObjectByPath(s, true, \"violation/violation/delta\"));\n        assertEquals(\"/c/articles_coll/shards\", Utils.getObjectByPath(s, true, \"operation/path\"));\n        addNodes.add((String) Utils.getObjectByPath(s, true, \"operation/command/add-replica/node\"));\n      } else if (Utils.getObjectByPath(s, false, \"operation/command/move-replica\") != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", Utils.getObjectByPath(s, true, \"operation/path\"));\n        targetNodes.add((String) Utils.getObjectByPath(s, true, \"operation/command/move-replica/targetNode\"));\n        movedReplicas.add((String) Utils.getObjectByPath(s, true, \"operation/command/move-replica/replica\"));\n      } else  {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","sourceNew":"  public void testWithCollectionMoveVsAddSuggestions() {\n    String clusterStateStr = \"{\" +\n        \"  'articles_coll':{\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'comments_coll': {\" +\n        \"    'withCollection' :'articles_coll',\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:7576/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7577/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7578/solr',\" +\n        \"            'node_name': 'node5',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      if (suggestionInfo._get(\"operation/command/add-replica\", null) != null) {\n        numAdds++;\n        assertEquals(1.0d, suggestionInfo._get(\"violation/violation/delta\", null));\n        assertEquals(\"/c/articles_coll/shards\", suggestionInfo._get(\"operation/path\", null));\n        addNodes.add((String) suggestionInfo._get(\"operation/command/add-replica/node\", null));\n      } else if (suggestionInfo._get(\"operation/command/move-replica\", null) != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", suggestionInfo._get(\"operation/path\", null));\n        targetNodes.add((String) suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n        movedReplicas.add((String) suggestionInfo._get(\"operation/command/move-replica/replica\", null));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","sourceOld":"  public void testWithCollectionMoveVsAddSuggestions() {\n    String clusterStateStr = \"{\" +\n        \"  'articles_coll':{\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'comments_coll': {\" +\n        \"    'withCollection' :'articles_coll',\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:7576/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7577/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7578/solr',\" +\n        \"            'node_name': 'node5',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      Map s = suggestionInfo.toMap(new LinkedHashMap<>());\n      assertEquals(\"POST\", Utils.getObjectByPath(s, true, \"operation/method\"));\n      if (Utils.getObjectByPath(s, false, \"operation/command/add-replica\") != null) {\n        numAdds++;\n        assertEquals(1.0d, Utils.getObjectByPath(s, true, \"violation/violation/delta\"));\n        assertEquals(\"/c/articles_coll/shards\", Utils.getObjectByPath(s, true, \"operation/path\"));\n        addNodes.add((String) Utils.getObjectByPath(s, true, \"operation/command/add-replica/node\"));\n      } else if (Utils.getObjectByPath(s, false, \"operation/command/move-replica\") != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", Utils.getObjectByPath(s, true, \"operation/path\"));\n        targetNodes.add((String) Utils.getObjectByPath(s, true, \"operation/command/move-replica/targetNode\"));\n        movedReplicas.add((String) Utils.getObjectByPath(s, true, \"operation/command/move-replica/replica\"));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","sourceNew":"  public void testWithCollectionMoveVsAddSuggestions() throws IOException {\n    ClusterState clusterState = ClusterState.load(1,\n        (Map) loadFromResource(\"testWithCollectionMoveVsAddSuggestions.json\"),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"),\n        CLUSTER_STATE\n    );\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      if (suggestionInfo._get(\"operation/command/add-replica\", null) != null) {\n        numAdds++;\n        assertEquals(1.0d, suggestionInfo._get(\"violation/violation/delta\", null));\n        assertEquals(\"/c/articles_coll/shards\", suggestionInfo._get(\"operation/path\", null));\n        addNodes.add((String) suggestionInfo._get(\"operation/command/add-replica/node\", null));\n      } else if (suggestionInfo._get(\"operation/command/move-replica\", null) != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", suggestionInfo._get(\"operation/path\", null));\n        targetNodes.add((String) suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n        movedReplicas.add((String) suggestionInfo._get(\"operation/command/move-replica/replica\", null));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","sourceOld":"  public void testWithCollectionMoveVsAddSuggestions() {\n    String clusterStateStr = \"{\" +\n        \"  'articles_coll':{\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'comments_coll': {\" +\n        \"    'withCollection' :'articles_coll',\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:7576/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7577/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:7578/solr',\" +\n        \"            'node_name': 'node5',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:7579/solr',\" +\n        \"            'node_name': 'node6',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      if (suggestionInfo._get(\"operation/command/add-replica\", null) != null) {\n        numAdds++;\n        assertEquals(1.0d, suggestionInfo._get(\"violation/violation/delta\", null));\n        assertEquals(\"/c/articles_coll/shards\", suggestionInfo._get(\"operation/path\", null));\n        addNodes.add((String) suggestionInfo._get(\"operation/command/add-replica/node\", null));\n      } else if (suggestionInfo._get(\"operation/command/move-replica\", null) != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", suggestionInfo._get(\"operation/path\", null));\n        targetNodes.add((String) suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n        movedReplicas.add((String) suggestionInfo._get(\"operation/command/move-replica/replica\", null));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","sourceNew":"  public void testWithCollectionMoveVsAddSuggestions() throws IOException {\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveVsAddSuggestions.json\"),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      if (suggestionInfo._get(\"operation/command/add-replica\", null) != null) {\n        numAdds++;\n        assertEquals(1.0d, suggestionInfo._get(\"violation/violation/delta\", null));\n        assertEquals(\"/c/articles_coll/shards\", suggestionInfo._get(\"operation/path\", null));\n        addNodes.add((String) suggestionInfo._get(\"operation/command/add-replica/node\", null));\n      } else if (suggestionInfo._get(\"operation/command/move-replica\", null) != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", suggestionInfo._get(\"operation/path\", null));\n        targetNodes.add((String) suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n        movedReplicas.add((String) suggestionInfo._get(\"operation/command/move-replica/replica\", null));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","sourceOld":"  public void testWithCollectionMoveVsAddSuggestions() throws IOException {\n    ClusterState clusterState = ClusterState.load(1,\n        (Map) loadFromResource(\"testWithCollectionMoveVsAddSuggestions.json\"),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"),\n        CLUSTER_STATE\n    );\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      if (suggestionInfo._get(\"operation/command/add-replica\", null) != null) {\n        numAdds++;\n        assertEquals(1.0d, suggestionInfo._get(\"violation/violation/delta\", null));\n        assertEquals(\"/c/articles_coll/shards\", suggestionInfo._get(\"operation/path\", null));\n        addNodes.add((String) suggestionInfo._get(\"operation/command/add-replica/node\", null));\n      } else if (suggestionInfo._get(\"operation/command/move-replica\", null) != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", suggestionInfo._get(\"operation/path\", null));\n        targetNodes.add((String) suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n        movedReplicas.add((String) suggestionInfo._get(\"operation/command/move-replica/replica\", null));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","bugFix":["f5a27e78e3d29dee02bab19ded25336471e96882"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","sourceNew":"  public void testWithCollectionMoveVsAddSuggestions() throws IOException {\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveVsAddSuggestions.json\"),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      if (suggestionInfo._get(\"operation/command/add-replica\", null) != null) {\n        numAdds++;\n        assertEquals(1.0d, suggestionInfo._get(\"violation/violation/delta\", null));\n        assertEquals(\"/c/articles_coll/shards\", suggestionInfo._get(\"operation/path\", null));\n        addNodes.add((String) suggestionInfo._get(\"operation/command/add-replica/node\", null));\n      } else if (suggestionInfo._get(\"operation/command/move-replica\", null) != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", suggestionInfo._get(\"operation/path\", null));\n        targetNodes.add((String) suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n        movedReplicas.add((String) suggestionInfo._get(\"operation/command/move-replica/replica\", null));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","sourceOld":"  public void testWithCollectionMoveVsAddSuggestions() throws IOException {\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveVsAddSuggestions.json\"),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      if (suggestionInfo._get(\"operation/command/add-replica\", null) != null) {\n        numAdds++;\n        assertEquals(1.0d, suggestionInfo._get(\"violation/violation/delta\", null));\n        assertEquals(\"/c/articles_coll/shards\", suggestionInfo._get(\"operation/path\", null));\n        addNodes.add((String) suggestionInfo._get(\"operation/command/add-replica/node\", null));\n      } else if (suggestionInfo._get(\"operation/command/move-replica\", null) != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", suggestionInfo._get(\"operation/path\", null));\n        targetNodes.add((String) suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n        movedReplicas.add((String) suggestionInfo._get(\"operation/command/move-replica/replica\", null));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","sourceNew":"  public void testWithCollectionMoveVsAddSuggestions() throws IOException {\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveVsAddSuggestions.json\"),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, Replica>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      if (suggestionInfo._get(\"operation/command/add-replica\", null) != null) {\n        numAdds++;\n        assertEquals(1.0d, suggestionInfo._get(\"violation/violation/delta\", null));\n        assertEquals(\"/c/articles_coll/shards\", suggestionInfo._get(\"operation/path\", null));\n        addNodes.add((String) suggestionInfo._get(\"operation/command/add-replica/node\", null));\n      } else if (suggestionInfo._get(\"operation/command/move-replica\", null) != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", suggestionInfo._get(\"operation/path\", null));\n        targetNodes.add((String) suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n        movedReplicas.add((String) suggestionInfo._get(\"operation/command/move-replica/replica\", null));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","sourceOld":"  public void testWithCollectionMoveVsAddSuggestions() throws IOException {\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveVsAddSuggestions.json\"),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      if (suggestionInfo._get(\"operation/command/add-replica\", null) != null) {\n        numAdds++;\n        assertEquals(1.0d, suggestionInfo._get(\"violation/violation/delta\", null));\n        assertEquals(\"/c/articles_coll/shards\", suggestionInfo._get(\"operation/path\", null));\n        addNodes.add((String) suggestionInfo._get(\"operation/command/add-replica/node\", null));\n      } else if (suggestionInfo._get(\"operation/command/move-replica\", null) != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", suggestionInfo._get(\"operation/path\", null));\n        targetNodes.add((String) suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n        movedReplicas.add((String) suggestionInfo._get(\"operation/command/move-replica/replica\", null));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testWithCollectionMoveVsAddSuggestions().mjava","sourceNew":null,"sourceOld":"  public void testWithCollectionMoveVsAddSuggestions() throws IOException {\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1,\n        (Map) loadFromResource(\"testWithCollectionMoveVsAddSuggestions.json\"),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Pair<String, Replica>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = solrClientNodeStateProvider.getNodeValues(\"node1\", ImmutableSet.of(\"cores\", \"withCollection\"));\n    assertNotNull(m.get(\"withCollection\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores'}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig(policies),\n        new DelegatingCloudManager(null) {\n          @Override\n          public ClusterStateProvider getClusterStateProvider() {\n            return clusterStateProvider;\n          }\n\n          @Override\n          public NodeStateProvider getNodeStateProvider() {\n            return solrClientNodeStateProvider;\n          }\n        });\n    assertNotNull(l);\n    assertEquals(3, l.size());\n\n    // collect the set of nodes to which replicas are being added\n    Set<String> nodes = new HashSet<>(2);\n\n    int numMoves = 0, numAdds = 0;\n    Set<String> addNodes = new HashSet<>();\n    Set<String> targetNodes = new HashSet<>();\n    Set<String> movedReplicas = new HashSet<>();\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      if (suggestionInfo._get(\"operation/command/add-replica\", null) != null) {\n        numAdds++;\n        assertEquals(1.0d, suggestionInfo._get(\"violation/violation/delta\", null));\n        assertEquals(\"/c/articles_coll/shards\", suggestionInfo._get(\"operation/path\", null));\n        addNodes.add((String) suggestionInfo._get(\"operation/command/add-replica/node\", null));\n      } else if (suggestionInfo._get(\"operation/command/move-replica\", null) != null) {\n        numMoves++;\n        assertEquals(\"/c/articles_coll\", suggestionInfo._get(\"operation/path\", null));\n        targetNodes.add((String) suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n        movedReplicas.add((String) suggestionInfo._get(\"operation/command/move-replica/replica\", null));\n      } else {\n        fail(\"Unexpected operation type suggested for suggestion: \" + suggestionInfo);\n      }\n    }\n\n    assertEquals(2, targetNodes.size());\n    assertEquals(1, addNodes.size());\n    assertEquals(2, movedReplicas.size());\n    Set<String> allTargetNodes = new HashSet<>(targetNodes);\n    allTargetNodes.addAll(addNodes);\n    assertEquals(3, allTargetNodes.size());\n    assertTrue(allTargetNodes.contains(\"node3\"));\n    assertTrue(allTargetNodes.contains(\"node4\"));\n    assertTrue(allTargetNodes.contains(\"node5\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["f5a27e78e3d29dee02bab19ded25336471e96882"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6428b274f6593f368c4f838379620e7f5d196d65":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["27639bb5e041490ce599065875dd2f6d8beef62a"],"f5a27e78e3d29dee02bab19ded25336471e96882":["6428b274f6593f368c4f838379620e7f5d196d65"],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9ba1b632c041956c93c41aa1143d16a567014891"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"6428b274f6593f368c4f838379620e7f5d196d65":["f5a27e78e3d29dee02bab19ded25336471e96882"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["6428b274f6593f368c4f838379620e7f5d196d65"],"f5a27e78e3d29dee02bab19ded25336471e96882":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"27639bb5e041490ce599065875dd2f6d8beef62a":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}