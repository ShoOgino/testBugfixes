{"path":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getScorer(ShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getScorer(ShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getScorer(LatLonShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","sourceNew":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(ShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost, ScoreMode scoreMode) throws IOException {\n      values.intersect(visitor);\n      if (disjointVisitor != null) {\n        values.intersect(disjointVisitor);\n      }\n      DocIdSetIterator iterator;\n      if (query.queryRelation == ShapeField.QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == ShapeField.QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","sourceOld":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(LatLonShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost, ScoreMode scoreMode) throws IOException {\n      values.intersect(visitor);\n      if (disjointVisitor != null) {\n        values.intersect(disjointVisitor);\n      }\n      DocIdSetIterator iterator;\n      if (query.queryRelation == QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637ced5887480f9803707c2fc68df68ce0c0bf13","date":1568120036,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getScorer(ShapeQuery,Weight,FixedBitSet,FixedBitSet,float,ScoreMode).mjava","sourceNew":null,"sourceOld":"    /** returns a Scorer for all other (non INTERSECT) queries */\n    protected Scorer getScorer(ShapeQuery query, Weight weight,\n                               FixedBitSet intersect, FixedBitSet disjoint, final float boost, ScoreMode scoreMode) throws IOException {\n      values.intersect(visitor);\n      if (disjointVisitor != null) {\n        values.intersect(disjointVisitor);\n      }\n      DocIdSetIterator iterator;\n      if (query.queryRelation == ShapeField.QueryRelation.DISJOINT) {\n        disjoint.andNot(intersect);\n        iterator = new BitSetIterator(disjoint, cost());\n      } else if (query.queryRelation == ShapeField.QueryRelation.WITHIN) {\n        intersect.andNot(disjoint);\n        iterator = new BitSetIterator(intersect, cost());\n      } else {\n        iterator = new BitSetIterator(intersect, cost());\n      }\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"637ced5887480f9803707c2fc68df68ce0c0bf13":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["637ced5887480f9803707c2fc68df68ce0c0bf13"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["637ced5887480f9803707c2fc68df68ce0c0bf13"],"637ced5887480f9803707c2fc68df68ce0c0bf13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}