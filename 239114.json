{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","sourceNew":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    docWriter.pauseAllThreads();\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n\n        assert !hasExternalSegments();\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"rollbackInternal\");\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          docWriter.resumeAllThreads();\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","sourceOld":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    docWriter.pauseAllThreads();\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n\n        assert !hasExternalSegments();\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"rollbackInternal\");\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          docWriter.resumeAllThreads();\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","sourceNew":null,"sourceOld":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    docWriter.pauseAllThreads();\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n\n        assert !hasExternalSegments();\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"rollbackInternal\");\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          docWriter.resumeAllThreads();\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}