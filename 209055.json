{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/LatLonBounds#addLongitudeBound(double).mjava","commits":[{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/LatLonBounds#addLongitudeBound(double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Bounds#addLongitudeBound(double).mjava","sourceNew":"  /** Update longitude bound.\n   *@param longitude is the new longitude value.\n   */\n  protected void addLongitudeBound(double longitude) {\n    // If this point is within the current bounds, we're done; otherwise\n    // expand one side or the other.\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = longitude;\n      rightLongitude = longitude;\n    } else {\n      // Compute whether we're to the right of the left value.  But the left value may be greater than\n      // the right value.\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      // We have a range to look at that's going in the right way.\n      // Now, do the same trick with the computed longitude.\n      if (longitude < currentLeftLongitude)\n        longitude += 2.0 * Math.PI;\n\n      if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n        // Outside of current bounds.  Consider carefully how we'll expand.\n        double leftExtensionAmt;\n        double rightExtensionAmt;\n        if (longitude < currentLeftLongitude) {\n          leftExtensionAmt = currentLeftLongitude - longitude;\n        } else {\n          leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n        }\n        if (longitude > currentRightLongitude) {\n          rightExtensionAmt = longitude - currentRightLongitude;\n        } else {\n          rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n        }\n        if (leftExtensionAmt < rightExtensionAmt) {\n          currentLeftLongitude = leftLongitude - leftExtensionAmt;\n          while (currentLeftLongitude <= -Math.PI) {\n            currentLeftLongitude += 2.0 * Math.PI;\n          }\n          leftLongitude = currentLeftLongitude;\n        } else {\n          currentRightLongitude = rightLongitude + rightExtensionAmt;\n          while (currentRightLongitude > Math.PI) {\n            currentRightLongitude -= 2.0 * Math.PI;\n          }\n          rightLongitude = currentRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","sourceOld":"  /** Update longitude bound.\n   *@param longitude is the new longitude value.\n   */\n  protected void addLongitudeBound(double longitude) {\n    // If this point is within the current bounds, we're done; otherwise\n    // expand one side or the other.\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = longitude;\n      rightLongitude = longitude;\n    } else {\n      // Compute whether we're to the right of the left value.  But the left value may be greater than\n      // the right value.\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      // We have a range to look at that's going in the right way.\n      // Now, do the same trick with the computed longitude.\n      if (longitude < currentLeftLongitude)\n        longitude += 2.0 * Math.PI;\n\n      if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n        // Outside of current bounds.  Consider carefully how we'll expand.\n        double leftExtensionAmt;\n        double rightExtensionAmt;\n        if (longitude < currentLeftLongitude) {\n          leftExtensionAmt = currentLeftLongitude - longitude;\n        } else {\n          leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n        }\n        if (longitude > currentRightLongitude) {\n          rightExtensionAmt = longitude - currentRightLongitude;\n        } else {\n          rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n        }\n        if (leftExtensionAmt < rightExtensionAmt) {\n          currentLeftLongitude = leftLongitude - leftExtensionAmt;\n          while (currentLeftLongitude <= -Math.PI) {\n            currentLeftLongitude += 2.0 * Math.PI;\n          }\n          leftLongitude = currentLeftLongitude;\n        } else {\n          currentRightLongitude = rightLongitude + rightExtensionAmt;\n          while (currentRightLongitude > Math.PI) {\n            currentRightLongitude -= 2.0 * Math.PI;\n          }\n          rightLongitude = currentRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/LatLonBounds#addLongitudeBound(double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/LatLonBounds#addLongitudeBound(double).mjava","sourceNew":"  /** Update longitude bound.\n   *@param longitude is the new longitude value.\n   */\n  protected void addLongitudeBound(double longitude) {\n    // If this point is within the current bounds, we're done; otherwise\n    // expand one side or the other.\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = longitude;\n      rightLongitude = longitude;\n    } else {\n      // Compute whether we're to the right of the left value.  But the left value may be greater than\n      // the right value.\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      // We have a range to look at that's going in the right way.\n      // Now, do the same trick with the computed longitude.\n      if (longitude < currentLeftLongitude)\n        longitude += 2.0 * Math.PI;\n\n      if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n        // Outside of current bounds.  Consider carefully how we'll expand.\n        double leftExtensionAmt;\n        double rightExtensionAmt;\n        if (longitude < currentLeftLongitude) {\n          leftExtensionAmt = currentLeftLongitude - longitude;\n        } else {\n          leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n        }\n        if (longitude > currentRightLongitude) {\n          rightExtensionAmt = longitude - currentRightLongitude;\n        } else {\n          rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n        }\n        if (leftExtensionAmt < rightExtensionAmt) {\n          currentLeftLongitude = leftLongitude - leftExtensionAmt;\n          while (currentLeftLongitude <= -Math.PI) {\n            currentLeftLongitude += 2.0 * Math.PI;\n          }\n          leftLongitude = currentLeftLongitude;\n        } else {\n          currentRightLongitude = rightLongitude + rightExtensionAmt;\n          while (currentRightLongitude > Math.PI) {\n            currentRightLongitude -= 2.0 * Math.PI;\n          }\n          rightLongitude = currentRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","sourceOld":"  /** Update longitude bound.\n   *@param longitude is the new longitude value.\n   */\n  protected void addLongitudeBound(double longitude) {\n    // If this point is within the current bounds, we're done; otherwise\n    // expand one side or the other.\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = longitude;\n      rightLongitude = longitude;\n    } else {\n      // Compute whether we're to the right of the left value.  But the left value may be greater than\n      // the right value.\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      // We have a range to look at that's going in the right way.\n      // Now, do the same trick with the computed longitude.\n      if (longitude < currentLeftLongitude)\n        longitude += 2.0 * Math.PI;\n\n      if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {\n        // Outside of current bounds.  Consider carefully how we'll expand.\n        double leftExtensionAmt;\n        double rightExtensionAmt;\n        if (longitude < currentLeftLongitude) {\n          leftExtensionAmt = currentLeftLongitude - longitude;\n        } else {\n          leftExtensionAmt = currentLeftLongitude + 2.0 * Math.PI - longitude;\n        }\n        if (longitude > currentRightLongitude) {\n          rightExtensionAmt = longitude - currentRightLongitude;\n        } else {\n          rightExtensionAmt = longitude + 2.0 * Math.PI - currentRightLongitude;\n        }\n        if (leftExtensionAmt < rightExtensionAmt) {\n          currentLeftLongitude = leftLongitude - leftExtensionAmt;\n          while (currentLeftLongitude <= -Math.PI) {\n            currentLeftLongitude += 2.0 * Math.PI;\n          }\n          leftLongitude = currentLeftLongitude;\n        } else {\n          currentRightLongitude = rightLongitude + rightExtensionAmt;\n          while (currentRightLongitude > Math.PI) {\n            currentRightLongitude -= 2.0 * Math.PI;\n          }\n          rightLongitude = currentRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f64b7098768253180859cd8faeae6b1a185b06ed"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}