{"path":"src/java/org/apache/lucene/analysis/de/GermanStemmer#isStemmable(String).mjava","commits":[{"id":"3ee067e27d1cce6d2d5d64280007410c2e1a38d8","date":1001438945,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#isStemmable(String).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Checks a term if it can be processed correctly.\n\t *\n\t * @return  true if, and only if, the given term consists in letters.\n\t */\n\tprivate boolean isStemmable( String term ) {\n\t\tboolean upper = false;\n\t\tint first = -1;\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter( term.charAt( c ) ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Discard terms that contain multiple uppercase letters.\n\t\t\tif ( Character.isUpperCase( term.charAt( c ) ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// First encountered uppercase letter, set flag and save\n\t\t\t\t// position.\n\t\t\t\telse {\n\t\t\t\t\tfirst = c;\n\t\t\t\t\tupper = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Discard the term if it contains a single uppercase letter that\n\t\t// is not starting the term.\n\t\tif ( first > 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc6774a9d78ca86ed9a37e4192c8b43410eb38a3","date":1013649547,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#isStemmable(String).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#isStemmable(String).mjava","sourceNew":"    /**\n     * Checks a term if it can be processed correctly.\n     *\n     * @return  true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term ) {\n\tboolean upper = false;\n\tint first = -1;\n\tfor ( int c = 0; c < term.length(); c++ ) {\n\t    // Discard terms that contain non-letter characters.\n\t    if ( !Character.isLetter( term.charAt( c ) ) ) {\n\t\treturn false;\n\t    }\n\t    // Discard terms that contain multiple uppercase letters.\n\t    if ( Character.isUpperCase( term.charAt( c ) ) ) {\n\t\tif ( upper ) {\n\t\t    return false;\n\t\t}\n\t\t// First encountered uppercase letter, set flag and save\n\t\t// position.\n\t\telse {\n\t\t    first = c;\n\t\t    upper = true;\n\t\t}\n\t    }\n\t}\n\t// Discard the term if it contains a single uppercase letter that\n\t// is not starting the term.\n\tif ( first > 0 ) {\n\t    return false;\n\t}\n\treturn true;\n    }\n\n","sourceOld":"\t/**\n\t * Checks a term if it can be processed correctly.\n\t *\n\t * @return  true if, and only if, the given term consists in letters.\n\t */\n\tprivate boolean isStemmable( String term ) {\n\t\tboolean upper = false;\n\t\tint first = -1;\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter( term.charAt( c ) ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Discard terms that contain multiple uppercase letters.\n\t\t\tif ( Character.isUpperCase( term.charAt( c ) ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// First encountered uppercase letter, set flag and save\n\t\t\t\t// position.\n\t\t\t\telse {\n\t\t\t\t\tfirst = c;\n\t\t\t\t\tupper = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Discard the term if it contains a single uppercase letter that\n\t\t// is not starting the term.\n\t\tif ( first > 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e","date":1027293369,"type":3,"author":"gschwarz","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#isStemmable(String).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#isStemmable(String).mjava","sourceNew":"    /**\n     * Checks if a term could be stemmed.\n     *\n     * @return  true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term ) {\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\tif ( !Character.isLetter( term.charAt( c ) ) ) return false;\n\t\t}\n\t\treturn true;\n    }\n\n","sourceOld":"    /**\n     * Checks a term if it can be processed correctly.\n     *\n     * @return  true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term ) {\n\tboolean upper = false;\n\tint first = -1;\n\tfor ( int c = 0; c < term.length(); c++ ) {\n\t    // Discard terms that contain non-letter characters.\n\t    if ( !Character.isLetter( term.charAt( c ) ) ) {\n\t\treturn false;\n\t    }\n\t    // Discard terms that contain multiple uppercase letters.\n\t    if ( Character.isUpperCase( term.charAt( c ) ) ) {\n\t\tif ( upper ) {\n\t\t    return false;\n\t\t}\n\t\t// First encountered uppercase letter, set flag and save\n\t\t// position.\n\t\telse {\n\t\t    first = c;\n\t\t    upper = true;\n\t\t}\n\t    }\n\t}\n\t// Discard the term if it contains a single uppercase letter that\n\t// is not starting the term.\n\tif ( first > 0 ) {\n\t    return false;\n\t}\n\treturn true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e","date":1029691996,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#isStemmable(String).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#isStemmable(String).mjava","sourceNew":"    /**\n     * Checks if a term could be stemmed.\n     *\n     * @return  true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term )\n    {\n\tfor ( int c = 0; c < term.length(); c++ ) {\n\t    if ( !Character.isLetter( term.charAt( c ) ) ) return false;\n\t}\n\treturn true;\n    }\n\n","sourceOld":"    /**\n     * Checks if a term could be stemmed.\n     *\n     * @return  true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term ) {\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\tif ( !Character.isLetter( term.charAt( c ) ) ) return false;\n\t\t}\n\t\treturn true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d195ac4f5f0fd16249e88707973706feb1214df0","date":1080662088,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#isStemmable(String).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#isStemmable(String).mjava","sourceNew":"    /**\n     * Checks if a term could be stemmed.\n     *\n     * @return  true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term )\n    {\n      for ( int c = 0; c < term.length(); c++ ) {\n        if ( !Character.isLetter( term.charAt( c ) ) )\n          return false;\n      }\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Checks if a term could be stemmed.\n     *\n     * @return  true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term )\n    {\n\tfor ( int c = 0; c < term.length(); c++ ) {\n\t    if ( !Character.isLetter( term.charAt( c ) ) ) return false;\n\t}\n\treturn true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2","date":1092688309,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#isStemmable(String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Checks if a term could be stemmed.\n     *\n     * @return  true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term )\n    {\n      for ( int c = 0; c < term.length(); c++ ) {\n        if ( !Character.isLetter( term.charAt( c ) ) )\n          return false;\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee067e27d1cce6d2d5d64280007410c2e1a38d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["d195ac4f5f0fd16249e88707973706feb1214df0"],"d195ac4f5f0fd16249e88707973706feb1214df0":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e"],"bc6774a9d78ca86ed9a37e4192c8b43410eb38a3":["3ee067e27d1cce6d2d5d64280007410c2e1a38d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e":["bc6774a9d78ca86ed9a37e4192c8b43410eb38a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"]},"commit2Childs":{"3ee067e27d1cce6d2d5d64280007410c2e1a38d8":["bc6774a9d78ca86ed9a37e4192c8b43410eb38a3"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ee067e27d1cce6d2d5d64280007410c2e1a38d8"],"d195ac4f5f0fd16249e88707973706feb1214df0":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["d195ac4f5f0fd16249e88707973706feb1214df0"],"bc6774a9d78ca86ed9a37e4192c8b43410eb38a3":["2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e"],"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}