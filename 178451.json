{"path":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","commits":[{"id":"8d2901bdb2faeb41d619d969ce5655adf783746d","date":1309912641,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"c26f00b574427b55127e869b935845554afde1fa":["8d2901bdb2faeb41d619d969ce5655adf783746d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d2901bdb2faeb41d619d969ce5655adf783746d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["8d2901bdb2faeb41d619d969ce5655adf783746d"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d2901bdb2faeb41d619d969ce5655adf783746d"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d2901bdb2faeb41d619d969ce5655adf783746d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d2901bdb2faeb41d619d969ce5655adf783746d","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"8d2901bdb2faeb41d619d969ce5655adf783746d":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}