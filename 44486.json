{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","commits":[{"id":"3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29","date":1332432942,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testBasic().mjava","sourceNew":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  // Tests some very basic usages...\n  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    List<Document> documents = new ArrayList<Document>();\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    documents.add(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    documents.add(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    documents.add(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n    documents.add(doc);\n    w.addDocuments(documents);\n    documents.clear();\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    doc.add(new Field(\"groupend\", \"x\", StringField.TYPE_UNSTORED));\n\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    Sort groupSort = Sort.RELEVANCE;\n    GroupingSearch groupingSearch = createRandomGroupingSearch(groupField, groupSort, 5, canUseIDV);\n\n    TopGroups<?> groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    Filter lastDocInBlock = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"groupend\", \"x\"))));\n    groupingSearch = new GroupingSearch(lastDocInBlock);\n    groups = groupingSearch.search(indexSearcher, null, new TermQuery(new Term(\"content\", \"random\")), 0, 10);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.totalGroupCount.longValue());\n    assertEquals(4, groups.groups.length);\n    \n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}