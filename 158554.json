{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","sourceNew":"  public static CloudState buildCloudState(SolrZkClient zkClient, CloudState oldCloudState, boolean onlyLiveNodes) throws KeeperException, InterruptedException, IOException {\n    Map<String,Map<String,Slice>> collectionStates;\n    if (!onlyLiveNodes) {\n      List<String> collections = zkClient.getChildren(\n          ZkStateReader.COLLECTIONS_ZKNODE, null);\n\n      collectionStates = new HashMap<String,Map<String,Slice>>();\n      for (String collection : collections) {\n        String shardIdPaths = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n            + collection + ZkStateReader.SHARDS_ZKNODE;\n        List<String> shardIdNames;\n        try {\n          shardIdNames = zkClient.getChildren(shardIdPaths, null);\n        } catch (KeeperException.NoNodeException e) {\n          // node is not valid currently\n          continue;\n        }\n        Map<String,Slice> slices = new HashMap<String,Slice>();\n        for (String shardIdZkPath : shardIdNames) {\n          Map<String,ZkNodeProps> shardsMap = readShards(zkClient, shardIdPaths\n              + \"/\" + shardIdZkPath);\n          Slice slice = new Slice(shardIdZkPath, shardsMap);\n          slices.put(shardIdZkPath, slice);\n        }\n        collectionStates.put(collection, slices);\n      }\n    } else {\n      collectionStates = oldCloudState.getCollectionStates();\n    }\n    \n    CloudState cloudInfo = new CloudState(getLiveNodes(zkClient), collectionStates);\n    \n    return cloudInfo;\n  }\n\n","sourceOld":"  public static CloudState buildCloudState(SolrZkClient zkClient, CloudState oldCloudState, boolean onlyLiveNodes) throws KeeperException, InterruptedException, IOException {\n    Map<String,Map<String,Slice>> collectionStates;\n    if (!onlyLiveNodes) {\n      List<String> collections = zkClient.getChildren(\n          ZkStateReader.COLLECTIONS_ZKNODE, null);\n\n      collectionStates = new HashMap<String,Map<String,Slice>>();\n      for (String collection : collections) {\n        String shardIdPaths = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n            + collection + ZkStateReader.SHARDS_ZKNODE;\n        List<String> shardIdNames;\n        try {\n          shardIdNames = zkClient.getChildren(shardIdPaths, null);\n        } catch (KeeperException.NoNodeException e) {\n          // node is not valid currently\n          continue;\n        }\n        Map<String,Slice> slices = new HashMap<String,Slice>();\n        for (String shardIdZkPath : shardIdNames) {\n          Map<String,ZkNodeProps> shardsMap = readShards(zkClient, shardIdPaths\n              + \"/\" + shardIdZkPath);\n          Slice slice = new Slice(shardIdZkPath, shardsMap);\n          slices.put(shardIdZkPath, slice);\n        }\n        collectionStates.put(collection, slices);\n      }\n    } else {\n      collectionStates = oldCloudState.getCollectionStates();\n    }\n    \n    CloudState cloudInfo = new CloudState(getLiveNodes(zkClient), collectionStates);\n    \n    return cloudInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","sourceNew":"  public static CloudState buildCloudState(SolrZkClient zkClient, CloudState oldCloudState, boolean onlyLiveNodes) throws KeeperException, InterruptedException, IOException {\n    Map<String,Map<String,Slice>> collectionStates;\n    if (!onlyLiveNodes) {\n      List<String> collections = zkClient.getChildren(\n          ZkStateReader.COLLECTIONS_ZKNODE, null);\n\n      collectionStates = new HashMap<String,Map<String,Slice>>();\n      for (String collection : collections) {\n        String shardIdPaths = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n            + collection + ZkStateReader.SHARDS_ZKNODE;\n        List<String> shardIdNames;\n        try {\n          shardIdNames = zkClient.getChildren(shardIdPaths, null);\n        } catch (KeeperException.NoNodeException e) {\n          // node is not valid currently\n          continue;\n        }\n        Map<String,Slice> slices = new HashMap<String,Slice>();\n        for (String shardIdZkPath : shardIdNames) {\n          Map<String,ZkNodeProps> shardsMap = readShards(zkClient, shardIdPaths\n              + \"/\" + shardIdZkPath);\n          Slice slice = new Slice(shardIdZkPath, shardsMap);\n          slices.put(shardIdZkPath, slice);\n        }\n        collectionStates.put(collection, slices);\n      }\n    } else {\n      collectionStates = oldCloudState.getCollectionStates();\n    }\n    \n    CloudState cloudInfo = new CloudState(getLiveNodes(zkClient), collectionStates);\n    \n    return cloudInfo;\n  }\n\n","sourceOld":"  public static CloudState buildCloudState(SolrZkClient zkClient, CloudState oldCloudState, boolean onlyLiveNodes) throws KeeperException, InterruptedException, IOException {\n    Map<String,Map<String,Slice>> collectionStates;\n    if (!onlyLiveNodes) {\n      List<String> collections = zkClient.getChildren(\n          ZkStateReader.COLLECTIONS_ZKNODE, null);\n\n      collectionStates = new HashMap<String,Map<String,Slice>>();\n      for (String collection : collections) {\n        String shardIdPaths = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n            + collection + ZkStateReader.SHARDS_ZKNODE;\n        List<String> shardIdNames;\n        try {\n          shardIdNames = zkClient.getChildren(shardIdPaths, null);\n        } catch (KeeperException.NoNodeException e) {\n          // node is not valid currently\n          continue;\n        }\n        Map<String,Slice> slices = new HashMap<String,Slice>();\n        for (String shardIdZkPath : shardIdNames) {\n          Map<String,ZkNodeProps> shardsMap = readShards(zkClient, shardIdPaths\n              + \"/\" + shardIdZkPath);\n          Slice slice = new Slice(shardIdZkPath, shardsMap);\n          slices.put(shardIdZkPath, slice);\n        }\n        collectionStates.put(collection, slices);\n      }\n    } else {\n      collectionStates = oldCloudState.getCollectionStates();\n    }\n    \n    CloudState cloudInfo = new CloudState(getLiveNodes(zkClient), collectionStates);\n    \n    return cloudInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","sourceNew":"  public static CloudState buildCloudState(SolrZkClient zkClient, CloudState oldCloudState, boolean onlyLiveNodes) throws KeeperException, InterruptedException, IOException {\n    Map<String,Map<String,Slice>> collectionStates;\n    if (!onlyLiveNodes) {\n      List<String> collections = zkClient.getChildren(\n          ZkStateReader.COLLECTIONS_ZKNODE, null);\n\n      collectionStates = new HashMap<String,Map<String,Slice>>();\n      for (String collection : collections) {\n        String shardIdPaths = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n            + collection + ZkStateReader.SHARDS_ZKNODE;\n        List<String> shardIdNames;\n        try {\n          shardIdNames = zkClient.getChildren(shardIdPaths, null);\n        } catch (KeeperException.NoNodeException e) {\n          // node is not valid currently\n          continue;\n        }\n        Map<String,Slice> slices = new HashMap<String,Slice>();\n        for (String shardIdZkPath : shardIdNames) {\n          Map<String,ZkNodeProps> shardsMap = readShards(zkClient, shardIdPaths\n              + \"/\" + shardIdZkPath);\n          Slice slice = new Slice(shardIdZkPath, shardsMap);\n          slices.put(shardIdZkPath, slice);\n        }\n        collectionStates.put(collection, slices);\n      }\n    } else {\n      collectionStates = oldCloudState.getCollectionStates();\n    }\n    \n    CloudState cloudInfo = new CloudState(getLiveNodes(zkClient), collectionStates);\n    \n    return cloudInfo;\n  }\n\n","sourceOld":"  public static CloudState buildCloudState(SolrZkClient zkClient, CloudState oldCloudState, boolean onlyLiveNodes) throws KeeperException, InterruptedException, IOException {\n    Map<String,Map<String,Slice>> collectionStates;\n    if (!onlyLiveNodes) {\n      List<String> collections = zkClient.getChildren(\n          ZkStateReader.COLLECTIONS_ZKNODE, null);\n\n      collectionStates = new HashMap<String,Map<String,Slice>>();\n      for (String collection : collections) {\n        String shardIdPaths = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n            + collection + ZkStateReader.SHARDS_ZKNODE;\n        List<String> shardIdNames;\n        try {\n          shardIdNames = zkClient.getChildren(shardIdPaths, null);\n        } catch (KeeperException.NoNodeException e) {\n          // node is not valid currently\n          continue;\n        }\n        Map<String,Slice> slices = new HashMap<String,Slice>();\n        for (String shardIdZkPath : shardIdNames) {\n          Map<String,ZkNodeProps> shardsMap = readShards(zkClient, shardIdPaths\n              + \"/\" + shardIdZkPath);\n          Slice slice = new Slice(shardIdZkPath, shardsMap);\n          slices.put(shardIdZkPath, slice);\n        }\n        collectionStates.put(collection, slices);\n      }\n    } else {\n      collectionStates = oldCloudState.getCollectionStates();\n    }\n    \n    CloudState cloudInfo = new CloudState(getLiveNodes(zkClient), collectionStates);\n    \n    return cloudInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c12159f094951abca20de13adfd11224da456e1","date":1317314664,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","sourceNew":"  public static CloudState buildCloudState(SolrZkClient zkClient, CloudState oldCloudState, boolean onlyLiveNodes) throws KeeperException, InterruptedException, IOException {\n    Map<String,Map<String,Slice>> collectionStates;\n    if (!onlyLiveNodes) {\n      List<String> collections = zkClient.getChildren(\n          ZkStateReader.COLLECTIONS_ZKNODE, null);\n\n      collectionStates = new HashMap<String,Map<String,Slice>>();\n      for (String collection : collections) {\n        String shardIdPaths = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n            + collection + ZkStateReader.SHARDS_ZKNODE;\n        List<String> shardIdNames;\n        try {\n          shardIdNames = zkClient.getChildren(shardIdPaths, null);\n        } catch (KeeperException.NoNodeException e) {\n          // node is not valid currently\n          continue;\n        }\n        Map<String,Slice> slices = new HashMap<String,Slice>();\n        for (String shardIdZkPath : shardIdNames) {\n          Slice oldSlice = null;\n          if (oldCloudState.getCollectionStates().containsKey(collection)\n              && oldCloudState.getCollectionStates().get(collection)\n                  .containsKey(shardIdZkPath)) {\n            oldSlice = oldCloudState.getCollectionStates().get(collection)\n                .get(shardIdZkPath);\n          }\n          \n          Map<String,ZkNodeProps> shardsMap = readShards(zkClient, shardIdPaths\n              + \"/\" + shardIdZkPath, oldSlice);\n          Slice slice = new Slice(shardIdZkPath, shardsMap);\n          slices.put(shardIdZkPath, slice);\n        }\n        collectionStates.put(collection, slices);\n      }\n    } else {\n      collectionStates = oldCloudState.getCollectionStates();\n    }\n    \n    CloudState cloudInfo = new CloudState(getLiveNodes(zkClient), collectionStates);\n    \n    return cloudInfo;\n  }\n\n","sourceOld":"  public static CloudState buildCloudState(SolrZkClient zkClient, CloudState oldCloudState, boolean onlyLiveNodes) throws KeeperException, InterruptedException, IOException {\n    Map<String,Map<String,Slice>> collectionStates;\n    if (!onlyLiveNodes) {\n      List<String> collections = zkClient.getChildren(\n          ZkStateReader.COLLECTIONS_ZKNODE, null);\n\n      collectionStates = new HashMap<String,Map<String,Slice>>();\n      for (String collection : collections) {\n        String shardIdPaths = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n            + collection + ZkStateReader.SHARDS_ZKNODE;\n        List<String> shardIdNames;\n        try {\n          shardIdNames = zkClient.getChildren(shardIdPaths, null);\n        } catch (KeeperException.NoNodeException e) {\n          // node is not valid currently\n          continue;\n        }\n        Map<String,Slice> slices = new HashMap<String,Slice>();\n        for (String shardIdZkPath : shardIdNames) {\n          Map<String,ZkNodeProps> shardsMap = readShards(zkClient, shardIdPaths\n              + \"/\" + shardIdZkPath);\n          Slice slice = new Slice(shardIdZkPath, shardsMap);\n          slices.put(shardIdZkPath, slice);\n        }\n        collectionStates.put(collection, slices);\n      }\n    } else {\n      collectionStates = oldCloudState.getCollectionStates();\n    }\n    \n    CloudState cloudInfo = new CloudState(getLiveNodes(zkClient), collectionStates);\n    \n    return cloudInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","sourceNew":null,"sourceOld":"  public static CloudState buildCloudState(SolrZkClient zkClient, CloudState oldCloudState, boolean onlyLiveNodes) throws KeeperException, InterruptedException, IOException {\n    Map<String,Map<String,Slice>> collectionStates;\n    if (!onlyLiveNodes) {\n      List<String> collections = zkClient.getChildren(\n          ZkStateReader.COLLECTIONS_ZKNODE, null);\n\n      collectionStates = new HashMap<String,Map<String,Slice>>();\n      for (String collection : collections) {\n        String shardIdPaths = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n            + collection + ZkStateReader.SHARDS_ZKNODE;\n        List<String> shardIdNames;\n        try {\n          shardIdNames = zkClient.getChildren(shardIdPaths, null);\n        } catch (KeeperException.NoNodeException e) {\n          // node is not valid currently\n          continue;\n        }\n        Map<String,Slice> slices = new HashMap<String,Slice>();\n        for (String shardIdZkPath : shardIdNames) {\n          Slice oldSlice = null;\n          if (oldCloudState.getCollectionStates().containsKey(collection)\n              && oldCloudState.getCollectionStates().get(collection)\n                  .containsKey(shardIdZkPath)) {\n            oldSlice = oldCloudState.getCollectionStates().get(collection)\n                .get(shardIdZkPath);\n          }\n          \n          Map<String,ZkNodeProps> shardsMap = readShards(zkClient, shardIdPaths\n              + \"/\" + shardIdZkPath, oldSlice);\n          Slice slice = new Slice(shardIdZkPath, shardsMap);\n          slices.put(shardIdZkPath, slice);\n        }\n        collectionStates.put(collection, slices);\n      }\n    } else {\n      collectionStates = oldCloudState.getCollectionStates();\n    }\n    \n    CloudState cloudInfo = new CloudState(getLiveNodes(zkClient), collectionStates);\n    \n    return cloudInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","sourceNew":null,"sourceOld":"  public static CloudState buildCloudState(SolrZkClient zkClient, CloudState oldCloudState, boolean onlyLiveNodes) throws KeeperException, InterruptedException, IOException {\n    Map<String,Map<String,Slice>> collectionStates;\n    if (!onlyLiveNodes) {\n      List<String> collections = zkClient.getChildren(\n          ZkStateReader.COLLECTIONS_ZKNODE, null);\n\n      collectionStates = new HashMap<String,Map<String,Slice>>();\n      for (String collection : collections) {\n        String shardIdPaths = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n            + collection + ZkStateReader.SHARDS_ZKNODE;\n        List<String> shardIdNames;\n        try {\n          shardIdNames = zkClient.getChildren(shardIdPaths, null);\n        } catch (KeeperException.NoNodeException e) {\n          // node is not valid currently\n          continue;\n        }\n        Map<String,Slice> slices = new HashMap<String,Slice>();\n        for (String shardIdZkPath : shardIdNames) {\n          Slice oldSlice = null;\n          if (oldCloudState.getCollectionStates().containsKey(collection)\n              && oldCloudState.getCollectionStates().get(collection)\n                  .containsKey(shardIdZkPath)) {\n            oldSlice = oldCloudState.getCollectionStates().get(collection)\n                .get(shardIdZkPath);\n          }\n          \n          Map<String,ZkNodeProps> shardsMap = readShards(zkClient, shardIdPaths\n              + \"/\" + shardIdZkPath, oldSlice);\n          Slice slice = new Slice(shardIdZkPath, shardsMap);\n          slices.put(shardIdZkPath, slice);\n        }\n        collectionStates.put(collection, slices);\n      }\n    } else {\n      collectionStates = oldCloudState.getCollectionStates();\n    }\n    \n    CloudState cloudInfo = new CloudState(getLiveNodes(zkClient), collectionStates);\n    \n    return cloudInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#buildCloudState(SolrZkClient,CloudState,boolean).mjava","sourceNew":null,"sourceOld":"  public static CloudState buildCloudState(SolrZkClient zkClient, CloudState oldCloudState, boolean onlyLiveNodes) throws KeeperException, InterruptedException, IOException {\n    Map<String,Map<String,Slice>> collectionStates;\n    if (!onlyLiveNodes) {\n      List<String> collections = zkClient.getChildren(\n          ZkStateReader.COLLECTIONS_ZKNODE, null);\n\n      collectionStates = new HashMap<String,Map<String,Slice>>();\n      for (String collection : collections) {\n        String shardIdPaths = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n            + collection + ZkStateReader.SHARDS_ZKNODE;\n        List<String> shardIdNames;\n        try {\n          shardIdNames = zkClient.getChildren(shardIdPaths, null);\n        } catch (KeeperException.NoNodeException e) {\n          // node is not valid currently\n          continue;\n        }\n        Map<String,Slice> slices = new HashMap<String,Slice>();\n        for (String shardIdZkPath : shardIdNames) {\n          Slice oldSlice = null;\n          if (oldCloudState.getCollectionStates().containsKey(collection)\n              && oldCloudState.getCollectionStates().get(collection)\n                  .containsKey(shardIdZkPath)) {\n            oldSlice = oldCloudState.getCollectionStates().get(collection)\n                .get(shardIdZkPath);\n          }\n          \n          Map<String,ZkNodeProps> shardsMap = readShards(zkClient, shardIdPaths\n              + \"/\" + shardIdZkPath, oldSlice);\n          Slice slice = new Slice(shardIdZkPath, shardsMap);\n          slices.put(shardIdZkPath, slice);\n        }\n        collectionStates.put(collection, slices);\n      }\n    } else {\n      collectionStates = oldCloudState.getCollectionStates();\n    }\n    \n    CloudState cloudInfo = new CloudState(getLiveNodes(zkClient), collectionStates);\n    \n    return cloudInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["3c12159f094951abca20de13adfd11224da456e1","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"3c12159f094951abca20de13adfd11224da456e1":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["3c12159f094951abca20de13adfd11224da456e1","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["3c12159f094951abca20de13adfd11224da456e1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"3c12159f094951abca20de13adfd11224da456e1":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3c12159f094951abca20de13adfd11224da456e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}