{"path":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,boolean,int,IndexingChain,IndexCommit).mjava","commits":[{"id":"d99092e7a9892440b9da55d5b75d3d77206ee80e","date":1224496135,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,boolean,int,IndexingChain,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,boolean,int,IndexingChain).mjava","sourceNew":"  private void init(Directory d, Analyzer a, boolean closeDir, IndexDeletionPolicy deletionPolicy, \n                    boolean autoCommit, int maxFieldLength, IndexingChain indexingChain, IndexCommit commit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (IndexReader.indexExists(d)) {\n      init(d, a, false, closeDir, deletionPolicy, autoCommit, maxFieldLength, indexingChain, commit);\n    } else {\n      init(d, a, true, closeDir, deletionPolicy, autoCommit, maxFieldLength, indexingChain, commit);\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, boolean closeDir, IndexDeletionPolicy deletionPolicy, \n      boolean autoCommit, int maxFieldLength, IndexingChain indexingChain)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (IndexReader.indexExists(d)) {\n      init(d, a, false, closeDir, deletionPolicy, autoCommit, maxFieldLength, indexingChain);\n    } else {\n      init(d, a, true, closeDir, deletionPolicy, autoCommit, maxFieldLength, indexingChain);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,boolean,int,IndexingChain,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,boolean,int,IndexingChain,IndexCommit).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create,  \n                    IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength,\n                    IndexingChain indexingChain, IndexCommit commit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (indexingChain == null)\n      indexingChain = DocumentsWriter.DefaultIndexingChain;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (autoCommit || doCommit) {\n          // Always commit if autoCommit=true, else only\n          // commit if there is no segments file in this dir\n          // already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, indexingChain);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, boolean closeDir, IndexDeletionPolicy deletionPolicy, \n                    boolean autoCommit, int maxFieldLength, IndexingChain indexingChain, IndexCommit commit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (IndexReader.indexExists(d)) {\n      init(d, a, false, closeDir, deletionPolicy, autoCommit, maxFieldLength, indexingChain, commit);\n    } else {\n      init(d, a, true, closeDir, deletionPolicy, autoCommit, maxFieldLength, indexingChain, commit);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,boolean,int,IndexingChain,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,boolean,int,IndexingChain,IndexCommit).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create,  \n                    IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength,\n                    IndexingChain indexingChain, IndexCommit commit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n\n    assert !autoCommit;\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (indexingChain == null)\n      indexingChain = DocumentsWriter.DefaultIndexingChain;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (autoCommit || doCommit) {\n          // Always commit if autoCommit=true, else only\n          // commit if there is no segments file in this dir\n          // already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, indexingChain);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create,  \n                    IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength,\n                    IndexingChain indexingChain, IndexCommit commit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (indexingChain == null)\n      indexingChain = DocumentsWriter.DefaultIndexingChain;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (autoCommit || doCommit) {\n          // Always commit if autoCommit=true, else only\n          // commit if there is no segments file in this dir\n          // already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, indexingChain);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8","date":1255049357,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,int,IndexingChain,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,boolean,int,IndexingChain,IndexCommit).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create,  \n                    IndexDeletionPolicy deletionPolicy, int maxFieldLength,\n                    IndexingChain indexingChain, IndexCommit commit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (indexingChain == null)\n      indexingChain = DocumentsWriter.DefaultIndexingChain;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (doCommit) {\n          // Only commit if there is no segments file in\n          // this dir already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, indexingChain);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create,  \n                    IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength,\n                    IndexingChain indexingChain, IndexCommit commit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n\n    assert !autoCommit;\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (indexingChain == null)\n      indexingChain = DocumentsWriter.DefaultIndexingChain;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (autoCommit || doCommit) {\n          // Always commit if autoCommit=true, else only\n          // commit if there is no segments file in this dir\n          // already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, indexingChain);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["87c966e9308847938a7c905c2e46a56d8df788b8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"87c966e9308847938a7c905c2e46a56d8df788b8":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}