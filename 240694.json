{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/EarlyTerminatingSortingCollector#getLeafCollector(AtomicReaderContext).mjava","commits":[{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/EarlyTerminatingSortingCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), sort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/EarlyTerminatingSortingCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), sort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31300b5ffd92c482faabff5910228b4cdaa7dde","date":1398105394,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/EarlyTerminatingSortingCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/EarlyTerminatingSortingCollector#getLeafCollector(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), sort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), sort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/EarlyTerminatingSortingCollector#getLeafCollector(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n    if (SortingMergePolicy.isSorted(context.reader(), sort)) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n          if (++numCollected >= numDocsToCollect) {\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b31300b5ffd92c482faabff5910228b4cdaa7dde":["ae73da626f97850c922c42736f808d0378e165f0"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["b31300b5ffd92c482faabff5910228b4cdaa7dde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","b31300b5ffd92c482faabff5910228b4cdaa7dde"],"b31300b5ffd92c482faabff5910228b4cdaa7dde":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}