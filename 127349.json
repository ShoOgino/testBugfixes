{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#testWrappingWatches().mjava","commits":[{"id":"51a2db0abe886e592b27151529b09efc818dac80","date":1559220196,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#testWrappingWatches().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  // SOLR-13491\n  public void testWrappingWatches() throws Exception {\n    AtomicInteger calls = new AtomicInteger(0);\n    Watcher watcherA = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndIncrement();\n      }\n    };\n    Watcher watcherB = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndDecrement();\n      }\n    };\n    Watcher wrapped1A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrapped2A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrappedB = defaultClient.wrapWatcher(watcherB);\n    assertTrue(wrapped1A.equals(wrapped2A));\n    assertTrue(wrapped2A.equals(wrapped1A));\n    assertFalse(wrapped1A.equals(wrappedB));\n    assertEquals(wrapped1A.hashCode(), wrapped2A.hashCode());\n\n    CollectionAdminRequest.createCollection(getSaferTestName(), \"_default\", 1, 1)\n        .setMaxShardsPerNode(2)\n        .process(solrClient);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"foo\", \"bar\")\n        .process(solrClient);\n\n    //Thread.sleep(600000);\n\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped2A, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bam\")\n        .process(solrClient);\n\n    assertEquals(1, calls.get()); // same wrapped watch set twice, only invoked once\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrappedB, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bang\")\n        .process(solrClient);\n\n    assertEquals(1, calls.get()); // offsetting watches, no change\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79bec0fe1c4074ad2206f11e7d8b7ca19a579fc4","date":1559225132,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#testWrappingWatches().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#testWrappingWatches().mjava","sourceNew":"  @Test\n  // SOLR-13491\n  public void testWrappingWatches() throws Exception {\n    AtomicInteger calls = new AtomicInteger(0);\n    Watcher watcherA = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndIncrement();\n      }\n    };\n    Watcher watcherB = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndDecrement();\n      }\n    };\n    Watcher wrapped1A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrapped2A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrappedB = defaultClient.wrapWatcher(watcherB);\n    assertTrue(wrapped1A.equals(wrapped2A));\n    assertTrue(wrapped2A.equals(wrapped1A));\n    assertFalse(wrapped1A.equals(wrappedB));\n    assertEquals(wrapped1A.hashCode(), wrapped2A.hashCode());\n\n    CollectionAdminRequest.createCollection(getSaferTestName(), \"_default\", 1, 1)\n        .setMaxShardsPerNode(2)\n        .process(solrClient);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"foo\", \"bar\")\n        .process(solrClient);\n\n    //Thread.sleep(600000);\n\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped2A, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bam\")\n        .process(solrClient);\n\n    Thread.sleep(1000); // make sure zk client watch has time to be notified.\n    assertEquals(1, calls.get()); // same wrapped watch set twice, only invoked once\n\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrappedB, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bang\")\n        .process(solrClient);\n\n    Thread.sleep(1000); // make sure zk client watch has time to be notified.\n    assertEquals(1, calls.get()); // offsetting watches, no change\n  }\n\n","sourceOld":"  @Test\n  // SOLR-13491\n  public void testWrappingWatches() throws Exception {\n    AtomicInteger calls = new AtomicInteger(0);\n    Watcher watcherA = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndIncrement();\n      }\n    };\n    Watcher watcherB = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndDecrement();\n      }\n    };\n    Watcher wrapped1A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrapped2A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrappedB = defaultClient.wrapWatcher(watcherB);\n    assertTrue(wrapped1A.equals(wrapped2A));\n    assertTrue(wrapped2A.equals(wrapped1A));\n    assertFalse(wrapped1A.equals(wrappedB));\n    assertEquals(wrapped1A.hashCode(), wrapped2A.hashCode());\n\n    CollectionAdminRequest.createCollection(getSaferTestName(), \"_default\", 1, 1)\n        .setMaxShardsPerNode(2)\n        .process(solrClient);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"foo\", \"bar\")\n        .process(solrClient);\n\n    //Thread.sleep(600000);\n\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped2A, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bam\")\n        .process(solrClient);\n\n    assertEquals(1, calls.get()); // same wrapped watch set twice, only invoked once\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrappedB, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bang\")\n        .process(solrClient);\n\n    assertEquals(1, calls.get()); // offsetting watches, no change\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#testWrappingWatches().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  // SOLR-13491\n  public void testWrappingWatches() throws Exception {\n    AtomicInteger calls = new AtomicInteger(0);\n    Watcher watcherA = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndIncrement();\n      }\n    };\n    Watcher watcherB = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndDecrement();\n      }\n    };\n    Watcher wrapped1A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrapped2A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrappedB = defaultClient.wrapWatcher(watcherB);\n    assertTrue(wrapped1A.equals(wrapped2A));\n    assertTrue(wrapped2A.equals(wrapped1A));\n    assertFalse(wrapped1A.equals(wrappedB));\n    assertEquals(wrapped1A.hashCode(), wrapped2A.hashCode());\n\n    CollectionAdminRequest.createCollection(getSaferTestName(), \"_default\", 1, 1)\n        .setMaxShardsPerNode(2)\n        .process(solrClient);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"foo\", \"bar\")\n        .process(solrClient);\n\n    //Thread.sleep(600000);\n\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped2A, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bam\")\n        .process(solrClient);\n\n    Thread.sleep(1000); // make sure zk client watch has time to be notified.\n    assertEquals(1, calls.get()); // same wrapped watch set twice, only invoked once\n\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrappedB, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bang\")\n        .process(solrClient);\n\n    Thread.sleep(1000); // make sure zk client watch has time to be notified.\n    assertEquals(1, calls.get()); // offsetting watches, no change\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#testWrappingWatches().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#testWrappingWatches().mjava","sourceNew":"  @Test\n  // SOLR-13491\n  public void testWrappingWatches() throws Exception {\n    AtomicInteger calls = new AtomicInteger(0);\n    Watcher watcherA = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndIncrement();\n      }\n    };\n    Watcher watcherB = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndDecrement();\n      }\n    };\n    Watcher wrapped1A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrapped2A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrappedB = defaultClient.wrapWatcher(watcherB);\n    assertTrue(wrapped1A.equals(wrapped2A));\n    assertTrue(wrapped2A.equals(wrapped1A));\n    assertFalse(wrapped1A.equals(wrappedB));\n    assertEquals(wrapped1A.hashCode(), wrapped2A.hashCode());\n\n    CollectionAdminRequest.createCollection(getSaferTestName(), \"_default\", 1, 1)\n        .process(solrClient);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"foo\", \"bar\")\n        .process(solrClient);\n\n    //Thread.sleep(600000);\n\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped2A, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bam\")\n        .process(solrClient);\n\n    Thread.sleep(1000); // make sure zk client watch has time to be notified.\n    assertEquals(1, calls.get()); // same wrapped watch set twice, only invoked once\n\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrappedB, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bang\")\n        .process(solrClient);\n\n    Thread.sleep(1000); // make sure zk client watch has time to be notified.\n    assertEquals(1, calls.get()); // offsetting watches, no change\n  }\n\n","sourceOld":"  @Test\n  // SOLR-13491\n  public void testWrappingWatches() throws Exception {\n    AtomicInteger calls = new AtomicInteger(0);\n    Watcher watcherA = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndIncrement();\n      }\n    };\n    Watcher watcherB = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        calls.getAndDecrement();\n      }\n    };\n    Watcher wrapped1A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrapped2A = defaultClient.wrapWatcher(watcherA);\n    Watcher wrappedB = defaultClient.wrapWatcher(watcherB);\n    assertTrue(wrapped1A.equals(wrapped2A));\n    assertTrue(wrapped2A.equals(wrapped1A));\n    assertFalse(wrapped1A.equals(wrappedB));\n    assertEquals(wrapped1A.hashCode(), wrapped2A.hashCode());\n\n    CollectionAdminRequest.createCollection(getSaferTestName(), \"_default\", 1, 1)\n        .setMaxShardsPerNode(2)\n        .process(solrClient);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"foo\", \"bar\")\n        .process(solrClient);\n\n    //Thread.sleep(600000);\n\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped2A, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bam\")\n        .process(solrClient);\n\n    Thread.sleep(1000); // make sure zk client watch has time to be notified.\n    assertEquals(1, calls.get()); // same wrapped watch set twice, only invoked once\n\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrapped1A, null,true);\n    solrClient.getZkStateReader().getZkClient().getData(\"/collections/\" + getSaferTestName() + \"/collectionprops.json\",wrappedB, null,true);\n\n    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),\"baz\", \"bang\")\n        .process(solrClient);\n\n    Thread.sleep(1000); // make sure zk client watch has time to be notified.\n    assertEquals(1, calls.get()); // offsetting watches, no change\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51a2db0abe886e592b27151529b09efc818dac80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79bec0fe1c4074ad2206f11e7d8b7ca19a579fc4"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["79bec0fe1c4074ad2206f11e7d8b7ca19a579fc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"79bec0fe1c4074ad2206f11e7d8b7ca19a579fc4":["51a2db0abe886e592b27151529b09efc818dac80"]},"commit2Childs":{"51a2db0abe886e592b27151529b09efc818dac80":["79bec0fe1c4074ad2206f11e7d8b7ca19a579fc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51a2db0abe886e592b27151529b09efc818dac80","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79bec0fe1c4074ad2206f11e7d8b7ca19a579fc4":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}