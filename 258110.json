{"path":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds up to 2 minutes.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<600; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","sourceNew":null,"sourceOld":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds up to 2 minutes.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<600; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","pathOld":"src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","sourceNew":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds up to 2 minutes.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<600; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","sourceOld":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds up to 2 minutes.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<600; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds up to 2 minutes.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<600; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","sourceNew":null,"sourceOld":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds up to 2 minutes.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<600; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","sourceNew":null,"sourceOld":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds up to 2 minutes.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<600; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#waitForSolr(String).mjava","sourceNew":null,"sourceOld":"  /** Waits until a ping query to the solr server succeeds,\n   * retrying every 200 milliseconds up to 2 minutes.\n   */\n  public void waitForSolr(String context) throws Exception\n  {\n    int port = getLocalPort();\n\n    // A raw term query type doesn't check the schema\n    URL url = new URL(\"http://localhost:\"+port+context+\"/select?q={!raw+f=junit_test_query}ping\");\n\n    Exception ex = null;\n    // Wait for a total of 20 seconds: 100 tries, 200 milliseconds each\n    for (int i=0; i<600; i++) {\n      try {\n        InputStream stream = url.openStream();\n        stream.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n        ex = e;\n        Thread.sleep(200);\n        continue;\n      }\n\n      return;\n    }\n\n    throw new RuntimeException(\"Jetty/Solr unresponsive\",ex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["1da8d55113b689b06716246649de6f62430f15c0","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}