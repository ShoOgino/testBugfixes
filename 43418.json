{"path":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleLastProcessedVersionAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleLastProcessedVersionAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * We have to take care of four cases:\n   * <ul>\n   * <li>Replication & Buffering</li>\n   * <li>Replication & No Buffering</li>\n   * <li>No Replication & Buffering</li>\n   * <li>No Replication & No Buffering</li>\n   * </ul>\n   * In the first three cases, at least one log reader should have been initialised. We should take the lowest\n   * last processed version across all the initialised readers. In the last case, there isn't a log reader\n   * initialised. We should instantiate one and get the version of the first entries.\n   * </p>\n   */\n  private void handleLastProcessedVersionAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.LASTPROCESSEDVERSION, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.LASTPROCESSEDVERSION +\n          \" sent to non-leader replica\");\n    }\n\n    // take care of the first three cases\n    // first check the log readers from the replicator states\n    long lastProcessedVersion = Long.MAX_VALUE;\n    for (CdcrReplicatorState state : replicatorManager.getReplicatorStates()) {\n      long version = Long.MAX_VALUE;\n      if (state.getLogReader() != null) {\n        version = state.getLogReader().getLastVersion();\n      }\n      lastProcessedVersion = Math.min(lastProcessedVersion, version);\n    }\n\n    // next check the log reader of the buffer\n    CdcrUpdateLog.CdcrLogReader bufferLogReader = ((CdcrUpdateLog) core.getUpdateHandler().getUpdateLog()).getBufferToggle();\n    if (bufferLogReader != null) {\n      lastProcessedVersion = Math.min(lastProcessedVersion, bufferLogReader.getLastVersion());\n    }\n\n    // the fourth case: no cdc replication, no buffering: all readers were null\n    if (processStateManager.getState().equals(CdcrParams.ProcessState.STOPPED) &&\n        bufferStateManager.getState().equals(CdcrParams.BufferState.DISABLED)) {\n      CdcrUpdateLog.CdcrLogReader logReader = ((CdcrUpdateLog) core.getUpdateHandler().getUpdateLog()).newLogReader();\n      try {\n        // let the reader initialize lastVersion\n        logReader.next();\n        lastProcessedVersion = Math.min(lastProcessedVersion, logReader.getLastVersion());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error while fetching the last processed version\", e);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error while fetching the last processed version\", e);\n      } finally {\n        logReader.close();\n      }\n    }\n\n    log.info(\"Returning the lowest last processed version {}  @ {}:{}\", lastProcessedVersion, collectionName, shard);\n    rsp.add(CdcrParams.LAST_PROCESSED_VERSION, lastProcessedVersion);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleLastProcessedVersionAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleLastProcessedVersionAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * <p>\n   * We have to take care of four cases:\n   * <ul>\n   * <li>Replication & Buffering</li>\n   * <li>Replication & No Buffering</li>\n   * <li>No Replication & Buffering</li>\n   * <li>No Replication & No Buffering</li>\n   * </ul>\n   * In the first three cases, at least one log reader should have been initialised. We should take the lowest\n   * last processed version across all the initialised readers. In the last case, there isn't a log reader\n   * initialised. We should instantiate one and get the version of the first entries.\n   * </p>\n   */\n  private void handleLastProcessedVersionAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.LASTPROCESSEDVERSION, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.LASTPROCESSEDVERSION +\n          \" sent to non-leader replica\");\n    }\n\n    // take care of the first three cases\n    // first check the log readers from the replicator states\n    long lastProcessedVersion = Long.MAX_VALUE;\n    for (CdcrReplicatorState state : replicatorManager.getReplicatorStates()) {\n      long version = Long.MAX_VALUE;\n      if (state.getLogReader() != null) {\n        version = state.getLogReader().getLastVersion();\n      }\n      lastProcessedVersion = Math.min(lastProcessedVersion, version);\n    }\n\n    // next check the log reader of the buffer\n    CdcrUpdateLog.CdcrLogReader bufferLogReader = ((CdcrUpdateLog) core.getUpdateHandler().getUpdateLog()).getBufferToggle();\n    if (bufferLogReader != null) {\n      lastProcessedVersion = Math.min(lastProcessedVersion, bufferLogReader.getLastVersion());\n    }\n\n    // the fourth case: no cdc replication, no buffering: all readers were null\n    if (processStateManager.getState().equals(CdcrParams.ProcessState.STOPPED) &&\n        bufferStateManager.getState().equals(CdcrParams.BufferState.DISABLED)) {\n      CdcrUpdateLog.CdcrLogReader logReader = ((CdcrUpdateLog) core.getUpdateHandler().getUpdateLog()).newLogReader();\n      try {\n        // let the reader initialize lastVersion\n        logReader.next();\n        lastProcessedVersion = Math.min(lastProcessedVersion, logReader.getLastVersion());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error while fetching the last processed version\", e);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error while fetching the last processed version\", e);\n      } finally {\n        logReader.close();\n      }\n    }\n\n    log.debug(\"Returning the lowest last processed version {}  @ {}:{}\", lastProcessedVersion, collectionName, shard);\n    rsp.add(CdcrParams.LAST_PROCESSED_VERSION, lastProcessedVersion);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * We have to take care of four cases:\n   * <ul>\n   * <li>Replication & Buffering</li>\n   * <li>Replication & No Buffering</li>\n   * <li>No Replication & Buffering</li>\n   * <li>No Replication & No Buffering</li>\n   * </ul>\n   * In the first three cases, at least one log reader should have been initialised. We should take the lowest\n   * last processed version across all the initialised readers. In the last case, there isn't a log reader\n   * initialised. We should instantiate one and get the version of the first entries.\n   * </p>\n   */\n  private void handleLastProcessedVersionAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.LASTPROCESSEDVERSION, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.LASTPROCESSEDVERSION +\n          \" sent to non-leader replica\");\n    }\n\n    // take care of the first three cases\n    // first check the log readers from the replicator states\n    long lastProcessedVersion = Long.MAX_VALUE;\n    for (CdcrReplicatorState state : replicatorManager.getReplicatorStates()) {\n      long version = Long.MAX_VALUE;\n      if (state.getLogReader() != null) {\n        version = state.getLogReader().getLastVersion();\n      }\n      lastProcessedVersion = Math.min(lastProcessedVersion, version);\n    }\n\n    // next check the log reader of the buffer\n    CdcrUpdateLog.CdcrLogReader bufferLogReader = ((CdcrUpdateLog) core.getUpdateHandler().getUpdateLog()).getBufferToggle();\n    if (bufferLogReader != null) {\n      lastProcessedVersion = Math.min(lastProcessedVersion, bufferLogReader.getLastVersion());\n    }\n\n    // the fourth case: no cdc replication, no buffering: all readers were null\n    if (processStateManager.getState().equals(CdcrParams.ProcessState.STOPPED) &&\n        bufferStateManager.getState().equals(CdcrParams.BufferState.DISABLED)) {\n      CdcrUpdateLog.CdcrLogReader logReader = ((CdcrUpdateLog) core.getUpdateHandler().getUpdateLog()).newLogReader();\n      try {\n        // let the reader initialize lastVersion\n        logReader.next();\n        lastProcessedVersion = Math.min(lastProcessedVersion, logReader.getLastVersion());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error while fetching the last processed version\", e);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error while fetching the last processed version\", e);\n      } finally {\n        logReader.close();\n      }\n    }\n\n    log.info(\"Returning the lowest last processed version {}  @ {}:{}\", lastProcessedVersion, collectionName, shard);\n    rsp.add(CdcrParams.LAST_PROCESSED_VERSION, lastProcessedVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleLastProcessedVersionAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>\n   * We have to take care of four cases:\n   * <ul>\n   * <li>Replication & Buffering</li>\n   * <li>Replication & No Buffering</li>\n   * <li>No Replication & Buffering</li>\n   * <li>No Replication & No Buffering</li>\n   * </ul>\n   * In the first three cases, at least one log reader should have been initialised. We should take the lowest\n   * last processed version across all the initialised readers. In the last case, there isn't a log reader\n   * initialised. We should instantiate one and get the version of the first entries.\n   * </p>\n   */\n  private void handleLastProcessedVersionAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.LASTPROCESSEDVERSION, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.LASTPROCESSEDVERSION +\n          \" sent to non-leader replica\");\n    }\n\n    // take care of the first three cases\n    // first check the log readers from the replicator states\n    long lastProcessedVersion = Long.MAX_VALUE;\n    for (CdcrReplicatorState state : replicatorManager.getReplicatorStates()) {\n      long version = Long.MAX_VALUE;\n      if (state.getLogReader() != null) {\n        version = state.getLogReader().getLastVersion();\n      }\n      lastProcessedVersion = Math.min(lastProcessedVersion, version);\n    }\n\n    // next check the log reader of the buffer\n    CdcrUpdateLog.CdcrLogReader bufferLogReader = ((CdcrUpdateLog) core.getUpdateHandler().getUpdateLog()).getBufferToggle();\n    if (bufferLogReader != null) {\n      lastProcessedVersion = Math.min(lastProcessedVersion, bufferLogReader.getLastVersion());\n    }\n\n    // the fourth case: no cdc replication, no buffering: all readers were null\n    if (processStateManager.getState().equals(CdcrParams.ProcessState.STOPPED) &&\n        bufferStateManager.getState().equals(CdcrParams.BufferState.DISABLED)) {\n      CdcrUpdateLog.CdcrLogReader logReader = ((CdcrUpdateLog) core.getUpdateHandler().getUpdateLog()).newLogReader();\n      try {\n        // let the reader initialize lastVersion\n        logReader.next();\n        lastProcessedVersion = Math.min(lastProcessedVersion, logReader.getLastVersion());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error while fetching the last processed version\", e);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error while fetching the last processed version\", e);\n      } finally {\n        logReader.close();\n      }\n    }\n\n    log.debug(\"Returning the lowest last processed version {}  @ {}:{}\", lastProcessedVersion, collectionName, shard);\n    rsp.add(CdcrParams.LAST_PROCESSED_VERSION, lastProcessedVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}