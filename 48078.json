{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#customHttpClientTest().mjava","sourceNew":"  public void customHttpClientTest() {\n    CloudSolrClient solrClient = null;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 1000);\n    HttpClient client = null;\n\n    try {\n      client = HttpClientUtil.createClient(params);\n      solrClient = new CloudSolrClient(zkServer.getZkAddress(), client);\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n    } finally {\n      solrClient.shutdown();\n      client.getConnectionManager().shutdown();\n    }\n  }\n\n","sourceOld":"  public void customHttpClientTest() {\n    CloudSolrServer server = null;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 1000);\n    HttpClient client = null;\n\n    try {\n      client = HttpClientUtil.createClient(params);\n      server = new CloudSolrServer(zkServer.getZkAddress(), client);\n      assertTrue(server.getLbServer().getHttpClient() == client);\n    } finally {\n      server.shutdown();\n      client.getConnectionManager().shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","sourceNew":"  public void customHttpClientTest() throws IOException {\n    CloudSolrClient solrClient = null;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 1000);\n    CloseableHttpClient client = null;\n\n    try {\n      client = HttpClientUtil.createClient(params);\n      solrClient = new CloudSolrClient(zkServer.getZkAddress(), client);\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n    } finally {\n      solrClient.shutdown();\n      client.close();\n    }\n  }\n\n","sourceOld":"  public void customHttpClientTest() {\n    CloudSolrClient solrClient = null;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 1000);\n    HttpClient client = null;\n\n    try {\n      client = HttpClientUtil.createClient(params);\n      solrClient = new CloudSolrClient(zkServer.getZkAddress(), client);\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n    } finally {\n      solrClient.shutdown();\n      client.getConnectionManager().shutdown();\n    }\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","sourceNew":"  public void customHttpClientTest() throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 1000);\n\n    try (CloseableHttpClient client = HttpClientUtil.createClient(params);\n         CloudSolrClient solrClient = new CloudSolrClient(zkServer.getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    }\n  }\n\n","sourceOld":"  public void customHttpClientTest() throws IOException {\n    CloudSolrClient solrClient = null;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 1000);\n    CloseableHttpClient client = null;\n\n    try {\n      client = HttpClientUtil.createClient(params);\n      solrClient = new CloudSolrClient(zkServer.getZkAddress(), client);\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n    } finally {\n      solrClient.shutdown();\n      client.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","sourceNew":"  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = new CloudSolrClient(zkServer.getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","sourceOld":"  public void customHttpClientTest() throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 1000);\n\n    try (CloseableHttpClient client = HttpClientUtil.createClient(params);\n         CloudSolrClient solrClient = new CloudSolrClient(zkServer.getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","sourceNew":"  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = getCloudSolrClient(zkServer.getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","sourceOld":"  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = new CloudSolrClient(zkServer.getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","sourceNew":"  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = getCloudSolrClient(zkServer.getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","sourceOld":"  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = new CloudSolrClient(zkServer.getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","sourceNew":"  @Test\n  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","sourceOld":"  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = getCloudSolrClient(zkServer.getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","sourceNew":"  @Test\n  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","sourceOld":"  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = getCloudSolrClient(zkServer.getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","sourceNew":"  @Test\n  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","sourceOld":"  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = getCloudSolrClient(zkServer.getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#customHttpClientTest().mjava","sourceNew":"  @Test\n  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","sourceOld":"  public void customHttpClientTest() throws IOException {\n    CloseableHttpClient client = HttpClientUtil.createClient(null);\n    try (CloudSolrClient solrClient = getCloudSolrClient(zkServer.getZkAddress(), client)) {\n\n      assertTrue(solrClient.getLbClient().getHttpClient() == client);\n\n    } finally {\n      HttpClientUtil.close(client);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","b940572a59da1b42b6c20ab5278155b12816807a"],"859081acf00749f5dd462772c571d611d4a4d2db":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"73450c0955930295d34703e7ddbfc6973b7a121a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","b940572a59da1b42b6c20ab5278155b12816807a"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b940572a59da1b42b6c20ab5278155b12816807a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73450c0955930295d34703e7ddbfc6973b7a121a"]},"commit2Childs":{"bd78ba595fa6cdd7fff930f26d154d13a823fa47":[],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["859081acf00749f5dd462772c571d611d4a4d2db"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}