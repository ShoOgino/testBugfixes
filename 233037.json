{"path":"lucene/core/src/java/org/apache/lucene/search/Weight#getCacheHelper(LeafReaderContext,List[#-extends-Weight]).mjava","commits":[{"id":"ee9b4ce4f719b4add29b7e03f76700b506bedb63","date":1509707319,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#getCacheHelper(LeafReaderContext,List[#-extends-Weight]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#getCacheHelper(LeafReaderContext,Weight...).mjava","sourceNew":"  /**\n   * Given a collection of Weights, return an {@link org.apache.lucene.index.IndexReader.CacheHelper} that will satisfy\n   * the requirements of them all.\n   * @param context the {@link LeafReaderContext} to cache against\n   * @param weights an array of {@link Weight} to be cached\n   * @return an {@link org.apache.lucene.index.IndexReader.CacheHelper} indicating the cache level\n   */\n  protected static IndexReader.CacheHelper getCacheHelper(LeafReaderContext context, List<? extends Weight> weights) {\n    if (weights.size() == 0)\n      return null;\n    IndexReader.CacheHelper helper = weights.get(0).getCacheHelper(context);\n    if (helper == null)\n      return null;\n    for (int i = 1; i < weights.size(); i++) {\n      IndexReader.CacheHelper nextHelper = weights.get(i).getCacheHelper(context);\n      if (nextHelper == null || nextHelper != helper)\n        return null;\n    }\n    return helper;\n  }\n\n","sourceOld":"  /**\n   * Given a collection of Weights, return an {@link org.apache.lucene.index.IndexReader.CacheHelper} that will satisfy\n   * the requirements of them all.\n   * @param context the {@link LeafReaderContext} to cache against\n   * @param weights an array of {@link Weight} to be cached\n   * @return an {@link org.apache.lucene.index.IndexReader.CacheHelper} indicating the cache level\n   */\n  protected static IndexReader.CacheHelper getCacheHelper(LeafReaderContext context, Weight... weights) {\n    if (weights.length == 0)\n      return null;\n    IndexReader.CacheHelper helper = weights[0].getCacheHelper(context);\n    if (helper == null)\n      return null;\n    for (int i = 1; i < weights.length; i++) {\n      IndexReader.CacheHelper nextHelper = weights[i].getCacheHelper(context);\n      if (nextHelper == null || nextHelper != helper)\n        return null;\n    }\n    return helper;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#getCacheHelper(LeafReaderContext,List[#-extends-Weight]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a collection of Weights, return an {@link org.apache.lucene.index.IndexReader.CacheHelper} that will satisfy\n   * the requirements of them all.\n   * @param context the {@link LeafReaderContext} to cache against\n   * @param weights an array of {@link Weight} to be cached\n   * @return an {@link org.apache.lucene.index.IndexReader.CacheHelper} indicating the cache level\n   */\n  protected static IndexReader.CacheHelper getCacheHelper(LeafReaderContext context, List<? extends Weight> weights) {\n    if (weights.size() == 0)\n      return null;\n    IndexReader.CacheHelper helper = weights.get(0).getCacheHelper(context);\n    if (helper == null)\n      return null;\n    for (int i = 1; i < weights.size(); i++) {\n      IndexReader.CacheHelper nextHelper = weights.get(i).getCacheHelper(context);\n      if (nextHelper == null || nextHelper != helper)\n        return null;\n    }\n    return helper;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#getCacheHelper(LeafReaderContext,List[#-extends-Weight]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a collection of Weights, return an {@link org.apache.lucene.index.IndexReader.CacheHelper} that will satisfy\n   * the requirements of them all.\n   * @param context the {@link LeafReaderContext} to cache against\n   * @param weights an array of {@link Weight} to be cached\n   * @return an {@link org.apache.lucene.index.IndexReader.CacheHelper} indicating the cache level\n   */\n  protected static IndexReader.CacheHelper getCacheHelper(LeafReaderContext context, List<? extends Weight> weights) {\n    if (weights.size() == 0)\n      return null;\n    IndexReader.CacheHelper helper = weights.get(0).getCacheHelper(context);\n    if (helper == null)\n      return null;\n    for (int i = 1; i < weights.size(); i++) {\n      IndexReader.CacheHelper nextHelper = weights.get(i).getCacheHelper(context);\n      if (nextHelper == null || nextHelper != helper)\n        return null;\n    }\n    return helper;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee9b4ce4f719b4add29b7e03f76700b506bedb63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee9b4ce4f719b4add29b7e03f76700b506bedb63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"]},"commit2Childs":{"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","ee9b4ce4f719b4add29b7e03f76700b506bedb63"],"ee9b4ce4f719b4add29b7e03f76700b506bedb63":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}