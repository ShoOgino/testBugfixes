{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","commits":[{"id":"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","date":1470238980,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n    // basic\n    expression = StreamExpressionParser.parse(featuresExpression);\n    stream = new FeaturesSelectionStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    // update\n    expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \"+featuresExpression+\")\");\n    stream = new UpdateStream(expression, factory);\n    getTuples(stream);\n    cluster.getSolrClient().commit(\"destinationCollection\");\n\n    expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(4, tuples.size());\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n    // basic\n    expression = StreamExpressionParser.parse(featuresExpression);\n    stream = new FeaturesSelectionStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    // update\n    expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \"+featuresExpression+\")\");\n    stream = new UpdateStream(expression, factory);\n    getTuples(stream);\n    cluster.getSolrClient().commit(\"destinationCollection\");\n\n    expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(4, tuples.size());\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n    // basic\n    expression = StreamExpressionParser.parse(featuresExpression);\n    stream = new FeaturesSelectionStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    // update\n    expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \"+featuresExpression+\")\");\n    stream = new UpdateStream(expression, factory);\n    getTuples(stream);\n    cluster.getSolrClient().commit(\"destinationCollection\");\n\n    expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(4, tuples.size());\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n    // basic\n    expression = StreamExpressionParser.parse(featuresExpression);\n    stream = new FeaturesSelectionStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    // update\n    expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \"+featuresExpression+\")\");\n    stream = new UpdateStream(expression, factory);\n    getTuples(stream);\n    cluster.getSolrClient().commit(\"destinationCollection\");\n\n    expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(4, tuples.size());\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n    // basic\n    expression = StreamExpressionParser.parse(featuresExpression);\n    stream = new FeaturesSelectionStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    // update\n    expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \"+featuresExpression+\")\");\n    stream = new UpdateStream(expression, factory);\n    getTuples(stream);\n    cluster.getSolrClient().commit(\"destinationCollection\");\n\n    expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(4, tuples.size());\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n    // basic\n    expression = StreamExpressionParser.parse(featuresExpression);\n    stream = new FeaturesSelectionStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    // update\n    expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \"+featuresExpression+\")\");\n    stream = new UpdateStream(expression, factory);\n    getTuples(stream);\n    cluster.getSolrClient().commit(\"destinationCollection\");\n\n    expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(4, tuples.size());\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n    // basic\n    expression = StreamExpressionParser.parse(featuresExpression);\n    stream = new FeaturesSelectionStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    // update\n    expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \"+featuresExpression+\")\");\n    stream = new UpdateStream(expression, factory);\n    getTuples(stream);\n    cluster.getSolrClient().commit(\"destinationCollection\");\n\n    expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(4, tuples.size());\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n\n    try {\n      String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n      // basic\n      expression = StreamExpressionParser.parse(featuresExpression);\n      stream = new FeaturesSelectionStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n      // update\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \" + featuresExpression + \")\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(4, tuples.size());\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n    // basic\n    expression = StreamExpressionParser.parse(featuresExpression);\n    stream = new FeaturesSelectionStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    // update\n    expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \"+featuresExpression+\")\");\n    stream = new UpdateStream(expression, factory);\n    getTuples(stream);\n    cluster.getSolrClient().commit(\"destinationCollection\");\n\n    expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(4, tuples.size());\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n\n    try {\n      String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n      // basic\n      expression = StreamExpressionParser.parse(featuresExpression);\n      stream = new FeaturesSelectionStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n      // update\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \" + featuresExpression + \")\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(4, tuples.size());\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n    // basic\n    expression = StreamExpressionParser.parse(featuresExpression);\n    stream = new FeaturesSelectionStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    // update\n    expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \"+featuresExpression+\")\");\n    stream = new UpdateStream(expression, factory);\n    getTuples(stream);\n    cluster.getSolrClient().commit(\"destinationCollection\");\n\n    expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(4, tuples.size());\n    assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n    assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n    assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n    assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n    CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"destinationCollection\", 2, 2);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n\n    try {\n      String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n      // basic\n      expression = StreamExpressionParser.parse(featuresExpression);\n      stream = new FeaturesSelectionStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n      // update\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \" + featuresExpression + \")\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(4, tuples.size());\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n\n    try {\n      String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n      // basic\n      expression = StreamExpressionParser.parse(featuresExpression);\n      stream = new FeaturesSelectionStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n      // update\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \" + featuresExpression + \")\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(4, tuples.size());\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","date":1575925443,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"destinationCollection\", 2, 2);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n\n    try {\n      String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n      // basic\n      expression = StreamExpressionParser.parse(featuresExpression);\n      stream = new FeaturesSelectionStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n      // update\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, \" + featuresExpression + \")\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(4, tuples.size());\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"destinationCollection\", 2, 2);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n\n    try {\n      String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n      // basic\n      expression = StreamExpressionParser.parse(featuresExpression);\n      stream = new FeaturesSelectionStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n      // update\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \" + featuresExpression + \")\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(4, tuples.size());\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7107555998ea86d6f61e2ad770687d674fa8e012","date":1575927428,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFeaturesSelectionStream().mjava","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"destinationCollection\", 2, 2);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n\n    try {\n      String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n      // basic\n      expression = StreamExpressionParser.parse(featuresExpression);\n      stream = new FeaturesSelectionStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n      // update\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, \" + featuresExpression + \")\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(4, tuples.size());\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"ml\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"destinationCollection\", 2, 2);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i+=2) {\n      updateRequest.add(id, String.valueOf(i), \"whitetok\", \"a b c d\", \"out_i\", \"1\");\n      updateRequest.add(id, String.valueOf(i+1), \"whitetok\", \"a b e f\", \"out_i\", \"0\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"featuresSelection\", FeaturesSelectionStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n\n    try {\n      String featuresExpression = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"whitetok\\\", outcome=\\\"out_i\\\", numTerms=4)\";\n      // basic\n      expression = StreamExpressionParser.parse(featuresExpression);\n      stream = new FeaturesSelectionStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n\n      // update\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, \" + featuresExpression + \")\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=featureSet_s:first, fl=\\\"index_i, term_s\\\", sort=\\\"index_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(4, tuples.size());\n      assertTrue(tuples.get(0).get(\"term_s\").equals(\"c\"));\n      assertTrue(tuples.get(1).get(\"term_s\").equals(\"d\"));\n      assertTrue(tuples.get(2).get(\"term_s\").equals(\"e\"));\n      assertTrue(tuples.get(3).get(\"term_s\").equals(\"f\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"7107555998ea86d6f61e2ad770687d674fa8e012":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","7107555998ea86d6f61e2ad770687d674fa8e012"],"7107555998ea86d6f61e2ad770687d674fa8e012":[],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["8c969f15cd04d31e520319c619a445ae21f02d72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7107555998ea86d6f61e2ad770687d674fa8e012","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}