{"path":"solr/core/src/java/org/apache/solr/security/Sha256AuthenticationProvider#edit(Map[String,Object],List[CommandOperation]).mjava","commits":[{"id":"ccfb40e1834cac1619556a0becf198bb7bad5d63","date":1438887805,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/Sha256AuthenticationProvider#edit(Map[String,Object],List[CommandOperation]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Object> edit(Map<String, Object> latestConf, List<CommandOperation> commands) {\n    for (CommandOperation cmd : commands) {\n      if (!supported_ops.contains(cmd.name)) {\n        cmd.unknownOperation();\n        return null;\n      }\n      if (cmd.hasError()) return null;\n      if (\"delete-user\".equals(cmd.name)) {\n        List<String> names = cmd.getStrs(\"\");\n        Map map = (Map) latestConf.get(\"credentials\");\n        if (map == null || !map.keySet().containsAll(names)) {\n          cmd.addError(\"No such user(s) \" +names );\n          return null;\n        }\n        for (String name : names) map.remove(name);\n        return latestConf;\n      }\n      if (\"set-user\".equals(cmd.name) ) {\n        Map map = getMapValue(latestConf, \"credentials\");\n        Map kv = cmd.getDataMap();\n        for (Object o : kv.entrySet()) {\n          Map.Entry e = (Map.Entry) o;\n          if(e.getKey() == null || e.getValue() == null){\n            cmd.addError(\"name and password must be non-null\");\n            return null;\n          }\n          putUser(String.valueOf(e.getKey()), String.valueOf(e.getValue()), map);\n        }\n\n      }\n    }\n    return latestConf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd","date":1567056470,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/Sha256AuthenticationProvider#edit(Map[String,Object],List[CommandOperation]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/Sha256AuthenticationProvider#edit(Map[String,Object],List[CommandOperation]).mjava","sourceNew":"  @Override\n  public Map<String, Object> edit(Map<String, Object> latestConf, List<CommandOperation> commands) {\n    for (CommandOperation cmd : commands) {\n      if (!supported_ops.contains(cmd.name)) {\n        cmd.unknownOperation();\n        return null;\n      }\n      if (cmd.hasError()) return null;\n      if (\"delete-user\".equals(cmd.name)) {\n        List<String> names = cmd.getStrs(\"\");\n        Map map = (Map) latestConf.get(\"credentials\");\n        if (map == null || !map.keySet().containsAll(names)) {\n          cmd.addError(\"No such user(s) \" +names );\n          return null;\n        }\n        for (String name : names) {\n          if (map.containsKey(name)) {\n            if (map.size() == 1){\n              cmd.addError(CANNOT_DELETE_LAST_USER_ERROR);\n              return null;\n            }\n          }\n          map.remove(name);\n        }\n        return latestConf;\n      }\n      if (\"set-user\".equals(cmd.name) ) {\n        Map map = getMapValue(latestConf, \"credentials\");\n        Map kv = cmd.getDataMap();\n        for (Object o : kv.entrySet()) {\n          Map.Entry e = (Map.Entry) o;\n          if(e.getKey() == null || e.getValue() == null){\n            cmd.addError(\"name and password must be non-null\");\n            return null;\n          }\n          putUser(String.valueOf(e.getKey()), String.valueOf(e.getValue()), map);\n        }\n\n      }\n    }\n    return latestConf;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> edit(Map<String, Object> latestConf, List<CommandOperation> commands) {\n    for (CommandOperation cmd : commands) {\n      if (!supported_ops.contains(cmd.name)) {\n        cmd.unknownOperation();\n        return null;\n      }\n      if (cmd.hasError()) return null;\n      if (\"delete-user\".equals(cmd.name)) {\n        List<String> names = cmd.getStrs(\"\");\n        Map map = (Map) latestConf.get(\"credentials\");\n        if (map == null || !map.keySet().containsAll(names)) {\n          cmd.addError(\"No such user(s) \" +names );\n          return null;\n        }\n        for (String name : names) map.remove(name);\n        return latestConf;\n      }\n      if (\"set-user\".equals(cmd.name) ) {\n        Map map = getMapValue(latestConf, \"credentials\");\n        Map kv = cmd.getDataMap();\n        for (Object o : kv.entrySet()) {\n          Map.Entry e = (Map.Entry) o;\n          if(e.getKey() == null || e.getValue() == null){\n            cmd.addError(\"name and password must be non-null\");\n            return null;\n          }\n          putUser(String.valueOf(e.getKey()), String.valueOf(e.getValue()), map);\n        }\n\n      }\n    }\n    return latestConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/Sha256AuthenticationProvider#edit(Map[String,Object],List[CommandOperation]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/Sha256AuthenticationProvider#edit(Map[String,Object],List[CommandOperation]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Map<String, Object> edit(Map<String, Object> latestConf, List<CommandOperation> commands) {\n    for (CommandOperation cmd : commands) {\n      if (!supported_ops.contains(cmd.name)) {\n        cmd.unknownOperation();\n        return null;\n      }\n      if (cmd.hasError()) return null;\n      if (\"delete-user\".equals(cmd.name)) {\n        List<String> names = cmd.getStrs(\"\");\n        @SuppressWarnings({\"rawtypes\"})\n        Map map = (Map) latestConf.get(\"credentials\");\n        if (map == null || !map.keySet().containsAll(names)) {\n          cmd.addError(\"No such user(s) \" +names );\n          return null;\n        }\n        for (String name : names) {\n          if (map.containsKey(name)) {\n            if (map.size() == 1){\n              cmd.addError(CANNOT_DELETE_LAST_USER_ERROR);\n              return null;\n            }\n          }\n          map.remove(name);\n        }\n        return latestConf;\n      }\n      if (\"set-user\".equals(cmd.name) ) {\n        @SuppressWarnings({\"rawtypes\"})\n        Map map = getMapValue(latestConf, \"credentials\");\n        @SuppressWarnings({\"rawtypes\"})\n        Map kv = cmd.getDataMap();\n        for (Object o : kv.entrySet()) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map.Entry e = (Map.Entry) o;\n          if(e.getKey() == null || e.getValue() == null){\n            cmd.addError(\"name and password must be non-null\");\n            return null;\n          }\n          putUser(String.valueOf(e.getKey()), String.valueOf(e.getValue()), map);\n        }\n\n      }\n    }\n    return latestConf;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> edit(Map<String, Object> latestConf, List<CommandOperation> commands) {\n    for (CommandOperation cmd : commands) {\n      if (!supported_ops.contains(cmd.name)) {\n        cmd.unknownOperation();\n        return null;\n      }\n      if (cmd.hasError()) return null;\n      if (\"delete-user\".equals(cmd.name)) {\n        List<String> names = cmd.getStrs(\"\");\n        Map map = (Map) latestConf.get(\"credentials\");\n        if (map == null || !map.keySet().containsAll(names)) {\n          cmd.addError(\"No such user(s) \" +names );\n          return null;\n        }\n        for (String name : names) {\n          if (map.containsKey(name)) {\n            if (map.size() == 1){\n              cmd.addError(CANNOT_DELETE_LAST_USER_ERROR);\n              return null;\n            }\n          }\n          map.remove(name);\n        }\n        return latestConf;\n      }\n      if (\"set-user\".equals(cmd.name) ) {\n        Map map = getMapValue(latestConf, \"credentials\");\n        Map kv = cmd.getDataMap();\n        for (Object o : kv.entrySet()) {\n          Map.Entry e = (Map.Entry) o;\n          if(e.getKey() == null || e.getValue() == null){\n            cmd.addError(\"name and password must be non-null\");\n            return null;\n          }\n          putUser(String.valueOf(e.getKey()), String.valueOf(e.getValue()), map);\n        }\n\n      }\n    }\n    return latestConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd"],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}