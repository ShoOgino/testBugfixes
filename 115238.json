{"path":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","commits":[{"id":"1ab868ed766616ebbbba2e7645d01945520e0b6c","date":1064526173,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"/dev/null","sourceNew":"    public void testFilesOpenClose() throws IOException \n    {\n        // Create initial data set\n        Directory dir = FSDirectory.getDirectory(\"testIndex\", true);\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n        \n        // Try to erase the data - this ensures that the writer closed all files\n        dir = FSDirectory.getDirectory(\"testIndex\", true);\n        \n        // Now create the data set again, just as before \n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n        \n        // Now open existing directory and test that reader closes all files\n        dir = FSDirectory.getDirectory(\"testIndex\", false);\n        IndexReader reader1 = IndexReader.open(dir);\n        reader1.close();\n        dir.close();\n        \n        // The following will fail if reader did not close all files\n        dir = FSDirectory.getDirectory(\"testIndex\", true);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96","date":1066874526,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        Directory dir = getDirectory(true);\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        dir = getDirectory(true);\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory(false);\n        IndexReader reader1 = IndexReader.open(dir);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close all files\n        dir = getDirectory(true);\n    }\n\n","sourceOld":"    public void testFilesOpenClose() throws IOException \n    {\n        // Create initial data set\n        Directory dir = FSDirectory.getDirectory(\"testIndex\", true);\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n        \n        // Try to erase the data - this ensures that the writer closed all files\n        dir = FSDirectory.getDirectory(\"testIndex\", true);\n        \n        // Now create the data set again, just as before \n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n        \n        // Now open existing directory and test that reader closes all files\n        dir = FSDirectory.getDirectory(\"testIndex\", false);\n        IndexReader reader1 = IndexReader.open(dir);\n        reader1.close();\n        dir.close();\n        \n        // The following will fail if reader did not close all files\n        dir = FSDirectory.getDirectory(\"testIndex\", true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        Directory dir = getDirectory(true);\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        dir = getDirectory(true);\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory(false);\n        IndexReader reader1 = IndexReader.open(dir);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close all files\n        dir = getDirectory(true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException\n    {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException {\n        // Create initial data set\n        File dirFile = new File(TEMP_DIR, \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException {\n        // Create initial data set\n        File dirFile = new File(System.getProperty(\"tempDir\"), \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException {\n        // Create initial data set\n        File dirFile = new File(TEMP_DIR, \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException {\n        // Create initial data set\n        File dirFile = new File(TEMP_DIR, \"testIndex\");\n        Directory dir = getDirectory();\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Try to erase the data - this ensures that the writer closed all files\n        _TestUtil.rmDir(dirFile);\n        dir = getDirectory();\n\n        // Now create the data set again, just as before\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        addDoc(writer, \"test\");\n        writer.close();\n        dir.close();\n\n        // Now open existing directory and test that reader closes all files\n        dir = getDirectory();\n        IndexReader reader1 = IndexReader.open(dir, false);\n        reader1.close();\n        dir.close();\n\n        // The following will fail if reader did not close\n        // all files\n        _TestUtil.rmDir(dirFile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["0018e7a0579df5d3de71d0bd878322a7abef04d9","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["66b12ba4967665216eeb706b58d424c51fb3641a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"66b12ba4967665216eeb706b58d424c51fb3641a":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab868ed766616ebbbba2e7645d01945520e0b6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["1ab868ed766616ebbbba2e7645d01945520e0b6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d16275d75dfe0b780ed62df4c811d083187c71a"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"66b12ba4967665216eeb706b58d424c51fb3641a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ab868ed766616ebbbba2e7645d01945520e0b6c"],"1ab868ed766616ebbbba2e7645d01945520e0b6c":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["66b12ba4967665216eeb706b58d424c51fb3641a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}