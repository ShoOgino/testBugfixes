{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseOptimize().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseOptimize().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Verify that calling optimize when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseOptimize() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n\n    if (VERBOSE) {\n      writer.setInfoStream(System.out);\n    }\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as unoptimized at this\n    // point:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real optimize\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    if (VERBOSE) {\n      writer.setInfoStream(System.out);\n    }\n    writer.optimize();\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseOptimize().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Verify that calling optimize when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseOptimize() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n\n    if (VERBOSE) {\n      writer.setInfoStream(System.out);\n    }\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as unoptimized at this\n    // point:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real optimize\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    if (VERBOSE) {\n      writer.setInfoStream(System.out);\n    }\n    writer.optimize();\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseOptimize().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Verify that calling optimize when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseOptimize() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n\n    if (VERBOSE) {\n      writer.setInfoStream(System.out);\n    }\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as unoptimized at this\n    // point:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real optimize\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    if (VERBOSE) {\n      writer.setInfoStream(System.out);\n    }\n    writer.optimize();\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseOptimize().mjava","sourceNew":"  /*\n   * Verify that calling optimize when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseOptimize() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as unoptimized at this\n    // point:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real optimize\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling optimize when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseOptimize() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n\n    if (VERBOSE) {\n      writer.setInfoStream(System.out);\n    }\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as unoptimized at this\n    // point:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real optimize\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    if (VERBOSE) {\n      writer.setInfoStream(System.out);\n    }\n    writer.optimize();\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseOptimize().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling optimize when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseOptimize() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as unoptimized at this\n    // point:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real optimize\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"06584e6e98d592b34e1329b384182f368d2025e8":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","06584e6e98d592b34e1329b384182f368d2025e8","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}