{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream#read().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/UniqueStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple tuple = tupleStream.read();\n    if(tuple.EOF) {\n      return tuple;\n    }\n\n    if(currentTuple == null) {\n      currentTuple = tuple;\n      return tuple;\n    } else {\n      while(true) {\n        int i = comp.compare(currentTuple, tuple);\n        if(i == 0) {\n          //We have duplicate tuple so read the next tuple from the stream.\n          tuple = tupleStream.read();\n          if(tuple.EOF) {\n            return tuple;\n          }\n        } else {\n          //We have a non duplicate\n          this.currentTuple = tuple;\n          return tuple;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple tuple = tupleStream.read();\n    if(tuple.EOF) {\n      return tuple;\n    }\n\n    if(currentTuple == null) {\n      currentTuple = tuple;\n      return tuple;\n    } else {\n      while(true) {\n        int i = comp.compare(currentTuple, tuple);\n        if(i == 0) {\n          //We have duplicate tuple so read the next tuple from the stream.\n          tuple = tupleStream.read();\n          if(tuple.EOF) {\n            return tuple;\n          }\n        } else {\n          //We have a non duplicate\n          this.currentTuple = tuple;\n          return tuple;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple tuple = tupleStream.read();\n    if(tuple.EOF) {\n      return tuple;\n    }\n\n    if(currentTuple == null) {\n      currentTuple = tuple;\n      return tuple;\n    } else {\n      while(true) {\n        if(eq.test(currentTuple, tuple)){\n          //We have duplicate tuple so read the next tuple from the stream.\n          tuple = tupleStream.read();\n          if(tuple.EOF) {\n            return tuple;\n          }\n        } else {\n          //We have a non duplicate\n          this.currentTuple = tuple;\n          return tuple;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple tuple = tupleStream.read();\n    if(tuple.EOF) {\n      return tuple;\n    }\n\n    if(currentTuple == null) {\n      currentTuple = tuple;\n      return tuple;\n    } else {\n      while(true) {\n        int i = comp.compare(currentTuple, tuple);\n        if(i == 0) {\n          //We have duplicate tuple so read the next tuple from the stream.\n          tuple = tupleStream.read();\n          if(tuple.EOF) {\n            return tuple;\n          }\n        } else {\n          //We have a non duplicate\n          this.currentTuple = tuple;\n          return tuple;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple tuple = stream.read();\n    if(tuple.EOF) {\n      return tuple;\n    }\n\n    if(currentTuple == null) {\n      currentTuple = tuple;\n      return tuple;\n    } else {\n      while(true) {\n        if(eq.test(currentTuple, tuple)){\n          //We have duplicate tuple so read the next tuple from the stream.\n          tuple = stream.read();\n          if(tuple.EOF) {\n            return tuple;\n          }\n        } else {\n          //We have a non duplicate\n          this.currentTuple = tuple;\n          return tuple;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple tuple = tupleStream.read();\n    if(tuple.EOF) {\n      return tuple;\n    }\n\n    if(currentTuple == null) {\n      currentTuple = tuple;\n      return tuple;\n    } else {\n      while(true) {\n        if(eq.test(currentTuple, tuple)){\n          //We have duplicate tuple so read the next tuple from the stream.\n          tuple = tupleStream.read();\n          if(tuple.EOF) {\n            return tuple;\n          }\n        } else {\n          //We have a non duplicate\n          this.currentTuple = tuple;\n          return tuple;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298","date":1452706901,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    return reducerStream.read();\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple tuple = stream.read();\n    if(tuple.EOF) {\n      return tuple;\n    }\n\n    if(currentTuple == null) {\n      currentTuple = tuple;\n      return tuple;\n    } else {\n      while(true) {\n        if(eq.test(currentTuple, tuple)){\n          //We have duplicate tuple so read the next tuple from the stream.\n          tuple = stream.read();\n          if(tuple.EOF) {\n            return tuple;\n          }\n        } else {\n          //We have a non duplicate\n          this.currentTuple = tuple;\n          return tuple;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}