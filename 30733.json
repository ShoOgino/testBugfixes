{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random, terms, reader.getLiveDocs(), null, true);\n    if (termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random, terms, reader.getLiveDocs(), null, true);\n    if (termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random, terms, reader.getLiveDocs(), null, true);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random, terms, reader.getLiveDocs(), null, true);\n    if (termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random, terms, reader.getLiveDocs(), null, true);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random, terms, reader.getLiveDocs(), null, true);\n    if (termDocs.nextDoc() != DocsEnum.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random(), terms, reader.getLiveDocs(), null, true);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random, terms, reader.getLiveDocs(), null, true);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random(), terms, reader.getLiveDocs(), null, DocsEnum.FLAG_FREQS);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random(), terms, reader.getLiveDocs(), null, true);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random(), terms, reader.getLiveDocs(), null, DocsEnum.FLAG_FREQS);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random(), terms, reader.getLiveDocs(), null, true);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random(), terms, reader.getLiveDocs(), null, DocsEnum.FLAG_FREQS);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random(), terms, reader.getLiveDocs(), null, true);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":null,"sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random(), terms, reader.getLiveDocs(), null, DocsEnum.FLAG_FREQS);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs(int).mjava","sourceNew":null,"sourceOld":"  public void testTermDocs(int indexDivisor) throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n    assertTrue(reader != null);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermsEnum terms = reader.fields().terms(DocHelper.TEXT_FIELD_2_KEY).iterator(null);\n    terms.seekCeil(new BytesRef(\"field\"));\n    DocsEnum termDocs = _TestUtil.docs(random(), terms, reader.getLiveDocs(), null, DocsEnum.FLAG_FREQS);\n    if (termDocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)    {\n      int docId = termDocs.docID();\n      assertTrue(docId == 0);\n      int freq = termDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a45bec74b98f6fc05f52770cfb425739e6563960":["02331260bb246364779cb6f04919ca47900d01bb"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"],"02331260bb246364779cb6f04919ca47900d01bb":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["a45bec74b98f6fc05f52770cfb425739e6563960","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}