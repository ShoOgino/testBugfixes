{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","sourceNew":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.valueSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.valueSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","sourceNew":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.valueSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n        dir.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.valueSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.valueSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n        dir.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.valueSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n        dir.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9eae2a56dc810a17cf807d831f720dec931a03de":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9eae2a56dc810a17cf807d831f720dec931a03de","0837ab0472feecb3a54260729d845f839e1cbd72"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["9eae2a56dc810a17cf807d831f720dec931a03de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"9eae2a56dc810a17cf807d831f720dec931a03de":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["9eae2a56dc810a17cf807d831f720dec931a03de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}