{"path":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","sourceNew":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    for (int d =0; d<air.maxDoc(); d++) {\n      assertEquals(air.isDeleted(d), tir.isDeleted(d));\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","sourceOld":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    for (int d =0; d<air.maxDoc(); d++) {\n      assertEquals(air.isDeleted(d), tir.isDeleted(d));\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","sourceNew":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    final Bits aDelDocs = MultiFields.getDeletedDocs(air);\n    final Bits tDelDocs = MultiFields.getDeletedDocs(tir);\n    assertTrue((aDelDocs != null && tDelDocs != null) || \n               (aDelDocs == null && tDelDocs == null));\n    if (aDelDocs != null) {\n      for (int d =0; d<air.maxDoc(); d++) {\n        assertEquals(aDelDocs.get(d), tDelDocs.get(d));\n      }\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","sourceOld":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    for (int d =0; d<air.maxDoc(); d++) {\n      assertEquals(air.isDeleted(d), tir.isDeleted(d));\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","bugFix":["c41356c8a19fd7493940c7a1d798ede2fe03ddf8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","sourceNew":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    final Bits aDelDocs = MultiFields.getDeletedDocs(air);\n    final Bits tDelDocs = MultiFields.getDeletedDocs(tir);\n    assertTrue((aDelDocs != null && tDelDocs != null) || \n               (aDelDocs == null && tDelDocs == null));\n    if (aDelDocs != null) {\n      for (int d =0; d<air.maxDoc(); d++) {\n        assertEquals(aDelDocs.get(d), tDelDocs.get(d));\n      }\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","sourceOld":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    for (int d =0; d<air.maxDoc(); d++) {\n      assertEquals(air.isDeleted(d), tir.isDeleted(d));\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","sourceNew":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    final Bits aLiveDocs = MultiFields.getLiveDocs(air);\n    final Bits tLiveDocs = MultiFields.getLiveDocs(tir);\n    assertTrue((aLiveDocs != null && tLiveDocs != null) || \n               (aLiveDocs == null && tLiveDocs == null));\n    if (aLiveDocs != null) {\n      for (int d =0; d<air.maxDoc(); d++) {\n        assertEquals(aLiveDocs.get(d), tLiveDocs.get(d));\n      }\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","sourceOld":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    final Bits aDelDocs = MultiFields.getDeletedDocs(air);\n    final Bits tDelDocs = MultiFields.getDeletedDocs(tir);\n    assertTrue((aDelDocs != null && tDelDocs != null) || \n               (aDelDocs == null && tDelDocs == null));\n    if (aDelDocs != null) {\n      for (int d =0; d<air.maxDoc(); d++) {\n        assertEquals(aDelDocs.get(d), tDelDocs.get(d));\n      }\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","sourceNew":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    final Bits aLiveDocs = MultiFields.getLiveDocs(air);\n    final Bits tLiveDocs = MultiFields.getLiveDocs(tir);\n    assertTrue((aLiveDocs != null && tLiveDocs != null) || \n               (aLiveDocs == null && tLiveDocs == null));\n    if (aLiveDocs != null) {\n      for (int d =0; d<air.maxDoc(); d++) {\n        assertEquals(aLiveDocs.get(d), tLiveDocs.get(d));\n      }\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","sourceOld":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    final Bits aDelDocs = MultiFields.getDeletedDocs(air);\n    final Bits tDelDocs = MultiFields.getDeletedDocs(tir);\n    assertTrue((aDelDocs != null && tDelDocs != null) || \n               (aDelDocs == null && tDelDocs == null));\n    if (aDelDocs != null) {\n      for (int d =0; d<air.maxDoc(); d++) {\n        assertEquals(aDelDocs.get(d), tDelDocs.get(d));\n      }\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","sourceNew":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    final Bits aLiveDocs = MultiFields.getLiveDocs(air);\n    final Bits tLiveDocs = MultiFields.getLiveDocs(tir);\n    assertTrue((aLiveDocs != null && tLiveDocs != null) || \n               (aLiveDocs == null && tLiveDocs == null));\n    if (aLiveDocs != null) {\n      for (int d =0; d<air.maxDoc(); d++) {\n        assertEquals(aLiveDocs.get(d), tLiveDocs.get(d));\n      }\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","sourceOld":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    final Bits aDelDocs = MultiFields.getDeletedDocs(air);\n    final Bits tDelDocs = MultiFields.getDeletedDocs(tir);\n    assertTrue((aDelDocs != null && tDelDocs != null) || \n               (aDelDocs == null && tDelDocs == null));\n    if (aDelDocs != null) {\n      for (int d =0; d<air.maxDoc(); d++) {\n        assertEquals(aDelDocs.get(d), tDelDocs.get(d));\n      }\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","sourceNew":null,"sourceOld":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    final Bits aLiveDocs = MultiFields.getLiveDocs(air);\n    final Bits tLiveDocs = MultiFields.getLiveDocs(tir);\n    assertTrue((aLiveDocs != null && tLiveDocs != null) || \n               (aLiveDocs == null && tLiveDocs == null));\n    if (aLiveDocs != null) {\n      for (int d =0; d<air.maxDoc(); d++) {\n        assertEquals(aLiveDocs.get(d), tLiveDocs.get(d));\n      }\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["406e7055a3e99d3fa6ce49a555a51dd18b321806","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["406e7055a3e99d3fa6ce49a555a51dd18b321806","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["3cc749c053615f5871f3b95715fe292f34e70a53","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["406e7055a3e99d3fa6ce49a555a51dd18b321806","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}