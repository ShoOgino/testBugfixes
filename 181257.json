{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#computeFullUrl(URL,String).mjava","commits":[{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#computeFullUrl(URL,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the full URL based on a base url and a possibly relative link found\n   * in the href param of an HTML anchor.\n   * @param baseUrl the base url from where the link was found\n   * @param link the absolute or relative link\n   * @return the string version of the full URL\n   */\n  protected String computeFullUrl(URL baseUrl, String link) {\n    if(link == null || link.length() == 0) {\n      return null;\n    }\n    if(!link.startsWith(\"http\")) {\n      if(link.startsWith(\"/\")) {\n        link = baseUrl.getProtocol() + \"://\" + baseUrl.getAuthority() + link;\n      } else {\n        if(link.contains(\":\")) {\n          return null; // Skip non-relative URLs\n        }\n        String path = baseUrl.getPath();\n        if(!path.endsWith(\"/\")) {\n          int sep = path.lastIndexOf(\"/\");\n          String file = path.substring(sep+1);\n          if(file.contains(\".\") || file.contains(\"?\"))\n            path = path.substring(0,sep);\n        }\n        link = baseUrl.getProtocol() + \"://\" + baseUrl.getAuthority() + path + \"/\" + link;\n      }\n    }\n    link = normalizeUrlEnding(link);\n    String l = link.toLowerCase(Locale.ROOT);\n    // Simple brute force skip images\n    if(l.endsWith(\".jpg\") || l.endsWith(\".jpeg\") || l.endsWith(\".png\") || l.endsWith(\".gif\")) {\n      return null; // Skip images\n    }\n    return link;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#computeFullUrl(URL,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the full URL based on a base url and a possibly relative link found\n   * in the href param of an HTML anchor.\n   * @param baseUrl the base url from where the link was found\n   * @param link the absolute or relative link\n   * @return the string version of the full URL\n   */\n  protected String computeFullUrl(URL baseUrl, String link) {\n    if(link == null || link.length() == 0) {\n      return null;\n    }\n    if(!link.startsWith(\"http\")) {\n      if(link.startsWith(\"/\")) {\n        link = baseUrl.getProtocol() + \"://\" + baseUrl.getAuthority() + link;\n      } else {\n        if(link.contains(\":\")) {\n          return null; // Skip non-relative URLs\n        }\n        String path = baseUrl.getPath();\n        if(!path.endsWith(\"/\")) {\n          int sep = path.lastIndexOf(\"/\");\n          String file = path.substring(sep+1);\n          if(file.contains(\".\") || file.contains(\"?\"))\n            path = path.substring(0,sep);\n        }\n        link = baseUrl.getProtocol() + \"://\" + baseUrl.getAuthority() + path + \"/\" + link;\n      }\n    }\n    link = normalizeUrlEnding(link);\n    String l = link.toLowerCase(Locale.ROOT);\n    // Simple brute force skip images\n    if(l.endsWith(\".jpg\") || l.endsWith(\".jpeg\") || l.endsWith(\".png\") || l.endsWith(\".gif\")) {\n      return null; // Skip images\n    }\n    return link;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#computeFullUrl(URL,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the full URL based on a base url and a possibly relative link found\n   * in the href param of an HTML anchor.\n   * @param baseUrl the base url from where the link was found\n   * @param link the absolute or relative link\n   * @return the string version of the full URL\n   */\n  protected String computeFullUrl(URL baseUrl, String link) {\n    if(link == null || link.length() == 0) {\n      return null;\n    }\n    if(!link.startsWith(\"http\")) {\n      if(link.startsWith(\"/\")) {\n        link = baseUrl.getProtocol() + \"://\" + baseUrl.getAuthority() + link;\n      } else {\n        if(link.contains(\":\")) {\n          return null; // Skip non-relative URLs\n        }\n        String path = baseUrl.getPath();\n        if(!path.endsWith(\"/\")) {\n          int sep = path.lastIndexOf(\"/\");\n          String file = path.substring(sep+1);\n          if(file.contains(\".\") || file.contains(\"?\"))\n            path = path.substring(0,sep);\n        }\n        link = baseUrl.getProtocol() + \"://\" + baseUrl.getAuthority() + path + \"/\" + link;\n      }\n    }\n    link = normalizeUrlEnding(link);\n    String l = link.toLowerCase(Locale.ROOT);\n    // Simple brute force skip images\n    if(l.endsWith(\".jpg\") || l.endsWith(\".jpeg\") || l.endsWith(\".png\") || l.endsWith(\".gif\")) {\n      return null; // Skip images\n    }\n    return link;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2c3a504730329ae644b009dee43024116605d47"]},"commit2Childs":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}