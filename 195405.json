{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#dumpClusterState(boolean).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#dumpClusterState(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#dumpClusterState(boolean).mjava","sourceNew":"  public String dumpClusterState(boolean withCollections) throws Exception {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"#######################################\\n\");\n    sb.append(\"############ CLUSTER STATE ############\\n\");\n    sb.append(\"#######################################\\n\");\n    sb.append(\"## Live nodes:\\t\\t\" + getLiveNodesSet().size() + \"\\n\");\n    int emptyNodes = 0;\n    int maxReplicas = 0;\n    int minReplicas = Integer.MAX_VALUE;\n    Map<String, Map<Replica.State, AtomicInteger>> replicaStates = new TreeMap<>();\n    int numReplicas = 0;\n    for (String node : getLiveNodesSet().get()) {\n      List<ReplicaInfo> replicas = getSimClusterStateProvider().simGetReplicaInfos(node);\n      numReplicas += replicas.size();\n      if (replicas.size() > maxReplicas) {\n        maxReplicas = replicas.size();\n      }\n      if (minReplicas > replicas.size()) {\n        minReplicas = replicas.size();\n      }\n      for (ReplicaInfo ri : replicas) {\n        replicaStates.computeIfAbsent(ri.getCollection(), c -> new TreeMap<>())\n            .computeIfAbsent(ri.getState(), s -> new AtomicInteger())\n            .incrementAndGet();\n      }\n      if (replicas.isEmpty()) {\n        emptyNodes++;\n      }\n    }\n    if (minReplicas == Integer.MAX_VALUE) {\n      minReplicas = 0;\n    }\n    sb.append(\"## Empty nodes:\\t\" + emptyNodes + \"\\n\");\n    Set<String> deadNodes = getSimNodeStateProvider().simGetDeadNodes();\n    sb.append(\"## Dead nodes:\\t\\t\" + deadNodes.size() + \"\\n\");\n    deadNodes.forEach(n -> sb.append(\"##\\t\\t\" + n + \"\\n\"));\n    sb.append(\"## Collections:\\n\");\n      clusterStateProvider.simGetCollectionStats().forEach((coll, stats) -> {\n        sb.append(\"##  * \").append(coll).append('\\n');\n        stats.forEach((k, v) -> {\n          sb.append(\"##    \" + k + \"\\t\" + v + \"\\n\");\n        });\n      });\n    if (withCollections) {\n      ClusterState state = clusterStateProvider.getClusterState();\n      state.forEachCollection(coll -> sb.append(coll.toString() + \"\\n\"));\n    }\n    sb.append(\"## Max replicas per node:\\t\" + maxReplicas + \"\\n\");\n    sb.append(\"## Min replicas per node:\\t\" + minReplicas + \"\\n\");\n    sb.append(\"## Total replicas:\\t\\t\" + numReplicas + \"\\n\");\n    replicaStates.forEach((c, map) -> {\n      AtomicInteger repCnt = new AtomicInteger();\n      map.forEach((s, cnt) -> repCnt.addAndGet(cnt.get()));\n      sb.append(\"## * \" + c + \"\\t\\t\" + repCnt.get() + \"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \" + String.format(Locale.ROOT, \"%-12s  %4d\", s, cnt.get()) + \"\\n\"));\n    });\n    sb.append(\"######### Solr op counts ##########\\n\");\n    simGetOpCounts().forEach((k, cnt) -> sb.append(\"##\\t\\t- \" + String.format(Locale.ROOT, \"%-14s  %4d\", k, cnt.get()) + \"\\n\"));\n    sb.append(\"######### Autoscaling event counts ###########\\n\");\n    Map<String, Map<String, AtomicInteger>> counts = simGetEventCounts();\n    counts.forEach((trigger, map) -> {\n      sb.append(\"## * Trigger: \" + trigger + \"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \" + String.format(Locale.ROOT, \"%-11s  %4d\", s, cnt.get()) + \"\\n\"));\n    });\n    return sb.toString();\n  }\n\n","sourceOld":"  public String dumpClusterState(boolean withCollections) throws Exception {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"#######################################\\n\");\n    sb.append(\"############ CLUSTER STATE ############\\n\");\n    sb.append(\"#######################################\\n\");\n    sb.append(\"## Live nodes:\\t\\t\" + getLiveNodesSet().size() + \"\\n\");\n    int emptyNodes = 0;\n    int maxReplicas = 0;\n    int minReplicas = Integer.MAX_VALUE;\n    Map<String, Map<Replica.State, AtomicInteger>> replicaStates = new TreeMap<>();\n    int numReplicas = 0;\n    for (String node : getLiveNodesSet().get()) {\n      List<ReplicaInfo> replicas = getSimClusterStateProvider().simGetReplicaInfos(node);\n      numReplicas += replicas.size();\n      if (replicas.size() > maxReplicas) {\n        maxReplicas = replicas.size();\n      }\n      if (minReplicas > replicas.size()) {\n        minReplicas = replicas.size();\n      }\n      for (ReplicaInfo ri : replicas) {\n        replicaStates.computeIfAbsent(ri.getCollection(), c -> new TreeMap<>())\n            .computeIfAbsent(ri.getState(), s -> new AtomicInteger())\n            .incrementAndGet();\n      }\n      if (replicas.isEmpty()) {\n        emptyNodes++;\n      }\n    }\n    if (minReplicas == Integer.MAX_VALUE) {\n      minReplicas = 0;\n    }\n    sb.append(\"## Empty nodes:\\t\" + emptyNodes + \"\\n\");\n    Set<String> deadNodes = getSimNodeStateProvider().simGetDeadNodes();\n    sb.append(\"## Dead nodes:\\t\\t\" + deadNodes.size() + \"\\n\");\n    deadNodes.forEach(n -> sb.append(\"##\\t\\t\" + n + \"\\n\"));\n    sb.append(\"## Collections:\\n\");\n      clusterStateProvider.simGetCollectionStats().forEach((coll, stats) -> {\n        sb.append(\"##  * \").append(coll).append('\\n');\n        stats.forEach((k, v) -> {\n          sb.append(\"##    \" + k + \"\\t\" + v + \"\\n\");\n        });\n      });\n    if (withCollections) {\n      ClusterState state = clusterStateProvider.getClusterState();\n      state.forEachCollection(coll -> sb.append(coll.toString() + \"\\n\"));\n    }\n    sb.append(\"## Max replicas per node:\\t\" + maxReplicas + \"\\n\");\n    sb.append(\"## Min replicas per node:\\t\" + minReplicas + \"\\n\");\n    sb.append(\"## Total replicas:\\t\\t\" + numReplicas + \"\\n\");\n    replicaStates.forEach((c, map) -> {\n      AtomicInteger repCnt = new AtomicInteger();\n      map.forEach((s, cnt) -> repCnt.addAndGet(cnt.get()));\n      sb.append(\"## * \" + c + \"\\t\\t\" + repCnt.get() + \"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \" + String.format(Locale.ROOT, \"%-12s  %4d\", s, cnt.get()) + \"\\n\"));\n    });\n    sb.append(\"######### Solr op counts ##########\\n\");\n    simGetOpCounts().forEach((k, cnt) -> sb.append(\"##\\t\\t- \" + String.format(Locale.ROOT, \"%-14s  %4d\", k, cnt.get()) + \"\\n\"));\n    sb.append(\"######### Autoscaling event counts ###########\\n\");\n    Map<String, Map<String, AtomicInteger>> counts = simGetEventCounts();\n    counts.forEach((trigger, map) -> {\n      sb.append(\"## * Trigger: \" + trigger + \"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \" + String.format(Locale.ROOT, \"%-11s  %4d\", s, cnt.get()) + \"\\n\"));\n    });\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#dumpClusterState(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#dumpClusterState(boolean).mjava","sourceNew":"  public String dumpClusterState(boolean withCollections) throws Exception {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"#######################################\\n\");\n    sb.append(\"############ CLUSTER STATE ############\\n\");\n    sb.append(\"#######################################\\n\");\n    sb.append(\"## Live nodes:\\t\\t\").append(getLiveNodesSet().size()).append(\"\\n\");\n    int emptyNodes = 0;\n    int maxReplicas = 0;\n    int minReplicas = Integer.MAX_VALUE;\n    Map<String, Map<Replica.State, AtomicInteger>> replicaStates = new TreeMap<>();\n    int numReplicas = 0;\n    for (String node : getLiveNodesSet().get()) {\n      List<ReplicaInfo> replicas = getSimClusterStateProvider().simGetReplicaInfos(node);\n      numReplicas += replicas.size();\n      if (replicas.size() > maxReplicas) {\n        maxReplicas = replicas.size();\n      }\n      if (minReplicas > replicas.size()) {\n        minReplicas = replicas.size();\n      }\n      for (ReplicaInfo ri : replicas) {\n        replicaStates.computeIfAbsent(ri.getCollection(), c -> new TreeMap<>())\n            .computeIfAbsent(ri.getState(), s -> new AtomicInteger())\n            .incrementAndGet();\n      }\n      if (replicas.isEmpty()) {\n        emptyNodes++;\n      }\n    }\n    if (minReplicas == Integer.MAX_VALUE) {\n      minReplicas = 0;\n    }\n    sb.append(\"## Empty nodes:\\t\").append(emptyNodes).append(\"\\n\");\n    Set<String> deadNodes = getSimNodeStateProvider().simGetDeadNodes();\n    sb.append(\"## Dead nodes:\\t\\t\").append(deadNodes.size()).append(\"\\n\");\n    deadNodes.forEach(n -> sb.append(\"##\\t\\t\").append(n).append(\"\\n\"));\n    sb.append(\"## Collections:\\n\");\n      clusterStateProvider.simGetCollectionStats().forEach((coll, stats) -> {\n        sb.append(\"##  * \").append(coll).append('\\n');\n        stats.forEach((k, v) -> {\n          sb.append(\"##    \").append(k).append(\"\\t\").append(v).append(\"\\n\");\n        });\n      });\n    if (withCollections) {\n      ClusterState state = clusterStateProvider.getClusterState();\n      state.forEachCollection(coll -> sb.append(coll.toString()).append(\"\\n\"));\n    }\n    sb.append(\"## Max replicas per node:\\t\").append(maxReplicas).append(\"\\n\");\n    sb.append(\"## Min replicas per node:\\t\").append(minReplicas).append(\"\\n\");\n    sb.append(\"## Total replicas:\\t\\t\").append(numReplicas).append(\"\\n\");\n    replicaStates.forEach((c, map) -> {\n      AtomicInteger repCnt = new AtomicInteger();\n      map.forEach((s, cnt) -> repCnt.addAndGet(cnt.get()));\n      sb.append(\"## * \").append(c).append(\"\\t\\t\").append(repCnt.get()).append(\"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-12s  %4d\", s, cnt.get())).append(\"\\n\"));\n    });\n    sb.append(\"######### Solr op counts ##########\\n\");\n    simGetOpCounts().forEach((k, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-14s  %4d\", k, cnt.get())).append(\"\\n\"));\n    sb.append(\"######### Autoscaling event counts ###########\\n\");\n    Map<String, Map<String, AtomicInteger>> counts = simGetEventCounts();\n    counts.forEach((trigger, map) -> {\n      sb.append(\"## * Trigger: \").append(trigger).append(\"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-11s  %4d\", s, cnt.get())).append(\"\\n\"));\n    });\n    return sb.toString();\n  }\n\n","sourceOld":"  public String dumpClusterState(boolean withCollections) throws Exception {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"#######################################\\n\");\n    sb.append(\"############ CLUSTER STATE ############\\n\");\n    sb.append(\"#######################################\\n\");\n    sb.append(\"## Live nodes:\\t\\t\" + getLiveNodesSet().size() + \"\\n\");\n    int emptyNodes = 0;\n    int maxReplicas = 0;\n    int minReplicas = Integer.MAX_VALUE;\n    Map<String, Map<Replica.State, AtomicInteger>> replicaStates = new TreeMap<>();\n    int numReplicas = 0;\n    for (String node : getLiveNodesSet().get()) {\n      List<ReplicaInfo> replicas = getSimClusterStateProvider().simGetReplicaInfos(node);\n      numReplicas += replicas.size();\n      if (replicas.size() > maxReplicas) {\n        maxReplicas = replicas.size();\n      }\n      if (minReplicas > replicas.size()) {\n        minReplicas = replicas.size();\n      }\n      for (ReplicaInfo ri : replicas) {\n        replicaStates.computeIfAbsent(ri.getCollection(), c -> new TreeMap<>())\n            .computeIfAbsent(ri.getState(), s -> new AtomicInteger())\n            .incrementAndGet();\n      }\n      if (replicas.isEmpty()) {\n        emptyNodes++;\n      }\n    }\n    if (minReplicas == Integer.MAX_VALUE) {\n      minReplicas = 0;\n    }\n    sb.append(\"## Empty nodes:\\t\" + emptyNodes + \"\\n\");\n    Set<String> deadNodes = getSimNodeStateProvider().simGetDeadNodes();\n    sb.append(\"## Dead nodes:\\t\\t\" + deadNodes.size() + \"\\n\");\n    deadNodes.forEach(n -> sb.append(\"##\\t\\t\" + n + \"\\n\"));\n    sb.append(\"## Collections:\\n\");\n      clusterStateProvider.simGetCollectionStats().forEach((coll, stats) -> {\n        sb.append(\"##  * \").append(coll).append('\\n');\n        stats.forEach((k, v) -> {\n          sb.append(\"##    \" + k + \"\\t\" + v + \"\\n\");\n        });\n      });\n    if (withCollections) {\n      ClusterState state = clusterStateProvider.getClusterState();\n      state.forEachCollection(coll -> sb.append(coll.toString() + \"\\n\"));\n    }\n    sb.append(\"## Max replicas per node:\\t\" + maxReplicas + \"\\n\");\n    sb.append(\"## Min replicas per node:\\t\" + minReplicas + \"\\n\");\n    sb.append(\"## Total replicas:\\t\\t\" + numReplicas + \"\\n\");\n    replicaStates.forEach((c, map) -> {\n      AtomicInteger repCnt = new AtomicInteger();\n      map.forEach((s, cnt) -> repCnt.addAndGet(cnt.get()));\n      sb.append(\"## * \" + c + \"\\t\\t\" + repCnt.get() + \"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \" + String.format(Locale.ROOT, \"%-12s  %4d\", s, cnt.get()) + \"\\n\"));\n    });\n    sb.append(\"######### Solr op counts ##########\\n\");\n    simGetOpCounts().forEach((k, cnt) -> sb.append(\"##\\t\\t- \" + String.format(Locale.ROOT, \"%-14s  %4d\", k, cnt.get()) + \"\\n\"));\n    sb.append(\"######### Autoscaling event counts ###########\\n\");\n    Map<String, Map<String, AtomicInteger>> counts = simGetEventCounts();\n    counts.forEach((trigger, map) -> {\n      sb.append(\"## * Trigger: \" + trigger + \"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \" + String.format(Locale.ROOT, \"%-11s  %4d\", s, cnt.get()) + \"\\n\"));\n    });\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#dumpClusterState(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#dumpClusterState(boolean).mjava","sourceNew":"  public String dumpClusterState(boolean withCollections) throws Exception {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"#######################################\\n\");\n    sb.append(\"############ CLUSTER STATE ############\\n\");\n    sb.append(\"#######################################\\n\");\n    sb.append(\"## Live nodes:\\t\\t\").append(getLiveNodesSet().size()).append(\"\\n\");\n    int emptyNodes = 0;\n    int maxReplicas = 0;\n    int minReplicas = Integer.MAX_VALUE;\n    Map<String, Map<Replica.State, AtomicInteger>> replicaStates = new TreeMap<>();\n    int numReplicas = 0;\n    for (String node : getLiveNodesSet().get()) {\n      List<Replica> replicas = getSimClusterStateProvider().simGetReplicaInfos(node);\n      numReplicas += replicas.size();\n      if (replicas.size() > maxReplicas) {\n        maxReplicas = replicas.size();\n      }\n      if (minReplicas > replicas.size()) {\n        minReplicas = replicas.size();\n      }\n      for (Replica ri : replicas) {\n        replicaStates.computeIfAbsent(ri.getCollection(), c -> new TreeMap<>())\n            .computeIfAbsent(ri.getState(), s -> new AtomicInteger())\n            .incrementAndGet();\n      }\n      if (replicas.isEmpty()) {\n        emptyNodes++;\n      }\n    }\n    if (minReplicas == Integer.MAX_VALUE) {\n      minReplicas = 0;\n    }\n    sb.append(\"## Empty nodes:\\t\").append(emptyNodes).append(\"\\n\");\n    Set<String> deadNodes = getSimNodeStateProvider().simGetDeadNodes();\n    sb.append(\"## Dead nodes:\\t\\t\").append(deadNodes.size()).append(\"\\n\");\n    deadNodes.forEach(n -> sb.append(\"##\\t\\t\").append(n).append(\"\\n\"));\n    sb.append(\"## Collections:\\n\");\n      clusterStateProvider.simGetCollectionStats().forEach((coll, stats) -> {\n        sb.append(\"##  * \").append(coll).append('\\n');\n        stats.forEach((k, v) -> {\n          sb.append(\"##    \").append(k).append(\"\\t\").append(v).append(\"\\n\");\n        });\n      });\n    if (withCollections) {\n      ClusterState state = clusterStateProvider.getClusterState();\n      state.forEachCollection(coll -> sb.append(coll.toString()).append(\"\\n\"));\n    }\n    sb.append(\"## Max replicas per node:\\t\").append(maxReplicas).append(\"\\n\");\n    sb.append(\"## Min replicas per node:\\t\").append(minReplicas).append(\"\\n\");\n    sb.append(\"## Total replicas:\\t\\t\").append(numReplicas).append(\"\\n\");\n    replicaStates.forEach((c, map) -> {\n      AtomicInteger repCnt = new AtomicInteger();\n      map.forEach((s, cnt) -> repCnt.addAndGet(cnt.get()));\n      sb.append(\"## * \").append(c).append(\"\\t\\t\").append(repCnt.get()).append(\"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-12s  %4d\", s, cnt.get())).append(\"\\n\"));\n    });\n    sb.append(\"######### Solr op counts ##########\\n\");\n    simGetOpCounts().forEach((k, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-14s  %4d\", k, cnt.get())).append(\"\\n\"));\n    sb.append(\"######### Autoscaling event counts ###########\\n\");\n    Map<String, Map<String, AtomicInteger>> counts = simGetEventCounts();\n    counts.forEach((trigger, map) -> {\n      sb.append(\"## * Trigger: \").append(trigger).append(\"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-11s  %4d\", s, cnt.get())).append(\"\\n\"));\n    });\n    return sb.toString();\n  }\n\n","sourceOld":"  public String dumpClusterState(boolean withCollections) throws Exception {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"#######################################\\n\");\n    sb.append(\"############ CLUSTER STATE ############\\n\");\n    sb.append(\"#######################################\\n\");\n    sb.append(\"## Live nodes:\\t\\t\").append(getLiveNodesSet().size()).append(\"\\n\");\n    int emptyNodes = 0;\n    int maxReplicas = 0;\n    int minReplicas = Integer.MAX_VALUE;\n    Map<String, Map<Replica.State, AtomicInteger>> replicaStates = new TreeMap<>();\n    int numReplicas = 0;\n    for (String node : getLiveNodesSet().get()) {\n      List<ReplicaInfo> replicas = getSimClusterStateProvider().simGetReplicaInfos(node);\n      numReplicas += replicas.size();\n      if (replicas.size() > maxReplicas) {\n        maxReplicas = replicas.size();\n      }\n      if (minReplicas > replicas.size()) {\n        minReplicas = replicas.size();\n      }\n      for (ReplicaInfo ri : replicas) {\n        replicaStates.computeIfAbsent(ri.getCollection(), c -> new TreeMap<>())\n            .computeIfAbsent(ri.getState(), s -> new AtomicInteger())\n            .incrementAndGet();\n      }\n      if (replicas.isEmpty()) {\n        emptyNodes++;\n      }\n    }\n    if (minReplicas == Integer.MAX_VALUE) {\n      minReplicas = 0;\n    }\n    sb.append(\"## Empty nodes:\\t\").append(emptyNodes).append(\"\\n\");\n    Set<String> deadNodes = getSimNodeStateProvider().simGetDeadNodes();\n    sb.append(\"## Dead nodes:\\t\\t\").append(deadNodes.size()).append(\"\\n\");\n    deadNodes.forEach(n -> sb.append(\"##\\t\\t\").append(n).append(\"\\n\"));\n    sb.append(\"## Collections:\\n\");\n      clusterStateProvider.simGetCollectionStats().forEach((coll, stats) -> {\n        sb.append(\"##  * \").append(coll).append('\\n');\n        stats.forEach((k, v) -> {\n          sb.append(\"##    \").append(k).append(\"\\t\").append(v).append(\"\\n\");\n        });\n      });\n    if (withCollections) {\n      ClusterState state = clusterStateProvider.getClusterState();\n      state.forEachCollection(coll -> sb.append(coll.toString()).append(\"\\n\"));\n    }\n    sb.append(\"## Max replicas per node:\\t\").append(maxReplicas).append(\"\\n\");\n    sb.append(\"## Min replicas per node:\\t\").append(minReplicas).append(\"\\n\");\n    sb.append(\"## Total replicas:\\t\\t\").append(numReplicas).append(\"\\n\");\n    replicaStates.forEach((c, map) -> {\n      AtomicInteger repCnt = new AtomicInteger();\n      map.forEach((s, cnt) -> repCnt.addAndGet(cnt.get()));\n      sb.append(\"## * \").append(c).append(\"\\t\\t\").append(repCnt.get()).append(\"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-12s  %4d\", s, cnt.get())).append(\"\\n\"));\n    });\n    sb.append(\"######### Solr op counts ##########\\n\");\n    simGetOpCounts().forEach((k, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-14s  %4d\", k, cnt.get())).append(\"\\n\"));\n    sb.append(\"######### Autoscaling event counts ###########\\n\");\n    Map<String, Map<String, AtomicInteger>> counts = simGetEventCounts();\n    counts.forEach((trigger, map) -> {\n      sb.append(\"## * Trigger: \").append(trigger).append(\"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-11s  %4d\", s, cnt.get())).append(\"\\n\"));\n    });\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#dumpClusterState(boolean).mjava","sourceNew":null,"sourceOld":"  public String dumpClusterState(boolean withCollections) throws Exception {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"#######################################\\n\");\n    sb.append(\"############ CLUSTER STATE ############\\n\");\n    sb.append(\"#######################################\\n\");\n    sb.append(\"## Live nodes:\\t\\t\").append(getLiveNodesSet().size()).append(\"\\n\");\n    int emptyNodes = 0;\n    int maxReplicas = 0;\n    int minReplicas = Integer.MAX_VALUE;\n    Map<String, Map<Replica.State, AtomicInteger>> replicaStates = new TreeMap<>();\n    int numReplicas = 0;\n    for (String node : getLiveNodesSet().get()) {\n      List<Replica> replicas = getSimClusterStateProvider().simGetReplicaInfos(node);\n      numReplicas += replicas.size();\n      if (replicas.size() > maxReplicas) {\n        maxReplicas = replicas.size();\n      }\n      if (minReplicas > replicas.size()) {\n        minReplicas = replicas.size();\n      }\n      for (Replica ri : replicas) {\n        replicaStates.computeIfAbsent(ri.getCollection(), c -> new TreeMap<>())\n            .computeIfAbsent(ri.getState(), s -> new AtomicInteger())\n            .incrementAndGet();\n      }\n      if (replicas.isEmpty()) {\n        emptyNodes++;\n      }\n    }\n    if (minReplicas == Integer.MAX_VALUE) {\n      minReplicas = 0;\n    }\n    sb.append(\"## Empty nodes:\\t\").append(emptyNodes).append(\"\\n\");\n    Set<String> deadNodes = getSimNodeStateProvider().simGetDeadNodes();\n    sb.append(\"## Dead nodes:\\t\\t\").append(deadNodes.size()).append(\"\\n\");\n    deadNodes.forEach(n -> sb.append(\"##\\t\\t\").append(n).append(\"\\n\"));\n    sb.append(\"## Collections:\\n\");\n      clusterStateProvider.simGetCollectionStats().forEach((coll, stats) -> {\n        sb.append(\"##  * \").append(coll).append('\\n');\n        stats.forEach((k, v) -> {\n          sb.append(\"##    \").append(k).append(\"\\t\").append(v).append(\"\\n\");\n        });\n      });\n    if (withCollections) {\n      ClusterState state = clusterStateProvider.getClusterState();\n      state.forEachCollection(coll -> sb.append(coll.toString()).append(\"\\n\"));\n    }\n    sb.append(\"## Max replicas per node:\\t\").append(maxReplicas).append(\"\\n\");\n    sb.append(\"## Min replicas per node:\\t\").append(minReplicas).append(\"\\n\");\n    sb.append(\"## Total replicas:\\t\\t\").append(numReplicas).append(\"\\n\");\n    replicaStates.forEach((c, map) -> {\n      AtomicInteger repCnt = new AtomicInteger();\n      map.forEach((s, cnt) -> repCnt.addAndGet(cnt.get()));\n      sb.append(\"## * \").append(c).append(\"\\t\\t\").append(repCnt.get()).append(\"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-12s  %4d\", s, cnt.get())).append(\"\\n\"));\n    });\n    sb.append(\"######### Solr op counts ##########\\n\");\n    simGetOpCounts().forEach((k, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-14s  %4d\", k, cnt.get())).append(\"\\n\"));\n    sb.append(\"######### Autoscaling event counts ###########\\n\");\n    Map<String, Map<String, AtomicInteger>> counts = simGetEventCounts();\n    counts.forEach((trigger, map) -> {\n      sb.append(\"## * Trigger: \").append(trigger).append(\"\\n\");\n      map.forEach((s, cnt) -> sb.append(\"##\\t\\t- \").append(String.format(Locale.ROOT, \"%-11s  %4d\", s, cnt.get())).append(\"\\n\"));\n    });\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["2ffe681f212e5073c69955b4ad22946794c84940"],"2ffe681f212e5073c69955b4ad22946794c84940":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"2ffe681f212e5073c69955b4ad22946794c84940":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["2ffe681f212e5073c69955b4ad22946794c84940"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}