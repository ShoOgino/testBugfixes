{"path":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#versionInUpdateIsAcceptable(Object[],Object[]).mjava","commits":[{"id":"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","date":1523556268,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#versionInUpdateIsAcceptable(Object[],Object[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns whether or not the versions in the command are acceptable to be indexed.\n   * If the instance is set to ignoreOldUpdates==false, it will throw a SolrException\n   * with CONFLICT in the event the version is not acceptable rather than return false.\n   *\n   * @param newUserVersions New versions in update request\n   * @param oldUserVersions Old versions currently in solr index\n   * @return True if acceptable, false if not (or will throw exception)\n   */\n  protected boolean versionInUpdateIsAcceptable(Object[] newUserVersions,\n                                                Object[] oldUserVersions) {\n\n    for (int i = 0; i < oldUserVersions.length; i++) {\n      Object oldUserVersion = oldUserVersions[i];\n      Object newUserVersion = newUserVersions[i];\n\n      if (!(oldUserVersion instanceof Comparable && newUserVersion instanceof Comparable)) {\n        throw new SolrException(BAD_REQUEST,\n            \"old version and new version are not comparable: \" +\n                oldUserVersion.getClass() + \" vs \" + newUserVersion.getClass());\n      }\n      try {\n        if (newUpdateComparePasses((Comparable) newUserVersion, (Comparable) oldUserVersion, versionFieldNames[i])) {\n          return true;\n        }\n      } catch (ClassCastException e) {\n        throw new SolrException(BAD_REQUEST,\n            \"old version and new version are not comparable: \" +\n                oldUserVersion.getClass() + \" vs \" + newUserVersion.getClass() +\n                \": \" + e.getMessage(), e);\n\n      }\n    }\n    if (ignoreOldUpdates) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Dropping update since user version is not high enough: {}; old user version={}\",\n            Arrays.toString(newUserVersions), Arrays.toString(oldUserVersions));\n      }\n      return false;\n    } else {\n      throw new SolrException(CONFLICT,\n          \"user version is not high enough: \" + Arrays.toString(newUserVersions));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#versionInUpdateIsAcceptable(Object[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#versionInUpdateIsAcceptable(Object[],Object[]).mjava","sourceNew":"  /**\n   * Returns whether or not the versions in the command are acceptable to be indexed.\n   * If the instance is set to ignoreOldUpdates==false, it will throw a SolrException\n   * with CONFLICT in the event the version is not acceptable rather than return false.\n   *\n   * @param newUserVersions New versions in update request\n   * @param oldUserVersions Old versions currently in solr index\n   * @return True if acceptable, false if not (or will throw exception)\n   */\n  protected boolean versionInUpdateIsAcceptable(Object[] newUserVersions,\n                                                Object[] oldUserVersions) {\n\n    for (int i = 0; i < oldUserVersions.length; i++) {\n      Object oldUserVersion = oldUserVersions[i];\n      Object newUserVersion = newUserVersions[i];\n\n      if (!(oldUserVersion instanceof Comparable && newUserVersion instanceof Comparable)) {\n        throw new SolrException(BAD_REQUEST,\n            \"old version and new version are not comparable: \" +\n                oldUserVersion.getClass() + \" vs \" + newUserVersion.getClass());\n      }\n      try {\n        if (newUpdateComparePasses((Comparable) newUserVersion, (Comparable) oldUserVersion, versionFieldNames[i])) {\n          return true;\n        }\n      } catch (ClassCastException e) {\n        throw new SolrException(BAD_REQUEST,\n            \"old version and new version are not comparable: \" +\n                oldUserVersion.getClass() + \" vs \" + newUserVersion.getClass() +\n                \": \" + e.getMessage(), e);\n\n      }\n    }\n    if (ignoreOldUpdates) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Dropping update since user version is not high enough: {}; old user version={}\",\n            Arrays.toString(newUserVersions), Arrays.toString(oldUserVersions)); // logok\n      }\n      return false;\n    } else {\n      throw new SolrException(CONFLICT,\n          \"user version is not high enough: \" + Arrays.toString(newUserVersions));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns whether or not the versions in the command are acceptable to be indexed.\n   * If the instance is set to ignoreOldUpdates==false, it will throw a SolrException\n   * with CONFLICT in the event the version is not acceptable rather than return false.\n   *\n   * @param newUserVersions New versions in update request\n   * @param oldUserVersions Old versions currently in solr index\n   * @return True if acceptable, false if not (or will throw exception)\n   */\n  protected boolean versionInUpdateIsAcceptable(Object[] newUserVersions,\n                                                Object[] oldUserVersions) {\n\n    for (int i = 0; i < oldUserVersions.length; i++) {\n      Object oldUserVersion = oldUserVersions[i];\n      Object newUserVersion = newUserVersions[i];\n\n      if (!(oldUserVersion instanceof Comparable && newUserVersion instanceof Comparable)) {\n        throw new SolrException(BAD_REQUEST,\n            \"old version and new version are not comparable: \" +\n                oldUserVersion.getClass() + \" vs \" + newUserVersion.getClass());\n      }\n      try {\n        if (newUpdateComparePasses((Comparable) newUserVersion, (Comparable) oldUserVersion, versionFieldNames[i])) {\n          return true;\n        }\n      } catch (ClassCastException e) {\n        throw new SolrException(BAD_REQUEST,\n            \"old version and new version are not comparable: \" +\n                oldUserVersion.getClass() + \" vs \" + newUserVersion.getClass() +\n                \": \" + e.getMessage(), e);\n\n      }\n    }\n    if (ignoreOldUpdates) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Dropping update since user version is not high enough: {}; old user version={}\",\n            Arrays.toString(newUserVersions), Arrays.toString(oldUserVersions));\n      }\n      return false;\n    } else {\n      throw new SolrException(CONFLICT,\n          \"user version is not high enough: \" + Arrays.toString(newUserVersions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#versionInUpdateIsAcceptable(Object[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#versionInUpdateIsAcceptable(Object[],Object[]).mjava","sourceNew":"  /**\n   * Returns whether or not the versions in the command are acceptable to be indexed.\n   * If the instance is set to ignoreOldUpdates==false, it will throw a SolrException\n   * with CONFLICT in the event the version is not acceptable rather than return false.\n   *\n   * @param newUserVersions New versions in update request\n   * @param oldUserVersions Old versions currently in solr index\n   * @return True if acceptable, false if not (or will throw exception)\n   */\n  protected boolean versionInUpdateIsAcceptable(Object[] newUserVersions,\n                                                Object[] oldUserVersions) {\n\n    for (int i = 0; i < oldUserVersions.length; i++) {\n      Object oldUserVersion = oldUserVersions[i];\n      Object newUserVersion = newUserVersions[i];\n\n      if (!(oldUserVersion instanceof Comparable && newUserVersion instanceof Comparable)) {\n        throw new SolrException(BAD_REQUEST,\n            \"old version and new version are not comparable: \" +\n                oldUserVersion.getClass() + \" vs \" + newUserVersion.getClass());\n      }\n      try {\n        if (newUpdateComparePasses((Comparable) newUserVersion, (Comparable) oldUserVersion, versionFieldNames[i])) {\n          return true;\n        }\n      } catch (ClassCastException e) {\n        throw new SolrException(BAD_REQUEST,\n            \"old version and new version are not comparable: \" +\n                oldUserVersion.getClass() + \" vs \" + newUserVersion.getClass() +\n                \": \" + e.getMessage(), e);\n\n      }\n    }\n    if (ignoreOldUpdates) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Dropping update since user version is not high enough: {}; old user version={}\",\n            Arrays.toString(newUserVersions), Arrays.toString(oldUserVersions));\n      }\n      return false;\n    } else {\n      throw new SolrException(CONFLICT,\n          \"user version is not high enough: \" + Arrays.toString(newUserVersions));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns whether or not the versions in the command are acceptable to be indexed.\n   * If the instance is set to ignoreOldUpdates==false, it will throw a SolrException\n   * with CONFLICT in the event the version is not acceptable rather than return false.\n   *\n   * @param newUserVersions New versions in update request\n   * @param oldUserVersions Old versions currently in solr index\n   * @return True if acceptable, false if not (or will throw exception)\n   */\n  protected boolean versionInUpdateIsAcceptable(Object[] newUserVersions,\n                                                Object[] oldUserVersions) {\n\n    for (int i = 0; i < oldUserVersions.length; i++) {\n      Object oldUserVersion = oldUserVersions[i];\n      Object newUserVersion = newUserVersions[i];\n\n      if (!(oldUserVersion instanceof Comparable && newUserVersion instanceof Comparable)) {\n        throw new SolrException(BAD_REQUEST,\n            \"old version and new version are not comparable: \" +\n                oldUserVersion.getClass() + \" vs \" + newUserVersion.getClass());\n      }\n      try {\n        if (newUpdateComparePasses((Comparable) newUserVersion, (Comparable) oldUserVersion, versionFieldNames[i])) {\n          return true;\n        }\n      } catch (ClassCastException e) {\n        throw new SolrException(BAD_REQUEST,\n            \"old version and new version are not comparable: \" +\n                oldUserVersion.getClass() + \" vs \" + newUserVersion.getClass() +\n                \": \" + e.getMessage(), e);\n\n      }\n    }\n    if (ignoreOldUpdates) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Dropping update since user version is not high enough: {}; old user version={}\",\n            Arrays.toString(newUserVersions), Arrays.toString(oldUserVersions)); // logok\n      }\n      return false;\n    } else {\n      throw new SolrException(CONFLICT,\n          \"user version is not high enough: \" + Arrays.toString(newUserVersions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4abf821a41a2fdca2a1dea148999931d22e20529":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["4abf821a41a2fdca2a1dea148999931d22e20529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"]},"commit2Childs":{"4abf821a41a2fdca2a1dea148999931d22e20529":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}