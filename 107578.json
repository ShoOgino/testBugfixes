{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument],Analyzer).mjava","commits":[{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument],Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents, analyzed using the\n   * provided analyzer, with sequentially assigned document\n   * IDs, such that an external reader will see all or none\n   * of the documents. \n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs, Analyzer analyzer) throws IOException {\n    updateDocuments(null, docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents, analyzed using the\n   * provided analyzer, with sequentially assigned document\n   * IDs, such that an external reader will see all or none\n   * of the documents. \n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws IOException {\n    updateDocuments(null, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument],Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents, analyzed using the\n   * provided analyzer, with sequentially assigned document\n   * IDs, such that an external reader will see all or none\n   * of the documents. \n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs, Analyzer analyzer) throws IOException {\n    updateDocuments(null, docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents, analyzed using the\n   * provided analyzer, with sequentially assigned document\n   * IDs, such that an external reader will see all or none\n   * of the documents. \n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer) throws IOException {\n    updateDocuments(null, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument],Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Atomically adds a block of documents, analyzed using the\n   * provided analyzer, with sequentially assigned document\n   * IDs, such that an external reader will see all or none\n   * of the documents. \n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs, Analyzer analyzer) throws IOException {\n    updateDocuments(null, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}