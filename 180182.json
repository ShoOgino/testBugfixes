{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternTokenizer#testBasic().mjava","commits":[{"id":"5ddee54b1c3df60fd6198e3aa64c78038a1be8df","date":1487008231,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternTokenizer#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // pattern        input                    output\n      { \":\",           \"boo:and:foo\",           \": :\" },\n      { qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n    };\n    \n    for(String[] test : tests) {     \n      TokenStream stream = new SimplePatternTokenizer(test[0]);\n      ((Tokenizer)stream).setReader(new StringReader(test[1]));\n      String out = tsToString(stream);\n\n      assertEquals(\"pattern: \"+test[0]+\" with input: \"+test[1], test[2], out);\n    } \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternTokenizer#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // pattern        input                    output\n      { \":\",           \"boo:and:foo\",           \": :\" },\n      { qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n    };\n    \n    for(String[] test : tests) {     \n      TokenStream stream = new SimplePatternTokenizer(test[0]);\n      ((Tokenizer)stream).setReader(new StringReader(test[1]));\n      String out = tsToString(stream);\n\n      assertEquals(\"pattern: \"+test[0]+\" with input: \"+test[1], test[2], out);\n    } \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternTokenizer#testBasic().mjava","sourceNew":null,"sourceOld":"  public void testBasic() throws Exception  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // pattern        input                    output\n      { \":\",           \"boo:and:foo\",           \": :\" },\n      { qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n    };\n    \n    for(String[] test : tests) {     \n      TokenStream stream = new SimplePatternTokenizer(test[0]);\n      ((Tokenizer)stream).setReader(new StringReader(test[1]));\n      String out = tsToString(stream);\n\n      assertEquals(\"pattern: \"+test[0]+\" with input: \"+test[1], test[2], out);\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestSimplePatternTokenizer#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // pattern        input                    output\n      { \":\",           \"boo:and:foo\",           \": :\" },\n      { qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n    };\n    \n    for(String[] test : tests) {     \n      TokenStream stream = new SimplePatternTokenizer(test[0]);\n      ((Tokenizer)stream).setReader(new StringReader(test[1]));\n      String out = tsToString(stream);\n\n      assertEquals(\"pattern: \"+test[0]+\" with input: \"+test[1], test[2], out);\n    } \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["022a4de90e0479b604264ca9c2e134c996454ab3","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}