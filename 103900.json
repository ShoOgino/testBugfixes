{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchFile().mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              file.sync();\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              file.sync();\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              file.sync();\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              file.sync();\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(() -> {\n          try {\n            file.sync();\n          } catch (IOException e) {\n            fsyncException = e;\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              file.sync();\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      bytesDownloaded = 0;\n      try {\n        fetch();\n      } catch(Exception e) {\n        if (!aborted) {\n          SolrException.log(IndexFetcher.LOG, \"Error fetching file, doing one retry...\", e);\n          // one retry\n          fetch();\n        } else {\n          throw e;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(() -> {\n          try {\n            file.sync();\n          } catch (IOException e) {\n            fsyncException = e;\n          }\n        });\n      }\n    }\n\n","bugFix":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","3a0c04b71951333291abc7f317109a6a5957bd28","dea8e36e8c36d610840396c282a5affe3f722f4e","aab56102a66ad6123bbc7a10ec65d998b5e6117a","f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      bytesDownloaded = 0;\n      try {\n        fetch();\n      } catch(Exception e) {\n        if (!aborted) {\n          SolrException.log(IndexFetcher.log, \"Error fetching file, doing one retry...\", e);\n          // one retry\n          fetch();\n        } else {\n          throw e;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      bytesDownloaded = 0;\n      try {\n        fetch();\n      } catch(Exception e) {\n        if (!aborted) {\n          SolrException.log(IndexFetcher.LOG, \"Error fetching file, doing one retry...\", e);\n          // one retry\n          fetch();\n        } else {\n          throw e;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["3a0c04b71951333291abc7f317109a6a5957bd28"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a0c04b71951333291abc7f317109a6a5957bd28":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["ad28156288ac00b91352582904d97e6653205757"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3a0c04b71951333291abc7f317109a6a5957bd28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"3a0c04b71951333291abc7f317109a6a5957bd28":["ad28156288ac00b91352582904d97e6653205757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}