{"path":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#merge(IndexWriter,MergeTrigger).mjava","commits":[{"id":"d2178aefcd4690bd53785e9673e2c918cdb64165","date":1587583605,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#merge(IndexWriter,MergeTrigger).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"  @Override\n  public synchronized void merge(IndexWriter writer, MergeTrigger trigger) throws IOException {\n\n    assert !Thread.holdsLock(writer);\n\n    initDynamicDefaults(writer);\n\n    if (trigger == MergeTrigger.CLOSING) {\n      // Disable throttling on close:\n      targetMBPerSec = MAX_MERGE_MB_PER_SEC;\n      updateMergeThreads();\n    }\n\n    // First, quickly run through the newly proposed merges\n    // and add any orthogonal merges (ie a merge not\n    // involving segments already pending to be merged) to\n    // the queue.  If we are way behind on merging, many of\n    // these newly proposed merges will likely already be\n    // registered.\n\n    if (verbose()) {\n      message(\"now merge\");\n      message(\"  index: \" + writer.segString());\n    }\n    \n    // Iterate, pulling from the IndexWriter's queue of\n    // pending merges, until it's empty:\n    while (true) {\n\n      if (maybeStall(writer) == false) {\n        break;\n      }\n\n      OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        if (verbose()) {\n          message(\"  no more merges pending; now return\");\n        }\n        return;\n      }\n\n      boolean success = false;\n      try {\n        if (verbose()) {\n          message(\"  consider merge \" + writer.segString(merge.segments));\n        }\n\n        // OK to spawn a new merge thread to handle this\n        // merge:\n        final MergeThread newMergeThread = getMergeThread(writer, merge);\n        mergeThreads.add(newMergeThread);\n\n        updateIOThrottle(newMergeThread.merge, newMergeThread.rateLimiter);\n\n        if (verbose()) {\n          message(\"    launch new thread [\" + newMergeThread.getName() + \"]\");\n        }\n\n        newMergeThread.start();\n        updateMergeThreads();\n\n        success = true;\n      } finally {\n        if (!success) {\n          writer.mergeFinish(merge);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n    assert !Thread.holdsLock(writer);\n\n    initDynamicDefaults(writer);\n\n    if (trigger == MergeTrigger.CLOSING) {\n      // Disable throttling on close:\n      targetMBPerSec = MAX_MERGE_MB_PER_SEC;\n      updateMergeThreads();\n    }\n\n    // First, quickly run through the newly proposed merges\n    // and add any orthogonal merges (ie a merge not\n    // involving segments already pending to be merged) to\n    // the queue.  If we are way behind on merging, many of\n    // these newly proposed merges will likely already be\n    // registered.\n\n    if (verbose()) {\n      message(\"now merge\");\n      message(\"  index: \" + writer.segString());\n    }\n    \n    // Iterate, pulling from the IndexWriter's queue of\n    // pending merges, until it's empty:\n    while (true) {\n\n      if (maybeStall(writer) == false) {\n        break;\n      }\n\n      OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        if (verbose()) {\n          message(\"  no more merges pending; now return\");\n        }\n        return;\n      }\n\n      boolean success = false;\n      try {\n        if (verbose()) {\n          message(\"  consider merge \" + writer.segString(merge.segments));\n        }\n\n        // OK to spawn a new merge thread to handle this\n        // merge:\n        final MergeThread newMergeThread = getMergeThread(writer, merge);\n        mergeThreads.add(newMergeThread);\n\n        updateIOThrottle(newMergeThread.merge, newMergeThread.rateLimiter);\n\n        if (verbose()) {\n          message(\"    launch new thread [\" + newMergeThread.getName() + \"]\");\n        }\n\n        newMergeThread.start();\n        updateMergeThreads();\n\n        success = true;\n      } finally {\n        if (!success) {\n          writer.mergeFinish(merge);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#merge(MergeSource,MergeTrigger).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#merge(IndexWriter,MergeTrigger).mjava","sourceNew":"  @Override\n  public synchronized void merge(MergeSource mergeSource, MergeTrigger trigger) throws IOException {\n\n    if (trigger == MergeTrigger.CLOSING) {\n      // Disable throttling on close:\n      targetMBPerSec = MAX_MERGE_MB_PER_SEC;\n      updateMergeThreads();\n    }\n\n    // First, quickly run through the newly proposed merges\n    // and add any orthogonal merges (ie a merge not\n    // involving segments already pending to be merged) to\n    // the queue.  If we are way behind on merging, many of\n    // these newly proposed merges will likely already be\n    // registered.\n\n    if (verbose()) {\n      message(\"now merge\");\n      message(\"  index(source): \" + mergeSource.toString());\n    }\n    \n    // Iterate, pulling from the IndexWriter's queue of\n    // pending merges, until it's empty:\n    while (true) {\n\n      if (maybeStall(mergeSource) == false) {\n        break;\n      }\n\n      OneMerge merge = mergeSource.getNextMerge();\n      if (merge == null) {\n        if (verbose()) {\n          message(\"  no more merges pending; now return\");\n        }\n        return;\n      }\n\n      boolean success = false;\n      try {\n        // OK to spawn a new merge thread to handle this\n        // merge:\n        final MergeThread newMergeThread = getMergeThread(mergeSource, merge);\n        mergeThreads.add(newMergeThread);\n\n        updateIOThrottle(newMergeThread.merge, newMergeThread.rateLimiter);\n\n        if (verbose()) {\n          message(\"    launch new thread [\" + newMergeThread.getName() + \"]\");\n        }\n\n        newMergeThread.start();\n        updateMergeThreads();\n\n        success = true;\n      } finally {\n        if (!success) {\n          mergeSource.onMergeFinished(merge);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void merge(IndexWriter writer, MergeTrigger trigger) throws IOException {\n\n    assert !Thread.holdsLock(writer);\n\n    initDynamicDefaults(writer);\n\n    if (trigger == MergeTrigger.CLOSING) {\n      // Disable throttling on close:\n      targetMBPerSec = MAX_MERGE_MB_PER_SEC;\n      updateMergeThreads();\n    }\n\n    // First, quickly run through the newly proposed merges\n    // and add any orthogonal merges (ie a merge not\n    // involving segments already pending to be merged) to\n    // the queue.  If we are way behind on merging, many of\n    // these newly proposed merges will likely already be\n    // registered.\n\n    if (verbose()) {\n      message(\"now merge\");\n      message(\"  index: \" + writer.segString());\n    }\n    \n    // Iterate, pulling from the IndexWriter's queue of\n    // pending merges, until it's empty:\n    while (true) {\n\n      if (maybeStall(writer) == false) {\n        break;\n      }\n\n      OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        if (verbose()) {\n          message(\"  no more merges pending; now return\");\n        }\n        return;\n      }\n\n      boolean success = false;\n      try {\n        if (verbose()) {\n          message(\"  consider merge \" + writer.segString(merge.segments));\n        }\n\n        // OK to spawn a new merge thread to handle this\n        // merge:\n        final MergeThread newMergeThread = getMergeThread(writer, merge);\n        mergeThreads.add(newMergeThread);\n\n        updateIOThrottle(newMergeThread.merge, newMergeThread.rateLimiter);\n\n        if (verbose()) {\n          message(\"    launch new thread [\" + newMergeThread.getName() + \"]\");\n        }\n\n        newMergeThread.start();\n        updateMergeThreads();\n\n        success = true;\n      } finally {\n        if (!success) {\n          writer.mergeFinish(merge);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"d2178aefcd4690bd53785e9673e2c918cdb64165":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2178aefcd4690bd53785e9673e2c918cdb64165":["89697e7abc9807639c384eecf5a2a6eef1080426"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}