{"path":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    @Override\n    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    @Override\n    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36113efe922ae370819b20fba837a1a37d3dd2d8","date":1404234826,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0) LOG.info(\"NO children : \");\n            }\n          }\n        } while (!hasMessages);\n        return next;\n      } catch (Exception e) {\n        LOG.warn(\"Failed to read folders due to: \"+e);\n        // throw new\n        // DataImportHandlerException(DataImportHandlerException.SEVERE,\n        // \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bac5e4f5082317c9a942b1deeeb22d6700ecff7","date":1404338458,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    @Override\n    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0) LOG.info(\"NO children : \");\n            }\n          }\n        } while (!hasMessages);\n        return next;\n      } catch (Exception e) {\n        LOG.warn(\"Failed to read folders due to: \"+e);\n        // throw new\n        // DataImportHandlerException(DataImportHandlerException.SEVERE,\n        // \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd303657ee7726e12c45f9fd39b0285acf10c07","date":1405460668,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0) LOG.info(\"NO children : \");\n            }\n          }\n        } while (!hasMessages);\n        return next;\n      } catch (Exception e) {\n        LOG.warn(\"Failed to read folders due to: \"+e);\n        // throw new\n        // DataImportHandlerException(DataImportHandlerException.SEVERE,\n        // \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0)\n                LOG.info(\"NO children : \");\n            }\n          }\n        }\n        while (!hasMessages);\n        return next;\n      } catch (MessagingException e) {\n        //throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n        //        \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              log.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              log.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                log.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0) log.info(\"NO children : \");\n            }\n          }\n        } while (!hasMessages);\n        return next;\n      } catch (Exception e) {\n        log.warn(\"Failed to read folders due to: \"+e);\n        // throw new\n        // DataImportHandlerException(DataImportHandlerException.SEVERE,\n        // \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              LOG.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              LOG.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                LOG.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0) LOG.info(\"NO children : \");\n            }\n          }\n        } while (!hasMessages);\n        return next;\n      } catch (Exception e) {\n        LOG.warn(\"Failed to read folders due to: \"+e);\n        // throw new\n        // DataImportHandlerException(DataImportHandlerException.SEVERE,\n        // \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              log.info(\"Opened folder : {}\", fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              log.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                if (log.isInfoEnabled()) {\n                  log.info(\"child name : {}\", children[i].getFullName());\n                }\n              }\n              if (children.length == 0) log.info(\"NO children : \");\n            }\n          }\n        } while (!hasMessages);\n        return next;\n      } catch (Exception e) {\n        log.warn(\"Failed to read folders due to: {}\", e);\n        // throw new\n        // DataImportHandlerException(DataImportHandlerException.SEVERE,\n        // \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","sourceOld":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              log.info(\"Opened folder : \" + fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              log.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                log.info(\"child name : \" + children[i].getFullName());\n              }\n              if (children.length == 0) log.info(\"NO children : \");\n            }\n          }\n        } while (!hasMessages);\n        return next;\n      } catch (Exception e) {\n        log.warn(\"Failed to read folders due to: \"+e);\n        // throw new\n        // DataImportHandlerException(DataImportHandlerException.SEVERE,\n        // \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.FolderIterator#next().mjava","sourceNew":null,"sourceOld":"    public Folder next() {\n      try {\n        boolean hasMessages = false;\n        Folder next;\n        do {\n          if (lastFolder != null) {\n            lastFolder.close(false);\n            lastFolder = null;\n          }\n          if (folders.isEmpty()) {\n            mailbox.close();\n            return null;\n          }\n          next = folders.remove(0);\n          if (next != null) {\n            String fullName = next.getFullName();\n            if (!excludeFolder(fullName)) {\n              hasMessages = (next.getType() & Folder.HOLDS_MESSAGES) != 0;\n              next.open(Folder.READ_ONLY);\n              lastFolder = next;\n              log.info(\"Opened folder : {}\", fullName);\n            }\n            if (recurse && ((next.getType() & Folder.HOLDS_FOLDERS) != 0)) {\n              Folder[] children = next.list();\n              log.info(\"Added its children to list  : \");\n              for (int i = children.length - 1; i >= 0; i--) {\n                folders.add(0, children[i]);\n                if (log.isInfoEnabled()) {\n                  log.info(\"child name : {}\", children[i].getFullName());\n                }\n              }\n              if (children.length == 0) log.info(\"NO children : \");\n            }\n          }\n        } while (!hasMessages);\n        return next;\n      } catch (Exception e) {\n        log.warn(\"Failed to read folders due to: {}\", e);\n        // throw new\n        // DataImportHandlerException(DataImportHandlerException.SEVERE,\n        // \"Folder open failed\", e);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"36113efe922ae370819b20fba837a1a37d3dd2d8":["7530de27b87b961b51f01bd1299b7004d46e8823"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["36113efe922ae370819b20fba837a1a37d3dd2d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["0cd303657ee7726e12c45f9fd39b0285acf10c07"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36113efe922ae370819b20fba837a1a37d3dd2d8":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["0cd303657ee7726e12c45f9fd39b0285acf10c07"],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","36113efe922ae370819b20fba837a1a37d3dd2d8"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}