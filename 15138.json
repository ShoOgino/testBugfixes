{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNegPost().mjava","commits":[{"id":"7d57d8425f061bbc789486399b498a35f960765e","date":1478627123,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNegPost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNeg().mjava","sourceNew":"  public void testSpanNotWindowNegPost() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or, 0, -1);\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    query = spanNotQuery(near, or, 0, -2);\n    checkHits(query, new int[]\n       {801, 821, 831, 841, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1841, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanNotWindowNeg() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or);\n\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNegPost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNeg().mjava","sourceNew":"  public void testSpanNotWindowNegPost() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or, 0, -1);\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    query = spanNotQuery(near, or, 0, -2);\n    checkHits(query, new int[]\n       {801, 821, 831, 841, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1841, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanNotWindowNeg() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or);\n\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNegPost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNegPost().mjava","sourceNew":"  public void testSpanNotWindowNegPost() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or, 0, -1);\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    query = spanNotQuery(near, or, 0, -2);\n    checkHits(query, new int[]\n       {801, 821, 831, 841, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1841, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue().doubleValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue().doubleValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanNotWindowNegPost() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or, 0, -1);\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    query = spanNotQuery(near, or, 0, -2);\n    checkHits(query, new int[]\n       {801, 821, 831, 841, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1841, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["7d57d8425f061bbc789486399b498a35f960765e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d57d8425f061bbc789486399b498a35f960765e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"7d57d8425f061bbc789486399b498a35f960765e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","7d57d8425f061bbc789486399b498a35f960765e"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"7d57d8425f061bbc789486399b498a35f960765e":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}