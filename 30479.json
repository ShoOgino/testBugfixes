{"path":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectors() {\n    try {\n      TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(result != null);\n      String [] terms = result.getTerms();\n      int [] freqs = result.getTermFrequencies();\n      assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(freq > 0);\n      }\n  \n      TermFreqVector [] results = reader.getTermFreqVectors(0);\n      assertTrue(results != null);\n      assertTrue(results.length == 2);      \n      \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae4efa0568cffc60d08c3c5f45974bf7b2f86c5","date":1091827971,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(results.length == 2);      \n  }    \n\n","sourceOld":"  public void testTermVectors() {\n    try {\n      TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n      assertTrue(result != null);\n      String [] terms = result.getTerms();\n      int [] freqs = result.getTermFrequencies();\n      assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        int freq = freqs[i];\n        assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n        assertTrue(freq > 0);\n      }\n  \n      TermFreqVector [] results = reader.getTermFreqVectors(0);\n      assertTrue(results != null);\n      assertTrue(results.length == 2);      \n      \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(results.length == 2);      \n  }    \n\n","sourceOld":"  public void testTermVectors() {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(results.length == 2);      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 4 term freq vectors, we have: \" + results.length, results.length == 4);      \n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(results.length == 2);      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 3 term freq vectors, we have: \" + results.length, results.length == 3);      \n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 4 term freq vectors, we have: \" + results.length, results.length == 4);      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 3 term freq vectors, we have: \" + results.length, results.length == 3);      \n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    TermFreqVector result = reader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    int [] freqs = result.getTermFrequencies();\n    assertTrue(terms != null && terms.length == 3 && freqs != null && freqs.length == 3);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    TermFreqVector [] results = reader.getTermFreqVectors(0);\n    assertTrue(results != null);\n    assertTrue(\"We do not have 3 term freq vectors, we have: \" + results.length, results.length == 3);      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7ae4efa0568cffc60d08c3c5f45974bf7b2f86c5":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["7ae4efa0568cffc60d08c3c5f45974bf7b2f86c5"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"e0c804f7aa477229414a7e12882af490c241f64d":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e0c804f7aa477229414a7e12882af490c241f64d"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["7ae4efa0568cffc60d08c3c5f45974bf7b2f86c5"],"7ae4efa0568cffc60d08c3c5f45974bf7b2f86c5":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["e0c804f7aa477229414a7e12882af490c241f64d"],"e0c804f7aa477229414a7e12882af490c241f64d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}