{"path":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testCachedArrays().mjava","commits":[{"id":"eee9156bf08d7eaae5e8d8ab5f855ba61012e257","date":1285443157,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testCachedArrays().mjava","pathOld":"/dev/null","sourceNew":"  public void testCachedArrays() throws IOException \r\n  {\r\n    FieldCache cache = FieldCache.DEFAULT;\r\n\r\n    // Check the Different CachedArray Types\r\n    CachedArray last = null;\r\n    CachedArray justbits = null;\r\n    \r\n    for( NumberTypeTester tester : typeTests ) {\r\n      justbits = getWithReflection( cache, tester, CachedArrayCreator.OPTION_CACHE_BITS );\r\n      assertNull( \"should not get values : \"+tester, justbits.getRawArray() );\r\n      assertNotNull( \"should get bits : \"+tester, justbits.valid );\r\n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS );\r\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\r\n      assertNull( \"Validate=false shoudl not regenerate : \"+tester, justbits.getRawArray() ); \r\n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE );\r\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\r\n      assertNotNull( \"Validate=true should add the Array : \"+tester, justbits.getRawArray() ); \r\n      checkCachedArrayValuesAndBits( tester, last );\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92178e7f4068ab2271de48948e794efaf630d6b1","date":1285551683,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testCachedArrays().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testCachedArrays().mjava","sourceNew":"  public void testCachedArrays() throws IOException \r\n  {\r\n    FieldCache cache = FieldCache.DEFAULT;\r\n\r\n    // Check the Different CachedArray Types\r\n    CachedArray last = null;\r\n    CachedArray justbits = null;\r\n    String field;\r\n    \r\n    for( NumberTypeTester tester : typeTests ) {\r\n      justbits = getWithReflection( cache, tester, CachedArrayCreator.OPTION_CACHE_BITS );\r\n      assertNull( \"should not get values : \"+tester, justbits.getRawArray() );\r\n      assertNotNull( \"should get bits : \"+tester, justbits.valid );\r\n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS );\r\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\r\n      assertNull( \"Validate=false shoudl not regenerate : \"+tester, justbits.getRawArray() ); \r\n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE );\r\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\r\n      assertNotNull( \"Validate=true should add the Array : \"+tester, justbits.getRawArray() ); \r\n      checkCachedArrayValuesAndBits( tester, last );\r\n    }\r\n    \r\n    // Now switch the the parser (for the same type) and expect an error\r\n    cache.purgeAllCaches();\r\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE;\r\n    field = \"theRandomInt\";\r\n    last = cache.getInts(reader, field, new IntValuesCreator( field, FieldCache.DEFAULT_INT_PARSER, flags ) );\r\n    checkCachedArrayValuesAndBits( typeTests[2], last );\r\n    try {\r\n      cache.getInts(reader, field, new IntValuesCreator( field, FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\r\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\r\n    } catch( Exception ex ) {} // expected\r\n\r\n    field = \"theRandomLong\";\r\n    last = cache.getLongs(reader,   field, new LongValuesCreator( field, FieldCache.DEFAULT_LONG_PARSER, flags ) );\r\n    checkCachedArrayValuesAndBits( typeTests[3], last );\r\n    try {\r\n      cache.getLongs(reader, field, new LongValuesCreator( field, FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\r\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\r\n    } catch( Exception ex ) {} // expected\r\n\r\n    field = \"theRandomFloat\";\r\n    last = cache.getFloats(reader,   field, new FloatValuesCreator( field, FieldCache.DEFAULT_FLOAT_PARSER, flags ) );\r\n    checkCachedArrayValuesAndBits( typeTests[4], last );\r\n    try {\r\n      cache.getFloats(reader, field, new FloatValuesCreator( field, FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ) );\r\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\r\n    } catch( Exception ex ) {} // expected\r\n\r\n    field = \"theRandomDouble\";\r\n    last = cache.getDoubles(reader,   field, new DoubleValuesCreator( field, FieldCache.DEFAULT_DOUBLE_PARSER, flags ) );\r\n    checkCachedArrayValuesAndBits( typeTests[5], last );\r\n    try {\r\n      cache.getDoubles(reader, field, new DoubleValuesCreator( field, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ) );\r\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\r\n    } catch( Exception ex ) {} // expected\r\n  }\r\n\n","sourceOld":"  public void testCachedArrays() throws IOException \r\n  {\r\n    FieldCache cache = FieldCache.DEFAULT;\r\n\r\n    // Check the Different CachedArray Types\r\n    CachedArray last = null;\r\n    CachedArray justbits = null;\r\n    \r\n    for( NumberTypeTester tester : typeTests ) {\r\n      justbits = getWithReflection( cache, tester, CachedArrayCreator.OPTION_CACHE_BITS );\r\n      assertNull( \"should not get values : \"+tester, justbits.getRawArray() );\r\n      assertNotNull( \"should get bits : \"+tester, justbits.valid );\r\n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS );\r\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\r\n      assertNull( \"Validate=false shoudl not regenerate : \"+tester, justbits.getRawArray() ); \r\n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE );\r\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\r\n      assertNotNull( \"Validate=true should add the Array : \"+tester, justbits.getRawArray() ); \r\n      checkCachedArrayValuesAndBits( tester, last );\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testCachedArrays().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testCachedArrays().mjava","sourceNew":"  public void testCachedArrays() throws IOException \n  {\n    FieldCache cache = FieldCache.DEFAULT;\n\n    // Check the Different CachedArray Types\n    CachedArray last = null;\n    CachedArray justbits = null;\n    String field;\n    \n    for( NumberTypeTester tester : typeTests ) {\n      justbits = getWithReflection( cache, tester, CachedArrayCreator.OPTION_CACHE_BITS );\n      assertNull( \"should not get values : \"+tester, justbits.getRawArray() );\n      assertNotNull( \"should get bits : \"+tester, justbits.valid );\n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS );\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\n      assertNull( \"Validate=false shoudl not regenerate : \"+tester, justbits.getRawArray() ); \n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE );\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\n      assertNotNull( \"Validate=true should add the Array : \"+tester, justbits.getRawArray() ); \n      checkCachedArrayValuesAndBits( tester, last );\n    }\n    \n    // Now switch the the parser (for the same type) and expect an error\n    cache.purgeAllCaches();\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE;\n    field = \"theRandomInt\";\n    last = cache.getInts(reader, field, new IntValuesCreator( field, FieldCache.DEFAULT_INT_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[2], last );\n    try {\n      cache.getInts(reader, field, new IntValuesCreator( field, FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n\n    field = \"theRandomLong\";\n    last = cache.getLongs(reader,   field, new LongValuesCreator( field, FieldCache.DEFAULT_LONG_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[3], last );\n    try {\n      cache.getLongs(reader, field, new LongValuesCreator( field, FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n\n    field = \"theRandomFloat\";\n    last = cache.getFloats(reader,   field, new FloatValuesCreator( field, FieldCache.DEFAULT_FLOAT_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[4], last );\n    try {\n      cache.getFloats(reader, field, new FloatValuesCreator( field, FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n\n    field = \"theRandomDouble\";\n    last = cache.getDoubles(reader,   field, new DoubleValuesCreator( field, FieldCache.DEFAULT_DOUBLE_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[5], last );\n    try {\n      cache.getDoubles(reader, field, new DoubleValuesCreator( field, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n  }\n\n","sourceOld":"  public void testCachedArrays() throws IOException \r\n  {\r\n    FieldCache cache = FieldCache.DEFAULT;\r\n\r\n    // Check the Different CachedArray Types\r\n    CachedArray last = null;\r\n    CachedArray justbits = null;\r\n    String field;\r\n    \r\n    for( NumberTypeTester tester : typeTests ) {\r\n      justbits = getWithReflection( cache, tester, CachedArrayCreator.OPTION_CACHE_BITS );\r\n      assertNull( \"should not get values : \"+tester, justbits.getRawArray() );\r\n      assertNotNull( \"should get bits : \"+tester, justbits.valid );\r\n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS );\r\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\r\n      assertNull( \"Validate=false shoudl not regenerate : \"+tester, justbits.getRawArray() ); \r\n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE );\r\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\r\n      assertNotNull( \"Validate=true should add the Array : \"+tester, justbits.getRawArray() ); \r\n      checkCachedArrayValuesAndBits( tester, last );\r\n    }\r\n    \r\n    // Now switch the the parser (for the same type) and expect an error\r\n    cache.purgeAllCaches();\r\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE;\r\n    field = \"theRandomInt\";\r\n    last = cache.getInts(reader, field, new IntValuesCreator( field, FieldCache.DEFAULT_INT_PARSER, flags ) );\r\n    checkCachedArrayValuesAndBits( typeTests[2], last );\r\n    try {\r\n      cache.getInts(reader, field, new IntValuesCreator( field, FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\r\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\r\n    } catch( Exception ex ) {} // expected\r\n\r\n    field = \"theRandomLong\";\r\n    last = cache.getLongs(reader,   field, new LongValuesCreator( field, FieldCache.DEFAULT_LONG_PARSER, flags ) );\r\n    checkCachedArrayValuesAndBits( typeTests[3], last );\r\n    try {\r\n      cache.getLongs(reader, field, new LongValuesCreator( field, FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\r\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\r\n    } catch( Exception ex ) {} // expected\r\n\r\n    field = \"theRandomFloat\";\r\n    last = cache.getFloats(reader,   field, new FloatValuesCreator( field, FieldCache.DEFAULT_FLOAT_PARSER, flags ) );\r\n    checkCachedArrayValuesAndBits( typeTests[4], last );\r\n    try {\r\n      cache.getFloats(reader, field, new FloatValuesCreator( field, FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ) );\r\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\r\n    } catch( Exception ex ) {} // expected\r\n\r\n    field = \"theRandomDouble\";\r\n    last = cache.getDoubles(reader,   field, new DoubleValuesCreator( field, FieldCache.DEFAULT_DOUBLE_PARSER, flags ) );\r\n    checkCachedArrayValuesAndBits( typeTests[5], last );\r\n    try {\r\n      cache.getDoubles(reader, field, new DoubleValuesCreator( field, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ) );\r\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\r\n    } catch( Exception ex ) {} // expected\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testCachedArrays().mjava","pathOld":"/dev/null","sourceNew":"  public void testCachedArrays() throws IOException \n  {\n    FieldCache cache = FieldCache.DEFAULT;\n\n    // Check the Different CachedArray Types\n    CachedArray last = null;\n    CachedArray justbits = null;\n    String field;\n    \n    for( NumberTypeTester tester : typeTests ) {\n      justbits = getWithReflection( cache, tester, CachedArrayCreator.OPTION_CACHE_BITS );\n      assertNull( \"should not get values : \"+tester, justbits.getRawArray() );\n      assertNotNull( \"should get bits : \"+tester, justbits.valid );\n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS );\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\n      assertNull( \"Validate=false shoudl not regenerate : \"+tester, justbits.getRawArray() ); \n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE );\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\n      assertNotNull( \"Validate=true should add the Array : \"+tester, justbits.getRawArray() ); \n      checkCachedArrayValuesAndBits( tester, last );\n    }\n    \n    // Now switch the the parser (for the same type) and expect an error\n    cache.purgeAllCaches();\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE;\n    field = \"theRandomInt\";\n    last = cache.getInts(reader, field, new IntValuesCreator( field, FieldCache.DEFAULT_INT_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[2], last );\n    try {\n      cache.getInts(reader, field, new IntValuesCreator( field, FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n\n    field = \"theRandomLong\";\n    last = cache.getLongs(reader,   field, new LongValuesCreator( field, FieldCache.DEFAULT_LONG_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[3], last );\n    try {\n      cache.getLongs(reader, field, new LongValuesCreator( field, FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n\n    field = \"theRandomFloat\";\n    last = cache.getFloats(reader,   field, new FloatValuesCreator( field, FieldCache.DEFAULT_FLOAT_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[4], last );\n    try {\n      cache.getFloats(reader, field, new FloatValuesCreator( field, FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n\n    field = \"theRandomDouble\";\n    last = cache.getDoubles(reader,   field, new DoubleValuesCreator( field, FieldCache.DEFAULT_DOUBLE_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[5], last );\n    try {\n      cache.getDoubles(reader, field, new DoubleValuesCreator( field, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#testCachedArrays().mjava","sourceNew":null,"sourceOld":"  public void testCachedArrays() throws IOException \n  {\n    FieldCache cache = FieldCache.DEFAULT;\n\n    // Check the Different CachedArray Types\n    CachedArray last = null;\n    CachedArray justbits = null;\n    String field;\n    \n    for( NumberTypeTester tester : typeTests ) {\n      justbits = getWithReflection( cache, tester, CachedArrayCreator.OPTION_CACHE_BITS );\n      assertNull( \"should not get values : \"+tester, justbits.getRawArray() );\n      assertNotNull( \"should get bits : \"+tester, justbits.valid );\n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS );\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\n      assertNull( \"Validate=false shoudl not regenerate : \"+tester, justbits.getRawArray() ); \n      last = getWithReflection( cache, tester, CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE );\n      assertEquals( \"should use same cached object : \"+tester, justbits, last );\n      assertNotNull( \"Validate=true should add the Array : \"+tester, justbits.getRawArray() ); \n      checkCachedArrayValuesAndBits( tester, last );\n    }\n    \n    // Now switch the the parser (for the same type) and expect an error\n    cache.purgeAllCaches();\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS_VALIDATE;\n    field = \"theRandomInt\";\n    last = cache.getInts(reader, field, new IntValuesCreator( field, FieldCache.DEFAULT_INT_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[2], last );\n    try {\n      cache.getInts(reader, field, new IntValuesCreator( field, FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n\n    field = \"theRandomLong\";\n    last = cache.getLongs(reader,   field, new LongValuesCreator( field, FieldCache.DEFAULT_LONG_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[3], last );\n    try {\n      cache.getLongs(reader, field, new LongValuesCreator( field, FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n\n    field = \"theRandomFloat\";\n    last = cache.getFloats(reader,   field, new FloatValuesCreator( field, FieldCache.DEFAULT_FLOAT_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[4], last );\n    try {\n      cache.getFloats(reader, field, new FloatValuesCreator( field, FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n\n    field = \"theRandomDouble\";\n    last = cache.getDoubles(reader,   field, new DoubleValuesCreator( field, FieldCache.DEFAULT_DOUBLE_PARSER, flags ) );\n    checkCachedArrayValuesAndBits( typeTests[5], last );\n    try {\n      cache.getDoubles(reader, field, new DoubleValuesCreator( field, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ) );\n      fail( \"Should fail if you ask for the same type with a different parser : \" + field );\n    } catch( Exception ex ) {} // expected\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["92178e7f4068ab2271de48948e794efaf630d6b1"],"92178e7f4068ab2271de48948e794efaf630d6b1":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"382fe3a6ca9745891afebda9b9a57cc158305545":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["382fe3a6ca9745891afebda9b9a57cc158305545"]},"commit2Childs":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["92178e7f4068ab2271de48948e794efaf630d6b1"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","382fe3a6ca9745891afebda9b9a57cc158305545"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"92178e7f4068ab2271de48948e794efaf630d6b1":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}