{"path":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#checkLeaderStatus().mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#checkLeaderStatus().mjava","pathOld":"/dev/null","sourceNew":"  // Once we've done all the fiddling with the queues, check on the way out to see if all the active preferred\n  // leaders that we intended to change are in fact the leaders.\n  private void checkLeaderStatus() throws InterruptedException, KeeperException {\n    for (int idx = 0; pendingOps.size() > 0 && idx < 600; ++idx) {\n      ClusterState clusterState = coreContainer.getZkController().getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      DocCollection dc = clusterState.getCollection(collectionName);\n      for (Slice slice : dc.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (replica.isActive(liveNodes) && replica.getBool(SliceMutator.PREFERRED_LEADER_PROP, false)) {\n            if (replica.getBool(LEADER_PROP, false)) {\n              if (pendingOps.containsKey(slice.getName())) {\n                // Record for return that the leader changed successfully\n                pendingOps.remove(slice.getName());\n                addToSuccesses(slice, replica);\n                break;\n              }\n            }\n          }\n        }\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n      coreContainer.getZkController().getZkStateReader().forciblyRefreshAllClusterStateSlow();\n    }\n    addAnyFailures();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#checkLeaderStatus().mjava","pathOld":"/dev/null","sourceNew":"  // Once we've done all the fiddling with the queues, check on the way out to see if all the active preferred\n  // leaders that we intended to change are in fact the leaders.\n  private void checkLeaderStatus() throws InterruptedException, KeeperException {\n    for (int idx = 0; pendingOps.size() > 0 && idx < 600; ++idx) {\n      ClusterState clusterState = coreContainer.getZkController().getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      DocCollection dc = clusterState.getCollection(collectionName);\n      for (Slice slice : dc.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (replica.isActive(liveNodes) && replica.getBool(SliceMutator.PREFERRED_LEADER_PROP, false)) {\n            if (replica.getBool(LEADER_PROP, false)) {\n              if (pendingOps.containsKey(slice.getName())) {\n                // Record for return that the leader changed successfully\n                pendingOps.remove(slice.getName());\n                addToSuccesses(slice, replica);\n                break;\n              }\n            }\n          }\n        }\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n      coreContainer.getZkController().getZkStateReader().forciblyRefreshAllClusterStateSlow();\n    }\n    addAnyFailures();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}