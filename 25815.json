{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCachedReplica(String,String).mjava","commits":[{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCachedReplica(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the replica from caches by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getCachedReplica(String collectionName, String coreNodeName) {\n    DocCollection c = getCachedCollection(collectionName);\n    if (c == null) return null;\n    for (Slice slice : c.getSlices()) {\n      Replica replica = slice.getReplica(coreNodeName);\n      if (replica != null) return replica;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCachedReplica(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Gets the replica from caches by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getCachedReplica(String collectionName, String coreNodeName) {\n    DocCollection c = getCachedCollection(collectionName);\n    if (c == null) return null;\n    for (Slice slice : c.getSlices()) {\n      Replica replica = slice.getReplica(coreNodeName);\n      if (replica != null) return replica;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCachedReplica(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** expert internal use only\n   * Gets the replica from caches by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getCachedReplica(String collectionName, String coreNodeName) {\n    DocCollection c = getCachedCollection(collectionName);\n    if (c == null) return null;\n    for (Slice slice : c.getSlices()) {\n      Replica replica = slice.getReplica(coreNodeName);\n      if (replica != null) return replica;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCachedReplica(String,String).mjava","sourceNew":null,"sourceOld":"  /** expert internal use only\n   * Gets the replica from caches by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getCachedReplica(String collectionName, String coreNodeName) {\n    DocCollection c = getCachedCollection(collectionName);\n    if (c == null) return null;\n    for (Slice slice : c.getSlices()) {\n      Replica replica = slice.getReplica(coreNodeName);\n      if (replica != null) return replica;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}