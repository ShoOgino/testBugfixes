{"path":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#testStraightEnum(IndexReader).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#testStraightEnum(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private static void testStraightEnum(IndexReader r) throws Exception {\n\n    // straight enum of fields/terms/docs/positions\n    TermEnum termEnum = r.terms();\n    final Fields fields = MultiFields.getFields(r);\n    if (fields == null) {\n      return;\n    }\n    FieldsEnum fieldsEnum = fields.iterator();\n    while(true) {\n      final String field = fieldsEnum.next();\n      if (field == null) {\n        boolean result = termEnum.next();\n        if (result) {\n          System.out.println(\"got unexpected term=\" + termEnum.term() + \" termEnum=\" + termEnum);\n        }\n        assertFalse(result);\n        break;\n      }\n      TermsEnum terms = fieldsEnum.terms();\n      DocsAndPositionsEnum postings = null;\n      DocsEnum docsEnum = null;\n      final TermPositions termPos = r.termPositions();\n      while(true) {\n        final BytesRef termRef = terms.next();\n        if (termRef == null) {\n          break;\n        } else {\n          assertTrue(termEnum.next());\n          Term t = termEnum.term();\n          assertEquals(t.field(), field);\n          assertEquals(t.text(), termRef.utf8ToString());\n          assertEquals(termEnum.docFreq(), terms.docFreq());\n          //allTerms.add(t);\n\n          postings = terms.docsAndPositions(MultiFields.getDeletedDocs(r), postings);\n          docsEnum = terms.docs(MultiFields.getDeletedDocs(r), docsEnum);\n\n          final DocsEnum docs;\n          if (postings != null) {\n            docs = postings;\n          } else {\n            docs = docsEnum;\n          }\n\n          termPos.seek(t);\n          while(true) {\n            final int doc = docs.nextDoc();\n            if (doc == DocsEnum.NO_MORE_DOCS) {\n              assertFalse(termPos.next());\n              break;\n            } else {\n              assertTrue(termPos.next());\n              assertEquals(termPos.doc(), doc);\n              assertEquals(termPos.freq(), docs.freq());\n              final int freq = docs.freq();\n              if (postings == null) {\n                assertEquals(1, freq);\n                // Old API did not always do this,\n                // specifically in the MultiTermPositions\n                // case when some segs omit positions and\n                // some don't\n                //assertEquals(0, termPos.nextPosition());\n                assertEquals(false, termPos.isPayloadAvailable());\n              } else {\n                for(int i=0;i<freq;i++) {\n                  final int position = postings.nextPosition();\n                  assertEquals(position, termPos.nextPosition());\n                  assertEquals(postings.hasPayload(), termPos.isPayloadAvailable());\n                  if (postings.hasPayload()) {\n                    assertEquals(postings.getPayloadLength(), termPos.getPayloadLength());\n                    BytesRef payload = postings.getPayload();\n                    byte[] b2 = termPos.getPayload(null, 0);\n                    assertNotNull(payload);\n                    assertNotNull(b2);\n                    assertTrue(equals(payload, b2));\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5c4531fadbecf73a7716fdf5cd742463e866e84e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c4531fadbecf73a7716fdf5cd742463e866e84e","date":1273851662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#testStraightEnum(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#testStraightEnum(IndexReader).mjava","sourceNew":"  private static void testStraightEnum(IndexReader r) throws Exception {\n\n    // straight enum of fields/terms/docs/positions\n    TermEnum termEnum = r.terms();\n    final Fields fields = MultiFields.getFields(r);\n    if (fields == null) {\n      return;\n    }\n    FieldsEnum fieldsEnum = fields.iterator();\n    while(true) {\n      final String field = fieldsEnum.next();\n      if (field == null) {\n        boolean result = termEnum.next();\n        if (result) {\n          System.out.println(\"got unexpected term=\" + termEnum.term() + \" termEnum=\" + termEnum);\n        }\n        assertFalse(result);\n        break;\n      }\n      TermsEnum terms = fieldsEnum.terms();\n      DocsAndPositionsEnum postings = null;\n      DocsEnum docsEnum = null;\n      final TermPositions termPos = r.termPositions();\n      while(true) {\n        final BytesRef termRef = terms.next();\n        if (termRef == null) {\n          break;\n        } else {\n          assertTrue(termEnum.next());\n          Term t = termEnum.term();\n          assertEquals(t.field(), field);\n          assertEquals(t.text(), termRef.utf8ToString());\n          assertEquals(termEnum.docFreq(), terms.docFreq());\n          //allTerms.add(t);\n\n          postings = terms.docsAndPositions(MultiFields.getDeletedDocs(r), postings);\n          docsEnum = terms.docs(MultiFields.getDeletedDocs(r), docsEnum);\n\n          final DocsEnum docs;\n          if (postings != null) {\n            docs = postings;\n          } else {\n            docs = docsEnum;\n          }\n\n          termPos.seek(t);\n          while(true) {\n            final int doc = docs.nextDoc();\n            if (doc == DocsEnum.NO_MORE_DOCS) {\n              assertFalse(termPos.next());\n              break;\n            } else {\n              assertTrue(termPos.next());\n              assertEquals(termPos.doc(), doc);\n              assertEquals(termPos.freq(), docs.freq());\n              final int freq = docs.freq();\n              if (postings == null) {\n                assertEquals(1, freq);\n                // Old API did not always do this,\n                // specifically in the MultiTermPositions\n                // case when some segs omit positions and\n                // some don't\n                //assertEquals(0, termPos.nextPosition());\n                assertEquals(false, termPos.isPayloadAvailable());\n              } else {\n                for(int i=0;i<freq;i++) {\n                  final int position = postings.nextPosition();\n                  assertEquals(position, termPos.nextPosition());\n                  assertEquals(postings.hasPayload(), termPos.isPayloadAvailable());\n                  if (postings.hasPayload()) {\n                    BytesRef payload = postings.getPayload();\n                    assertEquals(payload.length, termPos.getPayloadLength());\n                    byte[] b2 = termPos.getPayload(null, 0);\n                    assertNotNull(payload);\n                    assertNotNull(b2);\n                    assertTrue(equals(payload, b2));\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void testStraightEnum(IndexReader r) throws Exception {\n\n    // straight enum of fields/terms/docs/positions\n    TermEnum termEnum = r.terms();\n    final Fields fields = MultiFields.getFields(r);\n    if (fields == null) {\n      return;\n    }\n    FieldsEnum fieldsEnum = fields.iterator();\n    while(true) {\n      final String field = fieldsEnum.next();\n      if (field == null) {\n        boolean result = termEnum.next();\n        if (result) {\n          System.out.println(\"got unexpected term=\" + termEnum.term() + \" termEnum=\" + termEnum);\n        }\n        assertFalse(result);\n        break;\n      }\n      TermsEnum terms = fieldsEnum.terms();\n      DocsAndPositionsEnum postings = null;\n      DocsEnum docsEnum = null;\n      final TermPositions termPos = r.termPositions();\n      while(true) {\n        final BytesRef termRef = terms.next();\n        if (termRef == null) {\n          break;\n        } else {\n          assertTrue(termEnum.next());\n          Term t = termEnum.term();\n          assertEquals(t.field(), field);\n          assertEquals(t.text(), termRef.utf8ToString());\n          assertEquals(termEnum.docFreq(), terms.docFreq());\n          //allTerms.add(t);\n\n          postings = terms.docsAndPositions(MultiFields.getDeletedDocs(r), postings);\n          docsEnum = terms.docs(MultiFields.getDeletedDocs(r), docsEnum);\n\n          final DocsEnum docs;\n          if (postings != null) {\n            docs = postings;\n          } else {\n            docs = docsEnum;\n          }\n\n          termPos.seek(t);\n          while(true) {\n            final int doc = docs.nextDoc();\n            if (doc == DocsEnum.NO_MORE_DOCS) {\n              assertFalse(termPos.next());\n              break;\n            } else {\n              assertTrue(termPos.next());\n              assertEquals(termPos.doc(), doc);\n              assertEquals(termPos.freq(), docs.freq());\n              final int freq = docs.freq();\n              if (postings == null) {\n                assertEquals(1, freq);\n                // Old API did not always do this,\n                // specifically in the MultiTermPositions\n                // case when some segs omit positions and\n                // some don't\n                //assertEquals(0, termPos.nextPosition());\n                assertEquals(false, termPos.isPayloadAvailable());\n              } else {\n                for(int i=0;i<freq;i++) {\n                  final int position = postings.nextPosition();\n                  assertEquals(position, termPos.nextPosition());\n                  assertEquals(postings.hasPayload(), termPos.isPayloadAvailable());\n                  if (postings.hasPayload()) {\n                    assertEquals(postings.getPayloadLength(), termPos.getPayloadLength());\n                    BytesRef payload = postings.getPayload();\n                    byte[] b2 = termPos.getPayload(null, 0);\n                    assertNotNull(payload);\n                    assertNotNull(b2);\n                    assertTrue(equals(payload, b2));\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#testStraightEnum(IndexReader).mjava","sourceNew":null,"sourceOld":"  private static void testStraightEnum(IndexReader r) throws Exception {\n\n    // straight enum of fields/terms/docs/positions\n    TermEnum termEnum = r.terms();\n    final Fields fields = MultiFields.getFields(r);\n    if (fields == null) {\n      return;\n    }\n    FieldsEnum fieldsEnum = fields.iterator();\n    while(true) {\n      final String field = fieldsEnum.next();\n      if (field == null) {\n        boolean result = termEnum.next();\n        if (result) {\n          System.out.println(\"got unexpected term=\" + termEnum.term() + \" termEnum=\" + termEnum);\n        }\n        assertFalse(result);\n        break;\n      }\n      TermsEnum terms = fieldsEnum.terms();\n      DocsAndPositionsEnum postings = null;\n      DocsEnum docsEnum = null;\n      final TermPositions termPos = r.termPositions();\n      while(true) {\n        final BytesRef termRef = terms.next();\n        if (termRef == null) {\n          break;\n        } else {\n          assertTrue(termEnum.next());\n          Term t = termEnum.term();\n          assertEquals(t.field(), field);\n          assertEquals(t.text(), termRef.utf8ToString());\n          assertEquals(termEnum.docFreq(), terms.docFreq());\n          //allTerms.add(t);\n\n          postings = terms.docsAndPositions(MultiFields.getDeletedDocs(r), postings);\n          docsEnum = terms.docs(MultiFields.getDeletedDocs(r), docsEnum);\n\n          final DocsEnum docs;\n          if (postings != null) {\n            docs = postings;\n          } else {\n            docs = docsEnum;\n          }\n\n          termPos.seek(t);\n          while(true) {\n            final int doc = docs.nextDoc();\n            if (doc == DocsEnum.NO_MORE_DOCS) {\n              assertFalse(termPos.next());\n              break;\n            } else {\n              assertTrue(termPos.next());\n              assertEquals(termPos.doc(), doc);\n              assertEquals(termPos.freq(), docs.freq());\n              final int freq = docs.freq();\n              if (postings == null) {\n                assertEquals(1, freq);\n                // Old API did not always do this,\n                // specifically in the MultiTermPositions\n                // case when some segs omit positions and\n                // some don't\n                //assertEquals(0, termPos.nextPosition());\n                assertEquals(false, termPos.isPayloadAvailable());\n              } else {\n                for(int i=0;i<freq;i++) {\n                  final int position = postings.nextPosition();\n                  assertEquals(position, termPos.nextPosition());\n                  assertEquals(postings.hasPayload(), termPos.isPayloadAvailable());\n                  if (postings.hasPayload()) {\n                    BytesRef payload = postings.getPayload();\n                    assertEquals(payload.length, termPos.getPayloadLength());\n                    byte[] b2 = termPos.getPayload(null, 0);\n                    assertNotNull(payload);\n                    assertNotNull(b2);\n                    assertTrue(equals(payload, b2));\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#testStraightEnum(IndexReader).mjava","sourceNew":null,"sourceOld":"  private static void testStraightEnum(IndexReader r) throws Exception {\n\n    // straight enum of fields/terms/docs/positions\n    TermEnum termEnum = r.terms();\n    final Fields fields = MultiFields.getFields(r);\n    if (fields == null) {\n      return;\n    }\n    FieldsEnum fieldsEnum = fields.iterator();\n    while(true) {\n      final String field = fieldsEnum.next();\n      if (field == null) {\n        boolean result = termEnum.next();\n        if (result) {\n          System.out.println(\"got unexpected term=\" + termEnum.term() + \" termEnum=\" + termEnum);\n        }\n        assertFalse(result);\n        break;\n      }\n      TermsEnum terms = fieldsEnum.terms();\n      DocsAndPositionsEnum postings = null;\n      DocsEnum docsEnum = null;\n      final TermPositions termPos = r.termPositions();\n      while(true) {\n        final BytesRef termRef = terms.next();\n        if (termRef == null) {\n          break;\n        } else {\n          assertTrue(termEnum.next());\n          Term t = termEnum.term();\n          assertEquals(t.field(), field);\n          assertEquals(t.text(), termRef.utf8ToString());\n          assertEquals(termEnum.docFreq(), terms.docFreq());\n          //allTerms.add(t);\n\n          postings = terms.docsAndPositions(MultiFields.getDeletedDocs(r), postings);\n          docsEnum = terms.docs(MultiFields.getDeletedDocs(r), docsEnum);\n\n          final DocsEnum docs;\n          if (postings != null) {\n            docs = postings;\n          } else {\n            docs = docsEnum;\n          }\n\n          termPos.seek(t);\n          while(true) {\n            final int doc = docs.nextDoc();\n            if (doc == DocsEnum.NO_MORE_DOCS) {\n              assertFalse(termPos.next());\n              break;\n            } else {\n              assertTrue(termPos.next());\n              assertEquals(termPos.doc(), doc);\n              assertEquals(termPos.freq(), docs.freq());\n              final int freq = docs.freq();\n              if (postings == null) {\n                assertEquals(1, freq);\n                // Old API did not always do this,\n                // specifically in the MultiTermPositions\n                // case when some segs omit positions and\n                // some don't\n                //assertEquals(0, termPos.nextPosition());\n                assertEquals(false, termPos.isPayloadAvailable());\n              } else {\n                for(int i=0;i<freq;i++) {\n                  final int position = postings.nextPosition();\n                  assertEquals(position, termPos.nextPosition());\n                  assertEquals(postings.hasPayload(), termPos.isPayloadAvailable());\n                  if (postings.hasPayload()) {\n                    BytesRef payload = postings.getPayload();\n                    assertEquals(payload.length, termPos.getPayloadLength());\n                    byte[] b2 = termPos.getPayload(null, 0);\n                    assertNotNull(payload);\n                    assertNotNull(b2);\n                    assertTrue(equals(payload, b2));\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5c4531fadbecf73a7716fdf5cd742463e866e84e"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c4531fadbecf73a7716fdf5cd742463e866e84e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5f4e87790277826a2aea119328600dfb07761f32":["5c4531fadbecf73a7716fdf5cd742463e866e84e","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28427ef110c4c5bf5b4057731b83110bd1e13724"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5c4531fadbecf73a7716fdf5cd742463e866e84e"],"5c4531fadbecf73a7716fdf5cd742463e866e84e":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}