{"path":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveImpactAccumulator#add(Impact,TreeSet[Impact]).mjava","commits":[{"id":"f50c9e80683584f12bcb862485e917b70cad163f","date":1574765397,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveImpactAccumulator#add(Impact,TreeSet[Impact]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveImpactAccumulator#add(Impact).mjava","sourceNew":"  private void add(Impact newEntry, TreeSet<Impact> freqNormPairs) {\n    Impact next = freqNormPairs.ceiling(newEntry);\n    if (next == null) {\n      // nothing is more competitive\n      freqNormPairs.add(newEntry);\n    } else if (Long.compareUnsigned(next.norm, newEntry.norm) <= 0) {\n      // we already have this entry or more competitive entries in the tree\n      return;\n    } else {\n      // some entries have a greater freq but a less competitive norm, so we\n      // don't know which one will trigger greater scores, still add to the tree\n      freqNormPairs.add(newEntry);\n    }\n\n    for (Iterator<Impact> it = freqNormPairs.headSet(newEntry, false).descendingIterator(); it.hasNext(); ) {\n      Impact entry = it.next();\n      if (Long.compareUnsigned(entry.norm, newEntry.norm) >= 0) {\n        // less competitive\n        it.remove();\n      } else {\n        // lesser freq but better norm, further entries are not comparable\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void add(Impact newEntry) {\n    Impact next = freqNormPairs.ceiling(newEntry);\n    if (next == null) {\n      // nothing is more competitive\n      freqNormPairs.add(newEntry);\n    } else if (Long.compareUnsigned(next.norm, newEntry.norm) <= 0) {\n      // we already have this entry or more competitive entries in the tree\n      return;\n    } else {\n      // some entries have a greater freq but a less competitive norm, so we\n      // don't know which one will trigger greater scores, still add to the tree\n      freqNormPairs.add(newEntry);\n    }\n\n    for (Iterator<Impact> it = freqNormPairs.headSet(newEntry, false).descendingIterator(); it.hasNext(); ) {\n      Impact entry = it.next();\n      if (Long.compareUnsigned(entry.norm, newEntry.norm) >= 0) {\n        // less competitive\n        it.remove();\n      } else {\n        // lesser freq but better norm, further entries are not comparable\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f50c9e80683584f12bcb862485e917b70cad163f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f50c9e80683584f12bcb862485e917b70cad163f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f50c9e80683584f12bcb862485e917b70cad163f"],"f50c9e80683584f12bcb862485e917b70cad163f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}