{"path":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#sizeOf(Object).mjava","commits":[{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#sizeOf(Object).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Estimates the RAM usage by the given object. It will\n   * walk the object tree and sum up all referenced objects.\n   * \n   * <p><b>Resource Usage:</b> This method internally uses a set of\n   * every object seen during traversals so it does allocate memory\n   * (it isn't side-effect free). After the method exits, this memory\n   * should be GCed.</p>\n   */\n  public static long sizeOf(Object obj) {\n    final Set<Object> seen = Collections.newSetFromMap(new IdentityHashMap<Object,Boolean>(64));\n    try {\n      return measureObjectSize(obj, seen);\n    } finally {\n      // Help the GC.\n      seen.clear();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10cd47aac3c4e8c583740a750335f8aab14555b3","date":1332522358,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#sizeOf(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#sizeOf(Object).mjava","sourceNew":"  /** \n   * Estimates the RAM usage by the given object. It will\n   * walk the object tree and sum up all referenced objects.\n   * \n   * <p><b>Resource Usage:</b> This method internally uses a set of\n   * every object seen during traversals so it does allocate memory\n   * (it isn't side-effect free). After the method exits, this memory\n   * should be GCed.</p>\n   */\n  public static long sizeOf(Object obj) {\n    return measureObjectSize(obj);\n  }\n\n","sourceOld":"  /** \n   * Estimates the RAM usage by the given object. It will\n   * walk the object tree and sum up all referenced objects.\n   * \n   * <p><b>Resource Usage:</b> This method internally uses a set of\n   * every object seen during traversals so it does allocate memory\n   * (it isn't side-effect free). After the method exits, this memory\n   * should be GCed.</p>\n   */\n  public static long sizeOf(Object obj) {\n    final Set<Object> seen = Collections.newSetFromMap(new IdentityHashMap<Object,Boolean>(64));\n    try {\n      return measureObjectSize(obj, seen);\n    } finally {\n      // Help the GC.\n      seen.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1eb6b3ce884c0b9e064e112da158013ec33cd91","date":1402692077,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RamUsageTester#sizeOf(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#sizeOf(Object).mjava","sourceNew":"  /** \n   * Estimates the RAM usage by the given object. It will\n   * walk the object tree and sum up all referenced objects.\n   * \n   * <p><b>Resource Usage:</b> This method internally uses a set of\n   * every object seen during traversals so it does allocate memory\n   * (it isn't side-effect free). After the method exits, this memory\n   * should be GCed.</p>\n   */\n  public static long sizeOf(Object obj) {\n    return measureObjectSize(obj);\n  }\n\n","sourceOld":"  /** \n   * Estimates the RAM usage by the given object. It will\n   * walk the object tree and sum up all referenced objects.\n   * \n   * <p><b>Resource Usage:</b> This method internally uses a set of\n   * every object seen during traversals so it does allocate memory\n   * (it isn't side-effect free). After the method exits, this memory\n   * should be GCed.</p>\n   */\n  public static long sizeOf(Object obj) {\n    return measureObjectSize(obj);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RamUsageTester#sizeOf(Object,Filter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#sizeOf(Object).mjava","sourceNew":"  /**\n   * Estimates the RAM usage by the given object. It will\n   * walk the object tree and sum up all referenced objects.\n   *\n   * <p><b>Resource Usage:</b> This method internally uses a set of\n   * every object seen during traversals so it does allocate memory\n   * (it isn't side-effect free). After the method exits, this memory\n   * should be GCed.</p>\n   */\n  public static long sizeOf(Object obj, Filter filter) {\n    return measureObjectSize(obj, filter);\n  }\n\n","sourceOld":"  /** \n   * Estimates the RAM usage by the given object. It will\n   * walk the object tree and sum up all referenced objects.\n   * \n   * <p><b>Resource Usage:</b> This method internally uses a set of\n   * every object seen during traversals so it does allocate memory\n   * (it isn't side-effect free). After the method exits, this memory\n   * should be GCed.</p>\n   */\n  public static long sizeOf(Object obj) {\n    return measureObjectSize(obj);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["10cd47aac3c4e8c583740a750335f8aab14555b3","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["dd6c9e9b1251473f465b0443b56046b2658402da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1eb6b3ce884c0b9e064e112da158013ec33cd91"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6c9e9b1251473f465b0443b56046b2658402da"],"dd6c9e9b1251473f465b0443b56046b2658402da":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}