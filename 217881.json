{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","commits":[{"id":"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","date":1301994806,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(IndexOutput).mjava","sourceNew":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":"  public void save(IndexOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41a7130051d507b3a37c0b9f41f5937dfed6a88e","date":1302628279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","sourceNew":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    // TODO: really we should encode this as an arc, arriving\n    // to the root node, instead of special casing here:\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(IndexOutput).mjava","sourceNew":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    // TODO: really we should encode this as an arc, arriving\n    // to the root node, instead of special casing here:\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":"  public void save(IndexOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    // TODO: really we should encode this as an arc, arriving\n    // to the root node, instead of special casing here:\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    // TODO: really we should encode this as an arc, arriving\n    // to the root node, instead of special casing here:\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#save(DataOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","sourceNew":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    // TODO: really we should encode this as an arc, arriving\n    // to the root node, instead of special casing here:\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    // TODO: really we should encode this as an arc, arriving\n    // to the root node, instead of special casing here:\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#save(DataOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","sourceNew":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    // TODO: really we should encode this as an arc, arriving\n    // to the root node, instead of special casing here:\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    // TODO: really we should encode this as an arc, arriving\n    // to the root node, instead of special casing here:\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#save(DataOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","sourceNew":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    // TODO: really we should encode this as an arc, arriving\n    // to the root node, instead of special casing here:\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    // TODO: really we should encode this as an arc, arriving\n    // to the root node, instead of special casing here:\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"41a7130051d507b3a37c0b9f41f5937dfed6a88e":["5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"962d04139994fce5193143ef35615499a9a96d78":[],"41a7130051d507b3a37c0b9f41f5937dfed6a88e":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}