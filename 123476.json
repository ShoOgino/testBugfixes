{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","commits":[{"id":"d4d3dec2223c4ab37942f127cae43fbf1cd28731","date":1011232809,"type":0,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assert(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assert(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assert(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assert(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea","date":1012249521,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assert(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assert(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assert(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assert(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5742a13bc31248b37eec58aaf19da9d165a48d82","date":1026669113,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"    public void testWildcard() throws Exception {\n\tassertQueryEquals(\"term*\", null, \"term*\");\n\tassertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n\tassertQueryEquals(\"term~\", null, \"term~\");\n\tassertQueryEquals(\"term~^2\", null, \"term^2.0~\");\n\tassertQueryEquals(\"term^2~\", null, \"term^2.0~\");\n\tassertQueryEquals(\"term*germ\", null, \"term*germ\");\n\tassertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n\tassertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n\tassertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n\tassertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n\tassertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n    }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfb889456f00316d23950a3c6efea95b78a799eb","date":1046573221,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"    public void testWildcard() throws Exception {\n\tassertQueryEquals(\"term*\", null, \"term*\");\n\tassertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n\tassertQueryEquals(\"term~\", null, \"term~\");\n\tassertQueryEquals(\"term~^2\", null, \"term^2.0~\");\n\tassertQueryEquals(\"term^2~\", null, \"term^2.0~\");\n\tassertQueryEquals(\"term*germ\", null, \"term*germ\");\n\tassertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n\tassertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n\tassertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n\tassertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n\tassertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n\t/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n\t// First prefix queries:\n\tassertWildcardQueryEquals(\"term*\", true, \"term*\");\n\tassertWildcardQueryEquals(\"Term*\", true, \"term*\");\n\tassertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n\tassertWildcardQueryEquals(\"term*\", false, \"term*\");\n\tassertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n\tassertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n\t// Then 'full' wildcard queries:\n\tassertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n\tassertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n\tassertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n\tassertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n\tassertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n\tassertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n\tassertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n\tassertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    }\n\n","sourceOld":"    public void testWildcard() throws Exception {\n\tassertQueryEquals(\"term*\", null, \"term*\");\n\tassertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n\tassertQueryEquals(\"term~\", null, \"term~\");\n\tassertQueryEquals(\"term~^2\", null, \"term^2.0~\");\n\tassertQueryEquals(\"term^2~\", null, \"term^2.0~\");\n\tassertQueryEquals(\"term*germ\", null, \"term*germ\");\n\tassertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n\tassertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n\tassertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n\tassertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n\tassertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105b8c63d8ae43de76f14005b62a5657a4b8d9ce","date":1064896862,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n  }\n\n","sourceOld":"    public void testWildcard() throws Exception {\n\tassertQueryEquals(\"term*\", null, \"term*\");\n\tassertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n\tassertQueryEquals(\"term~\", null, \"term~\");\n\tassertQueryEquals(\"term~^2\", null, \"term^2.0~\");\n\tassertQueryEquals(\"term^2~\", null, \"term^2.0~\");\n\tassertQueryEquals(\"term*germ\", null, \"term*germ\");\n\tassertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n\tassertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n\tassertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n\tassertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n\tassertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n\t/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n\t// First prefix queries:\n\tassertWildcardQueryEquals(\"term*\", true, \"term*\");\n\tassertWildcardQueryEquals(\"Term*\", true, \"term*\");\n\tassertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n\tassertWildcardQueryEquals(\"term*\", false, \"term*\");\n\tassertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n\tassertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n\t// Then 'full' wildcard queries:\n\tassertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n\tassertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n\tassertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n\tassertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n\tassertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n\tassertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n\tassertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n\tassertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d9fea655f6db2fa5d07175d364e4801e0b761b9","date":1095169585,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"383aa9f87d58abbaf809bb02bfd29588e0d7694f","date":1095277502,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(0, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(0, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","c15965e14235f835c17a1e8e8eb75bfb3a684e68"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d2b17f10a0d622e1a8082a94957764dad150530","date":1097079592,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(0, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(0, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf","date":1103065373,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6eeaa9ffe1ad476fcb92066f4153e5d6865d36b9","date":1130579160,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df63e0c4264f6da210aa1c1c3cb609554f4f43af","date":1161929844,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c15965e14235f835c17a1e8e8eb75bfb3a684e68","date":1173327536,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":["383aa9f87d58abbaf809bb02bfd29588e0d7694f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term^2~\", null, \"term~0.5^2.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d2b17f10a0d622e1a8082a94957764dad150530":["383aa9f87d58abbaf809bb02bfd29588e0d7694f"],"8d9fea655f6db2fa5d07175d364e4801e0b761b9":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"383aa9f87d58abbaf809bb02bfd29588e0d7694f":["8d9fea655f6db2fa5d07175d364e4801e0b761b9"],"6eeaa9ffe1ad476fcb92066f4153e5d6865d36b9":["10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf"],"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea":["d4d3dec2223c4ab37942f127cae43fbf1cd28731"],"df63e0c4264f6da210aa1c1c3cb609554f4f43af":["6eeaa9ffe1ad476fcb92066f4153e5d6865d36b9"],"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf":["6d2b17f10a0d622e1a8082a94957764dad150530"],"c15965e14235f835c17a1e8e8eb75bfb3a684e68":["df63e0c4264f6da210aa1c1c3cb609554f4f43af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4d3dec2223c4ab37942f127cae43fbf1cd28731":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["bfb889456f00316d23950a3c6efea95b78a799eb"],"bfb889456f00316d23950a3c6efea95b78a799eb":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c15965e14235f835c17a1e8e8eb75bfb3a684e68"]},"commit2Childs":{"6d2b17f10a0d622e1a8082a94957764dad150530":["10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf"],"8d9fea655f6db2fa5d07175d364e4801e0b761b9":["383aa9f87d58abbaf809bb02bfd29588e0d7694f"],"383aa9f87d58abbaf809bb02bfd29588e0d7694f":["6d2b17f10a0d622e1a8082a94957764dad150530"],"6eeaa9ffe1ad476fcb92066f4153e5d6865d36b9":["df63e0c4264f6da210aa1c1c3cb609554f4f43af"],"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"df63e0c4264f6da210aa1c1c3cb609554f4f43af":["c15965e14235f835c17a1e8e8eb75bfb3a684e68"],"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf":["6eeaa9ffe1ad476fcb92066f4153e5d6865d36b9"],"c15965e14235f835c17a1e8e8eb75bfb3a684e68":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d3dec2223c4ab37942f127cae43fbf1cd28731"],"d4d3dec2223c4ab37942f127cae43fbf1cd28731":["6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["8d9fea655f6db2fa5d07175d364e4801e0b761b9"],"bfb889456f00316d23950a3c6efea95b78a799eb":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["bfb889456f00316d23950a3c6efea95b78a799eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}