{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80","date":1318183296,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80"],"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}