{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int,boolean).mjava","commits":[{"id":"f412711b73fe38b28bb793928ad02da8c829cff5","date":1465765014,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided liveDocs, and recording\n   *  whether those liveDocs were carried in ram (isNRT=true). */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs, boolean isNRT) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.isNRT = isNRT;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4987206dabc9f3576bb1df72e987094a7dad6e4f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided liveDocs, and recording\n   *  whether those liveDocs were carried in ram (isNRT=true). */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs, boolean isNRT) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.isNRT = isNRT;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int,boolean).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided liveDocs, and recording\n   *  whether those liveDocs were carried in ram (isNRT=true). */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs, boolean isNRT) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si;\n    this.metaData = sr.getMetaData();\n    this.liveDocs = liveDocs;\n    this.isNRT = isNRT;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided liveDocs, and recording\n   *  whether those liveDocs were carried in ram (isNRT=true). */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs, boolean isNRT) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.isNRT = isNRT;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int,boolean).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided liveDocs, and recording\n   *  whether those liveDocs were carried in ram (isNRT=true). */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs, boolean isNRT) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si;\n    this.metaData = sr.getMetaData();\n    this.liveDocs = liveDocs;\n    this.isNRT = isNRT;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided liveDocs, and recording\n   *  whether those liveDocs were carried in ram (isNRT=true). */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs, boolean isNRT) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.isNRT = isNRT;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4987206dabc9f3576bb1df72e987094a7dad6e4f","date":1527510516,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int,boolean).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided liveDocs, and recording\n   *  whether those liveDocs were carried in ram (isNRT=true). */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs, boolean isNRT) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si.clone();\n    this.originalSi = si;\n    this.metaData = sr.getMetaData();\n    this.liveDocs = liveDocs;\n    this.isNRT = isNRT;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided liveDocs, and recording\n   *  whether those liveDocs were carried in ram (isNRT=true). */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs, boolean isNRT) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si;\n    this.metaData = sr.getMetaData();\n    this.liveDocs = liveDocs;\n    this.isNRT = isNRT;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":["f412711b73fe38b28bb793928ad02da8c829cff5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"578a4d73d90ecd838846cc32bf1098aaa262b524","date":1532504076,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,Bits,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int,boolean).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided liveDocs, and recording\n   *  whether those liveDocs were carried in ram (isNRT=true). */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, Bits hardLiveDocs, int numDocs, boolean isNRT) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si.clone();\n    this.originalSi = si;\n    this.metaData = sr.getMetaData();\n    this.liveDocs = liveDocs;\n    this.hardLiveDocs = hardLiveDocs;\n    assert assertLiveDocs(isNRT, hardLiveDocs, liveDocs);\n    this.isNRT = isNRT;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided liveDocs, and recording\n   *  whether those liveDocs were carried in ram (isNRT=true). */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs, boolean isNRT) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si.clone();\n    this.originalSi = si;\n    this.metaData = sr.getMetaData();\n    this.liveDocs = liveDocs;\n    this.isNRT = isNRT;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f412711b73fe38b28bb793928ad02da8c829cff5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["f412711b73fe38b28bb793928ad02da8c829cff5"],"578a4d73d90ecd838846cc32bf1098aaa262b524":["4987206dabc9f3576bb1df72e987094a7dad6e4f"],"4987206dabc9f3576bb1df72e987094a7dad6e4f":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f412711b73fe38b28bb793928ad02da8c829cff5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["578a4d73d90ecd838846cc32bf1098aaa262b524"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["f412711b73fe38b28bb793928ad02da8c829cff5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f412711b73fe38b28bb793928ad02da8c829cff5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f412711b73fe38b28bb793928ad02da8c829cff5":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","31741cf1390044e38a2ec3127cf302ba841bfd75"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"578a4d73d90ecd838846cc32bf1098aaa262b524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4987206dabc9f3576bb1df72e987094a7dad6e4f":["578a4d73d90ecd838846cc32bf1098aaa262b524"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"31741cf1390044e38a2ec3127cf302ba841bfd75":["4987206dabc9f3576bb1df72e987094a7dad6e4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}