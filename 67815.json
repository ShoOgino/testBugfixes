{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ListStream#read().mjava","commits":[{"id":"014c3fc2ef9621f91a3786f1055913d8fa10d0df","date":1492893542,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ListStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n          currentStream.open();\n        } else {\n          HashMap map = new HashMap();\n          map.put(\"EOF\", true);\n          return new Tuple(map);\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ListStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n          currentStream.open();\n        } else {\n          HashMap map = new HashMap();\n          map.put(\"EOF\", true);\n          return new Tuple(map);\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31","date":1540236013,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ListStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ListStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n          // Set the stream to null in the array of streams once its been set to the current stream.\n          // This will remove the reference to the stream\n          // and should allow it to be garbage collected once it's no longer the current stream.\n          streams[streamIndex] = null;\n          currentStream.open();\n        } else {\n          HashMap map = new HashMap();\n          map.put(\"EOF\", true);\n          return new Tuple(map);\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n          currentStream.open();\n        } else {\n          HashMap map = new HashMap();\n          map.put(\"EOF\", true);\n          return new Tuple(map);\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ListStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ListStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n          // Set the stream to null in the array of streams once its been set to the current stream.\n          // This will remove the reference to the stream\n          // and should allow it to be garbage collected once it's no longer the current stream.\n          streams[streamIndex] = null;\n          currentStream.open();\n        } else {\n          return Tuple.EOF();\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n          // Set the stream to null in the array of streams once its been set to the current stream.\n          // This will remove the reference to the stream\n          // and should allow it to be garbage collected once it's no longer the current stream.\n          streams[streamIndex] = null;\n          currentStream.open();\n        } else {\n          HashMap map = new HashMap();\n          map.put(\"EOF\", true);\n          return new Tuple(map);\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","014c3fc2ef9621f91a3786f1055913d8fa10d0df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"014c3fc2ef9621f91a3786f1055913d8fa10d0df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"804a8d5358fe7b7563b85ee7838714d720b89272":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["014c3fc2ef9621f91a3786f1055913d8fa10d0df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","014c3fc2ef9621f91a3786f1055913d8fa10d0df"],"014c3fc2ef9621f91a3786f1055913d8fa10d0df":["e9017cf144952056066919f1ebc7897ff9bd71b1","16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["804a8d5358fe7b7563b85ee7838714d720b89272"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}