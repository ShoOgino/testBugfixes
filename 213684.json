{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#doRandomDistanceTest(int,int).mjava","commits":[{"id":"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04","date":1582280790,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#doRandomDistanceTest(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene84\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      float x = nextX();\n      float y = nextY();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, x, y);\n      doc.add(new StoredField(\"x\", x));\n      doc.add(new StoredField(\"y\", y));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      float x = nextX();\n      float y = nextY();\n      float radius = (Float.MAX_VALUE / 2) * random().nextFloat();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n        float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n        double distance = cartesianDistance(x, y, docX, docY);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", x, y, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + x + \",\" + y + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n          float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n          double distance = cartesianDistance(x, y, docX, docY);\n          System.out.println(\"\" + doc + \": (\" + x + \",\" + y + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#doRandomDistanceTest(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#doRandomDistanceTest(int,int).mjava","sourceNew":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene86\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      float x = nextX();\n      float y = nextY();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, x, y);\n      doc.add(new StoredField(\"x\", x));\n      doc.add(new StoredField(\"y\", y));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      float x = nextX();\n      float y = nextY();\n      float radius = (Float.MAX_VALUE / 2) * random().nextFloat();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n        float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n        double distance = cartesianDistance(x, y, docX, docY);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", x, y, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + x + \",\" + y + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n          float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n          double distance = cartesianDistance(x, y, docX, docY);\n          System.out.println(\"\" + doc + \": (\" + x + \",\" + y + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene84\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      float x = nextX();\n      float y = nextY();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, x, y);\n      doc.add(new StoredField(\"x\", x));\n      doc.add(new StoredField(\"y\", y));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      float x = nextX();\n      float y = nextY();\n      float radius = (Float.MAX_VALUE / 2) * random().nextFloat();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n        float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n        double distance = cartesianDistance(x, y, docX, docY);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", x, y, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + x + \",\" + y + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n          float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n          double distance = cartesianDistance(x, y, docX, docY);\n          System.out.println(\"\" + doc + \": (\" + x + \",\" + y + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#doRandomDistanceTest(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#doRandomDistanceTest(int,int).mjava","sourceNew":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene86\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene86PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene86PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      float x = nextX();\n      float y = nextY();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, x, y);\n      doc.add(new StoredField(\"x\", x));\n      doc.add(new StoredField(\"y\", y));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      float x = nextX();\n      float y = nextY();\n      float radius = (Float.MAX_VALUE / 2) * random().nextFloat();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n        float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n        double distance = cartesianDistance(x, y, docX, docY);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", x, y, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + x + \",\" + y + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n          float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n          double distance = cartesianDistance(x, y, docX, docY);\n          System.out.println(\"\" + doc + \": (\" + x + \",\" + y + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene86\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      float x = nextX();\n      float y = nextY();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, x, y);\n      doc.add(new StoredField(\"x\", x));\n      doc.add(new StoredField(\"y\", y));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      float x = nextX();\n      float y = nextY();\n      float radius = (Float.MAX_VALUE / 2) * random().nextFloat();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n        float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n        double distance = cartesianDistance(x, y, docX, docY);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", x, y, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + x + \",\" + y + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n          float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n          double distance = cartesianDistance(x, y, docX, docY);\n          System.out.println(\"\" + doc + \": (\" + x + \",\" + y + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9","date":1598432674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#doRandomDistanceTest(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#doRandomDistanceTest(int,int).mjava","sourceNew":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    Codec in = TestUtil.getDefaultCodec();\n    iwc.setCodec(new FilterCodec(in.getName(), in) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene86PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene86PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      float x = nextX();\n      float y = nextY();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, x, y);\n      doc.add(new StoredField(\"x\", x));\n      doc.add(new StoredField(\"y\", y));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      float x = nextX();\n      float y = nextY();\n      float radius = (Float.MAX_VALUE / 2) * random().nextFloat();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n        float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n        double distance = cartesianDistance(x, y, docX, docY);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", x, y, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + x + \",\" + y + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n          float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n          double distance = cartesianDistance(x, y, docX, docY);\n          System.out.println(\"\" + doc + \": (\" + x + \",\" + y + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene86\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene86PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene86PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      float x = nextX();\n      float y = nextY();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, x, y);\n      doc.add(new StoredField(\"x\", x));\n      doc.add(new StoredField(\"y\", y));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      float x = nextX();\n      float y = nextY();\n      float radius = (Float.MAX_VALUE / 2) * random().nextFloat();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n        float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n        double distance = cartesianDistance(x, y, docX, docY);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", x, y, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + x + \",\" + y + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          float docX = reader.document(doc).getField(\"x\").numericValue().floatValue();\n          float docY = reader.document(doc).getField(\"y\").numericValue().floatValue();\n          double distance = cartesianDistance(x, y, docX, docY);\n          System.out.println(\"\" + doc + \": (\" + x + \",\" + y + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"773bf150032d3ef6c95997a154fb914b82875cb8":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["773bf150032d3ef6c95997a154fb914b82875cb8"],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"]},"commit2Childs":{"773bf150032d3ef6c95997a154fb914b82875cb8":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["773bf150032d3ef6c95997a154fb914b82875cb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}