{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExceptionDuringSync().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExceptionDuringSync().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void xxxtestExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer  = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n    failure.setDoFail();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    // We expect sync exceptions in the merge threads\n    cms.setSuppressExceptions();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++)\n      addDoc(writer);\n\n    cms.sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer  = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n    failure.setDoFail();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    // We expect sync exceptions in the merge threads\n    cms.setSuppressExceptions();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++)\n      addDoc(writer);\n\n    cms.sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer  = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n    failure.setDoFail();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    // We expect sync exceptions in the merge threads\n    cms.setSuppressExceptions();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++)\n      addDoc(writer);\n\n    cms.sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void xxxtestExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer  = new IndexWriter(dir, true, new WhitespaceAnalyzer());\n    failure.setDoFail();\n\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    // We expect sync exceptions in the merge threads\n    cms.setSuppressExceptions();\n    writer.setMergeScheduler(cms);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++)\n      addDoc(writer);\n\n    cms.sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}