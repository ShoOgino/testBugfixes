{"path":"lucene/backwards/src/java/org/apache/lucene/index/MergeDocIDRemapper#MergeDocIDRemapper(SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/MergeDocIDRemapper#MergeDocIDRemapper(SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/MergeDocIDRemapper#MergeDocIDRemapper(SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":"  public MergeDocIDRemapper(SegmentInfos infos, int[][] docMaps, int[] delCounts, MergePolicy.OneMerge merge, int mergedDocCount) {\n    this.docMaps = docMaps;\n    SegmentInfo firstSegment = merge.segments.info(0);\n    int i = 0;\n    while(true) {\n      SegmentInfo info = infos.info(i);\n      if (info.equals(firstSegment))\n        break;\n      minDocID += info.docCount;\n      i++;\n    }\n\n    int numDocs = 0;\n    for(int j=0;j<docMaps.length;i++,j++) {\n      numDocs += infos.info(i).docCount;\n      assert infos.info(i).equals(merge.segments.info(j));\n    }\n    maxDocID = minDocID + numDocs;\n\n    starts = new int[docMaps.length];\n    newStarts = new int[docMaps.length];\n\n    starts[0] = minDocID;\n    newStarts[0] = minDocID;\n    for(i=1;i<docMaps.length;i++) {\n      final int lastDocCount = merge.segments.info(i-1).docCount;\n      starts[i] = starts[i-1] + lastDocCount;\n      newStarts[i] = newStarts[i-1] + lastDocCount - delCounts[i-1];\n    }\n    docShift = numDocs - mergedDocCount;\n\n    // There are rare cases when docShift is 0.  It happens\n    // if you try to delete a docID that's out of bounds,\n    // because the SegmentReader still allocates deletedDocs\n    // and pretends it has deletions ... so we can't make\n    // this assert here\n    // assert docShift > 0;\n\n    // Make sure it all adds up:\n    assert docShift == maxDocID - (newStarts[docMaps.length-1] + merge.segments.info(docMaps.length-1).docCount - delCounts[docMaps.length-1]);\n  }\n\n","sourceOld":"  public MergeDocIDRemapper(SegmentInfos infos, int[][] docMaps, int[] delCounts, MergePolicy.OneMerge merge, int mergedDocCount) {\n    this.docMaps = docMaps;\n    SegmentInfo firstSegment = merge.segments.info(0);\n    int i = 0;\n    while(true) {\n      SegmentInfo info = infos.info(i);\n      if (info.equals(firstSegment))\n        break;\n      minDocID += info.docCount;\n      i++;\n    }\n\n    int numDocs = 0;\n    for(int j=0;j<docMaps.length;i++,j++) {\n      numDocs += infos.info(i).docCount;\n      assert infos.info(i).equals(merge.segments.info(j));\n    }\n    maxDocID = minDocID + numDocs;\n\n    starts = new int[docMaps.length];\n    newStarts = new int[docMaps.length];\n\n    starts[0] = minDocID;\n    newStarts[0] = minDocID;\n    for(i=1;i<docMaps.length;i++) {\n      final int lastDocCount = merge.segments.info(i-1).docCount;\n      starts[i] = starts[i-1] + lastDocCount;\n      newStarts[i] = newStarts[i-1] + lastDocCount - delCounts[i-1];\n    }\n    docShift = numDocs - mergedDocCount;\n\n    // There are rare cases when docShift is 0.  It happens\n    // if you try to delete a docID that's out of bounds,\n    // because the SegmentReader still allocates deletedDocs\n    // and pretends it has deletions ... so we can't make\n    // this assert here\n    // assert docShift > 0;\n\n    // Make sure it all adds up:\n    assert docShift == maxDocID - (newStarts[docMaps.length-1] + merge.segments.info(docMaps.length-1).docCount - delCounts[docMaps.length-1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/MergeDocIDRemapper#MergeDocIDRemapper(SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":null,"sourceOld":"  public MergeDocIDRemapper(SegmentInfos infos, int[][] docMaps, int[] delCounts, MergePolicy.OneMerge merge, int mergedDocCount) {\n    this.docMaps = docMaps;\n    SegmentInfo firstSegment = merge.segments.info(0);\n    int i = 0;\n    while(true) {\n      SegmentInfo info = infos.info(i);\n      if (info.equals(firstSegment))\n        break;\n      minDocID += info.docCount;\n      i++;\n    }\n\n    int numDocs = 0;\n    for(int j=0;j<docMaps.length;i++,j++) {\n      numDocs += infos.info(i).docCount;\n      assert infos.info(i).equals(merge.segments.info(j));\n    }\n    maxDocID = minDocID + numDocs;\n\n    starts = new int[docMaps.length];\n    newStarts = new int[docMaps.length];\n\n    starts[0] = minDocID;\n    newStarts[0] = minDocID;\n    for(i=1;i<docMaps.length;i++) {\n      final int lastDocCount = merge.segments.info(i-1).docCount;\n      starts[i] = starts[i-1] + lastDocCount;\n      newStarts[i] = newStarts[i-1] + lastDocCount - delCounts[i-1];\n    }\n    docShift = numDocs - mergedDocCount;\n\n    // There are rare cases when docShift is 0.  It happens\n    // if you try to delete a docID that's out of bounds,\n    // because the SegmentReader still allocates deletedDocs\n    // and pretends it has deletions ... so we can't make\n    // this assert here\n    // assert docShift > 0;\n\n    // Make sure it all adds up:\n    assert docShift == maxDocID - (newStarts[docMaps.length-1] + merge.segments.info(docMaps.length-1).docCount - delCounts[docMaps.length-1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}