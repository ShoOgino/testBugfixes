{"path":"src/test/org/apache/solr/handler/AnalysisRequestHandlerTest#testReadDoc().mjava","commits":[{"id":"65b5c1fd5fa6357d1ab6681080073a45c2e87962","date":1203480393,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/AnalysisRequestHandlerTest#testReadDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testReadDoc() throws Exception {\n    String xml =\n            \"<docs><doc >\" +\n                    \"  <field name=\\\"id\\\" >12345</field>\" +\n                    \"  <field name=\\\"name\\\">cute little kitten</field>\" +\n                    \"  <field name=\\\"text\\\">the quick red fox jumped over the lazy brown dogs</field>\" +\n                    \"</doc>\" +\n                    \"<doc >\" +\n                    \"  <field name=\\\"id\\\" >12346</field>\" +\n                    \"  <field name=\\\"name\\\">big mean dog</field>\" +\n                    \"  <field name=\\\"text\\\">cats like to purr</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    XMLStreamReader parser =\n            inputFactory.createXMLStreamReader(new StringReader(xml));\n    AnalysisRequestHandler handler = new AnalysisRequestHandler();\n    NamedList<Object> result = handler.processContent(parser, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    NamedList<NamedList<NamedList<Object>>> theTokens = (NamedList<NamedList<NamedList<Object>>>) result.get(\"12345\");\n    assertTrue(\"theTokens is null and it shouldn't be\", theTokens != null);\n    NamedList<NamedList<Object>> tokens = theTokens.get(\"name\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 3, tokens.size() == 3);\n    NamedList<Object> token;\n    String value;\n    token = tokens.get(\"token\", 0);\n    value = (String) token.get(\"value\");\n    assertTrue(value + \" is not equal to \" + \"cute\", value.equals(\"cute\") == true);\n    token = tokens.get(\"token\", 1);\n    value = (String) token.get(\"value\");\n    assertTrue(value + \" is not equal to \" + \"little\", value.equals(\"little\") == true);\n\n    token = tokens.get(\"token\", 2);\n    value = (String) token.get(\"value\");\n    assertTrue(value + \" is not equal to \" + \"kitten\", value.equals(\"kitten\") == true);\n\n    tokens = theTokens.get(\"text\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 8, tokens.size() == 8);//stopwords are removed\n\n    String[] gold = new String[]{\"quick\", \"red\", \"fox\", \"jump\", \"over\", \"lazi\", \"brown\", \"dog\"};\n    for (int j = 0; j < gold.length; j++) {\n      NamedList<Object> tok = tokens.get(\"token\", j);\n      value = (String) tok.get(\"value\");\n      assertTrue(value + \" is not equal to \" + gold[j], value.equals(gold[j]) == true);\n    }\n    theTokens = (NamedList<NamedList<NamedList<Object>>>) result.get(\"12346\");\n    assertTrue(\"theTokens is null and it shouldn't be\", theTokens != null);\n    tokens = theTokens.get(\"name\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 3, tokens.size() == 3);\n    gold = new String[]{\"cat\", \"like\", \"purr\"};\n    tokens = theTokens.get(\"text\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 3, tokens.size() == 3);//stopwords are removed\n    for (int j = 0; j < gold.length; j++) {\n      NamedList<Object> tok = tokens.get(\"token\", j);\n      value = (String) tok.get(\"value\");\n      assertTrue(value + \" is not equal to \" + gold[j], value.equals(gold[j]) == true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTest#testReadDoc().mjava","pathOld":"src/test/org/apache/solr/handler/AnalysisRequestHandlerTest#testReadDoc().mjava","sourceNew":"  public void testReadDoc() throws Exception {\n    String xml =\n            \"<docs><doc >\" +\n                    \"  <field name=\\\"id\\\" >12345</field>\" +\n                    \"  <field name=\\\"name\\\">cute little kitten</field>\" +\n                    \"  <field name=\\\"text\\\">the quick red fox jumped over the lazy brown dogs</field>\" +\n                    \"</doc>\" +\n                    \"<doc >\" +\n                    \"  <field name=\\\"id\\\" >12346</field>\" +\n                    \"  <field name=\\\"name\\\">big mean dog</field>\" +\n                    \"  <field name=\\\"text\\\">cats like to purr</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    XMLStreamReader parser =\n            inputFactory.createXMLStreamReader(new StringReader(xml));\n    AnalysisRequestHandler handler = new AnalysisRequestHandler();\n    NamedList<Object> result = handler.processContent(parser, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    NamedList<NamedList<NamedList<Object>>> theTokens = (NamedList<NamedList<NamedList<Object>>>) result.get(\"12345\");\n    assertTrue(\"theTokens is null and it shouldn't be\", theTokens != null);\n    NamedList<NamedList<Object>> tokens = theTokens.get(\"name\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 3, tokens.size() == 3);\n    NamedList<Object> token;\n    String value;\n    token = tokens.get(\"token\", 0);\n    value = (String) token.get(\"value\");\n    assertTrue(value + \" is not equal to \" + \"cute\", value.equals(\"cute\") == true);\n    token = tokens.get(\"token\", 1);\n    value = (String) token.get(\"value\");\n    assertTrue(value + \" is not equal to \" + \"little\", value.equals(\"little\") == true);\n\n    token = tokens.get(\"token\", 2);\n    value = (String) token.get(\"value\");\n    assertTrue(value + \" is not equal to \" + \"kitten\", value.equals(\"kitten\") == true);\n\n    tokens = theTokens.get(\"text\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 8, tokens.size() == 8);//stopwords are removed\n\n    String[] gold = new String[]{\"quick\", \"red\", \"fox\", \"jump\", \"over\", \"lazi\", \"brown\", \"dog\"};\n    for (int j = 0; j < gold.length; j++) {\n      NamedList<Object> tok = tokens.get(\"token\", j);\n      value = (String) tok.get(\"value\");\n      assertTrue(value + \" is not equal to \" + gold[j], value.equals(gold[j]) == true);\n    }\n    theTokens = (NamedList<NamedList<NamedList<Object>>>) result.get(\"12346\");\n    assertTrue(\"theTokens is null and it shouldn't be\", theTokens != null);\n    tokens = theTokens.get(\"name\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 3, tokens.size() == 3);\n    gold = new String[]{\"cat\", \"like\", \"purr\"};\n    tokens = theTokens.get(\"text\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 3, tokens.size() == 3);//stopwords are removed\n    for (int j = 0; j < gold.length; j++) {\n      NamedList<Object> tok = tokens.get(\"token\", j);\n      value = (String) tok.get(\"value\");\n      assertTrue(value + \" is not equal to \" + gold[j], value.equals(gold[j]) == true);\n    }\n  }\n\n","sourceOld":"  public void testReadDoc() throws Exception {\n    String xml =\n            \"<docs><doc >\" +\n                    \"  <field name=\\\"id\\\" >12345</field>\" +\n                    \"  <field name=\\\"name\\\">cute little kitten</field>\" +\n                    \"  <field name=\\\"text\\\">the quick red fox jumped over the lazy brown dogs</field>\" +\n                    \"</doc>\" +\n                    \"<doc >\" +\n                    \"  <field name=\\\"id\\\" >12346</field>\" +\n                    \"  <field name=\\\"name\\\">big mean dog</field>\" +\n                    \"  <field name=\\\"text\\\">cats like to purr</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    XMLStreamReader parser =\n            inputFactory.createXMLStreamReader(new StringReader(xml));\n    AnalysisRequestHandler handler = new AnalysisRequestHandler();\n    NamedList<Object> result = handler.processContent(parser, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    NamedList<NamedList<NamedList<Object>>> theTokens = (NamedList<NamedList<NamedList<Object>>>) result.get(\"12345\");\n    assertTrue(\"theTokens is null and it shouldn't be\", theTokens != null);\n    NamedList<NamedList<Object>> tokens = theTokens.get(\"name\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 3, tokens.size() == 3);\n    NamedList<Object> token;\n    String value;\n    token = tokens.get(\"token\", 0);\n    value = (String) token.get(\"value\");\n    assertTrue(value + \" is not equal to \" + \"cute\", value.equals(\"cute\") == true);\n    token = tokens.get(\"token\", 1);\n    value = (String) token.get(\"value\");\n    assertTrue(value + \" is not equal to \" + \"little\", value.equals(\"little\") == true);\n\n    token = tokens.get(\"token\", 2);\n    value = (String) token.get(\"value\");\n    assertTrue(value + \" is not equal to \" + \"kitten\", value.equals(\"kitten\") == true);\n\n    tokens = theTokens.get(\"text\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 8, tokens.size() == 8);//stopwords are removed\n\n    String[] gold = new String[]{\"quick\", \"red\", \"fox\", \"jump\", \"over\", \"lazi\", \"brown\", \"dog\"};\n    for (int j = 0; j < gold.length; j++) {\n      NamedList<Object> tok = tokens.get(\"token\", j);\n      value = (String) tok.get(\"value\");\n      assertTrue(value + \" is not equal to \" + gold[j], value.equals(gold[j]) == true);\n    }\n    theTokens = (NamedList<NamedList<NamedList<Object>>>) result.get(\"12346\");\n    assertTrue(\"theTokens is null and it shouldn't be\", theTokens != null);\n    tokens = theTokens.get(\"name\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 3, tokens.size() == 3);\n    gold = new String[]{\"cat\", \"like\", \"purr\"};\n    tokens = theTokens.get(\"text\");\n    assertTrue(\"tokens is null and it shouldn't be\", tokens != null);\n    assertTrue(\"tokens Size: \" + tokens.size() + \" is not : \" + 3, tokens.size() == 3);//stopwords are removed\n    for (int j = 0; j < gold.length; j++) {\n      NamedList<Object> tok = tokens.get(\"token\", j);\n      value = (String) tok.get(\"value\");\n      assertTrue(value + \" is not equal to \" + gold[j], value.equals(gold[j]) == true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["65b5c1fd5fa6357d1ab6681080073a45c2e87962"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"65b5c1fd5fa6357d1ab6681080073a45c2e87962":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["65b5c1fd5fa6357d1ab6681080073a45c2e87962"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"65b5c1fd5fa6357d1ab6681080073a45c2e87962":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}