{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testCompressedHunspellDictionary_loadDicAff().mjava","commits":[{"id":"640a015a5b43a8d9d05b311071bf93beb685e6b1","date":1338352782,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testCompressedHunspellDictionary_loadDicAff().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCompressedHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"testCompressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"testCompressed.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"558d0b2765fb22e5c20304b1e85c6cc7b9bba359","date":1342503992,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testCompressedHunspellDictionary_loadDicAff().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testCompressedHunspellDictionary_loadDicAff().mjava","sourceNew":"  @Test\n  public void testCompressedHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"testCompressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"testCompressed.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCompressedHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"testCompressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"testCompressed.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testCompressedHunspellDictionary_loadDicAff().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testCompressedHunspellDictionary_loadDicAff().mjava","sourceNew":"  @Test\n  public void testCompressedHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"testCompressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"testCompressed.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCompressedHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"testCompressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"testCompressed.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testCompressedHunspellDictionary_loadDicAff().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testCompressedHunspellDictionary_loadDicAff().mjava","sourceNew":"  @Test\n  public void testCompressedHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"testCompressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"testCompressed.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCompressedHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"testCompressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"testCompressed.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testCompressedHunspellDictionary_loadDicAff().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCompressedHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"testCompressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"testCompressed.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testCompressedHunspellDictionary_loadDicAff().mjava","sourceNew":"  public void testCompressedDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n\n    Dictionary dictionary = new Dictionary(affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3, new BytesRef()).length);\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCompressedHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"testCompressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"testCompressed.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["640a015a5b43a8d9d05b311071bf93beb685e6b1","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["640a015a5b43a8d9d05b311071bf93beb685e6b1","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"640a015a5b43a8d9d05b311071bf93beb685e6b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["640a015a5b43a8d9d05b311071bf93beb685e6b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["640a015a5b43a8d9d05b311071bf93beb685e6b1"],"640a015a5b43a8d9d05b311071bf93beb685e6b1":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["aba371508186796cc6151d8223a5b4e16d02e26e","ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}