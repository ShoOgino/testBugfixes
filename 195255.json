{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e6d6f6217dc04f29ee177d2837147dd47627787","date":1429543326,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"138a352a6d4e54824d0275bc7aa1b784e78c81fe","date":1467756222,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    if (jj_2_1(2)) {\n      firstQuery = MultiTerm(field, clauses);\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        mods = Modifiers();\n        q = Clause(field);\n        addClause(clauses, CONJ_NONE, mods, q);\n        if (mods == MOD_NONE) {\n          firstQuery = q;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        break label_1;\n      }\n      if (jj_2_2(2)) {\n        MultiTerm(field, clauses);\n      } else {\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case AND:\n        case OR:\n        case NOT:\n        case PLUS:\n        case MINUS:\n        case BAREOPER:\n        case LPAREN:\n        case STAR:\n        case QUOTED:\n        case TERM:\n        case PREFIXTERM:\n        case WILDTERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          conj = Conjunction();\n          mods = Modifiers();\n          q = Clause(field);\n        addClause(clauses, conj, mods, q);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n      }\n    }\n    if (clauses.size() == 1 && firstQuery != null) {\n      {if (true) return firstQuery;}\n    } else {\n      {if (true) return getBooleanQuery(clauses);}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    if (jj_2_1(2)) {\n      firstQuery = MultiTerm(field, clauses);\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        mods = Modifiers();\n        q = Clause(field);\n        addClause(clauses, CONJ_NONE, mods, q);\n        if (mods == MOD_NONE) {\n          firstQuery = q;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        break label_1;\n      }\n      if (jj_2_2(2)) {\n        MultiTerm(field, clauses);\n      } else {\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case AND:\n        case OR:\n        case NOT:\n        case PLUS:\n        case MINUS:\n        case BAREOPER:\n        case LPAREN:\n        case STAR:\n        case QUOTED:\n        case TERM:\n        case PREFIXTERM:\n        case WILDTERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          conj = Conjunction();\n          mods = Modifiers();\n          q = Clause(field);\n        addClause(clauses, conj, mods, q);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n      }\n    }\n    if (clauses.size() == 1 && firstQuery != null) {\n      {if (true) return firstQuery;}\n    } else {\n      {if (true) return getBooleanQuery(clauses);}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf8c857cdf9b9be903cae84ef15985ad090a05","date":1600342158,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    if (jj_2_1(2)) {\n      firstQuery = MultiTerm(field, clauses);\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:{\n        mods = Modifiers();\n        q = Clause(field);\naddClause(clauses, CONJ_NONE, mods, q);\n        if (mods == MOD_NONE) {\n          firstQuery = q;\n        }\n        break;\n        }\n      default:\n        jj_la1[4] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:{\n        ;\n        break;\n        }\n      default:\n        jj_la1[5] = jj_gen;\n        break label_1;\n      }\n      if (jj_2_2(2)) {\n        MultiTerm(field, clauses);\n      } else {\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case AND:\n        case OR:\n        case NOT:\n        case PLUS:\n        case MINUS:\n        case BAREOPER:\n        case LPAREN:\n        case STAR:\n        case QUOTED:\n        case TERM:\n        case PREFIXTERM:\n        case WILDTERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:{\n          conj = Conjunction();\n          mods = Modifiers();\n          q = Clause(field);\naddClause(clauses, conj, mods, q);\n          break;\n          }\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n      }\n    }\nif (clauses.size() == 1 && firstQuery != null) {\n      {if (\"\" != null) return firstQuery;}\n    } else {\n      {if (\"\" != null) return getBooleanQuery(clauses);}\n    }\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    if (jj_2_1(2)) {\n      firstQuery = MultiTerm(field, clauses);\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        mods = Modifiers();\n        q = Clause(field);\n        addClause(clauses, CONJ_NONE, mods, q);\n        if (mods == MOD_NONE) {\n          firstQuery = q;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        break label_1;\n      }\n      if (jj_2_2(2)) {\n        MultiTerm(field, clauses);\n      } else {\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case AND:\n        case OR:\n        case NOT:\n        case PLUS:\n        case MINUS:\n        case BAREOPER:\n        case LPAREN:\n        case STAR:\n        case QUOTED:\n        case TERM:\n        case PREFIXTERM:\n        case WILDTERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          conj = Conjunction();\n          mods = Modifiers();\n          q = Clause(field);\n        addClause(clauses, conj, mods, q);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n      }\n    }\n    if (clauses.size() == 1 && firstQuery != null) {\n      {if (true) return firstQuery;}\n    } else {\n      {if (true) return getBooleanQuery(clauses);}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e6d6f6217dc04f29ee177d2837147dd47627787":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7e6d6f6217dc04f29ee177d2837147dd47627787","138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"]},"commit2Childs":{"7e6d6f6217dc04f29ee177d2837147dd47627787":["138a352a6d4e54824d0275bc7aa1b784e78c81fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["c4bf8c857cdf9b9be903cae84ef15985ad090a05","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}