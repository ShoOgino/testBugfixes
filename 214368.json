{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}