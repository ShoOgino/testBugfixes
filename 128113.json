{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1176cc473fd402233610120f0af6fca86314bcc","date":1274270317,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d7a70709df2f3ba961939504c75098e92da8b99","date":1286120517,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set[#],int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set<?> dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d7a70709df2f3ba961939504c75098e92da8b99":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"b1176cc473fd402233610120f0af6fca86314bcc":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a7347509fad0711ac30cb15a746e9a3830a38ebd","4d7a70709df2f3ba961939504c75098e92da8b99"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["b1176cc473fd402233610120f0af6fca86314bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7a70709df2f3ba961939504c75098e92da8b99"]},"commit2Childs":{"4d7a70709df2f3ba961939504c75098e92da8b99":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1176cc473fd402233610120f0af6fca86314bcc":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b1176cc473fd402233610120f0af6fca86314bcc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["4d7a70709df2f3ba961939504c75098e92da8b99","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}