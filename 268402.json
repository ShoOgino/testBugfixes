{"path":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","sourceNew":"  public void testCrashAfterCloseNoWait() throws IOException {\n    \n    IndexWriter writer = initIndex(random, false);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    writer.close(false);\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCrashAfterCloseNoWait() throws IOException {\n    \n    IndexWriter writer = initIndex(random, false);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    writer.close(false);\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","sourceNew":"  public void testCrashAfterCloseNoWait() throws IOException {\n    \n    IndexWriter writer = initIndex(random(), false);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    writer.close(false);\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCrashAfterCloseNoWait() throws IOException {\n    \n    IndexWriter writer = initIndex(random, false);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    writer.close(false);\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","sourceNew":"  public void testCrashAfterCloseNoWait() throws IOException {\n    \n    IndexWriter writer = initIndex(random(), false);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    writer.close(false);\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCrashAfterCloseNoWait() throws IOException {\n    \n    IndexWriter writer = initIndex(random(), false);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    writer.close(false);\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","sourceNew":"  public void testCrashAfterCloseNoWait() throws IOException {\n    \n    IndexWriter writer = initIndex(random(), false);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    writer.shutdown(false);\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCrashAfterCloseNoWait() throws IOException {\n    \n    IndexWriter writer = initIndex(random(), false);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    writer.close(false);\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","sourceNew":"  public void testCrashAfterCloseNoWait() throws IOException {\n    Random random = random();\n    MockDirectoryWrapper dir = newMockDirectory(random);\n    IndexWriter writer = initIndex(random, dir, false, false);\n\n    try {\n      writer.commit();\n    } finally {\n      writer.close();\n    }\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCrashAfterCloseNoWait() throws IOException {\n    \n    IndexWriter writer = initIndex(random(), false);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    writer.shutdown(false);\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testCrashAfterCloseNoWait().mjava","sourceNew":"  public void testCrashAfterCloseNoWait() throws IOException {\n    Random random = random();\n    MockDirectoryWrapper dir = newMockDirectory(random, NoLockFactory.INSTANCE);\n    IndexWriter writer = initIndex(random, dir, false, false);\n\n    try {\n      writer.commit();\n    } finally {\n      writer.close();\n    }\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCrashAfterCloseNoWait() throws IOException {\n    Random random = random();\n    MockDirectoryWrapper dir = newMockDirectory(random);\n    IndexWriter writer = initIndex(random, dir, false, false);\n\n    try {\n      writer.commit();\n    } finally {\n      writer.close();\n    }\n\n    dir.crash();\n\n    /*\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" + dir.fileLength(l[i]) + \" bytes\");\n    */\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(157, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285cdc737de75b7cc7c284a156b20214deb67bca":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["285cdc737de75b7cc7c284a156b20214deb67bca"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}