{"path":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random, q1,s);\n    QueryUtils.check(random, q2,s);\n    QueryUtils.check(random, q3,s);\n    QueryUtils.check(random, q4,s);\n    QueryUtils.check(random, q5,s);\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random, q1,s);\n    QueryUtils.check(random, q2,s);\n    QueryUtils.check(random, q3,s);\n    QueryUtils.check(random, q4,s);\n    QueryUtils.check(random, q5,s);\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random, q1,s);\n    QueryUtils.check(random, q2,s);\n    QueryUtils.check(random, q3,s);\n    QueryUtils.check(random, q4,s);\n    QueryUtils.check(random, q5,s);\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random, q1,s);\n    QueryUtils.check(random, q2,s);\n    QueryUtils.check(random, q3,s);\n    QueryUtils.check(random, q4,s);\n    QueryUtils.check(random, q5,s);\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random, q1,s);\n    QueryUtils.check(random, q2,s);\n    QueryUtils.check(random, q3,s);\n    QueryUtils.check(random, q4,s);\n    QueryUtils.check(random, q5,s);\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random, q1,s);\n    QueryUtils.check(random, q2,s);\n    QueryUtils.check(random, q3,s);\n    QueryUtils.check(random, q4,s);\n    QueryUtils.check(random, q5,s);\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random, q1, s, rarely());\n    QueryUtils.check(random, q2, s, rarely());\n    QueryUtils.check(random, q3, s, rarely());\n    QueryUtils.check(random, q4, s, rarely());\n    QueryUtils.check(random, q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random, q1,s);\n    QueryUtils.check(random, q2,s);\n    QueryUtils.check(random, q3,s);\n    QueryUtils.check(random, q4,s);\n    QueryUtils.check(random, q5,s);\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random, q1, s, rarely());\n    QueryUtils.check(random, q2, s, rarely());\n    QueryUtils.check(random, q3, s, rarely());\n    QueryUtils.check(random, q4, s, rarely());\n    QueryUtils.check(random, q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8be580b58bcc650d428f3f22de81cadcf51d650a":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["8be580b58bcc650d428f3f22de81cadcf51d650a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}