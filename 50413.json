{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#search(Matrix,double[],int,DistanceMeasure).mjava","commits":[{"id":"f7656aa7218845fc29808b9dfe775b9558ca4611","date":1533776721,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#search(Matrix,double[],int,DistanceMeasure).mjava","pathOld":"/dev/null","sourceNew":"  public static Matrix search(Matrix observations,\n                              double[] vec,\n                              int k,\n                              DistanceMeasure distanceMeasure) {\n\n    double[][] data = observations.getData();\n    TreeSet<Neighbor> neighbors = new TreeSet();\n    for(int i=0; i<data.length; i++) {\n      double distance = distanceMeasure.compute(vec, data[i]);\n      neighbors.add(new Neighbor(i, distance));\n      if(neighbors.size() > k) {\n        neighbors.pollLast();\n      }\n    }\n\n    double[][] out = new double[neighbors.size()][];\n    List<String> rowLabels = observations.getRowLabels();\n    List<String> newRowLabels = new ArrayList();\n    List<Number> indexes = new ArrayList();\n    List<Number> distances = new ArrayList();\n    int i=-1;\n\n    while(neighbors.size() > 0) {\n      Neighbor neighbor = neighbors.pollFirst();\n      int rowIndex = neighbor.getRow();\n\n      if(rowLabels != null) {\n        newRowLabels.add(rowLabels.get(rowIndex));\n      }\n\n      out[++i] = data[rowIndex];\n      distances.add(neighbor.getDistance());\n      indexes.add(rowIndex);\n    }\n\n    Matrix knn = new Matrix(out);\n\n    if(rowLabels != null) {\n      knn.setRowLabels(newRowLabels);\n    }\n\n    knn.setColumnLabels(observations.getColumnLabels());\n    knn.setAttribute(\"distances\", distances);\n    knn.setAttribute(\"indexes\", indexes);\n    return knn;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#search(Matrix,double[],int,DistanceMeasure).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#search(Matrix,double[],int,DistanceMeasure).mjava","sourceNew":"  public static Matrix search(Matrix observations,\n                              double[] vec,\n                              int k,\n                              DistanceMeasure distanceMeasure) {\n\n    double[][] data = observations.getData();\n    TreeSet<Neighbor> neighbors = new TreeSet<>();\n    for(int i=0; i<data.length; i++) {\n      double distance = distanceMeasure.compute(vec, data[i]);\n      neighbors.add(new Neighbor(i, distance));\n      if(neighbors.size() > k) {\n        neighbors.pollLast();\n      }\n    }\n\n    double[][] out = new double[neighbors.size()][];\n    List<String> rowLabels = observations.getRowLabels();\n    List<String> newRowLabels = new ArrayList<>();\n    List<Number> indexes = new ArrayList<>();\n    List<Number> distances = new ArrayList<>();\n    int i=-1;\n\n    while(neighbors.size() > 0) {\n      Neighbor neighbor = neighbors.pollFirst();\n      int rowIndex = neighbor.getRow();\n\n      if(rowLabels != null) {\n        newRowLabels.add(rowLabels.get(rowIndex));\n      }\n\n      out[++i] = data[rowIndex];\n      distances.add(neighbor.getDistance());\n      indexes.add(rowIndex);\n    }\n\n    Matrix knn = new Matrix(out);\n\n    if(rowLabels != null) {\n      knn.setRowLabels(newRowLabels);\n    }\n\n    knn.setColumnLabels(observations.getColumnLabels());\n    knn.setAttribute(\"distances\", distances);\n    knn.setAttribute(\"indexes\", indexes);\n    return knn;\n  }\n\n","sourceOld":"  public static Matrix search(Matrix observations,\n                              double[] vec,\n                              int k,\n                              DistanceMeasure distanceMeasure) {\n\n    double[][] data = observations.getData();\n    TreeSet<Neighbor> neighbors = new TreeSet();\n    for(int i=0; i<data.length; i++) {\n      double distance = distanceMeasure.compute(vec, data[i]);\n      neighbors.add(new Neighbor(i, distance));\n      if(neighbors.size() > k) {\n        neighbors.pollLast();\n      }\n    }\n\n    double[][] out = new double[neighbors.size()][];\n    List<String> rowLabels = observations.getRowLabels();\n    List<String> newRowLabels = new ArrayList();\n    List<Number> indexes = new ArrayList();\n    List<Number> distances = new ArrayList();\n    int i=-1;\n\n    while(neighbors.size() > 0) {\n      Neighbor neighbor = neighbors.pollFirst();\n      int rowIndex = neighbor.getRow();\n\n      if(rowLabels != null) {\n        newRowLabels.add(rowLabels.get(rowIndex));\n      }\n\n      out[++i] = data[rowIndex];\n      distances.add(neighbor.getDistance());\n      indexes.add(rowIndex);\n    }\n\n    Matrix knn = new Matrix(out);\n\n    if(rowLabels != null) {\n      knn.setRowLabels(newRowLabels);\n    }\n\n    knn.setColumnLabels(observations.getColumnLabels());\n    knn.setAttribute(\"distances\", distances);\n    knn.setAttribute(\"indexes\", indexes);\n    return knn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}