{"path":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#sumUpperBound(double).mjava","commits":[{"id":"3c5054bf15748079a041f921a9178e8fe84f1806","date":1514554505,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#sumUpperBound(double).mjava","pathOld":"/dev/null","sourceNew":"  private float sumUpperBound(double sum) {\n    if (numClauses <= 2) {\n      // When there are only two clauses, the sum is always the same regardless\n      // of the order.\n      return (float) sum;\n    }\n\n    // The error of sums depends on the order in which values are summed up. In\n    // order to avoid this issue, we compute an upper bound of the value that\n    // the sum may take. If the max relative error is b, then it means that two\n    // sums are always within 2*b of each other.\n    // For conjunctions, we could skip this error factor since the order in which\n    // scores are summed up is predictable, but in practice, this wouldn't help\n    // much since the delta that is introduced by this error factor is usually\n    // cancelled by the float cast.\n    double b = MathUtil.sumRelativeErrorBound(numClauses);\n    return (float) ((1.0 + 2 * b) * sum);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#scoreSumUpperBound(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#sumUpperBound(double).mjava","sourceNew":"  private float scoreSumUpperBound(double sum) {\n    if (numClauses <= 2) {\n      // When there are only two clauses, the sum is always the same regardless\n      // of the order.\n      return (float) sum;\n    }\n\n    // The error of sums depends on the order in which values are summed up. In\n    // order to avoid this issue, we compute an upper bound of the value that\n    // the sum may take. If the max relative error is b, then it means that two\n    // sums are always within 2*b of each other.\n    // For conjunctions, we could skip this error factor since the order in which\n    // scores are summed up is predictable, but in practice, this wouldn't help\n    // much since the delta that is introduced by this error factor is usually\n    // cancelled by the float cast.\n    double b = MathUtil.sumRelativeErrorBound(numClauses);\n    return (float) ((1.0 + 2 * b) * sum);\n  }\n\n","sourceOld":"  private float sumUpperBound(double sum) {\n    if (numClauses <= 2) {\n      // When there are only two clauses, the sum is always the same regardless\n      // of the order.\n      return (float) sum;\n    }\n\n    // The error of sums depends on the order in which values are summed up. In\n    // order to avoid this issue, we compute an upper bound of the value that\n    // the sum may take. If the max relative error is b, then it means that two\n    // sums are always within 2*b of each other.\n    // For conjunctions, we could skip this error factor since the order in which\n    // scores are summed up is predictable, but in practice, this wouldn't help\n    // much since the delta that is introduced by this error factor is usually\n    // cancelled by the float cast.\n    double b = MathUtil.sumRelativeErrorBound(numClauses);\n    return (float) ((1.0 + 2 * b) * sum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"523cc6563c99a55527ef7993efc5413c6648852d":["3c5054bf15748079a041f921a9178e8fe84f1806"],"3c5054bf15748079a041f921a9178e8fe84f1806":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["523cc6563c99a55527ef7993efc5413c6648852d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c5054bf15748079a041f921a9178e8fe84f1806"],"523cc6563c99a55527ef7993efc5413c6648852d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3c5054bf15748079a041f921a9178e8fe84f1806":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}