{"path":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(int,String).mjava","commits":[{"id":"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6","date":1547236077,"type":1,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(String,int).mjava","sourceNew":"  private void waitCol(int slices, String collection) {\n    waitForState(\"waiting for collections to be created\", collection,\n        (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            // per predicate javadoc, this is what we get if the collection doesn't exist at all.\n            return false;\n          }\n          Collection<Slice> activeSlices = collectionState.getActiveSlices();\n          int size = activeSlices.size();\n          return size == slices;\n        });\n  }\n\n","sourceOld":"  private void waitCol(final String datePart, int slices) throws InterruptedException {\n    // collection to exist\n    String collection = alias + \"_\" + datePart;\n    waitForState(\"waiting for collections to be created\", collection,\n        (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            // per predicate javadoc, this is what we get if the collection doesn't exist at all.\n            return false;\n          }\n          Collection<Slice> activeSlices = collectionState.getActiveSlices();\n          int size = activeSlices.size();\n          return size == slices;\n        });\n    // and alias to be aware of collection\n    long start = System.nanoTime(); // mumble mumble precommit mumble mumble...\n    while (!cluster.getSolrClient().getZkStateReader().getAliases().getCollectionAliasListMap().get(alias).contains(collection)) {\n      if (NANOSECONDS.toSeconds(System.nanoTime() - start) > 10) {\n        fail(\"took over 10 seconds after collection creation to update aliases\");\n      } else {\n        Thread.sleep(500);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":5,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#waitCol(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitCol(int,String).mjava","sourceNew":"  @SuppressWarnings(\"WeakerAccess\")\n  void waitCol(int slices, String collection) {\n    waitForState(\"waiting for collections to be created\", collection,\n        (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            // per predicate javadoc, this is what we get if the collection doesn't exist at all.\n            return false;\n          }\n          Collection<Slice> activeSlices = collectionState.getActiveSlices();\n          int size = activeSlices.size();\n          return size == slices;\n        });\n  }\n\n","sourceOld":"  private void waitCol(int slices, String collection) {\n    waitForState(\"waiting for collections to be created\", collection,\n        (liveNodes, collectionState) -> {\n          if (collectionState == null) {\n            // per predicate javadoc, this is what we get if the collection doesn't exist at all.\n            return false;\n          }\n          Collection<Slice> activeSlices = collectionState.getActiveSlices();\n          int size = activeSlices.size();\n          return size == slices;\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6"],"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b627755385655c7cd3fb296f17593658805cf4d5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6"],"b627755385655c7cd3fb296f17593658805cf4d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11b67e7dc6d14dd8535564a49ca9c12ec5e8b2b6":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}