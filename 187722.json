{"path":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testBoolDocValuesMatch().mjava","commits":[{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testBoolDocValuesMatch().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  boolean docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testBoolDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"2\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"3\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"4\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"5\", \"booldv\", \"true\", \"booldv\", \"false\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"booldv:true\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=5]\"\n    );\n\n    // boolean: range query, \n    assertQ(req(\"q\", \"booldv:[false TO false]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=2]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\",\n        \"//result/doc[3]/str[@name='id'][.=5]\");\n\n\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\", \"rows\", \"10\", \"fl\", \"booldv\"),\n        \"//result/doc[1]/arr[@name='booldv']/bool[1][.='true']\",\n        \"//result/doc[2]/arr[@name='booldv']/bool[1][.='false']\",\n        \"//result/doc[3]/arr[@name='booldv']/bool[1][.='true']\",\n        \"//result/doc[4]/arr[@name='booldv']/bool[1][.='false']\",\n        \"//result/doc[5]/arr[@name='booldv']/bool[1][.='false']\",\n        \"//result/doc[5]/arr[@name='booldv']/bool[2][.='true']\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMultiTest#testBoolDocValuesMatch().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests the ability to do basic queries (without scoring, just match-only) on\n   *  boolean docvalues fields that are not inverted (indexed \"forward\" only)\n   */\n  @Test\n  public void testBoolDocValuesMatch() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"2\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"3\", \"booldv\", \"true\"));\n    assertU(adoc(\"id\", \"4\", \"booldv\", \"false\"));\n    assertU(adoc(\"id\", \"5\", \"booldv\", \"true\", \"booldv\", \"false\"));\n    assertU(commit());\n\n    // string: termquery\n    assertQ(req(\"q\", \"booldv:true\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=1]\",\n        \"//result/doc[2]/str[@name='id'][.=3]\",\n        \"//result/doc[3]/str[@name='id'][.=5]\"\n    );\n\n    // boolean: range query, \n    assertQ(req(\"q\", \"booldv:[false TO false]\", \"sort\", \"id asc\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/str[@name='id'][.=2]\",\n        \"//result/doc[2]/str[@name='id'][.=4]\",\n        \"//result/doc[3]/str[@name='id'][.=5]\");\n\n\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\", \"rows\", \"10\", \"fl\", \"booldv\"),\n        \"//result/doc[1]/arr[@name='booldv']/bool[1][.='true']\",\n        \"//result/doc[2]/arr[@name='booldv']/bool[1][.='false']\",\n        \"//result/doc[3]/arr[@name='booldv']/bool[1][.='true']\",\n        \"//result/doc[4]/arr[@name='booldv']/bool[1][.='false']\",\n        \"//result/doc[5]/arr[@name='booldv']/bool[1][.='false']\",\n        \"//result/doc[5]/arr[@name='booldv']/bool[2][.='true']\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"]},"commit2Childs":{"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}