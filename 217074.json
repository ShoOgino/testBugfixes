{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    sfa.setComplementThreshold(StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    sfa.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    sfa.setComplementThreshold(StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    sfa.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    sfa.setComplementThreshold(StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    sfa.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["c4015cd39dff8d4dec562d909f9766debac53aa6","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["07155cdd910937cdf6877e48884d5782845c8b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}