{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleTransLog#replay(NodeProcess,long,long).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleTransLog#replay(NodeProcess,long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Replays ops between start and end location against the provided writer.  Can run concurrently with ongoing operations. */\n  public void replay(NodeProcess primary, long start, long end) throws IOException {\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n      byte[] intBuffer = new byte[4];\n      ByteBuffer intByteBuffer = ByteBuffer.wrap(intBuffer);\n      ByteArrayDataInput in = new ByteArrayDataInput();\n\n      long pos = start;\n      while (pos < end) {\n        intByteBuffer.position(0);\n        intByteBuffer.limit(4);\n        readBytesFromChannel(pos, intByteBuffer);\n        pos += 4;\n        int len = ((intBuffer[0] & 0xff) << 24) |\n          (intBuffer[1] & 0xff) << 16 |\n          (intBuffer[2] & 0xff) << 8 |\n          (intBuffer[3] & 0xff);\n\n        byte[] bytes = new byte[len];\n        readBytesFromChannel(pos, ByteBuffer.wrap(bytes));\n        pos += len;\n\n        in.reset(bytes);\n        \n        byte op = in.readByte();\n        //System.out.println(\"xlog: replay op=\" + op);\n        switch (op) {\n        case 0:\n          // We replay add as update:\n          replayAddDocument(c, primary, in);\n          break;\n\n        case 1:\n          // We replay add as update:\n          replayAddDocument(c, primary, in);\n          break;\n\n        case 2:\n          replayDeleteDocuments(c, primary, in);\n          break;\n\n        default:\n          throw new CorruptIndexException(\"invalid operation \" + op, in);\n        }\n      }\n      assert pos == end;\n      //System.out.println(\"xlog: done replay\");\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING_DONE);\n      c.flush();\n      //System.out.println(\"xlog: done flush\");\n      c.in.readByte();\n      //System.out.println(\"xlog: done readByte\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleTransLog#replay(NodeProcess,long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Replays ops between start and end location against the provided writer.  Can run concurrently with ongoing operations. */\n  public void replay(NodeProcess primary, long start, long end) throws IOException {\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n      byte[] intBuffer = new byte[4];\n      ByteBuffer intByteBuffer = ByteBuffer.wrap(intBuffer);\n      ByteArrayDataInput in = new ByteArrayDataInput();\n\n      long pos = start;\n      while (pos < end) {\n        intByteBuffer.position(0);\n        intByteBuffer.limit(4);\n        readBytesFromChannel(pos, intByteBuffer);\n        pos += 4;\n        int len = ((intBuffer[0] & 0xff) << 24) |\n          (intBuffer[1] & 0xff) << 16 |\n          (intBuffer[2] & 0xff) << 8 |\n          (intBuffer[3] & 0xff);\n\n        byte[] bytes = new byte[len];\n        readBytesFromChannel(pos, ByteBuffer.wrap(bytes));\n        pos += len;\n\n        in.reset(bytes);\n        \n        byte op = in.readByte();\n        //System.out.println(\"xlog: replay op=\" + op);\n        switch (op) {\n        case 0:\n          // We replay add as update:\n          replayAddDocument(c, primary, in);\n          break;\n\n        case 1:\n          // We replay add as update:\n          replayAddDocument(c, primary, in);\n          break;\n\n        case 2:\n          replayDeleteDocuments(c, primary, in);\n          break;\n\n        default:\n          throw new CorruptIndexException(\"invalid operation \" + op, in);\n        }\n      }\n      assert pos == end;\n      //System.out.println(\"xlog: done replay\");\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING_DONE);\n      c.flush();\n      //System.out.println(\"xlog: done flush\");\n      c.in.readByte();\n      //System.out.println(\"xlog: done readByte\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}