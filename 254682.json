{"path":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","commits":[{"id":"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2","date":1481746736,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","pathOld":"/dev/null","sourceNew":"  public void testSegmentTerminateEarly() throws Exception {\n\n    final String collectionName = \"testSegmentTerminateEarlyCollection\";\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    \n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n    cloudSolrClient.setDefaultCollection(collectionName);\n\n    // create collection\n    {\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      final Map<String, String> collectionProperties = new HashMap<>();\n      collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-sortingmergepolicyfactory.xml\");\n      createCollection(cluster, collectionName, null, asyncId, Boolean.TRUE, collectionProperties);\n    }\n    \n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n    \n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","pathOld":"/dev/null","sourceNew":"  public void testSegmentTerminateEarly() throws Exception {\n\n    final String collectionName = \"testSegmentTerminateEarlyCollection\";\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    \n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n    cloudSolrClient.setDefaultCollection(collectionName);\n\n    // create collection\n    {\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      final Map<String, String> collectionProperties = new HashMap<>();\n      collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-sortingmergepolicyfactory.xml\");\n      createCollection(cluster, collectionName, null, asyncId, Boolean.TRUE, collectionProperties);\n    }\n    \n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n    \n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","sourceNew":"  public void testSegmentTerminateEarly() throws Exception {\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","sourceOld":"  public void testSegmentTerminateEarly() throws Exception {\n\n    final String collectionName = \"testSegmentTerminateEarlyCollection\";\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    \n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n    cloudSolrClient.setDefaultCollection(collectionName);\n\n    // create collection\n    {\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      final Map<String, String> collectionProperties = new HashMap<>();\n      collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-sortingmergepolicyfactory.xml\");\n      createCollection(cluster, collectionName, null, asyncId, Boolean.TRUE, collectionProperties);\n    }\n    \n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n    \n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","sourceNew":"  public void testSegmentTerminateEarly() throws Exception {\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","sourceOld":"  public void testSegmentTerminateEarly() throws Exception {\n\n    final String collectionName = \"testSegmentTerminateEarlyCollection\";\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    \n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n    cloudSolrClient.setDefaultCollection(collectionName);\n\n    // create collection\n    {\n      final String asyncId = (random().nextBoolean() ? null : \"asyncId(\"+collectionName+\".create)=\"+random().nextInt());\n      final Map<String, String> collectionProperties = new HashMap<>();\n      collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-sortingmergepolicyfactory.xml\");\n      createCollection(cluster, collectionName, null, asyncId, Boolean.TRUE, collectionProperties);\n    }\n    \n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n    \n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","sourceNew":"  @Test@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSegmentTerminateEarly() throws Exception {\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","sourceOld":"  public void testSegmentTerminateEarly() throws Exception {\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","sourceNew":"  // 12-Jun-2018 @Test@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSegmentTerminateEarly() throws Exception {\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","sourceOld":"  @Test@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSegmentTerminateEarly() throws Exception {\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","sourceNew":"  // 12-Jun-2018 @Test@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSegmentTerminateEarly() throws Exception {\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","sourceOld":"  @Test@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSegmentTerminateEarly() throws Exception {\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#testSegmentTerminateEarly().mjava","sourceNew":"  // 12-Jun-2018 @Test@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSegmentTerminateEarly() throws Exception {\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","sourceOld":"  @Test@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSegmentTerminateEarly() throws Exception {\n\n    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState(random());\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n\n    // add some documents, then optimize to get merged-sorted segments\n    tstes.addDocuments(cloudSolrClient, 10, 10, true);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent\n    tstes.queryTimestampDescending(cloudSolrClient);\n    \n    // add a few more documents, but don't optimize to have some not-merge-sorted segments\n    tstes.addDocuments(cloudSolrClient, 2, 10, false);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);\n    tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);\n    \n    // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used\n    tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);\n    tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["9856095f7afb5a607bf5e65077615ed91273508c","415bbbe7da8065dd3c477bdc3c703c6425622998"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2":["415bbbe7da8065dd3c477bdc3c703c6425622998","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":["598b5d23aa7c9732bf473c21a9cd309c44599394"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}