{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.UserFields#UserFields(Map[String,Float],boolean).mjava","commits":[{"id":"a91f19e3f7576973404e13b7ecfb8ae94f313921","date":1511358452,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.UserFields#UserFields(Map[String,Float],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.UserFields#UserFields(Map[String,Float]).mjava","sourceNew":"    UserFields(Map<String, Float> ufm, boolean forbidSubQueryByDefault) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      // unless \"_query_\" was expressly allowed, we forbid it.\n      if (forbidSubQueryByDefault && !userFieldsMap.containsKey(MagicFieldName.QUERY.field)) {\n        userFieldsMap.put(\"-\" + MagicFieldName.QUERY.field, null);\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n    }\n\n","sourceOld":"    UserFields(Map<String,Float> ufm) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aee4980038a10791618ea04e79233ce5cbf6607","date":1511366888,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.UserFields#UserFields(Map[String,Float],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.UserFields#UserFields(Map[String,Float]).mjava","sourceNew":"    UserFields(Map<String, Float> ufm, boolean forbidSubQueryByDefault) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      // unless \"_query_\" was expressly allowed, we forbid it.\n      if (forbidSubQueryByDefault && !userFieldsMap.containsKey(MagicFieldName.QUERY.field)) {\n        userFieldsMap.put(\"-\" + MagicFieldName.QUERY.field, null);\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n    }\n\n","sourceOld":"    UserFields(Map<String,Float> ufm) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d722b735bc69d2234e957cb69cf96ad28ea7e1c3","date":1546867201,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.UserFields#UserFields(Map[String,Float]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.UserFields#UserFields(Map[String,Float],boolean).mjava","sourceNew":"    UserFields(Map<String, Float> ufm) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      // unless \"_query_\" was expressly allowed, we forbid it.\n      if (!userFieldsMap.containsKey(MagicFieldName.QUERY.field)) {\n        userFieldsMap.put(\"-\" + MagicFieldName.QUERY.field, null);\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n    }\n\n","sourceOld":"    UserFields(Map<String, Float> ufm, boolean forbidSubQueryByDefault) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      // unless \"_query_\" was expressly allowed, we forbid it.\n      if (forbidSubQueryByDefault && !userFieldsMap.containsKey(MagicFieldName.QUERY.field)) {\n        userFieldsMap.put(\"-\" + MagicFieldName.QUERY.field, null);\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4aee4980038a10791618ea04e79233ce5cbf6607":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["4aee4980038a10791618ea04e79233ce5cbf6607"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4aee4980038a10791618ea04e79233ce5cbf6607","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"4aee4980038a10791618ea04e79233ce5cbf6607":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["4aee4980038a10791618ea04e79233ce5cbf6607"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}