{"path":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0737567c7196b3ba1a359c2bdf103a3984a55e","date":1275089164,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd00dd91853514614379b0e680d65bd19cac0f30","date":1283087816,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0883328ff2cc09b5c999d05c04e16530d819c627","date":1285860918,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0883328ff2cc09b5c999d05c04e16530d819c627":["cd00dd91853514614379b0e680d65bd19cac0f30"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["0883328ff2cc09b5c999d05c04e16530d819c627","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f0737567c7196b3ba1a359c2bdf103a3984a55e":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f0737567c7196b3ba1a359c2bdf103a3984a55e","0883328ff2cc09b5c999d05c04e16530d819c627"],"cd00dd91853514614379b0e680d65bd19cac0f30":["5f0737567c7196b3ba1a359c2bdf103a3984a55e"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["0883328ff2cc09b5c999d05c04e16530d819c627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["0883328ff2cc09b5c999d05c04e16530d819c627"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"0883328ff2cc09b5c999d05c04e16530d819c627":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f0737567c7196b3ba1a359c2bdf103a3984a55e":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd00dd91853514614379b0e680d65bd19cac0f30"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd00dd91853514614379b0e680d65bd19cac0f30":["0883328ff2cc09b5c999d05c04e16530d819c627"],"1da8d55113b689b06716246649de6f62430f15c0":["5f0737567c7196b3ba1a359c2bdf103a3984a55e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}