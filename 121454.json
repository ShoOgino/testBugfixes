{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookup(CharSequence,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookup(CharSequence,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookup(CharSequence,int).mjava","sourceNew":"  /**\n   * Lookup suggestions to <code>key</code>.\n   * \n   * @param key\n   *          The prefix to which suggestions should be sought.\n   * @param num\n   *          At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first\n   *         (decreasing) and then alphabetically (UTF-8 codepoint order).\n   */\n  public List<Completion> lookup(CharSequence key, int num) {\n    if (key.length() == 0 || automaton == null) {\n      return EMPTY_RESULT;\n    }\n\n    try {\n      BytesRef keyUtf8 = new BytesRef(key);\n      if (!higherWeightsFirst && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for\n        // alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves\n        // unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(keyUtf8, num);\n      } else {\n        return lookupSortedByWeight(keyUtf8, num, false);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions to <code>key</code>.\n   * \n   * @param key\n   *          The prefix to which suggestions should be sought.\n   * @param num\n   *          At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first\n   *         (decreasing) and then alphabetically (UTF-8 codepoint order).\n   */\n  public List<Completion> lookup(CharSequence key, int num) {\n    if (key.length() == 0 || automaton == null) {\n      return EMPTY_RESULT;\n    }\n\n    try {\n      BytesRef keyUtf8 = new BytesRef(key);\n      if (!higherWeightsFirst && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for\n        // alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves\n        // unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(keyUtf8, num);\n      } else {\n        return lookupSortedByWeight(keyUtf8, num, false);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}