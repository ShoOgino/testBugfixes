{"path":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#prvt_put(K,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#prvt_put(K,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds a pair to the map. Takes the first empty position from the\n   * empty-linked-list's head - {@link firstEmpty}.\n   * \n   * New pairs are always inserted to baseHash, and are followed by the old\n   * colliding pair.\n   * \n   * @param key\n   *            integer which maps the given Object\n   * @param e\n   *            element which is being mapped using the given key\n   */\n  private void prvt_put(K key, int e) {\n    // Hash entry to which the new pair would be inserted\n    int hashIndex = calcBaseHashIndex(key);\n\n    // 'Allocating' a pair from the \"Empty\" list.\n    int objectIndex = firstEmpty;\n\n    // Setting data\n    firstEmpty = next[firstEmpty];\n    values[objectIndex] = e;\n    keys[objectIndex] = key;\n\n    // Inserting the new pair as the first node in the specific hash entry\n    next[objectIndex] = baseHash[hashIndex];\n    baseHash[hashIndex] = objectIndex;\n\n    // Announcing a new pair was added!\n    ++size;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#prvt_put(K,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds a pair to the map. Takes the first empty position from the\n   * empty-linked-list's head - {@link firstEmpty}.\n   * \n   * New pairs are always inserted to baseHash, and are followed by the old\n   * colliding pair.\n   * \n   * @param key\n   *            integer which maps the given Object\n   * @param e\n   *            element which is being mapped using the given key\n   */\n  private void prvt_put(K key, int e) {\n    // Hash entry to which the new pair would be inserted\n    int hashIndex = calcBaseHashIndex(key);\n\n    // 'Allocating' a pair from the \"Empty\" list.\n    int objectIndex = firstEmpty;\n\n    // Setting data\n    firstEmpty = next[firstEmpty];\n    values[objectIndex] = e;\n    keys[objectIndex] = key;\n\n    // Inserting the new pair as the first node in the specific hash entry\n    next[objectIndex] = baseHash[hashIndex];\n    baseHash[hashIndex] = objectIndex;\n\n    // Announcing a new pair was added!\n    ++size;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#prvt_put(K,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds a pair to the map. Takes the first empty position from the\n   * empty-linked-list's head - {@link firstEmpty}.\n   * \n   * New pairs are always inserted to baseHash, and are followed by the old\n   * colliding pair.\n   * \n   * @param key\n   *            integer which maps the given Object\n   * @param e\n   *            element which is being mapped using the given key\n   */\n  private void prvt_put(K key, int e) {\n    // Hash entry to which the new pair would be inserted\n    int hashIndex = calcBaseHashIndex(key);\n\n    // 'Allocating' a pair from the \"Empty\" list.\n    int objectIndex = firstEmpty;\n\n    // Setting data\n    firstEmpty = next[firstEmpty];\n    values[objectIndex] = e;\n    keys[objectIndex] = key;\n\n    // Inserting the new pair as the first node in the specific hash entry\n    next[objectIndex] = baseHash[hashIndex];\n    baseHash[hashIndex] = objectIndex;\n\n    // Announcing a new pair was added!\n    ++size;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#prvt_put(K,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#prvt_put(K,int).mjava","sourceNew":"  /**\n   * Adds a pair to the map. Takes the first empty position from the\n   * empty-linked-list's head - {@link firstEmpty}.\n   * \n   * New pairs are always inserted to baseHash, and are followed by the old\n   * colliding pair.\n   * \n   * @param key\n   *            integer which maps the given Object\n   * @param e\n   *            element which is being mapped using the given key\n   */\n  private void prvt_put(K key, int e) {\n    // Hash entry to which the new pair would be inserted\n    int hashIndex = calcBaseHashIndex(key);\n\n    // 'Allocating' a pair from the \"Empty\" list.\n    int objectIndex = firstEmpty;\n\n    // Setting data\n    firstEmpty = next[firstEmpty];\n    values[objectIndex] = e;\n    keys[objectIndex] = key;\n\n    // Inserting the new pair as the first node in the specific hash entry\n    next[objectIndex] = baseHash[hashIndex];\n    baseHash[hashIndex] = objectIndex;\n\n    // Announcing a new pair was added!\n    ++size;\n  }\n\n","sourceOld":"  /**\n   * Adds a pair to the map. Takes the first empty position from the\n   * empty-linked-list's head - {@link firstEmpty}.\n   * \n   * New pairs are always inserted to baseHash, and are followed by the old\n   * colliding pair.\n   * \n   * @param key\n   *            integer which maps the given Object\n   * @param e\n   *            element which is being mapped using the given key\n   */\n  private void prvt_put(K key, int e) {\n    // Hash entry to which the new pair would be inserted\n    int hashIndex = calcBaseHashIndex(key);\n\n    // 'Allocating' a pair from the \"Empty\" list.\n    int objectIndex = firstEmpty;\n\n    // Setting data\n    firstEmpty = next[firstEmpty];\n    values[objectIndex] = e;\n    keys[objectIndex] = key;\n\n    // Inserting the new pair as the first node in the specific hash entry\n    next[objectIndex] = baseHash[hashIndex];\n    baseHash[hashIndex] = objectIndex;\n\n    // Announcing a new pair was added!\n    ++size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}