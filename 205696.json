{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","sourceNew":"  protected void fsync(String name) throws IOException {\n    File fullFile = new File(directory, name);\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while (!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  protected void fsync(String name) throws IOException {\n    File fullFile = new File(directory, name);\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while (!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e830b36b587d781f855eaf64af7a8a39965c4483","date":1396635670,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","sourceNew":"  protected void fsync(String name) throws IOException {\n    File fullFile = new File(directory, name);\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while (!success && retryCount < 5) {\n      retryCount++;\n      FileChannel file = null;\n      try {\n        try {\n          file = FileChannel.open(fullFile.toPath(), StandardOpenOption.WRITE);\n          file.force(true); // TODO: we probably dont care about metadata, but this is what we did before...\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  protected void fsync(String name) throws IOException {\n    File fullFile = new File(directory, name);\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while (!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":["e4b4e97a5e8ab5b96cc56c561131d720c756756b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","sourceNew":"  protected void fsync(String name) throws IOException {\n    File fullFile = new File(directory, name);\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while (!success && retryCount < 5) {\n      retryCount++;\n      FileChannel file = null;\n      try {\n        try {\n          file = FileChannel.open(fullFile.toPath(), StandardOpenOption.WRITE);\n          file.force(true); // TODO: we probably dont care about metadata, but this is what we did before...\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  protected void fsync(String name) throws IOException {\n    File fullFile = new File(directory, name);\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while (!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0708f93f78bcbc47a9202f9387e17ec20b4df20d","date":1397053744,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","sourceNew":"  protected void fsync(String name) throws IOException {\n    IOUtils.fsync(new File(directory, name));\n  }\n\n","sourceOld":"  protected void fsync(String name) throws IOException {\n    File fullFile = new File(directory, name);\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while (!success && retryCount < 5) {\n      retryCount++;\n      FileChannel file = null;\n      try {\n        try {\n          file = FileChannel.open(fullFile.toPath(), StandardOpenOption.WRITE);\n          file.force(true); // TODO: we probably dont care about metadata, but this is what we did before...\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e51a73abd3e0a6985e6c31e220c3ac5a5be01d45","date":1397155593,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","sourceNew":"  protected void fsync(String name) throws IOException {\n    IOUtils.fsync(new File(directory, name), false);\n  }\n\n","sourceOld":"  protected void fsync(String name) throws IOException {\n    IOUtils.fsync(new File(directory, name));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","sourceNew":"  protected void fsync(String name) throws IOException {\n    IOUtils.fsync(directory.resolve(name), false);\n  }\n\n","sourceOld":"  protected void fsync(String name) throws IOException {\n    IOUtils.fsync(new File(directory, name), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","sourceNew":"  protected void fsync(String name) throws IOException {\n    deletePendingFiles();\n    IOUtils.fsync(directory.resolve(name), false);\n  }\n\n","sourceOld":"  protected void fsync(String name) throws IOException {\n    IOUtils.fsync(directory.resolve(name), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"240cd0f67652ccfb87d7c5f8b2486d0f42012daa","date":1454536570,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#fsync(String).mjava","sourceNew":"  protected void fsync(String name) throws IOException {\n    IOUtils.fsync(directory.resolve(name), false);\n  }\n\n","sourceOld":"  protected void fsync(String name) throws IOException {\n    deletePendingFiles();\n    IOUtils.fsync(directory.resolve(name), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e830b36b587d781f855eaf64af7a8a39965c4483"],"e830b36b587d781f855eaf64af7a8a39965c4483":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e51a73abd3e0a6985e6c31e220c3ac5a5be01d45":["0708f93f78bcbc47a9202f9387e17ec20b4df20d"],"0708f93f78bcbc47a9202f9387e17ec20b4df20d":["e830b36b587d781f855eaf64af7a8a39965c4483"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["e51a73abd3e0a6985e6c31e220c3ac5a5be01d45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","e830b36b587d781f855eaf64af7a8a39965c4483"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e830b36b587d781f855eaf64af7a8a39965c4483":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","0708f93f78bcbc47a9202f9387e17ec20b4df20d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa"],"e51a73abd3e0a6985e6c31e220c3ac5a5be01d45":["f4abec28b874149a7223e32cc7a01704c27790de"],"0708f93f78bcbc47a9202f9387e17ec20b4df20d":["e51a73abd3e0a6985e6c31e220c3ac5a5be01d45"],"f4abec28b874149a7223e32cc7a01704c27790de":["6bfe104fc023fadc9e709f8d17403d2cc61133fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa","15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}