{"path":"lucene/core/src/test/org/apache/lucene/index/TestCheckIndex#testChecksumsOnly().mjava","commits":[{"id":"f0e48f2ee58a552eeaa92f52953efdf3b88b6580","date":1425652664,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCheckIndex#testChecksumsOnly().mjava","pathOld":"/dev/null","sourceNew":"  public void testChecksumsOnly() throws IOException {\n    LineFileDocs lf = new LineFileDocs(random());\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    for (int i = 0; i < 100; i++) {\n      iw.addDocument(lf.nextDoc());\n    }\n    iw.addDocument(new Document());\n    iw.commit();\n    iw.close();\n    lf.close();\n    \n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    assertTrue(indexStatus.clean);\n    checker.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ca53ca21192c1c08e0df2d2a236faf697a8fb4a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCheckIndex#testChecksumsOnly().mjava","pathOld":"/dev/null","sourceNew":"  public void testChecksumsOnly() throws IOException {\n    LineFileDocs lf = new LineFileDocs(random());\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    for (int i = 0; i < 100; i++) {\n      iw.addDocument(lf.nextDoc());\n    }\n    iw.addDocument(new Document());\n    iw.commit();\n    iw.close();\n    lf.close();\n    \n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    assertTrue(indexStatus.clean);\n    checker.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ca53ca21192c1c08e0df2d2a236faf697a8fb4a","date":1446228526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCheckIndex#testChecksumsOnly().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCheckIndex#testChecksumsOnly().mjava","sourceNew":"  public void testChecksumsOnly() throws IOException {\n    LineFileDocs lf = new LineFileDocs(random());\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    for (int i = 0; i < 100; i++) {\n      iw.addDocument(lf.nextDoc());\n    }\n    iw.addDocument(new Document());\n    iw.commit();\n    iw.close();\n    lf.close();\n    \n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    assertTrue(indexStatus.clean);\n    checker.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testChecksumsOnly() throws IOException {\n    LineFileDocs lf = new LineFileDocs(random());\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    for (int i = 0; i < 100; i++) {\n      iw.addDocument(lf.nextDoc());\n    }\n    iw.addDocument(new Document());\n    iw.commit();\n    iw.close();\n    lf.close();\n    \n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    assertTrue(indexStatus.clean);\n    checker.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","bugFix":["f0e48f2ee58a552eeaa92f52953efdf3b88b6580"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca56618660563c407aafdbd4ee4175ba2c73e6dc","date":1448923608,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCheckIndex#testChecksumsOnly().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCheckIndex#testChecksumsOnly().mjava","sourceNew":"  @Test\n  public void testChecksumsOnly() throws IOException {\n    testChecksumsOnly(directory);\n  }\n\n","sourceOld":"  public void testChecksumsOnly() throws IOException {\n    LineFileDocs lf = new LineFileDocs(random());\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    for (int i = 0; i < 100; i++) {\n      iw.addDocument(lf.nextDoc());\n    }\n    iw.addDocument(new Document());\n    iw.commit();\n    iw.close();\n    lf.close();\n    \n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    assertTrue(indexStatus.clean);\n    checker.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0e48f2ee58a552eeaa92f52953efdf3b88b6580"],"f0e48f2ee58a552eeaa92f52953efdf3b88b6580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ca56618660563c407aafdbd4ee4175ba2c73e6dc":["5ca53ca21192c1c08e0df2d2a236faf697a8fb4a"],"5ca53ca21192c1c08e0df2d2a236faf697a8fb4a":["f0e48f2ee58a552eeaa92f52953efdf3b88b6580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca56618660563c407aafdbd4ee4175ba2c73e6dc"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"f0e48f2ee58a552eeaa92f52953efdf3b88b6580":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5ca53ca21192c1c08e0df2d2a236faf697a8fb4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f0e48f2ee58a552eeaa92f52953efdf3b88b6580"],"ca56618660563c407aafdbd4ee4175ba2c73e6dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ca53ca21192c1c08e0df2d2a236faf697a8fb4a":["ca56618660563c407aafdbd4ee4175ba2c73e6dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}