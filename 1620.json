{"path":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","commits":[{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","pathOld":"/dev/null","sourceNew":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random;\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ENGLISH, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","sourceNew":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ENGLISH, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random;\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ENGLISH, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","sourceNew":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ROOT, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ENGLISH, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","sourceNew":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ROOT, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ENGLISH, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","sourceNew":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ROOT, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ENGLISH, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","sourceNew":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ROOT, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ENGLISH, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1eb6b3ce884c0b9e064e112da158013ec33cd91","date":1402692077,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","sourceNew":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageTester.sizeOf(first);\n        System.out.println(String.format(Locale.ROOT, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ROOT, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","sourceNew":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageTester.sizeOf(first);\n        System.out.println(String.format(Locale.ROOT, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","sourceOld":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageEstimator.sizeOf(first);\n        System.out.println(String.format(Locale.ROOT, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01578325020f17ab9d0ae59f122d17f90c5fecbc","date":1423765178,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#testChainedEstimation().mjava","sourceNew":null,"sourceOld":"  // This shows an easy stack overflow because we're counting recursively.\n  @Ignore\n  public void testChainedEstimation() {\n    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();\n\n    Random rnd = random();\n    Entry first = new Entry();\n    try {\n      while (true) {\n        // Check the current memory consumption and provide the estimate.\n        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); \n        long estimated = RamUsageTester.sizeOf(first);\n        System.out.println(String.format(Locale.ROOT, \"%10d, %10d\",\n            jvmUsed, estimated));\n\n        // Make a batch of objects.\n        for (int i = 0; i < 5000; i++) {\n          first.createNext(new byte[rnd.nextInt(1024)]);\n        }\n      }\n    } catch (OutOfMemoryError e) {\n      // Release and quit.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"01578325020f17ab9d0ae59f122d17f90c5fecbc":["e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["dd6c9e9b1251473f465b0443b56046b2658402da"],"2acf500f78aa12b92e371fd89c719291986b6b90":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["2acf500f78aa12b92e371fd89c719291986b6b90","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01578325020f17ab9d0ae59f122d17f90c5fecbc"],"46d8ada1fff8d18cb197c38c7983225162599948":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6c9e9b1251473f465b0443b56046b2658402da"],"dd6c9e9b1251473f465b0443b56046b2658402da":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c6f080a2ab37c464dd98db173f6cbf10dc74f211","e1eb6b3ce884c0b9e064e112da158013ec33cd91","46d8ada1fff8d18cb197c38c7983225162599948"],"01578325020f17ab9d0ae59f122d17f90c5fecbc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["01578325020f17ab9d0ae59f122d17f90c5fecbc","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}