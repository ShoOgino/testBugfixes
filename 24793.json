{"path":"src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","commits":[{"id":"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709","date":1180597733,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Writes the current skip data to the buffers. The current document frequency determines\r\n   * the max level is skip data is to be written to. \r\n   * \r\n   * @param df the current document frequency \r\n   * @throws IOException\r\n   */\r\n  void bufferSkip(int df) throws IOException {\r\n    int numLevels;\r\n   \r\n    // determine max level\r\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\r\n      numLevels++;\r\n    }\r\n    \r\n    long childPointer = 0;\r\n    \r\n    for (int level = 0; level < numLevels; level++) {\r\n      writeSkipData(level, skipBuffer[level]);\r\n      \r\n      long newChildPointer = skipBuffer[level].getFilePointer();\r\n      \r\n      if (level != 0) {\r\n        // store child pointers for all levels except the lowest\r\n        skipBuffer[level].writeVLong(childPointer);\r\n      }\r\n      \r\n      //remember the childPointer for the next level\r\n      childPointer = newChildPointer;\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","sourceNew":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","sourceOld":"  /**\r\n   * Writes the current skip data to the buffers. The current document frequency determines\r\n   * the max level is skip data is to be written to. \r\n   * \r\n   * @param df the current document frequency \r\n   * @throws IOException\r\n   */\r\n  void bufferSkip(int df) throws IOException {\r\n    int numLevels;\r\n   \r\n    // determine max level\r\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\r\n      numLevels++;\r\n    }\r\n    \r\n    long childPointer = 0;\r\n    \r\n    for (int level = 0; level < numLevels; level++) {\r\n      writeSkipData(level, skipBuffer[level]);\r\n      \r\n      long newChildPointer = skipBuffer[level].getFilePointer();\r\n      \r\n      if (level != 0) {\r\n        // store child pointers for all levels except the lowest\r\n        skipBuffer[level].writeVLong(childPointer);\r\n      }\r\n      \r\n      //remember the childPointer for the next level\r\n      childPointer = newChildPointer;\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","sourceNew":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2123bddbd65dea198cac380540636ce43a880403"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"2123bddbd65dea198cac380540636ce43a880403":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}