{"path":"solr/core/src/java/org/apache/solr/util/RedactionUtils#redactNames(Collection[String],String,String).mjava","commits":[{"id":"76bb93998d4d4fa60da28429640216a0a249111a","date":1549968795,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/RedactionUtils#redactNames(Collection[String],String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Replace actual names found in a string with meaningless randomized names.\n   * @param names actual names\n   * @param redactionPrefix prefix to use for redacted names\n   * @param data string to redact\n   * @return redacted string where all actual names have been replaced.\n   */\n  public static String redactNames(Collection<String> names, String redactionPrefix, String data) {\n    Set<String> uniqueNames = new TreeSet<>(names);\n    Set<Integer> uniqueCode = new HashSet<>();\n    // minimal(ish) hash\n    int codeShift = 0;\n    int codeSpace = names.size();\n    for (String name : uniqueNames) {\n      int code = Math.abs(name.hashCode() % codeSpace);\n      while (uniqueCode.contains(code)) {\n        codeShift++;\n        codeSpace = names.size() << codeShift;\n        code = Math.abs(name.hashCode() % codeSpace);\n      }\n      uniqueCode.add(code);\n      data = data.replaceAll(\"\\\\Q\" + name + \"\\\\E\", redactionPrefix + Integer.toString(code, Character.MAX_RADIX));\n    }\n    return data;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d2a34ea3732f91149b31bcad82026ad85fda69","date":1567850949,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/RedactionUtils#redactNames(Collection[String],String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Replace actual names found in a string with meaningless randomized names.\n   * @param names actual names\n   * @param redactionPrefix prefix to use for redacted names\n   * @param data string to redact\n   * @return redacted string where all actual names have been replaced.\n   */\n  public static String redactNames(Collection<String> names, String redactionPrefix, String data) {\n    Set<String> uniqueNames = new TreeSet<>(names);\n    Set<Integer> uniqueCode = new HashSet<>();\n    // minimal(ish) hash\n    int codeShift = 0;\n    int codeSpace = names.size();\n    for (String name : uniqueNames) {\n      int code = Math.abs(name.hashCode() % codeSpace);\n      while (uniqueCode.contains(code)) {\n        codeShift++;\n        codeSpace = names.size() << codeShift;\n        code = Math.abs(name.hashCode() % codeSpace);\n      }\n      uniqueCode.add(code);\n      data = data.replaceAll(\"\\\\Q\" + name + \"\\\\E\", redactionPrefix + Integer.toString(code, Character.MAX_RADIX));\n    }\n    return data;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["76bb93998d4d4fa60da28429640216a0a249111a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76bb93998d4d4fa60da28429640216a0a249111a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3d2a34ea3732f91149b31bcad82026ad85fda69"]},"commit2Childs":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["76bb93998d4d4fa60da28429640216a0a249111a"],"76bb93998d4d4fa60da28429640216a0a249111a":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}