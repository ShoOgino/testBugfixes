{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same timestamp and size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same timestamp and size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same timestamp and size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same timestamp and size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same timestamp and size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same timestamp and size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80ed681171eee7ce2f81a0e93a863678e9ceeb45","date":1327849373,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same timestamp and size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same timestamp and size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same timestamp and size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      if (dir.fileExists((String) file.get(NAME))\n              && dir.fileLength((String) file.get(NAME)) != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      if (dir.fileExists((String) file.get(NAME))\n              && dir.fileLength((String) file.get(NAME)) != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80ed681171eee7ce2f81a0e93a863678e9ceeb45":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["c26f00b574427b55127e869b935845554afde1fa","80ed681171eee7ce2f81a0e93a863678e9ceeb45"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["c26f00b574427b55127e869b935845554afde1fa","80ed681171eee7ce2f81a0e93a863678e9ceeb45"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["80ed681171eee7ce2f81a0e93a863678e9ceeb45"],"f2126b84bd093fa3d921582a109a0ee578c28126":["80ed681171eee7ce2f81a0e93a863678e9ceeb45","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9405f486872f1e416304dfe389741f4ee2f8a4d"]},"commit2Childs":{"80ed681171eee7ce2f81a0e93a863678e9ceeb45":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"c26f00b574427b55127e869b935845554afde1fa":["80ed681171eee7ce2f81a0e93a863678e9ceeb45","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}