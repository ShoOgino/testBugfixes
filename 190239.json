{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","commits":[{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(seedRnd);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(seedRnd);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f9dba8ffba48fba97d7a90fd45f6da87ba55736","date":1285244347,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(seedRnd);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d47f68d60cbff5718136b945ba8c55982342f38","date":1285583375,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n    // TODO 4.0: add this into test rotation\n    //swapCodec(new SimpleTextCodec());\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n    swapCodec(new SimpleTextCodec());\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n    // TODO 4.0: add this into test rotation\n    //swapCodec(new SimpleTextCodec());\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1df978e18c8a3fefa708b08d04935f2d9f1c40e6","date":1288003252,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n    swapCodec(new SimpleTextCodec());\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n    swapCodec(new SimpleTextCodec());\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13452165d8bf3d45a72f572aaed3c679735d3af2","date":1290101307,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce89597a7c3a4535b5b7f8100c2078e520f6e57","date":1290106041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeebcf026b55d8ce3ac8165210782b26cc4efe30","date":1290108396,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182cfc5b92d5da17fd74fc41c8091ed157d80ff4","date":1290263949,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","sourceNew":null,"sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["8d47f68d60cbff5718136b945ba8c55982342f38"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["1df978e18c8a3fefa708b08d04935f2d9f1c40e6"],"85a883878c0af761245ab048babc63d099f835f3":["b12d3e81e0f95a4527b5703953c503f71120ffcc","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","1df978e18c8a3fefa708b08d04935f2d9f1c40e6"],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"8d47f68d60cbff5718136b945ba8c55982342f38":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"5f9dba8ffba48fba97d7a90fd45f6da87ba55736":["43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["13452165d8bf3d45a72f572aaed3c679735d3af2"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"1df978e18c8a3fefa708b08d04935f2d9f1c40e6":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4"]},"commit2Childs":{"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["b12d3e81e0f95a4527b5703953c503f71120ffcc","1df978e18c8a3fefa708b08d04935f2d9f1c40e6"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","13452165d8bf3d45a72f572aaed3c679735d3af2"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["85a883878c0af761245ab048babc63d099f835f3"],"8d47f68d60cbff5718136b945ba8c55982342f38":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f9dba8ffba48fba97d7a90fd45f6da87ba55736":["8d47f68d60cbff5718136b945ba8c55982342f38"],"43b04c27924fe393e38e9f0986e32c634f261859":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43b04c27924fe393e38e9f0986e32c634f261859"],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"1df978e18c8a3fefa708b08d04935f2d9f1c40e6":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","b12d3e81e0f95a4527b5703953c503f71120ffcc"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}