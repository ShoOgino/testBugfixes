{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session).mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Suggestion.ConditionType]],List[String],Policy.Session).mjava","sourceNew":"  public Row(String node, List<Pair<String, Variable.Type>> params, List<String> perReplicaAttributes, Policy.Session session) {\n    this.session = session;\n    collectionVsShardVsReplicas = session.nodeStateProvider.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = session.cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    List<String> paramNames = params.stream().map(Pair::first).collect(Collectors.toList());\n    Map<String, Object> vals = isLive ? session.nodeStateProvider.getNodeValues(node, paramNames) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      Pair<String, Variable.Type> pair = params.get(i);\n      cells[i] = new Cell(i, pair.first(), Clause.validate(pair.first(), vals.get(pair.first()), false), null, pair.second(), this);\n      if (NODE.equals(pair.first())) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  public Row(String node, List<Pair<String, Suggestion.ConditionType>> params, List<String> perReplicaAttributes, Policy.Session session) {\n    this.session = session;\n    collectionVsShardVsReplicas = session.nodeStateProvider.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = session.cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    List<String> paramNames = params.stream().map(Pair::first).collect(Collectors.toList());\n    Map<String, Object> vals = isLive ? session.nodeStateProvider.getNodeValues(node, paramNames) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      Pair<String, Suggestion.ConditionType> pair = params.get(i);\n      cells[i] = new Cell(i, pair.first(), Clause.validate(pair.first(), vals.get(pair.first()), false), null, pair.second(), this);\n      if (NODE.equals(pair.first())) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session).mjava","sourceNew":"  public Row(String node, List<Pair<String, Variable.Type>> params, List<String> perReplicaAttributes, Policy.Session session) {\n    this.session = session;\n    collectionVsShardVsReplicas = session.nodeStateProvider.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = session.cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    List<String> paramNames = params.stream().map(Pair::first).collect(Collectors.toList());\n    Map<String, Object> vals = isLive ? session.nodeStateProvider.getNodeValues(node, paramNames) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      Pair<String, Variable.Type> pair = params.get(i);\n      cells[i] = new Cell(i, pair.first(), Clause.validate(pair.first(), vals.get(pair.first()), false), null, pair.second(), this);\n      if (NODE.equals(pair.first())) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n    this.globalCache = new HashMap();\n    this.perCollCache = new HashMap();\n    isAlreadyCopied = true;\n  }\n\n","sourceOld":"  public Row(String node, List<Pair<String, Variable.Type>> params, List<String> perReplicaAttributes, Policy.Session session) {\n    this.session = session;\n    collectionVsShardVsReplicas = session.nodeStateProvider.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = session.cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    List<String> paramNames = params.stream().map(Pair::first).collect(Collectors.toList());\n    Map<String, Object> vals = isLive ? session.nodeStateProvider.getNodeValues(node, paramNames) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      Pair<String, Variable.Type> pair = params.get(i);\n      cells[i] = new Cell(i, pair.first(), Clause.validate(pair.first(), vals.get(pair.first()), false), null, pair.second(), this);\n      if (NODE.equals(pair.first())) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":["7b0249ced9c25c3b173d20c3ca74160b9eade78c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b0249ced9c25c3b173d20c3ca74160b9eade78c","date":1591787635,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session).mjava","sourceNew":"  public Row(String node, List<Pair<String, Variable.Type>> params, List<String> perReplicaAttributes, Policy.Session session) {\n    this(node, params, perReplicaAttributes, session, session.nodeStateProvider, session.cloudManager);\n  }\n\n","sourceOld":"  public Row(String node, List<Pair<String, Variable.Type>> params, List<String> perReplicaAttributes, Policy.Session session) {\n    this.session = session;\n    collectionVsShardVsReplicas = session.nodeStateProvider.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = session.cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    List<String> paramNames = params.stream().map(Pair::first).collect(Collectors.toList());\n    Map<String, Object> vals = isLive ? session.nodeStateProvider.getNodeValues(node, paramNames) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      Pair<String, Variable.Type> pair = params.get(i);\n      cells[i] = new Cell(i, pair.first(), Clause.validate(pair.first(), vals.get(pair.first()), false), null, pair.second(), this);\n      if (NODE.equals(pair.first())) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n    this.globalCache = new HashMap();\n    this.perCollCache = new HashMap();\n    isAlreadyCopied = true;\n  }\n\n","bugFix":["427edb17549d4bb82462a16eec4ee0533d12d5b7","58e890cd5653ae8550bc6088d739f4eaaf950aff","9f0e33082a86447f4f2b59a1a5f69a310500276a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Variable.Type]],List[String],Policy.Session).mjava","sourceNew":null,"sourceOld":"  public Row(String node, List<Pair<String, Variable.Type>> params, List<String> perReplicaAttributes, Policy.Session session) {\n    this(node, params, perReplicaAttributes, session, session.nodeStateProvider, session.cloudManager);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"3f504512a03d978990cbff30db0522b354e846db":["7b0249ced9c25c3b173d20c3ca74160b9eade78c"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b0249ced9c25c3b173d20c3ca74160b9eade78c":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["7b0249ced9c25c3b173d20c3ca74160b9eade78c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"7b0249ced9c25c3b173d20c3ca74160b9eade78c":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}