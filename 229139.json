{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.PropsWatcher#process(WatchedEvent).mjava","commits":[{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.PropsWatcher#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionPropsWatches.containsKey(coll)) {\n        // No one can be notified of the change, we can ignore it and \"unset\" the watch\n        LOG.debug(\"Ignoring property change for collection {}\", coll);\n        return;\n      }\n\n      LOG.info(\"A collection property change: [{}] for collection [{}] has occurred - updating...\",\n          event, coll);\n\n      refreshAndWatch(true);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.PropsWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.PropsWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionPropsWatches.containsKey(coll)) {\n        // No one can be notified of the change, we can ignore it and \"unset\" the watch\n        log.debug(\"Ignoring property change for collection {}\", coll);\n        return;\n      }\n\n      log.info(\"A collection property change: [{}] for collection [{}] has occurred - updating...\",\n          event, coll);\n\n      refreshAndWatch(true);\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionPropsWatches.containsKey(coll)) {\n        // No one can be notified of the change, we can ignore it and \"unset\" the watch\n        LOG.debug(\"Ignoring property change for collection {}\", coll);\n        return;\n      }\n\n      LOG.info(\"A collection property change: [{}] for collection [{}] has occurred - updating...\",\n          event, coll);\n\n      refreshAndWatch(true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad04daa4b07fab11f19bb17a8b556b0dde898d7f","date":1560262372,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.PropsWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.PropsWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      boolean expired = System.nanoTime() > watchUntilNs;\n      if (!collectionPropsObservers.containsKey(coll) && expired) {\n        // No one can be notified of the change, we can ignore it and \"unset\" the watch\n        log.debug(\"Ignoring property change for collection {}\", coll);\n        return;\n      }\n\n      log.info(\"A collection property change: [{}] for collection [{}] has occurred - updating...\",\n          event, coll);\n\n      refreshAndWatch(true);\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      if (!collectionPropsWatches.containsKey(coll)) {\n        // No one can be notified of the change, we can ignore it and \"unset\" the watch\n        log.debug(\"Ignoring property change for collection {}\", coll);\n        return;\n      }\n\n      log.info(\"A collection property change: [{}] for collection [{}] has occurred - updating...\",\n          event, coll);\n\n      refreshAndWatch(true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de3459a54b4c8751d9ef19b035577e2418064be7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad04daa4b07fab11f19bb17a8b556b0dde898d7f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad04daa4b07fab11f19bb17a8b556b0dde898d7f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["de3459a54b4c8751d9ef19b035577e2418064be7"]},"commit2Childs":{"de3459a54b4c8751d9ef19b035577e2418064be7":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de3459a54b4c8751d9ef19b035577e2418064be7"],"ad04daa4b07fab11f19bb17a8b556b0dde898d7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["ad04daa4b07fab11f19bb17a8b556b0dde898d7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}