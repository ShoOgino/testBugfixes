{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","sourceNew":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","sourceOld":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc5a3bafea4cbf39d9a8203d4b80127d64262c11","date":1329921572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","sourceNew":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      assert info.docCount > 0;\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","sourceOld":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","sourceNew":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      assert info.docCount > 0;\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","sourceOld":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","sourceNew":null,"sourceOld":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      assert info.docCount > 0;\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#initWritableLiveDocs().mjava","sourceNew":null,"sourceOld":"    public synchronized void initWritableLiveDocs() throws IOException {\n      assert Thread.holdsLock(IndexWriter.this);\n      assert info.docCount > 0;\n      //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n      if (shared) {\n        // Copy on write: this means we've cloned a\n        // SegmentReader sharing the current liveDocs\n        // instance; must now make a private clone so we can\n        // change it:\n        LiveDocsFormat liveDocsFormat = info.getCodec().liveDocsFormat();\n        if (liveDocs == null) {\n          //System.out.println(\"create BV seg=\" + info);\n          liveDocs = liveDocsFormat.newLiveDocs(info.docCount);\n        } else {\n          liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n        }\n        shared = false;\n      } else {\n        assert liveDocs != null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fc5a3bafea4cbf39d9a8203d4b80127d64262c11"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["fc5a3bafea4cbf39d9a8203d4b80127d64262c11"],"fc5a3bafea4cbf39d9a8203d4b80127d64262c11":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fc5a3bafea4cbf39d9a8203d4b80127d64262c11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fc5a3bafea4cbf39d9a8203d4b80127d64262c11":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}