{"path":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    ReaderContext context = reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context);\n    final DocIdSet cachedSet = cacher.getDocIdSet(context);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context);\n    final DocIdSet cachedSet = cacher.getDocIdSet(context);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    ReaderContext context = reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context);\n    final DocIdSet cachedSet = cacher.getDocIdSet(context);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context);\n    final DocIdSet cachedSet = cacher.getDocIdSet(context);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context);\n    final DocIdSet cachedSet = cacher.getDocIdSet(context);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context);\n    final DocIdSet cachedSet = cacher.getDocIdSet(context);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context);\n    final DocIdSet cachedSet = cacher.getDocIdSet(context);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader.getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader.getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context);\n    final DocIdSet cachedSet = cacher.getDocIdSet(context);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader.getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader.getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2ec9a9068164200de82395f0e8537a9d9302f3f","date":1327856476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader.getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader.getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(context, context.reader().getLiveDocs());\n    final DocIdSet cachedSet = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an FixedBitSet if the original one was not cacheable\", cachedSet instanceof FixedBitSet || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["6620df8541b174097b1133a4fc370adb2e570524"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","a2ec9a9068164200de82395f0e8537a9d9302f3f"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["a2ec9a9068164200de82395f0e8537a9d9302f3f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["6620df8541b174097b1133a4fc370adb2e570524"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}