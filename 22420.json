{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexSortSortedNumericDocValuesRangeQuery#testSameHitsAsPointRangeQuery().mjava","commits":[{"id":"5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb","date":1561533468,"type":0,"author":"Julie Tibshirani","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexSortSortedNumericDocValuesRangeQuery#testSameHitsAsPointRangeQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testSameHitsAsPointRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      boolean reverse = random().nextBoolean();\n      SortField sortField = new SortedNumericSortField(\"dv\", SortField.Type.LONG, reverse);\n      sortField.setMissingValue(random().nextLong());\n      iwc.setIndexSort(new Sort(sortField));\n\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, 1);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = createQuery(\"dv\", min, max);\n        assertSameHits(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4bd0f02b7eeb809fae6bd98970468a31b09cee19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4bd0f02b7eeb809fae6bd98970468a31b09cee19","date":1599764538,"type":3,"author":"Julie Tibshirani","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexSortSortedNumericDocValuesRangeQuery#testSameHitsAsPointRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexSortSortedNumericDocValuesRangeQuery#testSameHitsAsPointRangeQuery().mjava","sourceNew":"  public void testSameHitsAsPointRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      boolean reverse = random().nextBoolean();\n      SortField sortField = new SortedNumericSortField(\"dv\", SortField.Type.LONG, reverse);\n      sortField.setMissingValue(random().nextLong());\n      iwc.setIndexSort(new Sort(sortField));\n\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, 1);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = createQuery(\"dv\", min, max);\n        assertSameHits(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSameHitsAsPointRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      boolean reverse = random().nextBoolean();\n      SortField sortField = new SortedNumericSortField(\"dv\", SortField.Type.LONG, reverse);\n      sortField.setMissingValue(random().nextLong());\n      iwc.setIndexSort(new Sort(sortField));\n\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, 1);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = createQuery(\"dv\", min, max);\n        assertSameHits(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4bd0f02b7eeb809fae6bd98970468a31b09cee19":["5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb"],"5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4bd0f02b7eeb809fae6bd98970468a31b09cee19"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb"],"4bd0f02b7eeb809fae6bd98970468a31b09cee19":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb":["4bd0f02b7eeb809fae6bd98970468a31b09cee19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}