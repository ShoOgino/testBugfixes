{"path":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e75448368ba628d73e9967b45e29c40bbfe39fa","date":1441768575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a2e3a7d2549a34fb7ec9be55424e41388025336","date":1452801298,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='42']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='42']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/str[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='42']\"\n            ,\"//result/doc[2]/str[@name='id'][.='666']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='42']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/str[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='42']\"\n            ,\"//result/doc[2]/str[@name='id'][.='666']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='42']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/str[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='42']\"\n            ,\"//result/doc[2]/str[@name='id'][.='666']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='42']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/str[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='42']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='42']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/str[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='42']\"\n            ,\"//result/doc[2]/str[@name='id'][.='666']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='42']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/str[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='42']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='42']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/str[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='42']\"\n            ,\"//result/doc[2]/int[@name='id'][.='666']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='42']\"\n            ,\"//result/doc[3]/int[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='666']\"\n            ,\"//result/doc[2]/int[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/int[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/int[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/int[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91f19e3f7576973404e13b7ecfb8ae94f313921","date":1511358452,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='42']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='42']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/str[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='42']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='42']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/str[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aee4980038a10791618ea04e79233ce5cbf6607","date":1511366888,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/DisMaxRequestHandlerTest#doTestSomeStuff(String).mjava","sourceNew":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='42']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='42']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/str[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n\n  }\n\n","sourceOld":"  public void doTestSomeStuff(final String qt) throws Exception {\n\n    assertQ(\"basic match\",\n            req(\"guide\")\n            ,\"//*[@numFound='2']\"\n            ,\"//lst[@name='facet_fields']/lst[@name='t_s']\"\n            ,\"*[count(//lst[@name='t_s']/int)=3]\"\n            ,\"//lst[@name='t_s']/int[@name='book'][.='2']\"\n            ,\"//lst[@name='t_s']/int[@name='movie'][.='1']\"\n            );\n    \n    assertQ(\"basic cross field matching, boost on same field matching\",\n            req(\"cool stuff\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='42']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='666']\"\n            );\n\n    assertQ(\"multi qf\",\n            req(\"q\", \"cool\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"qf\", \"subject\"\n                ,\"qf\", \"features_t\"\n                )\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(\"multi qf as local params\",\n            req(\"q\", \"{!dismax qf=subject qf=features_t}cool\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='42']\"\n            ,\"//result/doc[3]/str[@name='id'][.='8675309']\"\n            );\n\n    assertQ(\"multi boost query\",\n            req(\"q\", \"cool stuff\"\n                ,\"qt\", qt\n                ,CommonParams.VERSION, \"2.2\"\n                ,\"bq\", \"subject:hell^400\"\n                ,\"bq\", \"subject:cool^4\"\n                , CommonParams.DEBUG_QUERY, \"true\"\n                )\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='666']\"\n            ,\"//result/doc[2]/str[@name='id'][.='8675309']\"\n            ,\"//result/doc[3]/str[@name='id'][.='42']\"\n            );\n    \n    assertQ(\"minimum mm is three\",\n            req(\"cool stuff traveling\")\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][. ='42']\"\n            ,\"//result/doc[2]/str[@name='id'][. ='666']\"\n            );\n    \n    assertQ(\"at 4 mm allows one missing \",\n            req(\"cool stuff traveling jenny\")\n            ,\"//*[@numFound='3']\"\n            );\n\n    assertQ(\"relying on ALTQ from config\",\n            req( \"qt\", qt,\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='1']\"\n            );\n    \n    assertQ(\"explicit ALTQ\",\n            req( \"qt\", qt,\n                 \"q.alt\", \"id:9999\",\n                 \"fq\", \"id:666\",\n                 \"facet\", \"false\" )\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertQ(\"no query slop == no match\",\n            req( \"qt\", qt,\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(\"query slop == match\",\n            req( \"qt\", qt,\n                 \"qs\", \"2\",\n                 \"q\", \"\\\"cool chick\\\"\" )\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["a71f63026529f3c1f03cfdd664910873ab2369ae"],"3a2e3a7d2549a34fb7ec9be55424e41388025336":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["615370d2b876c3435773b5174df2e2242ad7981a"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["c26f00b574427b55127e869b935845554afde1fa"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["615370d2b876c3435773b5174df2e2242ad7981a","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3a2e3a7d2549a34fb7ec9be55424e41388025336","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4aee4980038a10791618ea04e79233ce5cbf6607":["28288370235ed02234a64753cdbf0c6ec096304a","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["3a2e3a7d2549a34fb7ec9be55424e41388025336"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4aee4980038a10791618ea04e79233ce5cbf6607"]},"commit2Childs":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"3a2e3a7d2549a34fb7ec9be55424e41388025336":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"c26f00b574427b55127e869b935845554afde1fa":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["3a2e3a7d2549a34fb7ec9be55424e41388025336"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["4aee4980038a10791618ea04e79233ce5cbf6607"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a91f19e3f7576973404e13b7ecfb8ae94f313921","4aee4980038a10791618ea04e79233ce5cbf6607"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"615370d2b876c3435773b5174df2e2242ad7981a":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4aee4980038a10791618ea04e79233ce5cbf6607":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}