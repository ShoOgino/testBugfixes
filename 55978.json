{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#deleteAllCollections().mjava","commits":[{"id":"82ac6146556cfb813fae76783544007fc3aaa34d","date":1476790432,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#deleteAllCollections().mjava","pathOld":"/dev/null","sourceNew":"  public void deleteAllCollections() throws Exception {\n    try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {\n      reader.createClusterStateWatchersAndUpdate();\n      for (String collection : reader.getClusterState().getCollectionStates().keySet()) {\n        CollectionAdminRequest.deleteCollection(collection).process(solrClient);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#deleteAllCollections().mjava","pathOld":"/dev/null","sourceNew":"  public void deleteAllCollections() throws Exception {\n    try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {\n      reader.createClusterStateWatchersAndUpdate();\n      for (String collection : reader.getClusterState().getCollectionStates().keySet()) {\n        CollectionAdminRequest.deleteCollection(collection).process(solrClient);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db3a95645baea7e03cf8ae62147cba606639004e","date":1525745850,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#deleteAllCollections().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#deleteAllCollections().mjava","sourceNew":"  /** Delete all collections (and aliases) */\n  public void deleteAllCollections() throws Exception {\n    try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {\n      reader.createClusterStateWatchersAndUpdate(); // up to date aliases & collections\n      reader.aliasesManager.applyModificationAndExportToZk(aliases -> Aliases.EMPTY);\n      for (String collection : reader.getClusterState().getCollectionStates().keySet()) {\n        CollectionAdminRequest.deleteCollection(collection).process(solrClient);\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteAllCollections() throws Exception {\n    try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {\n      reader.createClusterStateWatchersAndUpdate();\n      for (String collection : reader.getClusterState().getCollectionStates().keySet()) {\n        CollectionAdminRequest.deleteCollection(collection).process(solrClient);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#deleteAllCollections().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#deleteAllCollections().mjava","sourceNew":"  /** Delete all collections (and aliases) */\n  public void deleteAllCollections() throws Exception {\n    try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {\n      final CountDownLatch latch = new CountDownLatch(1);\n      reader.registerCloudCollectionsListener(new CloudCollectionsListener() {\n        \n        @Override\n        public void onChange(Set<String> oldCollections, Set<String> newCollections) {\n          if (newCollections != null && newCollections.size() == 0) {\n            latch.countDown();\n          }\n        }\n      });\n      \n      reader.createClusterStateWatchersAndUpdate(); // up to date aliases & collections\n      reader.aliasesManager.applyModificationAndExportToZk(aliases -> Aliases.EMPTY);\n      for (String collection : reader.getClusterState().getCollectionStates().keySet()) {\n        CollectionAdminRequest.deleteCollection(collection).process(solrClient);\n      }\n      \n      boolean success = latch.await(60, TimeUnit.SECONDS);\n      if (!success) {\n        throw new IllegalStateException(\"Still waiting to see all collections removed from clusterstate.\");\n      }\n      \n      for (String collection : reader.getClusterState().getCollectionStates().keySet()) {\n        reader.waitForState(collection, 15, TimeUnit.SECONDS, (liveNodes, collectionState) -> collectionState == null ? true : false);\n      }\n     \n    } \n    \n    // may be deleted, but may not be gone yet - we only wait to not see it in ZK, not for core unloads\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      \n      if( timeout.hasTimedOut() ) {\n        throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n      }\n      \n      boolean allContainersEmpty = true;\n      for(JettySolrRunner jetty : jettys) {\n        CoreContainer cc = jetty.getCoreContainer();\n        if (cc != null && cc.getCores().size() != 0) {\n          allContainersEmpty = false;\n        }\n      }\n      if (allContainersEmpty) {\n        break;\n      }\n    }\n\n  }\n\n","sourceOld":"  /** Delete all collections (and aliases) */\n  public void deleteAllCollections() throws Exception {\n    try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {\n      reader.createClusterStateWatchersAndUpdate(); // up to date aliases & collections\n      reader.aliasesManager.applyModificationAndExportToZk(aliases -> Aliases.EMPTY);\n      for (String collection : reader.getClusterState().getCollectionStates().keySet()) {\n        CollectionAdminRequest.deleteCollection(collection).process(solrClient);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#deleteAllCollections().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#deleteAllCollections().mjava","sourceNew":"  /** Delete all collections (and aliases) */\n  public void deleteAllCollections() throws Exception {\n    try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {\n      final CountDownLatch latch = new CountDownLatch(1);\n      reader.registerCloudCollectionsListener(new CloudCollectionsListener() {\n        \n        @Override\n        public void onChange(Set<String> oldCollections, Set<String> newCollections) {\n          if (newCollections != null && newCollections.size() == 0) {\n            latch.countDown();\n          }\n        }\n      });\n      \n      reader.createClusterStateWatchersAndUpdate(); // up to date aliases & collections\n      reader.aliasesManager.applyModificationAndExportToZk(aliases -> Aliases.EMPTY);\n      for (String collection : reader.getClusterState().getCollectionStates().keySet()) {\n        CollectionAdminRequest.deleteCollection(collection).process(solrClient);\n      }\n      \n      boolean success = latch.await(60, TimeUnit.SECONDS);\n      if (!success) {\n        throw new IllegalStateException(\"Still waiting to see all collections removed from clusterstate.\");\n      }\n      \n      for (String collection : reader.getClusterState().getCollectionStates().keySet()) {\n        reader.waitForState(collection, 15, TimeUnit.SECONDS, (collectionState) -> collectionState == null ? true : false);\n      }\n     \n    } \n    \n    // may be deleted, but may not be gone yet - we only wait to not see it in ZK, not for core unloads\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      \n      if( timeout.hasTimedOut() ) {\n        throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n      }\n      \n      boolean allContainersEmpty = true;\n      for(JettySolrRunner jetty : jettys) {\n        CoreContainer cc = jetty.getCoreContainer();\n        if (cc != null && cc.getCores().size() != 0) {\n          allContainersEmpty = false;\n        }\n      }\n      if (allContainersEmpty) {\n        break;\n      }\n    }\n\n  }\n\n","sourceOld":"  /** Delete all collections (and aliases) */\n  public void deleteAllCollections() throws Exception {\n    try (ZkStateReader reader = new ZkStateReader(solrClient.getZkStateReader().getZkClient())) {\n      final CountDownLatch latch = new CountDownLatch(1);\n      reader.registerCloudCollectionsListener(new CloudCollectionsListener() {\n        \n        @Override\n        public void onChange(Set<String> oldCollections, Set<String> newCollections) {\n          if (newCollections != null && newCollections.size() == 0) {\n            latch.countDown();\n          }\n        }\n      });\n      \n      reader.createClusterStateWatchersAndUpdate(); // up to date aliases & collections\n      reader.aliasesManager.applyModificationAndExportToZk(aliases -> Aliases.EMPTY);\n      for (String collection : reader.getClusterState().getCollectionStates().keySet()) {\n        CollectionAdminRequest.deleteCollection(collection).process(solrClient);\n      }\n      \n      boolean success = latch.await(60, TimeUnit.SECONDS);\n      if (!success) {\n        throw new IllegalStateException(\"Still waiting to see all collections removed from clusterstate.\");\n      }\n      \n      for (String collection : reader.getClusterState().getCollectionStates().keySet()) {\n        reader.waitForState(collection, 15, TimeUnit.SECONDS, (liveNodes, collectionState) -> collectionState == null ? true : false);\n      }\n     \n    } \n    \n    // may be deleted, but may not be gone yet - we only wait to not see it in ZK, not for core unloads\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (true) {\n      \n      if( timeout.hasTimedOut() ) {\n        throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n      }\n      \n      boolean allContainersEmpty = true;\n      for(JettySolrRunner jetty : jettys) {\n        CoreContainer cc = jetty.getCoreContainer();\n        if (cc != null && cc.getCores().size() != 0) {\n          allContainersEmpty = false;\n        }\n      }\n      if (allContainersEmpty) {\n        break;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["db3a95645baea7e03cf8ae62147cba606639004e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db3a95645baea7e03cf8ae62147cba606639004e":["82ac6146556cfb813fae76783544007fc3aaa34d"],"7b366e7dd3172289251a86be96031af4002cd19c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"82ac6146556cfb813fae76783544007fc3aaa34d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","82ac6146556cfb813fae76783544007fc3aaa34d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7b366e7dd3172289251a86be96031af4002cd19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82ac6146556cfb813fae76783544007fc3aaa34d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"db3a95645baea7e03cf8ae62147cba606639004e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"82ac6146556cfb813fae76783544007fc3aaa34d":["db3a95645baea7e03cf8ae62147cba606639004e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}