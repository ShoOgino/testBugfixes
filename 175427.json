{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      myHttpClient.getState().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      myHttpClient.getState().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      myHttpClient.getState().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      myHttpClient.getState().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      myHttpClient.getState().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      myHttpClient.getState().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      myHttpClient.getState().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    SolrParams params = SolrParams.toSolrParams(initArgs);\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2425308ebcd91b538a601df94ae1551ccaab2bb","date":1340702883,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    final SolrParams params = SolrParams.toSolrParams(initArgs);\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    SolrParams params = SolrParams.toSolrParams(initArgs);\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    final SolrParams params = SolrParams.toSolrParams(initArgs);\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    SolrParams params = SolrParams.toSolrParams(initArgs);\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7035935aa89f6951286e9005cbeb16e89a082a2","date":1385258396,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    final SolrParams params = SolrParams.toSolrParams(initArgs);\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    final SolrParams params = SolrParams.toSolrParams(initArgs);\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    final SolrParams params = SolrParams.toSolrParams(initArgs);\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    final SolrParams params = SolrParams.toSolrParams(initArgs);\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    final SolrParams params = SolrParams.toSolrParams(initArgs);\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":["f2425308ebcd91b538a601df94ae1551ccaab2bb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n  }\n\n","sourceOld":"  public SnapPuller(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":null,"sourceOld":"  public SnapPuller(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["eb99886ff640d94edb43e0d36112a2b7023379ba","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["f2425308ebcd91b538a601df94ae1551ccaab2bb","a7035935aa89f6951286e9005cbeb16e89a082a2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["f2425308ebcd91b538a601df94ae1551ccaab2bb"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["a7035935aa89f6951286e9005cbeb16e89a082a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a7035935aa89f6951286e9005cbeb16e89a082a2"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["f2425308ebcd91b538a601df94ae1551ccaab2bb","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a7035935aa89f6951286e9005cbeb16e89a082a2":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}