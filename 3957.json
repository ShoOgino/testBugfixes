{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.RandomDocument#RandomDocument(int,int,Options,String[],String[],BytesRef[]).mjava","commits":[{"id":"f21ce13f410ee015e1ba14687ab4b8518ac52a11","date":1359713213,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.RandomDocument#RandomDocument(int,int,Options,String[],String[],BytesRef[]).mjava","pathOld":"/dev/null","sourceNew":"    protected RandomDocument(int fieldCount, int maxTermCount, Options options, String[] fieldNames, String[] sampleTerms, BytesRef[] sampleTermBytes) {\n      if (fieldCount > fieldNames.length) {\n        throw new IllegalArgumentException();\n      }\n      this.fieldNames = new String[fieldCount];\n      fieldTypes = new FieldType[fieldCount];\n      tokenStreams = new RandomTokenStream[fieldCount];\n      Arrays.fill(fieldTypes, fieldType(options));\n      final Set<String> usedFileNames = new HashSet<String>();\n      for (int i = 0; i < fieldCount; ++i) {\n        do {\n          this.fieldNames[i] = RandomPicks.randomFrom(random(), fieldNames);\n        } while (usedFileNames.contains(this.fieldNames[i]));\n        usedFileNames.add(this.fieldNames[i]);\n        tokenStreams[i] = new RandomTokenStream(_TestUtil.nextInt(random(), 1, maxTermCount), sampleTerms, sampleTermBytes);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa6955ed1b1007ded1349ab72cea4555640432f","date":1359721908,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.RandomDocument#RandomDocument(int,int,Options,String[],String[],BytesRef[]).mjava","pathOld":"/dev/null","sourceNew":"    protected RandomDocument(int fieldCount, int maxTermCount, Options options, String[] fieldNames, String[] sampleTerms, BytesRef[] sampleTermBytes) {\n      if (fieldCount > fieldNames.length) {\n        throw new IllegalArgumentException();\n      }\n      this.fieldNames = new String[fieldCount];\n      fieldTypes = new FieldType[fieldCount];\n      tokenStreams = new RandomTokenStream[fieldCount];\n      Arrays.fill(fieldTypes, fieldType(options));\n      final Set<String> usedFileNames = new HashSet<String>();\n      for (int i = 0; i < fieldCount; ++i) {\n        do {\n          this.fieldNames[i] = RandomPicks.randomFrom(random(), fieldNames);\n        } while (usedFileNames.contains(this.fieldNames[i]));\n        usedFileNames.add(this.fieldNames[i]);\n        tokenStreams[i] = new RandomTokenStream(_TestUtil.nextInt(random(), 1, maxTermCount), sampleTerms, sampleTermBytes);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.RandomDocument#RandomDocument(int,int,Options,String[],String[],BytesRef[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.RandomDocument#RandomDocument(int,int,Options,String[],String[],BytesRef[]).mjava","sourceNew":"    protected RandomDocument(int fieldCount, int maxTermCount, Options options, String[] fieldNames, String[] sampleTerms, BytesRef[] sampleTermBytes) {\n      if (fieldCount > fieldNames.length) {\n        throw new IllegalArgumentException();\n      }\n      this.fieldNames = new String[fieldCount];\n      fieldTypes = new FieldType[fieldCount];\n      tokenStreams = new RandomTokenStream[fieldCount];\n      Arrays.fill(fieldTypes, fieldType(options));\n      final Set<String> usedFileNames = new HashSet<String>();\n      for (int i = 0; i < fieldCount; ++i) {\n        do {\n          this.fieldNames[i] = RandomPicks.randomFrom(random(), fieldNames);\n        } while (usedFileNames.contains(this.fieldNames[i]));\n        usedFileNames.add(this.fieldNames[i]);\n        tokenStreams[i] = new RandomTokenStream(TestUtil.nextInt(random(), 1, maxTermCount), sampleTerms, sampleTermBytes);\n      }\n    }\n\n","sourceOld":"    protected RandomDocument(int fieldCount, int maxTermCount, Options options, String[] fieldNames, String[] sampleTerms, BytesRef[] sampleTermBytes) {\n      if (fieldCount > fieldNames.length) {\n        throw new IllegalArgumentException();\n      }\n      this.fieldNames = new String[fieldCount];\n      fieldTypes = new FieldType[fieldCount];\n      tokenStreams = new RandomTokenStream[fieldCount];\n      Arrays.fill(fieldTypes, fieldType(options));\n      final Set<String> usedFileNames = new HashSet<String>();\n      for (int i = 0; i < fieldCount; ++i) {\n        do {\n          this.fieldNames[i] = RandomPicks.randomFrom(random(), fieldNames);\n        } while (usedFileNames.contains(this.fieldNames[i]));\n        usedFileNames.add(this.fieldNames[i]);\n        tokenStreams[i] = new RandomTokenStream(_TestUtil.nextInt(random(), 1, maxTermCount), sampleTerms, sampleTermBytes);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.RandomDocument#RandomDocument(int,int,Options,String[],String[],BytesRef[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase.RandomDocument#RandomDocument(int,int,Options,String[],String[],BytesRef[]).mjava","sourceNew":"    protected RandomDocument(int fieldCount, int maxTermCount, Options options, String[] fieldNames, String[] sampleTerms, BytesRef[] sampleTermBytes) {\n      if (fieldCount > fieldNames.length) {\n        throw new IllegalArgumentException();\n      }\n      this.fieldNames = new String[fieldCount];\n      fieldTypes = new FieldType[fieldCount];\n      tokenStreams = new RandomTokenStream[fieldCount];\n      Arrays.fill(fieldTypes, fieldType(options));\n      final Set<String> usedFileNames = new HashSet<>();\n      for (int i = 0; i < fieldCount; ++i) {\n        do {\n          this.fieldNames[i] = RandomPicks.randomFrom(random(), fieldNames);\n        } while (usedFileNames.contains(this.fieldNames[i]));\n        usedFileNames.add(this.fieldNames[i]);\n        tokenStreams[i] = new RandomTokenStream(TestUtil.nextInt(random(), 1, maxTermCount), sampleTerms, sampleTermBytes);\n      }\n    }\n\n","sourceOld":"    protected RandomDocument(int fieldCount, int maxTermCount, Options options, String[] fieldNames, String[] sampleTerms, BytesRef[] sampleTermBytes) {\n      if (fieldCount > fieldNames.length) {\n        throw new IllegalArgumentException();\n      }\n      this.fieldNames = new String[fieldCount];\n      fieldTypes = new FieldType[fieldCount];\n      tokenStreams = new RandomTokenStream[fieldCount];\n      Arrays.fill(fieldTypes, fieldType(options));\n      final Set<String> usedFileNames = new HashSet<String>();\n      for (int i = 0; i < fieldCount; ++i) {\n        do {\n          this.fieldNames[i] = RandomPicks.randomFrom(random(), fieldNames);\n        } while (usedFileNames.contains(this.fieldNames[i]));\n        usedFileNames.add(this.fieldNames[i]);\n        tokenStreams[i] = new RandomTokenStream(TestUtil.nextInt(random(), 1, maxTermCount), sampleTerms, sampleTermBytes);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0fa6955ed1b1007ded1349ab72cea4555640432f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"6613659748fe4411a7dcf85266e55db1f95f7315":["f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0fa6955ed1b1007ded1349ab72cea4555640432f":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0fa6955ed1b1007ded1349ab72cea4555640432f","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["0fa6955ed1b1007ded1349ab72cea4555640432f","6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0fa6955ed1b1007ded1349ab72cea4555640432f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}