{"path":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","commits":[{"id":"3f74570911bfdb9f7b01948745dcd67c69676c0e","date":1181060975,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"/dev/null","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      Hits h = s.search(q);\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n      if (i==0) {\n        innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n        log(i+\".  compare: \"+innerArray.getClass()+\" to \"+expectedArrayTypes.get(tp).getClass());\n        assertEquals(\"field values should be cached in the correct array type!\", innerArray.getClass(),expectedArrayTypes.get(tp).getClass());\n      } else {\n        log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    Hits h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    log(\"compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2","date":1197497193,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      Hits h = s.search(q);\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n      try {\n        if (i==0) {\n          innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n          log(i+\".  compare: \"+innerArray.getClass()+\" to \"+expectedArrayTypes.get(tp).getClass());\n          assertEquals(\"field values should be cached in the correct array type!\", innerArray.getClass(),expectedArrayTypes.get(tp).getClass());\n        } else {\n          log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n          assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    Hits h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    try {\n      log(\"compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      Hits h = s.search(q);\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n      if (i==0) {\n        innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n        log(i+\".  compare: \"+innerArray.getClass()+\" to \"+expectedArrayTypes.get(tp).getClass());\n        assertEquals(\"field values should be cached in the correct array type!\", innerArray.getClass(),expectedArrayTypes.get(tp).getClass());\n      } else {\n        log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    Hits h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    log(\"compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      try {\n        if (i==0) {\n          innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n          log(i+\".  compare: \"+innerArray.getClass()+\" to \"+expectedArrayTypes.get(tp).getClass());\n          assertEquals(\"field values should be cached in the correct array type!\", innerArray.getClass(),expectedArrayTypes.get(tp).getClass());\n        } else {\n          log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n          assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    try {\n      log(\"compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      Hits h = s.search(q);\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n      try {\n        if (i==0) {\n          innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n          log(i+\".  compare: \"+innerArray.getClass()+\" to \"+expectedArrayTypes.get(tp).getClass());\n          assertEquals(\"field values should be cached in the correct array type!\", innerArray.getClass(),expectedArrayTypes.get(tp).getClass());\n        } else {\n          log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n          assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    Hits h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    try {\n      log(\"compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray.getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray.getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray,\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      try {\n        if (i==0) {\n          innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n          log(i+\".  compare: \"+innerArray.getClass()+\" to \"+expectedArrayTypes.get(tp).getClass());\n          assertEquals(\"field values should be cached in the correct array type!\", innerArray.getClass(),expectedArrayTypes.get(tp).getClass());\n        } else {\n          log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n          assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    try {\n      log(\"compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray.getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray.getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray,\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray.getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray.getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray,\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray.getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray.getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray,\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray.getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray.getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray,\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray.getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray.getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray,\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap expectedArrayTypes = new HashMap();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray.getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray.getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray,\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"777b7ef341decfee8757f492d8a154637cd7a384","date":1260037647,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray.getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray.getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray,\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray.getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray.getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray,\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5d8d97303550346f85fd577f90d64cf196cebd1","date":1262890343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray.getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray.getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray,\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["e69f59b863731d864bf3047235e718f0f88f8841"],"e69f59b863731d864bf3047235e718f0f88f8841":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["e69f59b863731d864bf3047235e718f0f88f8841","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["e385df0c8e079b3d13c7ccb0b221b5145d48cfd2"],"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"777b7ef341decfee8757f492d8a154637cd7a384":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"f5d8d97303550346f85fd577f90d64cf196cebd1":["777b7ef341decfee8757f492d8a154637cd7a384"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f5d8d97303550346f85fd577f90d64cf196cebd1"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e69f59b863731d864bf3047235e718f0f88f8841":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["e69f59b863731d864bf3047235e718f0f88f8841"],"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["e385df0c8e079b3d13c7ccb0b221b5145d48cfd2"],"777b7ef341decfee8757f492d8a154637cd7a384":["f5d8d97303550346f85fd577f90d64cf196cebd1"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["777b7ef341decfee8757f492d8a154637cd7a384"],"f5d8d97303550346f85fd577f90d64cf196cebd1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}