{"path":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testWrongNumDims().mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":2,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testWrongNumDims().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAccountableHasDelegate().mjava","sourceNew":"  public void testWrongNumDims() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new DimensionalField(\"value\", Long.MIN_VALUE));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // no wrapping, else the exc might happen in executor thread:\n    IndexSearcher s = new IndexSearcher(r);\n    byte[][] point = new byte[2][];\n    try {\n      s.count(new DimensionalRangeQuery(\"value\", point, new boolean[] {true, true}, point, new boolean[] {true, true}));\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"field=\\\"value\\\" was indexed with numDims=1 but this query has numDims=2\", iae.getMessage());\n    }\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testAccountableHasDelegate() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(TestUtil.alwaysDocValuesFormat(getDocValuesFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BKDPointField(FIELD_NAME, -18.2861, 147.7));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    // Need to run a query so the DV field is really loaded:\n    TopDocs hits = s.search(new BKDPointInBBoxQuery(FIELD_NAME, -30, 0, 140, 150), 1);\n    assertEquals(1, hits.totalHits);\n    assertTrue(Accountables.toString((Accountable) r.leaves().get(0).reader()).contains(\"delegate\"));\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testWrongNumDims().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testWrongNumDims().mjava","sourceNew":"  public void testWrongNumDims() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new DimensionalLongField(\"value\", Long.MIN_VALUE));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // no wrapping, else the exc might happen in executor thread:\n    IndexSearcher s = new IndexSearcher(r);\n    byte[][] point = new byte[2][];\n    try {\n      s.count(new DimensionalRangeQuery(\"value\", point, new boolean[] {true, true}, point, new boolean[] {true, true}));\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"field=\\\"value\\\" was indexed with numDims=1 but this query has numDims=2\", iae.getMessage());\n    }\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testWrongNumDims() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new DimensionalField(\"value\", Long.MIN_VALUE));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // no wrapping, else the exc might happen in executor thread:\n    IndexSearcher s = new IndexSearcher(r);\n    byte[][] point = new byte[2][];\n    try {\n      s.count(new DimensionalRangeQuery(\"value\", point, new boolean[] {true, true}, point, new boolean[] {true, true}));\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"field=\\\"value\\\" was indexed with numDims=1 but this query has numDims=2\", iae.getMessage());\n    }\n\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testWrongNumDims().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testWrongNumDims().mjava","sourceNew":"  public void testWrongNumDims() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new LongPoint(\"value\", Long.MIN_VALUE));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // no wrapping, else the exc might happen in executor thread:\n    IndexSearcher s = new IndexSearcher(r);\n    byte[][] point = new byte[2][];\n    try {\n      s.count(new PointRangeQuery(\"value\", point, new boolean[] {true, true}, point, new boolean[] {true, true}));\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"field=\\\"value\\\" was indexed with numDims=1 but this query has numDims=2\", iae.getMessage());\n    }\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testWrongNumDims() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new DimensionalLongField(\"value\", Long.MIN_VALUE));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // no wrapping, else the exc might happen in executor thread:\n    IndexSearcher s = new IndexSearcher(r);\n    byte[][] point = new byte[2][];\n    try {\n      s.count(new DimensionalRangeQuery(\"value\", point, new boolean[] {true, true}, point, new boolean[] {true, true}));\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"field=\\\"value\\\" was indexed with numDims=1 but this query has numDims=2\", iae.getMessage());\n    }\n\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}