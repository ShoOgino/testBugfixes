{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testDocValuesMemoryIndexVsNormalIndex().mjava","commits":[{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testDocValuesMemoryIndexVsNormalIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDocValuesMemoryIndexVsNormalIndex().mjava","sourceNew":"  public void testDocValuesMemoryIndexVsNormalIndex() throws Exception {\n    Document doc = new Document();\n    long randomLong = random().nextLong();\n    doc.add(new NumericDocValuesField(\"numeric\", randomLong));\n    int numValues = atLeast(5);\n    for (int i = 0; i < numValues; i++) {\n      randomLong = random().nextLong();\n      doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", randomLong));\n      if (random().nextBoolean()) {\n        // randomly duplicate field/value\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", randomLong));\n      }\n    }\n    BytesRef randomTerm = new BytesRef(randomTerm());\n    doc.add(new BinaryDocValuesField(\"binary\", randomTerm));\n    if (random().nextBoolean()) {\n      doc.add(new StringField(\"binary\", randomTerm, Field.Store.NO));\n    }\n    randomTerm = new BytesRef(randomTerm());\n    doc.add(new SortedDocValuesField(\"sorted\", randomTerm));\n    if (random().nextBoolean()) {\n      doc.add(new StringField(\"sorted\", randomTerm, Field.Store.NO));\n    }\n    numValues = atLeast(5);\n    for (int i = 0; i < numValues; i++) {\n      randomTerm = new BytesRef(randomTerm());\n      doc.add(new SortedSetDocValuesField(\"sorted_set\", randomTerm));\n      if (random().nextBoolean()) {\n        // randomly duplicate field/value\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", randomTerm));\n      }\n      if (random().nextBoolean()) {\n        // randomily just add a normal string field\n        doc.add(new StringField(\"sorted_set\", randomTerm, Field.Store.NO));\n      }\n    }\n\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    MemoryIndex memoryIndex = MemoryIndex.fromDocument(doc, mockAnalyzer);\n    IndexReader indexReader = memoryIndex.createSearcher().getIndexReader();\n    LeafReader leafReader =  indexReader.leaves().get(0).reader();\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    NumericDocValues controlNumericDocValues = controlLeafReader.getNumericDocValues(\"numeric\");\n    assertEquals(0, numericDocValues.nextDoc());\n    assertEquals(0, controlNumericDocValues.nextDoc());\n    assertEquals(controlNumericDocValues.longValue(), numericDocValues.longValue());\n\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    assertEquals(0, sortedNumericDocValues.nextDoc());\n    SortedNumericDocValues controlSortedNumericDocValues = controlLeafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    assertEquals(0, controlSortedNumericDocValues.nextDoc());\n    assertEquals(controlSortedNumericDocValues.docValueCount(), sortedNumericDocValues.docValueCount());\n    for (int i = 0; i < controlSortedNumericDocValues.docValueCount(); i++) {\n      assertEquals(controlSortedNumericDocValues.nextValue(), sortedNumericDocValues.nextValue());\n    }\n\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    BinaryDocValues controlBinaryDocValues = controlLeafReader.getBinaryDocValues(\"binary\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(0, controlBinaryDocValues.nextDoc());\n    assertEquals(controlBinaryDocValues.binaryValue(), binaryDocValues.binaryValue());\n\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    SortedDocValues controlSortedDocValues = controlLeafReader.getSortedDocValues(\"sorted\");\n    assertEquals(controlSortedDocValues.getValueCount(), sortedDocValues.getValueCount());\n    assertEquals(0, sortedDocValues.nextDoc());\n    assertEquals(0, controlSortedDocValues.nextDoc());\n    assertEquals(controlSortedDocValues.binaryValue(), sortedDocValues.binaryValue());\n    assertEquals(controlSortedDocValues.ordValue(), sortedDocValues.ordValue());\n    assertEquals(controlSortedDocValues.lookupOrd(0), sortedDocValues.lookupOrd(0));\n\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(0, sortedSetDocValues.nextDoc());\n    SortedSetDocValues controlSortedSetDocValues = controlLeafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(0, controlSortedSetDocValues.nextDoc());\n    assertEquals(controlSortedSetDocValues.getValueCount(), sortedSetDocValues.getValueCount());\n    for (long controlOrd = controlSortedSetDocValues.nextOrd(); controlOrd != SortedSetDocValues.NO_MORE_ORDS;\n         controlOrd = controlSortedSetDocValues.nextOrd()) {\n      assertEquals(controlOrd, sortedSetDocValues.nextOrd());\n      assertEquals(controlSortedSetDocValues.lookupOrd(controlOrd), sortedSetDocValues.lookupOrd(controlOrd));\n    }\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n\n    indexReader.close();\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesMemoryIndexVsNormalIndex() throws Exception {\n    Document doc = new Document();\n    long randomLong = random().nextLong();\n    doc.add(new NumericDocValuesField(\"numeric\", randomLong));\n    int numValues = atLeast(5);\n    for (int i = 0; i < numValues; i++) {\n      randomLong = random().nextLong();\n      doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", randomLong));\n      if (random().nextBoolean()) {\n        // randomly duplicate field/value\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", randomLong));\n      }\n    }\n    BytesRef randomTerm = new BytesRef(randomTerm());\n    doc.add(new BinaryDocValuesField(\"binary\", randomTerm));\n    if (random().nextBoolean()) {\n      doc.add(new StringField(\"binary\", randomTerm, Field.Store.NO));\n    }\n    randomTerm = new BytesRef(randomTerm());\n    doc.add(new SortedDocValuesField(\"sorted\", randomTerm));\n    if (random().nextBoolean()) {\n      doc.add(new StringField(\"sorted\", randomTerm, Field.Store.NO));\n    }\n    numValues = atLeast(5);\n    for (int i = 0; i < numValues; i++) {\n      randomTerm = new BytesRef(randomTerm());\n      doc.add(new SortedSetDocValuesField(\"sorted_set\", randomTerm));\n      if (random().nextBoolean()) {\n        // randomly duplicate field/value\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", randomTerm));\n      }\n      if (random().nextBoolean()) {\n        // randomily just add a normal string field\n        doc.add(new StringField(\"sorted_set\", randomTerm, Field.Store.NO));\n      }\n    }\n\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    MemoryIndex memoryIndex = MemoryIndex.fromDocument(doc, mockAnalyzer);\n    IndexReader indexReader = memoryIndex.createSearcher().getIndexReader();\n    LeafReader leafReader =  indexReader.leaves().get(0).reader();\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    NumericDocValues controlNumericDocValues = controlLeafReader.getNumericDocValues(\"numeric\");\n    assertEquals(0, numericDocValues.nextDoc());\n    assertEquals(0, controlNumericDocValues.nextDoc());\n    assertEquals(controlNumericDocValues.longValue(), numericDocValues.longValue());\n\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    assertEquals(0, sortedNumericDocValues.nextDoc());\n    SortedNumericDocValues controlSortedNumericDocValues = controlLeafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    assertEquals(0, controlSortedNumericDocValues.nextDoc());\n    assertEquals(controlSortedNumericDocValues.docValueCount(), sortedNumericDocValues.docValueCount());\n    for (int i = 0; i < controlSortedNumericDocValues.docValueCount(); i++) {\n      assertEquals(controlSortedNumericDocValues.nextValue(), sortedNumericDocValues.nextValue());\n    }\n\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    BinaryDocValues controlBinaryDocValues = controlLeafReader.getBinaryDocValues(\"binary\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(0, controlBinaryDocValues.nextDoc());\n    assertEquals(controlBinaryDocValues.binaryValue(), binaryDocValues.binaryValue());\n\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    SortedDocValues controlSortedDocValues = controlLeafReader.getSortedDocValues(\"sorted\");\n    assertEquals(controlSortedDocValues.getValueCount(), sortedDocValues.getValueCount());\n    assertEquals(0, sortedDocValues.nextDoc());\n    assertEquals(0, controlSortedDocValues.nextDoc());\n    assertEquals(controlSortedDocValues.binaryValue(), sortedDocValues.binaryValue());\n    assertEquals(controlSortedDocValues.ordValue(), sortedDocValues.ordValue());\n    assertEquals(controlSortedDocValues.lookupOrd(0), sortedDocValues.lookupOrd(0));\n\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(0, sortedSetDocValues.nextDoc());\n    SortedSetDocValues controlSortedSetDocValues = controlLeafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(0, controlSortedSetDocValues.nextDoc());\n    assertEquals(controlSortedSetDocValues.getValueCount(), sortedSetDocValues.getValueCount());\n    for (long controlOrd = controlSortedSetDocValues.nextOrd(); controlOrd != SortedSetDocValues.NO_MORE_ORDS;\n         controlOrd = controlSortedSetDocValues.nextOrd()) {\n      assertEquals(controlOrd, sortedSetDocValues.nextOrd());\n      assertEquals(controlSortedSetDocValues.lookupOrd(controlOrd), sortedSetDocValues.lookupOrd(controlOrd));\n    }\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n\n    indexReader.close();\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d77dafd89756a5161d244985903e3487ca109182"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}