{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","sourceNew":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","sourceOld":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","sourceNew":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","sourceOld":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","sourceNew":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      // Change to false to see all wrong hits:\n      boolean failFast = true;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n\n          // Print only one failed hit; add a true || in here to see all failures:\n          if (failFast == false || failed.getAndSet(true) == false) {\n            if (expected) {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n            } else {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n            }\n            System.out.println(\"  small=\" + small + \" query=\" + query +\n                               \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                               \"\\n  deleted?=\" + deleted.contains(id));\n            if (Double.isNaN(lats[id]) == false) {\n              describe(docID, lats[id], lons[id]);\n            }\n            if (failFast) {\n              fail(\"wrong hit (first of possibly more)\");\n            } else {\n              fail = true;\n            }\n          }\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","sourceOld":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","bugFix":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","sourceNew":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      // Change to false to see all wrong hits:\n      boolean failFast = true;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n\n          // Print only one failed hit; add a true || in here to see all failures:\n          if (failFast == false || failed.getAndSet(true) == false) {\n            if (expected) {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n            } else {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n            }\n            System.out.println(\"  small=\" + small + \" query=\" + query +\n                               \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                               \"\\n  deleted?=\" + deleted.contains(id));\n            if (Double.isNaN(lats[id]) == false) {\n              describe(docID, lats[id], lons[id]);\n            }\n            if (failFast) {\n              fail(\"wrong hit (first of possibly more)\");\n            } else {\n              fail = true;\n            }\n          }\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","sourceOld":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","sourceNew":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      // Change to false to see all wrong hits:\n      boolean failFast = true;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n\n          // Print only one failed hit; add a true || in here to see all failures:\n          if (failFast == false || failed.getAndSet(true) == false) {\n            if (expected) {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n            } else {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n            }\n            System.out.println(\"  small=\" + small + \" query=\" + query +\n                               \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                               \"\\n  deleted?=\" + deleted.contains(id));\n            if (Double.isNaN(lats[id]) == false) {\n              describe(docID, lats[id], lons[id]);\n            }\n            if (failFast) {\n              fail(\"wrong hit (first of possibly more)\");\n            } else {\n              fail = true;\n            }\n          }\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","sourceOld":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","sourceNew":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      // Change to false to see all wrong hits:\n      boolean failFast = true;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n\n          // Print only one failed hit; add a true || in here to see all failures:\n          if (failFast == false || failed.getAndSet(true) == false) {\n            if (expected) {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n            } else {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n            }\n            System.out.println(\"  small=\" + small + \" query=\" + query +\n                               \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                               \"\\n  deleted?=\" + deleted.contains(id));\n            if (Double.isNaN(lats[id]) == false) {\n              describe(docID, lats[id], lons[id]);\n            }\n            if (failFast) {\n              fail(\"wrong hit (first of possibly more)\");\n            } else {\n              fail = true;\n            }\n          }\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","sourceOld":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      // Change to false to see all wrong hits:\n      boolean failFast = true;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n\n          // Print only one failed hit; add a true || in here to see all failures:\n          if (failFast == false || failed.getAndSet(true) == false) {\n            if (expected) {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n            } else {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n            }\n            System.out.println(\"  small=\" + small + \" query=\" + query +\n                               \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                               \"\\n  deleted?=\" + deleted.contains(id));\n            if (Double.isNaN(lats[id]) == false) {\n              describe(docID, lats[id], lons[id]);\n            }\n            if (failFast) {\n              fail(\"wrong hit (first of possibly more)\");\n            } else {\n              fail = true;\n            }\n          }\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84d7daf8313ff5c20a3ab51ffd646f5e862e1bac","date":1459177733,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","sourceNew":null,"sourceOld":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      // Change to false to see all wrong hits:\n      boolean failFast = true;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n\n          // Print only one failed hit; add a true || in here to see all failures:\n          if (failFast == false || failed.getAndSet(true) == false) {\n            if (expected) {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n            } else {\n              System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n            }\n            System.out.println(\"  small=\" + small + \" query=\" + query +\n                               \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                               \"\\n  deleted?=\" + deleted.contains(id));\n            if (Double.isNaN(lats[id]) == false) {\n              describe(docID, lats[id], lons[id]);\n            }\n            if (failFast) {\n              fail(\"wrong hit (first of possibly more)\");\n            } else {\n              fail = true;\n            }\n          }\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84d7daf8313ff5c20a3ab51ffd646f5e862e1bac":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["937923083e4d137932336fc80f3d78758ff698a6","c422e924212367b334b4938f1fd3e44438e88c40"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c422e924212367b334b4938f1fd3e44438e88c40":["937923083e4d137932336fc80f3d78758ff698a6","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["937923083e4d137932336fc80f3d78758ff698a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84d7daf8313ff5c20a3ab51ffd646f5e862e1bac"]},"commit2Childs":{"84d7daf8313ff5c20a3ab51ffd646f5e862e1bac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["84d7daf8313ff5c20a3ab51ffd646f5e862e1bac"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}