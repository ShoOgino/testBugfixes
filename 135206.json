{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","commits":[{"id":"723a886da5f3b2e263e30950603128b2c9e40528","date":1308126244,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {\n      try {\n        List parentRow = new ArrayList();\n        parentRow.add(createMap(\"id\", \"1\"));\n        MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n\n        List childRow = new ArrayList();\n        childRow.add(createMap(\"desc\", \"hello\"));\n        MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n            .iterator());\n\n        runFullImport(dataConfig_delta);\n        assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n      } finally {\n        f.setWritable(true);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b2cddc3bec71ee40cd03a0a87c2803c80b98ab","date":1308294329,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {\n      try {\n        List parentRow = new ArrayList();\n        parentRow.add(createMap(\"id\", \"1\"));\n        MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n\n        List childRow = new ArrayList();\n        childRow.add(createMap(\"desc\", \"hello\"));\n        MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n            .iterator());\n\n        runFullImport(dataConfig_delta);\n        assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n      } finally {\n        f.delete();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {\n      try {\n        List parentRow = new ArrayList();\n        parentRow.add(createMap(\"id\", \"1\"));\n        MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n\n        List childRow = new ArrayList();\n        childRow.add(createMap(\"desc\", \"hello\"));\n        MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n            .iterator());\n\n        runFullImport(dataConfig_delta);\n        assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n      } finally {\n        f.setWritable(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {\n      try {\n        List parentRow = new ArrayList();\n        parentRow.add(createMap(\"id\", \"1\"));\n        MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n\n        List childRow = new ArrayList();\n        childRow.add(createMap(\"desc\", \"hello\"));\n        MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n            .iterator());\n\n        runFullImport(dataConfig_delta);\n        assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n      } finally {\n        f.delete();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {\n      try {\n        List parentRow = new ArrayList();\n        parentRow.add(createMap(\"id\", \"1\"));\n        MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n\n        List childRow = new ArrayList();\n        childRow.add(createMap(\"desc\", \"hello\"));\n        MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n            .iterator());\n\n        runFullImport(dataConfig_delta);\n        assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n      } finally {\n        f.delete();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08b2cddc3bec71ee40cd03a0a87c2803c80b98ab":["723a886da5f3b2e263e30950603128b2c9e40528"],"c26f00b574427b55127e869b935845554afde1fa":["08b2cddc3bec71ee40cd03a0a87c2803c80b98ab","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"723a886da5f3b2e263e30950603128b2c9e40528":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"08b2cddc3bec71ee40cd03a0a87c2803c80b98ab":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"723a886da5f3b2e263e30950603128b2c9e40528":["08b2cddc3bec71ee40cd03a0a87c2803c80b98ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","723a886da5f3b2e263e30950603128b2c9e40528"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}