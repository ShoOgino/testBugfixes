{"path":"client/java/solrj/src/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","commits":[{"id":"86dee79e60d6383c5eb9325aac82cf88813329be","date":1216955904,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/LukeResponse#LukeResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<String, FieldInfo>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<String, FieldTypeInfo>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public LukeResponse(NamedList<Object> res) {\n    super(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<String, FieldInfo>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<String, FieldTypeInfo>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<String, FieldInfo>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<String, FieldTypeInfo>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<String, FieldInfo>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<String, FieldTypeInfo>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["86dee79e60d6383c5eb9325aac82cf88813329be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"86dee79e60d6383c5eb9325aac82cf88813329be":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["86dee79e60d6383c5eb9325aac82cf88813329be"],"86dee79e60d6383c5eb9325aac82cf88813329be":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}