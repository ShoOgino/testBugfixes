{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    DocIdSetIterator docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            return entry.count;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getDocsWithField(entry.missingOffset, maxDoc);\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n\n          @Override\n          public long longValue() {\n            return values.get(docsWithField.docID());\n          }\n\n          @Override\n          public int docID() {\n            return docsWithField.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return docsWithField.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return docsWithField.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return docsWithField.cost();\n          }\n\n        };\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    DocIdSetIterator docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            return entry.count;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getDocsWithField(entry.missingOffset, maxDoc);\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n\n          @Override\n          public long longValue() {\n            return values.get(docsWithField.docID());\n          }\n\n          @Override\n          public int docID() {\n            return docsWithField.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return docsWithField.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return docsWithField.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return docsWithField.cost();\n          }\n\n        };\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    DocIdSetIterator docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            return entry.count;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getDocsWithField(entry.missingOffset, maxDoc);\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n\n          @Override\n          public long longValue() {\n            return values.get(docsWithField.docID());\n          }\n\n          @Override\n          public int docID() {\n            return docsWithField.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return docsWithField.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return docsWithField.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return docsWithField.cost();\n          }\n\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":6,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":6,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["23e44daeaa8b89694d10df5999956c8e14a7dd09","03e17b020972a0d6e8d6823f545571a66646a167"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23e44daeaa8b89694d10df5999956c8e14a7dd09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","084884d4602f4d1c7411eab29e897e349ce62675"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}