{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","commits":[{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"/dev/null","sourceNew":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super(props == null ? new HashMap<String,Object>(1) : props);\n    this.name = name;\n    this.slices = slices;\n    this.router = router;\n    assert name != null && slices != null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"/dev/null","sourceNew":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super(props == null ? new HashMap<String,Object>(1) : props);\n    this.name = name;\n    this.slices = slices;\n    this.router = router;\n    assert name != null && slices != null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc4e6d2476fe40f282c0c25e20e629a6f37580cf","date":1355430839,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? Collections.<String,Object>emptyMap() : props);\n    this.name = name;\n    this.slices = slices;\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","sourceOld":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super(props == null ? new HashMap<String,Object>(1) : props);\n    this.name = name;\n    this.slices = slices;\n    this.router = router;\n    assert name != null && slices != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? Collections.<String,Object>emptyMap() : props);\n    this.name = name;\n    this.slices = slices;\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","sourceOld":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super(props == null ? new HashMap<String,Object>(1) : props);\n    this.name = name;\n    this.slices = slices;\n    this.router = router;\n    assert name != null && slices != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"630b72110afca0a13a755e07ef8a4d764afb52aa","date":1361202100,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? Collections.<String,Object>emptyMap() : props);\n    this.name = name;\n\n    this.allSlices = slices;\n    this.slices = new HashMap<String, Slice>();\n\n    Iterator<Map.Entry<String, Slice>> iter = slices.entrySet().iterator();\n\n    while (iter.hasNext()) {\n      Map.Entry<String, Slice> slice = iter.next();\n      if (slice.getValue().getState().equals(Slice.ACTIVE))\n        this.slices.put(slice.getKey(), slice.getValue());\n    }\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","sourceOld":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? Collections.<String,Object>emptyMap() : props);\n    this.name = name;\n    this.slices = slices;\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dea5c39096a2ee9e162e41aff22e4d608743435","date":1363178722,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? Collections.<String,Object>emptyMap() : props);\n    this.name = name;\n\n    this.slices = slices;\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","sourceOld":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? Collections.<String,Object>emptyMap() : props);\n    this.name = name;\n\n    this.allSlices = slices;\n    this.slices = new HashMap<String, Slice>();\n\n    Iterator<Map.Entry<String, Slice>> iter = slices.entrySet().iterator();\n\n    while (iter.hasNext()) {\n      Map.Entry<String, Slice> slice = iter.next();\n      if (slice.getValue().getState().equals(Slice.ACTIVE))\n        this.slices.put(slice.getKey(), slice.getValue());\n    }\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8289f39d5383ee10f1ab15486657badbc1c970ee","date":1363183232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? Collections.<String,Object>emptyMap() : props);\n    this.name = name;\n\n    this.allSlices = slices;\n    this.slices = new HashMap<String, Slice>();\n\n    Iterator<Map.Entry<String, Slice>> iter = slices.entrySet().iterator();\n\n    while (iter.hasNext()) {\n      Map.Entry<String, Slice> slice = iter.next();\n      if (slice.getValue().getState().equals(Slice.ACTIVE))\n        this.slices.put(slice.getKey(), slice.getValue());\n    }\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","sourceOld":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? Collections.<String,Object>emptyMap() : props);\n    this.name = name;\n\n    this.slices = slices;\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? Collections.<String,Object>emptyMap() : props);\n    this.name = name;\n\n    this.slices = slices;\n    this.activeSlices = new HashMap<String, Slice>();\n\n    Iterator<Map.Entry<String, Slice>> iter = slices.entrySet().iterator();\n\n    while (iter.hasNext()) {\n      Map.Entry<String, Slice> slice = iter.next();\n      if (slice.getValue().getState().equals(Slice.ACTIVE))\n        this.activeSlices.put(slice.getKey(), slice.getValue());\n    }\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","sourceOld":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? Collections.<String,Object>emptyMap() : props);\n    this.name = name;\n\n    this.allSlices = slices;\n    this.slices = new HashMap<String, Slice>();\n\n    Iterator<Map.Entry<String, Slice>> iter = slices.entrySet().iterator();\n\n    while (iter.hasNext()) {\n      Map.Entry<String, Slice> slice = iter.next();\n      if (slice.getValue().getState().equals(Slice.ACTIVE))\n        this.slices.put(slice.getKey(), slice.getValue());\n    }\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e187a371a1d09379bb452c2c13a7b9221525dff8","date":1379517004,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? props = new HashMap<String,Object>() : props);\n    this.name = name;\n\n    this.slices = slices;\n    this.activeSlices = new HashMap<String, Slice>();\n\n    Iterator<Map.Entry<String, Slice>> iter = slices.entrySet().iterator();\n\n    while (iter.hasNext()) {\n      Map.Entry<String, Slice> slice = iter.next();\n      if (slice.getValue().getState().equals(Slice.ACTIVE))\n        this.activeSlices.put(slice.getKey(), slice.getValue());\n    }\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","sourceOld":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? Collections.<String,Object>emptyMap() : props);\n    this.name = name;\n\n    this.slices = slices;\n    this.activeSlices = new HashMap<String, Slice>();\n\n    Iterator<Map.Entry<String, Slice>> iter = slices.entrySet().iterator();\n\n    while (iter.hasNext()) {\n      Map.Entry<String, Slice> slice = iter.next();\n      if (slice.getValue().getState().equals(Slice.ACTIVE))\n        this.activeSlices.put(slice.getKey(), slice.getValue());\n    }\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? props = new HashMap<>() : props);\n    this.name = name;\n\n    this.slices = slices;\n    this.activeSlices = new HashMap<>();\n\n    Iterator<Map.Entry<String, Slice>> iter = slices.entrySet().iterator();\n\n    while (iter.hasNext()) {\n      Map.Entry<String, Slice> slice = iter.next();\n      if (slice.getValue().getState().equals(Slice.ACTIVE))\n        this.activeSlices.put(slice.getKey(), slice.getValue());\n    }\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","sourceOld":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? props = new HashMap<String,Object>() : props);\n    this.name = name;\n\n    this.slices = slices;\n    this.activeSlices = new HashMap<String, Slice>();\n\n    Iterator<Map.Entry<String, Slice>> iter = slices.entrySet().iterator();\n\n    while (iter.hasNext()) {\n      Map.Entry<String, Slice> slice = iter.next();\n      if (slice.getValue().getState().equals(Slice.ACTIVE))\n        this.activeSlices.put(slice.getKey(), slice.getValue());\n    }\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, -1);\n  }\n\n","sourceOld":"  /**\n   * @param name  The name of the collection\n   * @param slices The logical shards of the collection.  This is used directly and a copy is not made.\n   * @param props  The properties of the slice.  This is used directly and a copy is not made.\n   */\n  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    super( props==null ? props = new HashMap<>() : props);\n    this.name = name;\n\n    this.slices = slices;\n    this.activeSlices = new HashMap<>();\n\n    Iterator<Map.Entry<String, Slice>> iter = slices.entrySet().iterator();\n\n    while (iter.hasNext()) {\n      Map.Entry<String, Slice> slice = iter.next();\n      if (slice.getValue().getState().equals(Slice.ACTIVE))\n        this.activeSlices.put(slice.getKey(), slice.getValue());\n    }\n    this.router = router;\n\n    assert name != null && slices != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, -1, ZkStateReader.CLUSTER_STATE);\n  }\n\n","sourceOld":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, -1);\n  }\n\n","sourceOld":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, -1, ZkStateReader.CLUSTER_STATE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, -1, ZkStateReader.CLUSTER_STATE);\n  }\n\n","sourceOld":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3eaf6502248c2d6fadda33bfd9feb21a08caade","date":1462405599,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, Integer.MAX_VALUE, ZkStateReader.CLUSTER_STATE);\n  }\n\n","sourceOld":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, -1, ZkStateReader.CLUSTER_STATE);\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, Integer.MAX_VALUE, ZkStateReader.CLUSTER_STATE);\n  }\n\n","sourceOld":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, -1, ZkStateReader.CLUSTER_STATE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, Integer.MAX_VALUE, ZkStateReader.CLUSTER_STATE);\n  }\n\n","sourceOld":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, -1, ZkStateReader.CLUSTER_STATE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, Integer.MAX_VALUE, ZkStateReader.CLUSTER_STATE);\n  }\n\n","sourceOld":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, -1, ZkStateReader.CLUSTER_STATE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#DocCollection(String,Map[String,Slice],Map[String,Object],DocRouter).mjava","sourceNew":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, Integer.MAX_VALUE);\n  }\n\n","sourceOld":"  public DocCollection(String name, Map<String, Slice> slices, Map<String, Object> props, DocRouter router) {\n    this(name, slices, props, router, Integer.MAX_VALUE, ZkStateReader.CLUSTER_STATE);\n  }\n\n","bugFix":["e3eaf6502248c2d6fadda33bfd9feb21a08caade"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","dc4e6d2476fe40f282c0c25e20e629a6f37580cf"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e187a371a1d09379bb452c2c13a7b9221525dff8"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["73450c0955930295d34703e7ddbfc6973b7a121a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["9279b175e5e66258442d2123a50f052219a9cc1b","e3eaf6502248c2d6fadda33bfd9feb21a08caade"],"e3eaf6502248c2d6fadda33bfd9feb21a08caade":["9279b175e5e66258442d2123a50f052219a9cc1b"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["9279b175e5e66258442d2123a50f052219a9cc1b","73450c0955930295d34703e7ddbfc6973b7a121a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5a558d54519c651068ddb202f03befefb1514a7"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["8289f39d5383ee10f1ab15486657badbc1c970ee"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"630b72110afca0a13a755e07ef8a4d764afb52aa":["dc4e6d2476fe40f282c0c25e20e629a6f37580cf"],"dc4e6d2476fe40f282c0c25e20e629a6f37580cf":["c5a558d54519c651068ddb202f03befefb1514a7"],"8289f39d5383ee10f1ab15486657badbc1c970ee":["3dea5c39096a2ee9e162e41aff22e4d608743435"],"3dea5c39096a2ee9e162e41aff22e4d608743435":["630b72110afca0a13a755e07ef8a4d764afb52aa"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["9279b175e5e66258442d2123a50f052219a9cc1b","73450c0955930295d34703e7ddbfc6973b7a121a"],"c5a558d54519c651068ddb202f03befefb1514a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e187a371a1d09379bb452c2c13a7b9221525dff8":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73450c0955930295d34703e7ddbfc6973b7a121a":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"e3eaf6502248c2d6fadda33bfd9feb21a08caade":["73450c0955930295d34703e7ddbfc6973b7a121a"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["e187a371a1d09379bb452c2c13a7b9221525dff8"],"9279b175e5e66258442d2123a50f052219a9cc1b":["73450c0955930295d34703e7ddbfc6973b7a121a","e3eaf6502248c2d6fadda33bfd9feb21a08caade","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"630b72110afca0a13a755e07ef8a4d764afb52aa":["3dea5c39096a2ee9e162e41aff22e4d608743435"],"dc4e6d2476fe40f282c0c25e20e629a6f37580cf":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","630b72110afca0a13a755e07ef8a4d764afb52aa"],"8289f39d5383ee10f1ab15486657badbc1c970ee":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"3dea5c39096a2ee9e162e41aff22e4d608743435":["8289f39d5383ee10f1ab15486657badbc1c970ee"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","dc4e6d2476fe40f282c0c25e20e629a6f37580cf"],"e187a371a1d09379bb452c2c13a7b9221525dff8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}