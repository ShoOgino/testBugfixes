{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#filter(TokenFilter).mjava","commits":[{"id":"3106630d90d0d9e238f170a5cb83cd1dee5ddd72","date":1343657007,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#filter(TokenFilter).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestElision#filter(TokenFilter).mjava","sourceNew":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    return tas;\n  }\n\n","sourceOld":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    return tas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#filter(TokenFilter).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestElision#filter(TokenFilter).mjava","sourceNew":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    return tas;\n  }\n\n","sourceOld":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    return tas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#filter(TokenFilter).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestElision#filter(TokenFilter).mjava","sourceNew":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    return tas;\n  }\n\n","sourceOld":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    return tas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0a7ec5f5d873402b53b3800fb37ad5fbb9dc0b","date":1351024347,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#filter(TokenFilter).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#filter(TokenFilter).mjava","sourceNew":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    filter.reset();\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    filter.end();\n    filter.close();\n    return tas;\n  }\n\n","sourceOld":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    return tas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#filter(TokenFilter).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#filter(TokenFilter).mjava","sourceNew":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    filter.reset();\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    filter.end();\n    filter.close();\n    return tas;\n  }\n\n","sourceOld":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    return tas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#filter(TokenFilter).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#filter(TokenFilter).mjava","sourceNew":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    filter.reset();\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    filter.end();\n    filter.close();\n    return tas;\n  }\n\n","sourceOld":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    filter.reset();\n    while (filter.incrementToken()) {\n      tas.add(termAtt.toString());\n    }\n    filter.end();\n    filter.close();\n    return tas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2a0a7ec5f5d873402b53b3800fb37ad5fbb9dc0b"],"2a0a7ec5f5d873402b53b3800fb37ad5fbb9dc0b":["3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"f2126b84bd093fa3d921582a109a0ee578c28126":["3106630d90d0d9e238f170a5cb83cd1dee5ddd72","2a0a7ec5f5d873402b53b3800fb37ad5fbb9dc0b"],"3106630d90d0d9e238f170a5cb83cd1dee5ddd72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a0a7ec5f5d873402b53b3800fb37ad5fbb9dc0b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"3106630d90d0d9e238f170a5cb83cd1dee5ddd72":["2a0a7ec5f5d873402b53b3800fb37ad5fbb9dc0b","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","f2126b84bd093fa3d921582a109a0ee578c28126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}