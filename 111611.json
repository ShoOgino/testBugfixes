{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextArcLabel(Arc[T]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextArcLabel(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextArcLabel(Arc[T]).mjava","sourceNew":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(getNodeAddress(arc.nextArc));\n      final byte b = bytes[in.pos];\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        //System.out.println(\"    nextArc fake array\");\n        in.skip(1);\n        in.readVInt();\n        if (packed) {\n          in.readVInt();\n        } else {\n          in.readInt();\n        }\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart);\n        in.skip((1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","sourceOld":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(getNodeAddress(arc.nextArc));\n      final byte b = bytes[in.pos];\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        //System.out.println(\"    nextArc fake array\");\n        in.skip(1);\n        in.readVInt();\n        if (packed) {\n          in.readVInt();\n        } else {\n          in.readInt();\n        }\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart);\n        in.skip((1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","date":1339238489,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextArcLabel(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextArcLabel(Arc[T]).mjava","sourceNew":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc, BytesReader in) throws IOException {\n    assert !arc.isLast();\n\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in.pos = getNodeAddress(arc.nextArc);\n      final byte b = bytes[in.pos];\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        //System.out.println(\"    nextArc fake array\");\n        in.skip(1);\n        in.readVInt();\n        if (packed) {\n          in.readVInt();\n        } else {\n          in.readInt();\n        }\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in.pos = arc.posArcsStart;\n        in.skip((1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in.pos = arc.nextArc;\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","sourceOld":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(getNodeAddress(arc.nextArc));\n      final byte b = bytes[in.pos];\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        //System.out.println(\"    nextArc fake array\");\n        in.skip(1);\n        in.readVInt();\n        if (packed) {\n          in.readVInt();\n        } else {\n          in.readInt();\n        }\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart);\n        in.skip((1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"]},"commit2Childs":{"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}