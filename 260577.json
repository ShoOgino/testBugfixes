{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88b0212386fe531136816706dc37dc49b9dbf7dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c226b0eeb8b028f572020f459851a663a2c064e":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"]},"commit2Childs":{"88b0212386fe531136816706dc37dc49b9dbf7dc":["9c226b0eeb8b028f572020f459851a663a2c064e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}