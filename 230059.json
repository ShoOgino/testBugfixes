{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","commits":[{"id":"bd4f332774f36bc85e29ac69a692f960dac011a9","date":1328162395,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","pathOld":"/dev/null","sourceNew":"  // make sure that log isn't needlessly replayed after a clean shutdown\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"1\", \"val_i\",\"1\"));\n      assertU(adoc(\"id\",\"2\", \"val_i\",\"1\"));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2","date":1329660825,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","sourceNew":"  // make sure that log isn't needlessly replayed after a clean shutdown\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"E1\", \"val_i\",\"1\"));\n      assertU(adoc(\"id\",\"E2\", \"val_i\",\"1\"));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","sourceOld":"  // make sure that log isn't needlessly replayed after a clean shutdown\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"1\", \"val_i\",\"1\"));\n      assertU(adoc(\"id\",\"2\", \"val_i\",\"1\"));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","sourceNew":"  // make sure that log isn't needlessly replayed after a clean close\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"E1\", \"val_i\",\"1\"));\n      assertU(adoc(\"id\",\"E2\", \"val_i\",\"1\"));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","sourceOld":"  // make sure that log isn't needlessly replayed after a clean shutdown\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"E1\", \"val_i\",\"1\"));\n      assertU(adoc(\"id\",\"E2\", \"val_i\",\"1\"));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","sourceNew":"  // make sure that log isn't needlessly replayed after a clean close\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"E1\", \"val_i\",\"1\"));\n      assertU(adoc(\"id\",\"E2\", \"val_i\",\"1\"));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","sourceOld":"  // make sure that log isn't needlessly replayed after a clean close\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"E1\", \"val_i\",\"1\"));\n      assertU(adoc(\"id\",\"E2\", \"val_i\",\"1\"));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9efcb86f82b536ffcefcc27adbfa39b603342af1","date":1492147023,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","sourceNew":"  // make sure that log isn't needlessly replayed after a clean close\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v1 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"E1\", \"val_i\",v1));\n      assertU(adoc(\"id\",\"E2\", \"val_i\",v1));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","sourceOld":"  // make sure that log isn't needlessly replayed after a clean close\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"E1\", \"val_i\",\"1\"));\n      assertU(adoc(\"id\",\"E2\", \"val_i\",\"1\"));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","sourceNew":"  // make sure that log isn't needlessly replayed after a clean close\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v1 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"E1\", \"val_i\",v1));\n      assertU(adoc(\"id\",\"E2\", \"val_i\",v1));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","sourceOld":"  // make sure that log isn't needlessly replayed after a clean close\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"E1\", \"val_i\",\"1\"));\n      assertU(adoc(\"id\",\"E2\", \"val_i\",\"1\"));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testCleanShutdown().mjava","sourceNew":"  // make sure that log isn't needlessly replayed after a clean close\n  @Test\n  public void testCleanShutdown() throws Exception {\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v1 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"E1\", \"val_i\",v1));\n      assertU(adoc(\"id\",\"E2\", \"val_i\",v1));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","sourceOld":"  // make sure that log isn't needlessly replayed after a clean close\n  @Test\n  public void testCleanShutdown() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v1 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"E1\", \"val_i\",v1));\n      assertU(adoc(\"id\",\"E2\", \"val_i\",v1));\n\n      // set to a high enough number so this test won't hang on a bug\n      logReplay.release(10);\n\n      h.close();\n      createCore();\n\n      // make sure the docs got committed\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==2\");\n\n      // make sure no replay happened\n      assertEquals(10, logReplay.availablePermits());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9efcb86f82b536ffcefcc27adbfa39b603342af1":["3a0c04b71951333291abc7f317109a6a5957bd28"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3a0c04b71951333291abc7f317109a6a5957bd28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["01e98f8ae83ed9c1151cd99b37a7371fd6754ac2"],"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2":["bd4f332774f36bc85e29ac69a692f960dac011a9"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["9efcb86f82b536ffcefcc27adbfa39b603342af1"],"3a0c04b71951333291abc7f317109a6a5957bd28":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"bd4f332774f36bc85e29ac69a692f960dac011a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"]},"commit2Childs":{"9efcb86f82b536ffcefcc27adbfa39b603342af1":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd4f332774f36bc85e29ac69a692f960dac011a9"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3a0c04b71951333291abc7f317109a6a5957bd28"],"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a0c04b71951333291abc7f317109a6a5957bd28":["9efcb86f82b536ffcefcc27adbfa39b603342af1","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"bd4f332774f36bc85e29ac69a692f960dac011a9":["01e98f8ae83ed9c1151cd99b37a7371fd6754ac2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}