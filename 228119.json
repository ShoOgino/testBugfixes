{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/FixedShingleFilter#resetShingleRoot(Token).mjava","commits":[{"id":"739747d2d107745148aac3687c9c797f1b97c50b","date":1521639903,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/FixedShingleFilter#resetShingleRoot(Token).mjava","pathOld":"/dev/null","sourceNew":"  private boolean resetShingleRoot(Token token) throws IOException {\n    this.currentShingleTokens[0] = token;\n    for (int i = 1; i < shingleSize; i++) {\n      Token current = nextTokenInGraph(this.currentShingleTokens[i - 1]);\n      if (current == endToken) {\n        if (endToken.posInc() + i >= shingleSize) {\n          // end tokens are a special case, because their posIncs are always\n          // due to stopwords.  Therefore, we can happily append gap tokens\n          // to the end of the current shingle\n          for (int j = i; j < shingleSize; j++) {\n            this.currentShingleTokens[i] = gapToken;\n            i++;\n          }\n          return true;\n        }\n        return false;\n      }\n      if (current.posInc() > 1) {\n        // insert gaps into the shingle list\n        for (int j = 1; j < current.posInc(); j++) {\n          this.currentShingleTokens[i] = gapToken;\n          i++;\n          if (i >= shingleSize)\n            return true;\n        }\n      }\n      this.currentShingleTokens[i] = current;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/FixedShingleFilter#resetShingleRoot(Token).mjava","pathOld":"/dev/null","sourceNew":"  private boolean resetShingleRoot(Token token) throws IOException {\n    this.currentShingleTokens[0] = token;\n    for (int i = 1; i < shingleSize; i++) {\n      Token current = nextTokenInGraph(this.currentShingleTokens[i - 1]);\n      if (current == endToken) {\n        if (endToken.posInc() + i >= shingleSize) {\n          // end tokens are a special case, because their posIncs are always\n          // due to stopwords.  Therefore, we can happily append gap tokens\n          // to the end of the current shingle\n          for (int j = i; j < shingleSize; j++) {\n            this.currentShingleTokens[i] = gapToken;\n            i++;\n          }\n          return true;\n        }\n        return false;\n      }\n      if (current.posInc() > 1) {\n        // insert gaps into the shingle list\n        for (int j = 1; j < current.posInc(); j++) {\n          this.currentShingleTokens[i] = gapToken;\n          i++;\n          if (i >= shingleSize)\n            return true;\n        }\n      }\n      this.currentShingleTokens[i] = current;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7836a9b132efc1162fb9d817b3e766f0a82212be","date":1543916862,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/FixedShingleFilter#resetShingleRoot(Token).mjava","sourceNew":null,"sourceOld":"  private boolean resetShingleRoot(Token token) throws IOException {\n    this.currentShingleTokens[0] = token;\n    for (int i = 1; i < shingleSize; i++) {\n      Token current = nextTokenInGraph(this.currentShingleTokens[i - 1]);\n      if (current == endToken) {\n        if (endToken.posInc() + i >= shingleSize) {\n          // end tokens are a special case, because their posIncs are always\n          // due to stopwords.  Therefore, we can happily append gap tokens\n          // to the end of the current shingle\n          for (int j = i; j < shingleSize; j++) {\n            this.currentShingleTokens[i] = gapToken;\n            i++;\n          }\n          return true;\n        }\n        return false;\n      }\n      if (current.posInc() > 1) {\n        // insert gaps into the shingle list\n        for (int j = 1; j < current.posInc(); j++) {\n          this.currentShingleTokens[i] = gapToken;\n          i++;\n          if (i >= shingleSize)\n            return true;\n        }\n      }\n      this.currentShingleTokens[i] = current;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","739747d2d107745148aac3687c9c797f1b97c50b"],"739747d2d107745148aac3687c9c797f1b97c50b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7836a9b132efc1162fb9d817b3e766f0a82212be":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7836a9b132efc1162fb9d817b3e766f0a82212be"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["7836a9b132efc1162fb9d817b3e766f0a82212be"],"739747d2d107745148aac3687c9c797f1b97c50b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","739747d2d107745148aac3687c9c797f1b97c50b"],"7836a9b132efc1162fb9d817b3e766f0a82212be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}