{"path":"sandbox/contributions/webcrawler-LARM/src/hplb/xml/EntityManager#entityDecode(CharBuffer).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/hplb/xml/EntityManager#entityDecode(CharBuffer).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Finds entitiy and character references in the provided char array\n     * and decodes them. The operation is destructive, i.e. the encoded\n     * string replaces the original - this is atrightforward since the\n     * new string can only get shorter.\n     */\n    public final CharBuffer entityDecode(CharBuffer buffer) throws Exception {\n        char[] buf = buffer.getCharArray();  // avoids method calls\n        int len = buffer.size();\n\n        // not fastest but certainly simplest:\n        if (indexOf(buf, '&', 0, len) == -1) return buffer;\n        CharBuffer newbuf = new CharBuffer(len);\n\n        for (int start = 0; ; ) {\n            int x = indexOf(buf, '&', start, len);\n            if (x == -1) {\n                newbuf.write(buf, start, len - start);\n                return newbuf;\n            } else {\n                newbuf.write(buf, start, x - start);\n                start = x+1;\n                x = indexOf(buf, ';', start, len);\n                if (x == -1) {\n                    //tok.warning(\"Entity reference not semicolon terminated\");\n                    newbuf.write('&');\n                    //break; //???????????\n                } else {\n                    try {\n                        writeEntityDef(buf, start, x-start, newbuf);\n                        start = x+1;\n                    } catch (Exception ex) {\n                        //tok.warning(\"Bad entity reference\");\n                    }\n                }\n            }\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e","date":1022957716,"type":5,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/parser/EntityManager#entityDecode(SimpleCharArrayWriter).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/hplb/xml/EntityManager#entityDecode(CharBuffer).mjava","sourceNew":"    /**\n     * Finds entitiy and character references in the provided char array and\n     * decodes them. The operation is destructive, i.e. the encoded string\n     * replaces the original - this is atrightforward since the new string can\n     * only get shorter.\n     *\n     * @param buffer         Description of the Parameter\n     * @return               Description of the Return Value\n     * @exception Exception  Description of the Exception\n     */\n    public final SimpleCharArrayWriter entityDecode(SimpleCharArrayWriter buffer)\n        throws Exception\n    {\n        char[] buf = buffer.getCharArray();\n        // avoids method calls\n        int len = buffer.size();\n\n        // not fastest but certainly simplest:\n        if (indexOf(buf, '&', 0, len) == -1)\n        {\n            return buffer;\n        }\n        SimpleCharArrayWriter newbuf = new SimpleCharArrayWriter(len);\n\n        for (int start = 0; ; )\n        {\n            int x = indexOf(buf, '&', start, len);\n            if (x == -1)\n            {\n                newbuf.write(buf, start, len - start);\n                return newbuf;\n            }\n            else\n            {\n                newbuf.write(buf, start, x - start);\n                start = x + 1;\n                x = indexOf(buf, ';', start, len);\n                if (x == -1)\n                {\n                    //tok.warning(\"Entity reference not semicolon terminated\");\n                    newbuf.write('&');\n                    //break; //???????????\n                }\n                else\n                {\n                    try\n                    {\n                        writeEntityDef(buf, start, x - start, newbuf);\n                        start = x + 1;\n                    }\n                    catch (Exception ex)\n                    {\n                        //tok.warning(\"Bad entity reference\");\n                    }\n                }\n            }\n        }\n    }\n\n","sourceOld":"    /**\n     * Finds entitiy and character references in the provided char array\n     * and decodes them. The operation is destructive, i.e. the encoded\n     * string replaces the original - this is atrightforward since the\n     * new string can only get shorter.\n     */\n    public final CharBuffer entityDecode(CharBuffer buffer) throws Exception {\n        char[] buf = buffer.getCharArray();  // avoids method calls\n        int len = buffer.size();\n\n        // not fastest but certainly simplest:\n        if (indexOf(buf, '&', 0, len) == -1) return buffer;\n        CharBuffer newbuf = new CharBuffer(len);\n\n        for (int start = 0; ; ) {\n            int x = indexOf(buf, '&', start, len);\n            if (x == -1) {\n                newbuf.write(buf, start, len - start);\n                return newbuf;\n            } else {\n                newbuf.write(buf, start, x - start);\n                start = x+1;\n                x = indexOf(buf, ';', start, len);\n                if (x == -1) {\n                    //tok.warning(\"Entity reference not semicolon terminated\");\n                    newbuf.write('&');\n                    //break; //???????????\n                } else {\n                    try {\n                        writeEntityDef(buf, start, x-start, newbuf);\n                        start = x+1;\n                    } catch (Exception ex) {\n                        //tok.warning(\"Bad entity reference\");\n                    }\n                }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"]},"commit2Childs":{"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}