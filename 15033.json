{"path":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","commits":[{"id":"232d48b2fd10ac5189a0ac4480ace7421be9de93","date":1334848212,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"    public final boolean incrementToken() throws IOException {\n      // lazy init the iterator\n      if (it == null) {\n        it = cachedStates.iterator();\n      }\n    \n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = (State) it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["90092e3ad74adf68ec9507e7046fe5a39039964c","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","sourceNew":"    public final boolean incrementToken() {\n      // lazy init the iterator\n      if (it == null) {\n        it = cachedStates.iterator();\n      }\n    \n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = (State) it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","sourceOld":"    public final boolean incrementToken() throws IOException {\n      // lazy init the iterator\n      if (it == null) {\n        it = cachedStates.iterator();\n      }\n    \n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = (State) it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","bugFix":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","sourceNew":"    public final boolean incrementToken() {\n      // lazy init the iterator\n      if (it == null) {\n        it = cachedStates.iterator();\n      }\n    \n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = (State) it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","sourceOld":"    public final boolean incrementToken() throws IOException {\n      // lazy init the iterator\n      if (it == null) {\n        it = cachedStates.iterator();\n      }\n    \n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = (State) it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      // lazy init the iterator\n      if (it == null) {\n        it = cachedStates.iterator();\n      }\n    \n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = (State) it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","sourceOld":"    public final boolean incrementToken() {\n      // lazy init the iterator\n      if (it == null) {\n        it = cachedStates.iterator();\n      }\n    \n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = (State) it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      // lazy init the iterator\n      if (it == null) {\n        it = cachedStates.iterator();\n      }\n    \n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = (State) it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","sourceOld":"    public final boolean incrementToken() {\n      // lazy init the iterator\n      if (it == null) {\n        it = cachedStates.iterator();\n      }\n    \n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = (State) it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90092e3ad74adf68ec9507e7046fe5a39039964c","date":1453355496,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      // lazy init the iterator\n      if (it == null) {\n        it = cachedStates.iterator();\n      }\n    \n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = (State) it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","bugFix":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"762c80e29fe0c3bb83aabe2e64af6379273cec7b","date":1484347562,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = it.next();\n      restoreState(state.clone());\n      // TODO: why can't I lookup the OffsetAttribute up in ctor instead?\n      lastEndOffset = addAttribute(OffsetAttribute.class).endOffset();\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.PreAnalyzedTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = it.next();\n      restoreState(state.clone());\n      // TODO: why can't I lookup the OffsetAttribute up in ctor instead?\n      lastEndOffset = addAttribute(OffsetAttribute.class).endOffset();\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      if (!it.hasNext()) {\n        return false;\n      }\n      \n      AttributeSource.State state = it.next();\n      restoreState(state.clone());\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["90092e3ad74adf68ec9507e7046fe5a39039964c"],"90092e3ad74adf68ec9507e7046fe5a39039964c":["7530de27b87b961b51f01bd1299b7004d46e8823"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["232d48b2fd10ac5189a0ac4480ace7421be9de93","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["90092e3ad74adf68ec9507e7046fe5a39039964c","762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["762c80e29fe0c3bb83aabe2e64af6379273cec7b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90092e3ad74adf68ec9507e7046fe5a39039964c":["762c80e29fe0c3bb83aabe2e64af6379273cec7b","507e7decdf00981d09a74632ea30299a4ce6ba72"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","90092e3ad74adf68ec9507e7046fe5a39039964c"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}