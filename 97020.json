{"path":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testMissingVersionOnOldDocs().mjava","commits":[{"id":"d0f4b03a7701ad6256c4b8946243ae1981931a28","date":1527108277,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testMissingVersionOnOldDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingVersionOnOldDocs() throws Exception {\n    String version = \"2\";\n\n    // Write one doc with version, one doc without version using the \"no version\" chain\n    updateJ(json(\"[{\\\"id\\\": \\\"a\\\", \\\"name\\\": \\\"a1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"no-external-version\"));\n    updateJ(json(\"[{\\\"id\\\": \\\"b\\\", \\\"name\\\": \\\"b1\\\"}]\"), params(\"update.chain\", \"no-external-version\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\"), \"/response/numFound==2\");\n    assertJQ(req(\"q\",\"id:a\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"id:b\"), \"/response/numFound==1\");\n\n    // Try updating both with a new version and using the enforced version chain, expect id=b to fail bc old\n    // doc is missing the version field\n    version = \"3\";\n    updateJ(json(\"[{\\\"id\\\": \\\"a\\\", \\\"name\\\": \\\"a1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"external-version-constraint\"));\n    try {\n      updateJ(json(\"[{\\\"id\\\": \\\"b\\\", \\\"name\\\": \\\"b1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n              params(\"update.chain\", \"external-version-constraint\"));\n      fail(\"Update to id=b should have failed because existing doc is missing version field\");\n    } catch (final SolrException ex) {\n      // expected\n      assertEquals(\"Doc exists in index, but has null versionField: my_version_l\", ex.getMessage());\n    }\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\"), \"/response/numFound==2\");\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"a\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'a', 'my_version_l':3}}\"); // version changed to 3\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"b\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'b'}}\"); // no version, because update failed\n\n    // Try to update again using the external version enforcement, but allowing old docs to not have the version\n    // field. Expect id=a to fail because version is lower, expect id=b to succeed.\n    version = \"1\";\n    updateJ(json(\"[{\\\"id\\\": \\\"a\\\", \\\"name\\\": \\\"a1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"external-version-support-missing\"));\n    System.out.println(\"send b\");\n    updateJ(json(\"[{\\\"id\\\": \\\"b\\\", \\\"name\\\": \\\"b1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"external-version-support-missing\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\"), \"/response/numFound==2\");\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"a\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'a', 'my_version_l':3}}\");\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"b\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'b', 'my_version_l':1}}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"667eea18b7ca87af38d05d81d479f943a717a6b1","date":1548452298,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints#testMissingVersionOnOldDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testMissingVersionOnOldDocs().mjava","sourceNew":"  public void testMissingVersionOnOldDocs() throws Exception {\n    String version = \"2\";\n\n    // Write one doc with version, one doc without version using the \"no version\" chain\n    updateJ(json(\"[{\\\"id\\\": \\\"a\\\", \\\"name\\\": \\\"a1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"no-external-version\"));\n    updateJ(json(\"[{\\\"id\\\": \\\"b\\\", \\\"name\\\": \\\"b1\\\"}]\"), params(\"update.chain\", \"no-external-version\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\"), \"/response/numFound==2\");\n    assertJQ(req(\"q\",\"id:a\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"id:b\"), \"/response/numFound==1\");\n\n    // Try updating both with a new version and using the enforced version chain, expect id=b to fail bc old\n    // doc is missing the version field\n    version = \"3\";\n    updateJ(json(\"[{\\\"id\\\": \\\"a\\\", \\\"name\\\": \\\"a1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"external-version-constraint\"));\n    try {\n      ignoreException(\"Doc exists in index, but has null versionField: my_version_l\");\n      updateJ(json(\"[{\\\"id\\\": \\\"b\\\", \\\"name\\\": \\\"b1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n              params(\"update.chain\", \"external-version-constraint\"));\n      fail(\"Update to id=b should have failed because existing doc is missing version field\");\n    } catch (final SolrException ex) {\n      // expected\n      assertEquals(\"Doc exists in index, but has null versionField: my_version_l\", ex.getMessage());\n      unIgnoreException(\"Doc exists in index, but has null versionField: my_version_l\");\n    }\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\"), \"/response/numFound==2\");\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"a\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'a', 'my_version_l':3}}\"); // version changed to 3\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"b\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'b'}}\"); // no version, because update failed\n\n    // Try to update again using the external version enforcement, but allowing old docs to not have the version\n    // field. Expect id=a to fail because version is lower, expect id=b to succeed.\n    version = \"1\";\n    updateJ(json(\"[{\\\"id\\\": \\\"a\\\", \\\"name\\\": \\\"a1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"external-version-support-missing\"));\n    System.out.println(\"send b\");\n    updateJ(json(\"[{\\\"id\\\": \\\"b\\\", \\\"name\\\": \\\"b1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"external-version-support-missing\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\"), \"/response/numFound==2\");\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"a\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'a', 'my_version_l':3}}\");\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"b\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'b', 'my_version_l':1}}\");\n  }\n\n","sourceOld":"  public void testMissingVersionOnOldDocs() throws Exception {\n    String version = \"2\";\n\n    // Write one doc with version, one doc without version using the \"no version\" chain\n    updateJ(json(\"[{\\\"id\\\": \\\"a\\\", \\\"name\\\": \\\"a1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"no-external-version\"));\n    updateJ(json(\"[{\\\"id\\\": \\\"b\\\", \\\"name\\\": \\\"b1\\\"}]\"), params(\"update.chain\", \"no-external-version\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\"), \"/response/numFound==2\");\n    assertJQ(req(\"q\",\"id:a\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"id:b\"), \"/response/numFound==1\");\n\n    // Try updating both with a new version and using the enforced version chain, expect id=b to fail bc old\n    // doc is missing the version field\n    version = \"3\";\n    updateJ(json(\"[{\\\"id\\\": \\\"a\\\", \\\"name\\\": \\\"a1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"external-version-constraint\"));\n    try {\n      updateJ(json(\"[{\\\"id\\\": \\\"b\\\", \\\"name\\\": \\\"b1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n              params(\"update.chain\", \"external-version-constraint\"));\n      fail(\"Update to id=b should have failed because existing doc is missing version field\");\n    } catch (final SolrException ex) {\n      // expected\n      assertEquals(\"Doc exists in index, but has null versionField: my_version_l\", ex.getMessage());\n    }\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\"), \"/response/numFound==2\");\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"a\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'a', 'my_version_l':3}}\"); // version changed to 3\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"b\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'b'}}\"); // no version, because update failed\n\n    // Try to update again using the external version enforcement, but allowing old docs to not have the version\n    // field. Expect id=a to fail because version is lower, expect id=b to succeed.\n    version = \"1\";\n    updateJ(json(\"[{\\\"id\\\": \\\"a\\\", \\\"name\\\": \\\"a1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"external-version-support-missing\"));\n    System.out.println(\"send b\");\n    updateJ(json(\"[{\\\"id\\\": \\\"b\\\", \\\"name\\\": \\\"b1\\\", \\\"my_version_l\\\": \" + version + \"}]\"),\n            params(\"update.chain\", \"external-version-support-missing\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"*:*\"), \"/response/numFound==2\");\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"a\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'a', 'my_version_l':3}}\");\n    assertJQ(req(\"qt\",\"/get\", \"id\", \"b\", \"fl\", \"id,my_version_l\"), \"=={'doc':{'id':'b', 'my_version_l':1}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0f4b03a7701ad6256c4b8946243ae1981931a28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"667eea18b7ca87af38d05d81d479f943a717a6b1":["d0f4b03a7701ad6256c4b8946243ae1981931a28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["667eea18b7ca87af38d05d81d479f943a717a6b1"]},"commit2Childs":{"d0f4b03a7701ad6256c4b8946243ae1981931a28":["667eea18b7ca87af38d05d81d479f943a717a6b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0f4b03a7701ad6256c4b8946243ae1981931a28"],"667eea18b7ca87af38d05d81d479f943a717a6b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}