{"path":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc7a7bb1aa79cf53564793bb5ffa270250c679da","date":1357817084,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n    writer.finishDocument();\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n    writer.finishDocument();\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"978de4e2d23054c6624dd5928ddeb734dca68eec","date":1370592803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n    writer.finishDocument();\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n    writer.finishDocument();\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument() throws IOException {\n\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    // Fields in term vectors are UTF16 sorted:\n    ArrayUtil.introSort(perFields, 0, numVectorFields);\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n    writer.finishDocument();\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    super.reset();\n    resetFields();\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n    writer.finishDocument();\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument() throws IOException {\n\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    // Fields in term vectors are UTF16 sorted:\n    ArrayUtil.introSort(perFields, 0, numVectorFields);\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n    writer.finishDocument();\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    super.reset();\n    resetFields();\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n    writer.finishDocument();\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument() throws IOException {\n\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    // Fields in term vectors are UTF16 sorted:\n    ArrayUtil.introSort(perFields, 0, numVectorFields);\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n    writer.finishDocument();\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    super.reset();\n    resetFields();\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n    writer.finishDocument();\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["978de4e2d23054c6624dd5928ddeb734dca68eec","52c7e49be259508735752fba88085255014a6ecf"],"978de4e2d23054c6624dd5928ddeb734dca68eec":["fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["978de4e2d23054c6624dd5928ddeb734dca68eec","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52c7e49be259508735752fba88085255014a6ecf":["978de4e2d23054c6624dd5928ddeb734dca68eec"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"978de4e2d23054c6624dd5928ddeb734dca68eec":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fc7a7bb1aa79cf53564793bb5ffa270250c679da","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["978de4e2d23054c6624dd5928ddeb734dca68eec","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}