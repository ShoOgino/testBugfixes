{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","commits":[{"id":"d0af0c31a687dd847212ae59f661152896c76516","date":1380727430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure you can suggest based only on unigram model:\n  public void testUnigrams() throws Exception {\n    Iterable<TermFreq> keys = shuffle(\n        new TermFreq(\"foo bar baz blah boo foo bar foo bee\", 50)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 1, (byte) 0x20);\n    sug.build(new TermFreqArrayIterator(keys));\n    // Sorts first by count, descending, second by term, ascending\n    assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                 toString(sug.lookup(\"b\", 10)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","sourceNew":"  // Make sure you can suggest based only on unigram model:\n  public void testUnigrams() throws Exception {\n    Iterable<TermFreqPayload> keys = shuffle(\n        new TermFreqPayload(\"foo bar baz blah boo foo bar foo bee\", 50)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 1, (byte) 0x20);\n    sug.build(new TermFreqPayloadArrayIterator(keys));\n    // Sorts first by count, descending, second by term, ascending\n    assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                 toString(sug.lookup(\"b\", 10)));\n  }\n\n","sourceOld":"  // Make sure you can suggest based only on unigram model:\n  public void testUnigrams() throws Exception {\n    Iterable<TermFreq> keys = shuffle(\n        new TermFreq(\"foo bar baz blah boo foo bar foo bee\", 50)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 1, (byte) 0x20);\n    sug.build(new TermFreqArrayIterator(keys));\n    // Sorts first by count, descending, second by term, ascending\n    assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                 toString(sug.lookup(\"b\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","sourceNew":"  // Make sure you can suggest based only on unigram model:\n  public void testUnigrams() throws Exception {\n    Iterable<Input> keys = shuffle(\n        new Input(\"foo bar baz blah boo foo bar foo bee\", 50)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 1, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    // Sorts first by count, descending, second by term, ascending\n    assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                 toString(sug.lookup(\"b\", 10)));\n  }\n\n","sourceOld":"  // Make sure you can suggest based only on unigram model:\n  public void testUnigrams() throws Exception {\n    Iterable<TermFreqPayload> keys = shuffle(\n        new TermFreqPayload(\"foo bar baz blah boo foo bar foo bee\", 50)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 1, (byte) 0x20);\n    sug.build(new TermFreqPayloadArrayIterator(keys));\n    // Sorts first by count, descending, second by term, ascending\n    assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                 toString(sug.lookup(\"b\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"374870f2181bf8cd93a47df5d988855dfab6f7cd","date":1395589518,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","sourceNew":"  // Make sure you can suggest based only on unigram model:\n  public void testUnigrams() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah boo foo bar foo bee\", 50)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 1, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    // Sorts first by count, descending, second by term, ascending\n    assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                 toString(sug.lookup(\"b\", 10)));\n  }\n\n","sourceOld":"  // Make sure you can suggest based only on unigram model:\n  public void testUnigrams() throws Exception {\n    Iterable<Input> keys = shuffle(\n        new Input(\"foo bar baz blah boo foo bar foo bee\", 50)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 1, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    // Sorts first by count, descending, second by term, ascending\n    assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                 toString(sug.lookup(\"b\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","sourceNew":"  // Make sure you can suggest based only on unigram model:\n  public void testUnigrams() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah boo foo bar foo bee\", 50)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 1, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    // Sorts first by count, descending, second by term, ascending\n    assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                 toString(sug.lookup(\"b\", 10)));\n    a.close();\n  }\n\n","sourceOld":"  // Make sure you can suggest based only on unigram model:\n  public void testUnigrams() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah boo foo bar foo bee\", 50)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 1, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    // Sorts first by count, descending, second by term, ascending\n    assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                 toString(sug.lookup(\"b\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testUnigrams().mjava","sourceNew":"  // Make sure you can suggest based only on unigram model:\n  public void testUnigrams() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah boo foo bar foo bee\", 50)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 1, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    // Sorts first by count, descending, second by term, ascending\n    assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                 toString(sug.lookup(\"b\", 10)));\n    a.close();\n  }\n\n","sourceOld":"  // Make sure you can suggest based only on unigram model:\n  public void testUnigrams() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah boo foo bar foo bee\", 50)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 1, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    // Sorts first by count, descending, second by term, ascending\n    assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                 toString(sug.lookup(\"b\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["374870f2181bf8cd93a47df5d988855dfab6f7cd","a56958d7f71a28824f20031ffbb2e13502a0274e"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"d0af0c31a687dd847212ae59f661152896c76516":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"374870f2181bf8cd93a47df5d988855dfab6f7cd":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["374870f2181bf8cd93a47df5d988855dfab6f7cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["d0af0c31a687dd847212ae59f661152896c76516"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["374870f2181bf8cd93a47df5d988855dfab6f7cd"],"d0af0c31a687dd847212ae59f661152896c76516":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0af0c31a687dd847212ae59f661152896c76516"],"374870f2181bf8cd93a47df5d988855dfab6f7cd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}