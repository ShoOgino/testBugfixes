{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParent(int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParent(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * getParent() returns the ordinal of the parent category of the category\n   * with the given ordinal.\n   * <P>\n   * When a category is specified as a path name, finding the path of its\n   * parent is as trivial as dropping the last component of the path.\n   * getParent() is functionally equivalent to calling getPath() on the\n   * given ordinal, dropping the last component of the path, and then calling\n   * getOrdinal() to get an ordinal back. However, implementations are\n   * expected to provide a much more efficient implementation:\n   * <P>\n   * getParent() should be a very quick method, as it is used during the\n   * facet aggregation process in faceted search. Implementations will most\n   * likely want to serve replies to this method from a pre-filled cache.\n   * <P>\n   * If the given ordinal is the ROOT_ORDINAL, an INVALID_ORDINAL is returned.\n   * If the given ordinal is a top-level category, the ROOT_ORDINAL is returned.\n   * If an invalid ordinal is given (negative or beyond the last available\n   * ordinal), an ArrayIndexOutOfBoundsException is thrown. However, it is\n   * expected that getParent will only be called for ordinals which are\n   * already known to be in the taxonomy.\n   */\n  public int getParent(int ordinal) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParent(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * getParent() returns the ordinal of the parent category of the category\n   * with the given ordinal.\n   * <P>\n   * When a category is specified as a path name, finding the path of its\n   * parent is as trivial as dropping the last component of the path.\n   * getParent() is functionally equivalent to calling getPath() on the\n   * given ordinal, dropping the last component of the path, and then calling\n   * getOrdinal() to get an ordinal back. However, implementations are\n   * expected to provide a much more efficient implementation:\n   * <P>\n   * getParent() should be a very quick method, as it is used during the\n   * facet aggregation process in faceted search. Implementations will most\n   * likely want to serve replies to this method from a pre-filled cache.\n   * <P>\n   * If the given ordinal is the ROOT_ORDINAL, an INVALID_ORDINAL is returned.\n   * If the given ordinal is a top-level category, the ROOT_ORDINAL is returned.\n   * If an invalid ordinal is given (negative or beyond the last available\n   * ordinal), an ArrayIndexOutOfBoundsException is thrown. However, it is\n   * expected that getParent will only be called for ordinals which are\n   * already known to be in the taxonomy.\n   */\n  public int getParent(int ordinal) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParent(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * getParent() returns the ordinal of the parent category of the category\n   * with the given ordinal.\n   * <P>\n   * When a category is specified as a path name, finding the path of its\n   * parent is as trivial as dropping the last component of the path.\n   * getParent() is functionally equivalent to calling getPath() on the\n   * given ordinal, dropping the last component of the path, and then calling\n   * getOrdinal() to get an ordinal back. However, implementations are\n   * expected to provide a much more efficient implementation:\n   * <P>\n   * getParent() should be a very quick method, as it is used during the\n   * facet aggregation process in faceted search. Implementations will most\n   * likely want to serve replies to this method from a pre-filled cache.\n   * <P>\n   * If the given ordinal is the ROOT_ORDINAL, an INVALID_ORDINAL is returned.\n   * If the given ordinal is a top-level category, the ROOT_ORDINAL is returned.\n   * If an invalid ordinal is given (negative or beyond the last available\n   * ordinal), an ArrayIndexOutOfBoundsException is thrown. However, it is\n   * expected that getParent will only be called for ordinals which are\n   * already known to be in the taxonomy.\n   */\n  public int getParent(int ordinal) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParent(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getParent(int).mjava","sourceNew":"  /**\n   * getParent() returns the ordinal of the parent category of the category\n   * with the given ordinal.\n   * <P>\n   * When a category is specified as a path name, finding the path of its\n   * parent is as trivial as dropping the last component of the path.\n   * getParent() is functionally equivalent to calling getPath() on the\n   * given ordinal, dropping the last component of the path, and then calling\n   * getOrdinal() to get an ordinal back. However, implementations are\n   * expected to provide a much more efficient implementation:\n   * <P>\n   * getParent() should be a very quick method, as it is used during the\n   * facet aggregation process in faceted search. Implementations will most\n   * likely want to serve replies to this method from a pre-filled cache.\n   * <P>\n   * If the given ordinal is the ROOT_ORDINAL, an INVALID_ORDINAL is returned.\n   * If the given ordinal is a top-level category, the ROOT_ORDINAL is returned.\n   * If an invalid ordinal is given (negative or beyond the last available\n   * ordinal), an ArrayIndexOutOfBoundsException is thrown. However, it is\n   * expected that getParent will only be called for ordinals which are\n   * already known to be in the taxonomy.\n   */\n  public int getParent(int ordinal) throws IOException;\n\n","sourceOld":"  /**\n   * getParent() returns the ordinal of the parent category of the category\n   * with the given ordinal.\n   * <P>\n   * When a category is specified as a path name, finding the path of its\n   * parent is as trivial as dropping the last component of the path.\n   * getParent() is functionally equivalent to calling getPath() on the\n   * given ordinal, dropping the last component of the path, and then calling\n   * getOrdinal() to get an ordinal back. However, implementations are\n   * expected to provide a much more efficient implementation:\n   * <P>\n   * getParent() should be a very quick method, as it is used during the\n   * facet aggregation process in faceted search. Implementations will most\n   * likely want to serve replies to this method from a pre-filled cache.\n   * <P>\n   * If the given ordinal is the ROOT_ORDINAL, an INVALID_ORDINAL is returned.\n   * If the given ordinal is a top-level category, the ROOT_ORDINAL is returned.\n   * If an invalid ordinal is given (negative or beyond the last available\n   * ordinal), an ArrayIndexOutOfBoundsException is thrown. However, it is\n   * expected that getParent will only be called for ordinals which are\n   * already known to be in the taxonomy.\n   */\n  public int getParent(int ordinal) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}