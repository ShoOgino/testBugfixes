{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextPosition().mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto + \" payloadByteUpto=\" + payloadByteUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek pos to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          if (DEBUG) {\n            System.out.println(\"      seek pay to pendingFP=\" + payPendingFP);\n          }\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = blockSize;\n      }\n\n      if (indexHasPayloads) {\n        if (DEBUG) {\n          if (payloadLength != 0) {\n            System.out.println(\"      skip unread payload length=\" + payloadLength);\n          }\n        }\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == blockSize) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += (int)posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = (int)payloadLengthBuffer[posBufferUpto];\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastEndOffset + (int)offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + (int)offsetLengthBuffer[posBufferUpto];\n        lastEndOffset = endOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f81e20fb7784c464473faba4f1fdd4f775e8ee87","date":1343937502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto + \" payloadByteUpto=\" + payloadByteUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek pos to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          if (DEBUG) {\n            System.out.println(\"      seek pay to pendingFP=\" + payPendingFP);\n          }\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = blockSize;\n      }\n\n      if (indexHasPayloads) {\n        if (DEBUG) {\n          if (payloadLength != 0) {\n            System.out.println(\"      skip unread payload length=\" + payloadLength);\n          }\n        }\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == blockSize) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += (int)posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = (int)payloadLengthBuffer[posBufferUpto];\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + (int)offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + (int)offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto + \" payloadByteUpto=\" + payloadByteUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek pos to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          if (DEBUG) {\n            System.out.println(\"      seek pay to pendingFP=\" + payPendingFP);\n          }\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = blockSize;\n      }\n\n      if (indexHasPayloads) {\n        if (DEBUG) {\n          if (payloadLength != 0) {\n            System.out.println(\"      skip unread payload length=\" + payloadLength);\n          }\n        }\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == blockSize) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += (int)posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = (int)payloadLengthBuffer[posBufferUpto];\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastEndOffset + (int)offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + (int)offsetLengthBuffer[posBufferUpto];\n        lastEndOffset = endOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","bugFix":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto + \" payloadByteUpto=\" + payloadByteUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek pos to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          if (DEBUG) {\n            System.out.println(\"      seek pay to pendingFP=\" + payPendingFP);\n          }\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (indexHasPayloads) {\n        if (DEBUG) {\n          if (payloadLength != 0) {\n            System.out.println(\"      skip unread payload length=\" + payloadLength);\n          }\n        }\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = (int) payloadLengthBuffer[posBufferUpto];\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + (int) offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + (int) offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto + \" payloadByteUpto=\" + payloadByteUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek pos to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          if (DEBUG) {\n            System.out.println(\"      seek pay to pendingFP=\" + payPendingFP);\n          }\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = blockSize;\n      }\n\n      if (indexHasPayloads) {\n        if (DEBUG) {\n          if (payloadLength != 0) {\n            System.out.println(\"      skip unread payload length=\" + payloadLength);\n          }\n        }\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == blockSize) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += (int)posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = (int)payloadLengthBuffer[posBufferUpto];\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + (int)offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + (int)offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97b1b5806a1f8e249985ae7c486ef449726fd236","date":1344446896,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto + \" payloadByteUpto=\" + payloadByteUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek pos to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          if (DEBUG) {\n            System.out.println(\"      seek pay to pendingFP=\" + payPendingFP);\n          }\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (indexHasPayloads) {\n        if (DEBUG) {\n          if (payloadLength != 0) {\n            System.out.println(\"      skip unread payload length=\" + payloadLength);\n          }\n        }\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto + \" payloadByteUpto=\" + payloadByteUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek pos to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          if (DEBUG) {\n            System.out.println(\"      seek pay to pendingFP=\" + payPendingFP);\n          }\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (indexHasPayloads) {\n        if (DEBUG) {\n          if (payloadLength != 0) {\n            System.out.println(\"      skip unread payload length=\" + payloadLength);\n          }\n        }\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = (int) payloadLengthBuffer[posBufferUpto];\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + (int) offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + (int) offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.EverythingEnum#nextPosition().mjava","sourceNew":null,"sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto + \" payloadByteUpto=\" + payloadByteUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek pos to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          if (DEBUG) {\n            System.out.println(\"      seek pay to pendingFP=\" + payPendingFP);\n          }\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (indexHasPayloads) {\n        if (DEBUG) {\n          if (payloadLength != 0) {\n            System.out.println(\"      skip unread payload length=\" + payloadLength);\n          }\n        }\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"97b1b5806a1f8e249985ae7c486ef449726fd236":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["97b1b5806a1f8e249985ae7c486ef449726fd236"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["97b1b5806a1f8e249985ae7c486ef449726fd236"],"97b1b5806a1f8e249985ae7c486ef449726fd236":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}