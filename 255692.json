{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#docToSetId(SortedSet[LongsRef],Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#docToSetId(SortedSet[LongsRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  private Iterable<Number> docToSetId(SortedSet<LongsRef> uniqueValueSets, Iterable<Number> docToValueCount, Iterable<Number> values) {\n    final Map<LongsRef, Integer> setIds = new HashMap<>();\n    int i = 0;\n    for (LongsRef set : uniqueValueSets) {\n      setIds.put(set, i++);\n    }\n    assert i == uniqueValueSets.size();\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n        final Iterator<Number> valueCountIterator = docToValueCount.iterator();\n        final Iterator<Number> valueIterator = values.iterator();\n        final LongsRef docValues = new LongsRef(256);\n        return new Iterator<Number>() {\n\n          @Override\n          public boolean hasNext() {\n            return valueCountIterator.hasNext();\n          }\n\n          @Override\n          public Number next() {\n            docValues.length = valueCountIterator.next().intValue();\n            for (int i = 0; i < docValues.length; ++i) {\n              docValues.longs[i] = valueIterator.next().longValue();\n            }\n            final Integer id = setIds.get(docValues);\n            assert id != null;\n            return id;\n          }\n\n        };\n\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#docToSetId(SortedSet[LongsRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  private Iterable<Number> docToSetId(SortedSet<LongsRef> uniqueValueSets, Iterable<Number> docToValueCount, Iterable<Number> values) {\n    final Map<LongsRef, Integer> setIds = new HashMap<>();\n    int i = 0;\n    for (LongsRef set : uniqueValueSets) {\n      setIds.put(set, i++);\n    }\n    assert i == uniqueValueSets.size();\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n        final Iterator<Number> valueCountIterator = docToValueCount.iterator();\n        final Iterator<Number> valueIterator = values.iterator();\n        final LongsRef docValues = new LongsRef(256);\n        return new Iterator<Number>() {\n\n          @Override\n          public boolean hasNext() {\n            return valueCountIterator.hasNext();\n          }\n\n          @Override\n          public Number next() {\n            docValues.length = valueCountIterator.next().intValue();\n            for (int i = 0; i < docValues.length; ++i) {\n              docValues.longs[i] = valueIterator.next().longValue();\n            }\n            final Integer id = setIds.get(docValues);\n            assert id != null;\n            return id;\n          }\n\n        };\n\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#docToSetId(SortedSet[LongsRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  private Iterable<Number> docToSetId(SortedSet<LongsRef> uniqueValueSets, Iterable<Number> docToValueCount, Iterable<Number> values) {\n    final Map<LongsRef, Integer> setIds = new HashMap<>();\n    int i = 0;\n    for (LongsRef set : uniqueValueSets) {\n      setIds.put(set, i++);\n    }\n    assert i == uniqueValueSets.size();\n\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n        final Iterator<Number> valueCountIterator = docToValueCount.iterator();\n        final Iterator<Number> valueIterator = values.iterator();\n        final LongsRef docValues = new LongsRef(256);\n        return new Iterator<Number>() {\n\n          @Override\n          public boolean hasNext() {\n            return valueCountIterator.hasNext();\n          }\n\n          @Override\n          public Number next() {\n            docValues.length = valueCountIterator.next().intValue();\n            for (int i = 0; i < docValues.length; ++i) {\n              docValues.longs[i] = valueIterator.next().longValue();\n            }\n            final Integer id = setIds.get(docValues);\n            assert id != null;\n            return id;\n          }\n\n        };\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}