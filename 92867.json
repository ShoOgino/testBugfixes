{"path":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#readLELongs(long[],int,int).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#readLELongs(long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void readLELongs(long[] dst, int offset, int length) throws IOException {\n    // ByteBuffer#getLong could work but it has some per-long overhead and there\n    // is no ByteBuffer#getLongs to read multiple longs at once. So we use the\n    // below trick in order to be able to leverage LongBuffer#get(long[]) to\n    // read multiple longs at once with as little overhead as possible.\n    if (curLongBufferViews == null) {\n      // readLELongs is only used for postings today, so we compute the long\n      // views lazily so that other data-structures don't have to pay for the\n      // associated initialization/memory overhead.\n      curLongBufferViews = new LongBuffer[Long.BYTES];\n      for (int i = 0; i < Long.BYTES; ++i) {\n        // Compute a view for each possible alignment. We cache these views\n        // because #asLongBuffer() has some cost that we don't want to pay on\n        // each invocation of #readLELongs.\n        if (i < curBuf.limit()) {\n          curLongBufferViews[i] = curBuf.duplicate().position(i).order(ByteOrder.LITTLE_ENDIAN).asLongBuffer();\n        } else {\n          curLongBufferViews[i] = EMPTY_LONGBUFFER;\n        }\n      }\n    }\n    try {\n      final int position = curBuf.position();\n      guard.getLongs(curLongBufferViews[position & 0x07].position(position >>> 3), dst, offset, length);\n      // if the above call succeeded, then we know the below sum cannot overflow\n      curBuf.position(position + (length << 3));\n    } catch (BufferUnderflowException e) {\n      super.readLELongs(dst, offset, length);\n    } catch (NullPointerException npe) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}