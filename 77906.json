{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, Occur.SHOULD.toString()));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, Occur.MUST_NOT.toString()));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, Occur.MUST.toString()));\n    }\n    return children;\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, Occur.SHOULD.toString()));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, Occur.MUST_NOT.toString()));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, Occur.MUST.toString()));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, \"SHOULD\"));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, \"MUST_NOT\"));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, \"MUST\"));\n    }\n    return children;\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, Occur.SHOULD.toString()));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, Occur.MUST_NOT.toString()));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, Occur.MUST.toString()));\n    }\n    return children;\n  }\n\n","bugFix":["89c5555e75149b469a7756e82bd740777cfb584a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, \"SHOULD\"));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, \"MUST_NOT\"));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, \"MUST\"));\n    }\n    return children;\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, Occur.SHOULD.toString()));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, Occur.MUST_NOT.toString()));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, Occur.MUST.toString()));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, \"SHOULD\"));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, \"MUST_NOT\"));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, \"MUST\"));\n    }\n    return children;\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, Occur.SHOULD.toString()));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, Occur.MUST_NOT.toString()));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, Occur.MUST.toString()));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, \"SHOULD\"));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, \"MUST_NOT\"));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, \"MUST\"));\n    }\n    return children;\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, \"SHOULD\"));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, \"MUST_NOT\"));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, \"MUST\"));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","date":1400613895,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, \"SHOULD\"));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, \"MUST_NOT\"));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, \"MUST\"));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","date":1400696679,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, \"SHOULD\"));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, \"MUST_NOT\"));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, \"MUST\"));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#getChildren().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<>();\n    for (Scorer s : optionalScorers) {\n      children.add(new ChildScorer(s, \"SHOULD\"));\n    }\n    for (Scorer s : prohibitedScorers) {\n      children.add(new ChildScorer(s, \"MUST_NOT\"));\n    }\n    for (Scorer s : requiredScorers) {\n      children.add(new ChildScorer(s, \"MUST\"));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","b7605579001505896d48b07160075a5c8b8e128e","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7605579001505896d48b07160075a5c8b8e128e":[],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}