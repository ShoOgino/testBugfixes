{"path":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","sourceNew":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","sourceOld":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","sourceNew":"  @Override\n  public void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","sourceOld":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}