{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processResponse(NamedList,ShardResponse).mjava","commits":[{"id":"fe999fc2d95d6fea71f960bf9556858387ba21f5","date":1363294860,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processResponse(NamedList,ShardResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void processResponse(NamedList results, ShardResponse srsp) {\n    Throwable e = srsp.getException();\n    if (e != null) {\n      log.error(\"Error from shard: \" + srsp.getShard(), e);\n      \n      SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n      if (failure == null) {\n        failure = new SimpleOrderedMap();\n        results.add(\"failure\", failure);\n      }\n\n      failure.add(srsp.getNodeName(), e.getClass().getName() + \":\" + e.getMessage());\n      \n    } else {\n      \n      SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n      if (success == null) {\n        success = new SimpleOrderedMap();\n        results.add(\"success\", success);\n      }\n      \n      success.add(srsp.getNodeName(), srsp.getSolrResponse().getResponse());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96adbab674ae121f8b6b3e10474070b4bd97a219","date":1373614333,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processResponse(NamedList,ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processResponse(NamedList,ShardResponse).mjava","sourceNew":"  private void processResponse(NamedList results, ShardResponse srsp) {\n    Throwable e = srsp.getException();\n    String nodeName = srsp.getNodeName();\n    SolrResponse solrResponse = srsp.getSolrResponse();\n    String shard = srsp.getShard();\n\n    processResponse(results, e, nodeName, solrResponse, shard);\n  }\n\n","sourceOld":"  private void processResponse(NamedList results, ShardResponse srsp) {\n    Throwable e = srsp.getException();\n    if (e != null) {\n      log.error(\"Error from shard: \" + srsp.getShard(), e);\n      \n      SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n      if (failure == null) {\n        failure = new SimpleOrderedMap();\n        results.add(\"failure\", failure);\n      }\n\n      failure.add(srsp.getNodeName(), e.getClass().getName() + \":\" + e.getMessage());\n      \n    } else {\n      \n      SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n      if (success == null) {\n        success = new SimpleOrderedMap();\n        results.add(\"success\", success);\n      }\n      \n      success.add(srsp.getNodeName(), srsp.getSolrResponse().getResponse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processResponse(NamedList,ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processResponse(NamedList,ShardResponse).mjava","sourceNew":"  private void processResponse(NamedList results, ShardResponse srsp) {\n    Throwable e = srsp.getException();\n    String nodeName = srsp.getNodeName();\n    SolrResponse solrResponse = srsp.getSolrResponse();\n    String shard = srsp.getShard();\n\n    processResponse(results, e, nodeName, solrResponse, shard);\n  }\n\n","sourceOld":"  private void processResponse(NamedList results, ShardResponse srsp) {\n    Throwable e = srsp.getException();\n    if (e != null) {\n      log.error(\"Error from shard: \" + srsp.getShard(), e);\n      \n      SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n      if (failure == null) {\n        failure = new SimpleOrderedMap();\n        results.add(\"failure\", failure);\n      }\n\n      failure.add(srsp.getNodeName(), e.getClass().getName() + \":\" + e.getMessage());\n      \n    } else {\n      \n      SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n      if (success == null) {\n        success = new SimpleOrderedMap();\n        results.add(\"success\", success);\n      }\n      \n      success.add(srsp.getNodeName(), srsp.getSolrResponse().getResponse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponse(NamedList,ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processResponse(NamedList,ShardResponse).mjava","sourceNew":"  private void processResponse(NamedList results, ShardResponse srsp) {\n    Throwable e = srsp.getException();\n    String nodeName = srsp.getNodeName();\n    SolrResponse solrResponse = srsp.getSolrResponse();\n    String shard = srsp.getShard();\n\n    processResponse(results, e, nodeName, solrResponse, shard);\n  }\n\n","sourceOld":"  private void processResponse(NamedList results, ShardResponse srsp) {\n    Throwable e = srsp.getException();\n    String nodeName = srsp.getNodeName();\n    SolrResponse solrResponse = srsp.getSolrResponse();\n    String shard = srsp.getShard();\n\n    processResponse(results, e, nodeName, solrResponse, shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["96adbab674ae121f8b6b3e10474070b4bd97a219"],"fe999fc2d95d6fea71f960bf9556858387ba21f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["fe999fc2d95d6fea71f960bf9556858387ba21f5","96adbab674ae121f8b6b3e10474070b4bd97a219"],"96adbab674ae121f8b6b3e10474070b4bd97a219":["fe999fc2d95d6fea71f960bf9556858387ba21f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe999fc2d95d6fea71f960bf9556858387ba21f5":["37a0f60745e53927c4c876cfe5b5a58170f0646c","96adbab674ae121f8b6b3e10474070b4bd97a219"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"96adbab674ae121f8b6b3e10474070b4bd97a219":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe999fc2d95d6fea71f960bf9556858387ba21f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}