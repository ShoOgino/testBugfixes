{"path":"solr/core/src/test/org/apache/solr/response/TestRetrieveFieldsOptimizer#check(String,SolrReturnFields.FIELD_SOURCES).mjava","commits":[{"id":"96ecd141e96e7a7a65822d7fada5ddc585b21149","date":1534786652,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRetrieveFieldsOptimizer#check(String,SolrReturnFields.FIELD_SOURCES).mjava","pathOld":"/dev/null","sourceNew":"  // This checks a couple of things:\n  // 1> we got all the values from the place we expected.\n  // 2> all the values we expect are actually returned.\n  //\n  // NOTE: multiValued fields are _NOT_ fetched from docValues by design so we don't have to worry about set semantics\n  //\n  private void check(String flIn, SolrReturnFields.FIELD_SOURCES source) throws Exception {\n    Set<String> setDedupe = new HashSet<>(Arrays.asList(flIn.split(\",\")));\n    String fl = String.join(\",\", setDedupe);\n\n    SolrCore core = h.getCore();\n\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\", CommonParams.FL, fl);\n    SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) core.getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n\n    // This is really the main point!\n    assertEquals(\"We didn't get the values from the expected places! \",\n        source, ((SolrReturnFields) rsp.returnFields).getFieldSources());\n\n    NamedList res;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      res = (NamedList) jbc.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    }\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument sdoc = (SolrDocument) doc;\n      // Check that every (and only) the fields in the fl param were fetched and the values are as expected.\n      // Since each doc has the same fields, we don't need to find the special doc.\n      String[] requestedFields = fl.split(\",\");\n      assertEquals(\"Should have exactly as many fields as requested, \", sdoc.getFieldNames().size(), requestedFields.length);\n\n      String id = (String) sdoc.get(idNotStoredDv);\n      if (id == null) {\n        id = (String) sdoc.get(idStoredNotDv);\n      }\n      Map<String, List<String>> expected = allFieldValuesInput.get(id);\n      for (String field : requestedFields) {\n        Object[] docVals = sdoc.getFieldValues(field).toArray();\n        RetrieveField testField = fieldsHolder.getTestField(field);\n        List<String> expectedVals = expected.get(field);\n        assertEquals(\"Returned fields should have the expected number of entries\", docVals.length, expectedVals.size());\n        for (int idx = 0; idx < docVals.length; ++idx) {\n          assertEquals(\"Values should be identical and exactly in order. \", expectedVals.get(idx), testField.getValAsString(docVals[idx]));\n        }\n      }\n\n    }\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRetrieveFieldsOptimizer#check(String,SolrReturnFields.FIELD_SOURCES).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestRetrieveFieldsOptimizer#check(String,SolrReturnFields.FIELD_SOURCES).mjava","sourceNew":"  // This checks a couple of things:\n  // 1> we got all the values from the place we expected.\n  // 2> all the values we expect are actually returned.\n  //\n  // NOTE: multiValued fields are _NOT_ fetched from docValues by design so we don't have to worry about set semantics\n  //\n  private void check(String flIn, SolrReturnFields.FIELD_SOURCES source) throws Exception {\n    Set<String> setDedupe = new HashSet<>(Arrays.asList(flIn.split(\",\")));\n    String fl = String.join(\",\", setDedupe);\n\n    SolrCore core = h.getCore();\n\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\", CommonParams.FL, fl);\n    SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) core.getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n\n    // This is really the main point!\n    assertEquals(\"We didn't get the values from the expected places! \",\n        source, ((SolrReturnFields) rsp.returnFields).getFieldSources());\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList res;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      res = (NamedList) jbc.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    }\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument sdoc = (SolrDocument) doc;\n      // Check that every (and only) the fields in the fl param were fetched and the values are as expected.\n      // Since each doc has the same fields, we don't need to find the special doc.\n      String[] requestedFields = fl.split(\",\");\n      assertEquals(\"Should have exactly as many fields as requested, \", sdoc.getFieldNames().size(), requestedFields.length);\n\n      String id = (String) sdoc.get(idNotStoredDv);\n      if (id == null) {\n        id = (String) sdoc.get(idStoredNotDv);\n      }\n      Map<String, List<String>> expected = allFieldValuesInput.get(id);\n      for (String field : requestedFields) {\n        Object[] docVals = sdoc.getFieldValues(field).toArray();\n        RetrieveField testField = fieldsHolder.getTestField(field);\n        List<String> expectedVals = expected.get(field);\n        assertEquals(\"Returned fields should have the expected number of entries\", docVals.length, expectedVals.size());\n        for (int idx = 0; idx < docVals.length; ++idx) {\n          assertEquals(\"Values should be identical and exactly in order. \", expectedVals.get(idx), testField.getValAsString(docVals[idx]));\n        }\n      }\n\n    }\n    req.close();\n  }\n\n","sourceOld":"  // This checks a couple of things:\n  // 1> we got all the values from the place we expected.\n  // 2> all the values we expect are actually returned.\n  //\n  // NOTE: multiValued fields are _NOT_ fetched from docValues by design so we don't have to worry about set semantics\n  //\n  private void check(String flIn, SolrReturnFields.FIELD_SOURCES source) throws Exception {\n    Set<String> setDedupe = new HashSet<>(Arrays.asList(flIn.split(\",\")));\n    String fl = String.join(\",\", setDedupe);\n\n    SolrCore core = h.getCore();\n\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\", CommonParams.FL, fl);\n    SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) core.getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n\n    // This is really the main point!\n    assertEquals(\"We didn't get the values from the expected places! \",\n        source, ((SolrReturnFields) rsp.returnFields).getFieldSources());\n\n    NamedList res;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      res = (NamedList) jbc.unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    }\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument sdoc = (SolrDocument) doc;\n      // Check that every (and only) the fields in the fl param were fetched and the values are as expected.\n      // Since each doc has the same fields, we don't need to find the special doc.\n      String[] requestedFields = fl.split(\",\");\n      assertEquals(\"Should have exactly as many fields as requested, \", sdoc.getFieldNames().size(), requestedFields.length);\n\n      String id = (String) sdoc.get(idNotStoredDv);\n      if (id == null) {\n        id = (String) sdoc.get(idStoredNotDv);\n      }\n      Map<String, List<String>> expected = allFieldValuesInput.get(id);\n      for (String field : requestedFields) {\n        Object[] docVals = sdoc.getFieldValues(field).toArray();\n        RetrieveField testField = fieldsHolder.getTestField(field);\n        List<String> expectedVals = expected.get(field);\n        assertEquals(\"Returned fields should have the expected number of entries\", docVals.length, expectedVals.size());\n        for (int idx = 0; idx < docVals.length; ++idx) {\n          assertEquals(\"Values should be identical and exactly in order. \", expectedVals.get(idx), testField.getValAsString(docVals[idx]));\n        }\n      }\n\n    }\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["96ecd141e96e7a7a65822d7fada5ddc585b21149"]},"commit2Childs":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ecd141e96e7a7a65822d7fada5ddc585b21149"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}