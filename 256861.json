{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"976feb6756f29529c6ce5b578e7d6fa8b1efcb30","date":1535461878,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    assertNotNull(listenerEvents.toString(), listenerEvents.get(\"srt\"));\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    assertNotNull(listenerEvents.toString(), listenerEvents.get(\"srt\"));\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    assertNotNull(listenerEvents.toString(), listenerEvents.get(\"srt\"));\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    assertNotNull(listenerEvents.toString(), listenerEvents.get(\"srt\"));\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    assertNotNull(listenerEvents.toString(), listenerEvents.get(\"srt\"));\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00c95d2d1a0288835788dbffb1b73ab5852c7154","date":1544457778,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(15000);\n    \n    assertNotNull(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n    assertNotNull(listenerEvents.toString(), listenerEvents.get(\"srt\"));\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e21212ac84a4d80ddb0856eb80843975b85c0eb","date":1544540322,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(15000);\n    \n    assertNotNull(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0abaca9e5481b5c3660805111683e8ce53bef3","date":1544554124,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(15000);\n    \n    assertNotNull(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9828fa9292a7607cc3563fbcab5ce79552c0469","date":1544559430,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2fcb0b08ed8cb8d26ffe7c4ebed238bfc259b35","date":1544559712,"type":3,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"967a6347853ee35b432c965743a902d42f24e697","date":1544662223,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.entrySet().toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1","date":1546971158,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30004ef8212d169b5fc7d098ec7aa299c8b5f060","date":1551998457,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n\n    // we're going to expect our trigger listener to process exactly one captured event\n    listenerEventLatch = new CountDownLatch(1);\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The listener didn't record the event even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"no srt events: \" + listenerEvents.toString(), events);\n    assertEquals(events.toString(), 1, events.size());\n\n    CapturedEvent ev = events.get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(25000);\n    \n    assertNotNull(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\"));\n\n    assertTrue(listenerEvents.entrySet().iterator().toString(), listenerEvents.get(\"srt\").size() >= 1);\n\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudUtil.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n\n    // we're going to expect our trigger listener to process exactly one captured event\n    listenerEventLatch = new CountDownLatch(1);\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The listener didn't record the event even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"no srt events: \" + listenerEvents.toString(), events);\n    assertEquals(events.toString(), 1, events.size());\n\n    CapturedEvent ev = events.get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n\n    // we're going to expect our trigger listener to process exactly one captured event\n    listenerEventLatch = new CountDownLatch(1);\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The listener didn't record the event even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"no srt events: \" + listenerEvents.toString(), events);\n    assertEquals(events.toString(), 1, events.size());\n\n    CapturedEvent ev = events.get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(2, 10, false, true)));\n    }\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n\n    // we're going to expect our trigger listener to process exactly one captured event\n    listenerEventLatch = new CountDownLatch(1);\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The listener didn't record the event even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"no srt events: \" + listenerEvents.toString(), events);\n    assertEquals(events.toString(), 1, events.size());\n\n    CapturedEvent ev = events.get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudUtil.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(2, 10, false, true)) + \" ms\");\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n\n    // we're going to expect our trigger listener to process exactly one captured event\n    listenerEventLatch = new CountDownLatch(1);\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The listener didn't record the event even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"no srt events: \" + listenerEvents.toString(), events);\n    assertEquals(events.toString(), 1, events.size());\n\n    CapturedEvent ev = events.get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(2, 10, false, true)));\n    }\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n\n    // we're going to expect our trigger listener to process exactly one captured event\n    listenerEventLatch = new CountDownLatch(1);\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The listener didn't record the event even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"no srt events: \" + listenerEvents.toString(), events);\n    assertEquals(events.toString(), 1, events.size());\n\n    CapturedEvent ev = events.get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(2, 10, false, true)));\n    }\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n\n    // we're going to expect our trigger listener to process exactly one captured event\n    listenerEventLatch = new CountDownLatch(1);\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The listener didn't record the event even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"no srt events: \" + listenerEvents.toString(), events);\n    assertEquals(events.toString(), 1, events.size());\n\n    CapturedEvent ev = events.get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testSearchRate().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSearchRate() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String collectionName = \"testSearchRate\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 10);\n    create.process(solrClient);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(2, 10, false, true)));\n    }\n\n    // collect the node names for shard1\n    Set<String> nodes = new HashSet<>();\n    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)\n        .getSlice(\"shard1\")\n        .getReplicas()\n        .forEach(r -> nodes.add(r.getNodeName()));\n\n    String metricName = \"QUERY./select.requestTimes:1minRate\";\n    // simulate search traffic\n    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, \"shard1\", metricName, 40, false, true);\n\n    // now define the trigger. doing it earlier may cause partial events to be generated (where only some\n    // nodes / replicas exceeded the threshold).\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n\n    // we're going to expect our trigger listener to process exactly one captured event\n    listenerEventLatch = new CountDownLatch(1);\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger did not finish even after await()ing an excessive amount of time\",\n               triggerFinishedLatch.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The listener didn't record the event even after await()ing an excessive amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertNotNull(\"no srt events: \" + listenerEvents.toString(), events);\n    assertEquals(events.toString(), 1, events.size());\n\n    CapturedEvent ev = events.get(0);\n    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());\n    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);\n    assertNotNull(m);\n    assertEquals(nodes.size(), m.size());\n    assertEquals(nodes, m.keySet());\n    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    ops.forEach(op -> {\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());\n      assertEquals(1, op.getHints().size());\n      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);\n      // this may be a pair or a HashSet of pairs with size 1\n      Pair<String, String> hint = null;\n      if (o instanceof Pair) {\n        hint = (Pair<String, String>)o;\n      } else if (o instanceof Set) {\n        assertEquals(\"unexpected number of hints: \" + o, 1, ((Set)o).size());\n        o = ((Set)o).iterator().next();\n        assertTrue(\"unexpected hint: \" + o, o instanceof Pair);\n        hint = (Pair<String, String>)o;\n      } else {\n        fail(\"unexpected hints: \" + o);\n      }\n      assertNotNull(hint);\n      assertEquals(collectionName, hint.first());\n      assertEquals(\"shard1\", hint.second());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["976feb6756f29529c6ce5b578e7d6fa8b1efcb30"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30004ef8212d169b5fc7d098ec7aa299c8b5f060":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"00c95d2d1a0288835788dbffb1b73ab5852c7154":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["89948af0461fead48f44ba8fb7866f107ce83f22"],"967a6347853ee35b432c965743a902d42f24e697":["b2fcb0b08ed8cb8d26ffe7c4ebed238bfc259b35"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"b2fcb0b08ed8cb8d26ffe7c4ebed238bfc259b35":["7e0abaca9e5481b5c3660805111683e8ce53bef3","d9828fa9292a7607cc3563fbcab5ce79552c0469"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e21212ac84a4d80ddb0856eb80843975b85c0eb":["00c95d2d1a0288835788dbffb1b73ab5852c7154"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["30004ef8212d169b5fc7d098ec7aa299c8b5f060"],"976feb6756f29529c6ce5b578e7d6fa8b1efcb30":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["967a6347853ee35b432c965743a902d42f24e697"],"d9828fa9292a7607cc3563fbcab5ce79552c0469":["7e0abaca9e5481b5c3660805111683e8ce53bef3"],"7e0abaca9e5481b5c3660805111683e8ce53bef3":["00c95d2d1a0288835788dbffb1b73ab5852c7154","5e21212ac84a4d80ddb0856eb80843975b85c0eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["976feb6756f29529c6ce5b578e7d6fa8b1efcb30"],"30004ef8212d169b5fc7d098ec7aa299c8b5f060":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"00c95d2d1a0288835788dbffb1b73ab5852c7154":["5e21212ac84a4d80ddb0856eb80843975b85c0eb","7e0abaca9e5481b5c3660805111683e8ce53bef3"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["00c95d2d1a0288835788dbffb1b73ab5852c7154"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["30004ef8212d169b5fc7d098ec7aa299c8b5f060"],"967a6347853ee35b432c965743a902d42f24e697":["89948af0461fead48f44ba8fb7866f107ce83f22"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"b2fcb0b08ed8cb8d26ffe7c4ebed238bfc259b35":["967a6347853ee35b432c965743a902d42f24e697"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"5e21212ac84a4d80ddb0856eb80843975b85c0eb":["7e0abaca9e5481b5c3660805111683e8ce53bef3"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"976feb6756f29529c6ce5b578e7d6fa8b1efcb30":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"89948af0461fead48f44ba8fb7866f107ce83f22":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"d9828fa9292a7607cc3563fbcab5ce79552c0469":["b2fcb0b08ed8cb8d26ffe7c4ebed238bfc259b35"],"7e0abaca9e5481b5c3660805111683e8ce53bef3":["b2fcb0b08ed8cb8d26ffe7c4ebed238bfc259b35","d9828fa9292a7607cc3563fbcab5ce79552c0469"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}