{"path":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c94352b6e8631393ac6c6021150b7c4dc21798ea","date":1303227845,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      core.setName(name);\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#register(String,SolrCore,boolean).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry using the specified name.\n   * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core\n   *\n   * @return a previous core having the same name if it existed\n   */\n  public SolrCore register(String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    SolrCore old = null;\n    synchronized (cores) {\n      old = cores.put(name, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if (zkController != null) {\n      try {\n        zkController.register(core.getName(), core.getCoreDescriptor().getCloudDescriptor(), true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["c94352b6e8631393ac6c6021150b7c4dc21798ea","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","c94352b6e8631393ac6c6021150b7c4dc21798ea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c94352b6e8631393ac6c6021150b7c4dc21798ea"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c94352b6e8631393ac6c6021150b7c4dc21798ea":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","c94352b6e8631393ac6c6021150b7c4dc21798ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["c94352b6e8631393ac6c6021150b7c4dc21798ea"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["1da8d55113b689b06716246649de6f62430f15c0","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c94352b6e8631393ac6c6021150b7c4dc21798ea","a3776dccca01c11e7046323cfad46a3b4a471233","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"1da8d55113b689b06716246649de6f62430f15c0":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c94352b6e8631393ac6c6021150b7c4dc21798ea":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}