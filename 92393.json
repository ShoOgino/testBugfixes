{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float,boolean).mjava","commits":[{"id":"fb8af2aec0a8574cf50cad6939d4475179595eca","date":1357675799,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<T>(inputType, outputs, doPackFST, acceptableOverheadRatio, allowArrayArcs);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean doPackFST, float acceptableOverheadRatio) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<T>(inputType, outputs, doPackFST, acceptableOverheadRatio);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<T>(inputType, outputs, doPackFST, acceptableOverheadRatio, allowArrayArcs);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean doPackFST, float acceptableOverheadRatio) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<T>(inputType, outputs, doPackFST, acceptableOverheadRatio);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4612a1625257c97ec7983c15cbc6289689e42fed","date":1358010116,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float,boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<T>(inputType, outputs, doPackFST, acceptableOverheadRatio, allowArrayArcs);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst, fst.bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<T>(inputType, outputs, doPackFST, acceptableOverheadRatio, allowArrayArcs);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float,boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float,boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   *\n   * @param bytesPageBits How many bits wide to make each\n   *    byte[] block in the BytesStore; if you know the FST\n   *    will be large then make this larger.  For example 15\n   *    bits = 32768 byte pages.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs,\n                 int bytesPageBits) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<T>(inputType, outputs, doPackFST, acceptableOverheadRatio, allowArrayArcs, bytesPageBits);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst, fst.bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<T>(inputType, outputs, doPackFST, acceptableOverheadRatio, allowArrayArcs);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst, fst.bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float,boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float,boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   *\n   * @param bytesPageBits How many bits wide to make each\n   *    byte[] block in the BytesStore; if you know the FST\n   *    will be large then make this larger.  For example 15\n   *    bits = 32768 byte pages.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs,\n                 int bytesPageBits) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<T>(inputType, outputs, doPackFST, acceptableOverheadRatio, allowArrayArcs, bytesPageBits);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst, fst.bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<T>(inputType, outputs, doPackFST, acceptableOverheadRatio, allowArrayArcs);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["4612a1625257c97ec7983c15cbc6289689e42fed"],"4612a1625257c97ec7983c15cbc6289689e42fed":["fb8af2aec0a8574cf50cad6939d4475179595eca"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4e6354dd7c71fe122926fc53d7d29f715b1283db","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb8af2aec0a8574cf50cad6939d4475179595eca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb8af2aec0a8574cf50cad6939d4475179595eca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"]},"commit2Childs":{"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4612a1625257c97ec7983c15cbc6289689e42fed":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb8af2aec0a8574cf50cad6939d4475179595eca","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"fb8af2aec0a8574cf50cad6939d4475179595eca":["4612a1625257c97ec7983c15cbc6289689e42fed","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}