{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#getMaxVersionFromIndex().mjava","commits":[{"id":"773a737806859660d4756f710adc0ad53e05f9d5","date":1432140757,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getMaxVersionFromIndex().mjava","pathOld":"/dev/null","sourceNew":"  // this method is primarily used for unit testing and is not part of the public API for this class\n  Long getMaxVersionFromIndex() {\n    if (maxVersionFromIndex == null && versionInfo != null) {\n      RefCounted<SolrIndexSearcher> newestSearcher = (uhandler != null && uhandler.core != null)\n          ? uhandler.core.getRealtimeSearcher() : null;\n      if (newestSearcher == null)\n        throw new IllegalStateException(\"No searcher available to lookup max version from index!\");\n\n      try {\n        maxVersionFromIndex = seedBucketsWithHighestVersion(newestSearcher.get(), versionInfo);\n      } finally {\n        newestSearcher.decref();\n      }\n    }\n    return maxVersionFromIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1248476067f7f652e875bd77a9a3faeecde50430"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1248476067f7f652e875bd77a9a3faeecde50430","date":1497567228,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getMaxVersionFromIndex().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#getMaxVersionFromIndex().mjava","sourceNew":"  // this method is primarily used for unit testing and is not part of the public API for this class\n  Long getMaxVersionFromIndex() {\n    RefCounted<SolrIndexSearcher> newestSearcher = (uhandler != null && uhandler.core != null)\n      ? uhandler.core.getRealtimeSearcher() : null;\n    if (newestSearcher == null)\n      throw new IllegalStateException(\"No searcher available to lookup max version from index!\");\n    \n    try {\n      seedBucketsWithHighestVersion(newestSearcher.get());\n      return getCurrentMaxVersion();\n    } finally {\n      newestSearcher.decref();\n    }\n  }\n\n","sourceOld":"  // this method is primarily used for unit testing and is not part of the public API for this class\n  Long getMaxVersionFromIndex() {\n    if (maxVersionFromIndex == null && versionInfo != null) {\n      RefCounted<SolrIndexSearcher> newestSearcher = (uhandler != null && uhandler.core != null)\n          ? uhandler.core.getRealtimeSearcher() : null;\n      if (newestSearcher == null)\n        throw new IllegalStateException(\"No searcher available to lookup max version from index!\");\n\n      try {\n        maxVersionFromIndex = seedBucketsWithHighestVersion(newestSearcher.get(), versionInfo);\n      } finally {\n        newestSearcher.decref();\n      }\n    }\n    return maxVersionFromIndex;\n  }\n\n","bugFix":["773a737806859660d4756f710adc0ad53e05f9d5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getMaxVersionFromIndex().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#getMaxVersionFromIndex().mjava","sourceNew":"  // this method is primarily used for unit testing and is not part of the public API for this class\n  Long getMaxVersionFromIndex() {\n    RefCounted<SolrIndexSearcher> newestSearcher = (uhandler != null && uhandler.core != null)\n      ? uhandler.core.getRealtimeSearcher() : null;\n    if (newestSearcher == null)\n      throw new IllegalStateException(\"No searcher available to lookup max version from index!\");\n    \n    try {\n      seedBucketsWithHighestVersion(newestSearcher.get());\n      return getCurrentMaxVersion();\n    } finally {\n      newestSearcher.decref();\n    }\n  }\n\n","sourceOld":"  // this method is primarily used for unit testing and is not part of the public API for this class\n  Long getMaxVersionFromIndex() {\n    if (maxVersionFromIndex == null && versionInfo != null) {\n      RefCounted<SolrIndexSearcher> newestSearcher = (uhandler != null && uhandler.core != null)\n          ? uhandler.core.getRealtimeSearcher() : null;\n      if (newestSearcher == null)\n        throw new IllegalStateException(\"No searcher available to lookup max version from index!\");\n\n      try {\n        maxVersionFromIndex = seedBucketsWithHighestVersion(newestSearcher.get(), versionInfo);\n      } finally {\n        newestSearcher.decref();\n      }\n    }\n    return maxVersionFromIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getMaxVersionFromIndex().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#getMaxVersionFromIndex().mjava","sourceNew":"  // this method is primarily used for unit testing and is not part of the public API for this class\n  Long getMaxVersionFromIndex() {\n    RefCounted<SolrIndexSearcher> newestSearcher = (uhandler != null && uhandler.core != null)\n      ? uhandler.core.getRealtimeSearcher() : null;\n    if (newestSearcher == null)\n      throw new IllegalStateException(\"No searcher available to lookup max version from index!\");\n    \n    try {\n      seedBucketsWithHighestVersion(newestSearcher.get());\n      return getCurrentMaxVersion();\n    } finally {\n      newestSearcher.decref();\n    }\n  }\n\n","sourceOld":"  // this method is primarily used for unit testing and is not part of the public API for this class\n  Long getMaxVersionFromIndex() {\n    if (maxVersionFromIndex == null && versionInfo != null) {\n      RefCounted<SolrIndexSearcher> newestSearcher = (uhandler != null && uhandler.core != null)\n          ? uhandler.core.getRealtimeSearcher() : null;\n      if (newestSearcher == null)\n        throw new IllegalStateException(\"No searcher available to lookup max version from index!\");\n\n      try {\n        maxVersionFromIndex = seedBucketsWithHighestVersion(newestSearcher.get(), versionInfo);\n      } finally {\n        newestSearcher.decref();\n      }\n    }\n    return maxVersionFromIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1248476067f7f652e875bd77a9a3faeecde50430":["773a737806859660d4756f710adc0ad53e05f9d5"],"773a737806859660d4756f710adc0ad53e05f9d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["773a737806859660d4756f710adc0ad53e05f9d5","1248476067f7f652e875bd77a9a3faeecde50430"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["773a737806859660d4756f710adc0ad53e05f9d5","1248476067f7f652e875bd77a9a3faeecde50430"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"1248476067f7f652e875bd77a9a3faeecde50430":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"773a737806859660d4756f710adc0ad53e05f9d5":["1248476067f7f652e875bd77a9a3faeecde50430","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["773a737806859660d4756f710adc0ad53e05f9d5"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}