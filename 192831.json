{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isValidDiagonal(Node,Node).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isValidDiagonal(Node,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines whether a diagonal between two polygon nodes lies within a polygon interior. (This determines the validity of the ray.) **/\n  private static final boolean isValidDiagonal(final Node a, final Node b) {\n    return a.next.idx != b.idx && a.previous.idx != b.idx\n        && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n        && isLocallyInside(a, b) && isLocallyInside(b, a)\n        && middleInsert(a, a.getX(), a.getY(), b.getX(), b.getY());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isValidDiagonal(Node,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines whether a diagonal between two polygon nodes lies within a polygon interior. (This determines the validity of the ray.) **/\n  private static final boolean isValidDiagonal(final Node a, final Node b) {\n    return a.next.idx != b.idx && a.previous.idx != b.idx\n        && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n        && isLocallyInside(a, b) && isLocallyInside(b, a)\n        && middleInsert(a, a.getX(), a.getY(), b.getX(), b.getY());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isValidDiagonal(Node,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines whether a diagonal between two polygon nodes lies within a polygon interior. (This determines the validity of the ray.) **/\n  private static final boolean isValidDiagonal(final Node a, final Node b) {\n    return a.next.idx != b.idx && a.previous.idx != b.idx\n        && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n        && isLocallyInside(a, b) && isLocallyInside(b, a)\n        && middleInsert(a, a.getX(), a.getY(), b.getX(), b.getY());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d","date":1559804329,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isValidDiagonal(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isValidDiagonal(Node,Node).mjava","sourceNew":"  /** Determines whether a diagonal between two polygon nodes lies within a polygon interior. (This determines the validity of the ray.) **/\n  private static final boolean isValidDiagonal(final Node a, final Node b) {\n    //If points are equal then use it\n    if (isVertexEquals(a, b)) {\n      return true;\n    }\n    return a.next.idx != b.idx && a.previous.idx != b.idx\n        && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n        && isLocallyInside(a, b) && isLocallyInside(b, a)\n        && middleInsert(a, a.getX(), a.getY(), b.getX(), b.getY());\n  }\n\n","sourceOld":"  /** Determines whether a diagonal between two polygon nodes lies within a polygon interior. (This determines the validity of the ray.) **/\n  private static final boolean isValidDiagonal(final Node a, final Node b) {\n    return a.next.idx != b.idx && a.previous.idx != b.idx\n        && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n        && isLocallyInside(a, b) && isLocallyInside(b, a)\n        && middleInsert(a, a.getX(), a.getY(), b.getX(), b.getY());\n  }\n\n","bugFix":null,"bugIntro":["9ebcaa353d633ad1f42e11b495fa6e35efe711f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ebcaa353d633ad1f42e11b495fa6e35efe711f7","date":1560229302,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isValidDiagonal(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isValidDiagonal(Node,Node).mjava","sourceNew":"  /** Determines whether a diagonal between two polygon nodes lies within a polygon interior. (This determines the validity of the ray.) **/\n  private static final boolean isValidDiagonal(final Node a, final Node b) {\n    if (isVertexEquals(a, b)) {\n      //If points are equal then use it if they are valid polygons\n      return isCWPolygon(a, b);\n    }\n    return a.next.idx != b.idx && a.previous.idx != b.idx\n        && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n        && isLocallyInside(a, b) && isLocallyInside(b, a)\n        && middleInsert(a, a.getX(), a.getY(), b.getX(), b.getY());\n  }\n\n","sourceOld":"  /** Determines whether a diagonal between two polygon nodes lies within a polygon interior. (This determines the validity of the ray.) **/\n  private static final boolean isValidDiagonal(final Node a, final Node b) {\n    //If points are equal then use it\n    if (isVertexEquals(a, b)) {\n      return true;\n    }\n    return a.next.idx != b.idx && a.previous.idx != b.idx\n        && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n        && isLocallyInside(a, b) && isLocallyInside(b, a)\n        && middleInsert(a, a.getX(), a.getY(), b.getX(), b.getY());\n  }\n\n","bugFix":["3154b8a89750f531ca89c2fc8d7dc22a6ee5739d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#isValidDiagonal(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isValidDiagonal(Node,Node).mjava","sourceNew":"  /** Determines whether a diagonal between two polygon nodes lies within a polygon interior. (This determines the validity of the ray.) **/\n  private static final boolean isValidDiagonal(final Node a, final Node b) {\n    if (isVertexEquals(a, b)) {\n      //If points are equal then use it if they are valid polygons\n      return isCWPolygon(a, b);\n    }\n    return a.next.idx != b.idx && a.previous.idx != b.idx\n        && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n        && isLocallyInside(a, b) && isLocallyInside(b, a)\n        && middleInsert(a, a.getX(), a.getY(), b.getX(), b.getY());\n  }\n\n","sourceOld":"  /** Determines whether a diagonal between two polygon nodes lies within a polygon interior. (This determines the validity of the ray.) **/\n  private static final boolean isValidDiagonal(final Node a, final Node b) {\n    if (isVertexEquals(a, b)) {\n      //If points are equal then use it if they are valid polygons\n      return isCWPolygon(a, b);\n    }\n    return a.next.idx != b.idx && a.previous.idx != b.idx\n        && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n        && isLocallyInside(a, b) && isLocallyInside(b, a)\n        && middleInsert(a, a.getX(), a.getY(), b.getX(), b.getY());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ebcaa353d633ad1f42e11b495fa6e35efe711f7":["3154b8a89750f531ca89c2fc8d7dc22a6ee5739d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["9ebcaa353d633ad1f42e11b495fa6e35efe711f7"],"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3154b8a89750f531ca89c2fc8d7dc22a6ee5739d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9ebcaa353d633ad1f42e11b495fa6e35efe711f7":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d":["9ebcaa353d633ad1f42e11b495fa6e35efe711f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}