{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","commits":[{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(Utils.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ea01e15f477524516b07b300a3ae03d1bec9bc","date":1455919598,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(Utils.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            ElectionContext prevContext = electionContext.get(coreName);\n            if (prevContext != null) {\n              prevContext.cancelElection();\n            }\n\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            electionContext.put(coreName, ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(Utils.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n            q.offer(Utils.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            ElectionContext prevContext = electionContext.get(coreName);\n            if (prevContext != null) {\n              prevContext.cancelElection();\n            }\n\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            electionContext.put(coreName, ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(Utils.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            ElectionContext prevContext = electionContext.get(coreName);\n            if (prevContext != null) {\n              prevContext.cancelElection();\n            }\n\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            electionContext.put(coreName, ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n            q.offer(Utils.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            ElectionContext prevContext = electionContext.get(coreName);\n            if (prevContext != null) {\n              prevContext.cancelElection();\n            }\n\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            electionContext.put(coreName, ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(Utils.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            ElectionContext prevContext = electionContext.get(coreName);\n            if (prevContext != null) {\n              prevContext.cancelElection();\n            }\n\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            electionContext.put(coreName, ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,Replica.State,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, String shard, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n        DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n        return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n            ZkStateReader.STATE_PROP, stateName.toString(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n            ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n\n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            ElectionContext prevContext = electionContext.get(coreName);\n            if (prevContext != null) {\n              prevContext.cancelElection();\n            }\n\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            electionContext.put(coreName, ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n            q.offer(Utils.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            ElectionContext prevContext = electionContext.get(coreName);\n            if (prevContext != null) {\n              prevContext.cancelElection();\n            }\n\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            electionContext.put(coreName, ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,Replica.State,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, String shard, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n        DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n        return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n            ZkStateReader.STATE_PROP, stateName.toString(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n            ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n\n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            ElectionContext prevContext = electionContext.get(coreName);\n            if (prevContext != null) {\n              prevContext.cancelElection();\n            }\n\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            electionContext.put(coreName, ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n            q.offer(Utils.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            ElectionContext prevContext = electionContext.get(coreName);\n            if (prevContext != null) {\n              prevContext.cancelElection();\n            }\n\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            electionContext.put(coreName, ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","sourceNew":null,"sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n            q.offer(Utils.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            ElectionContext prevContext = electionContext.get(coreName);\n            if (prevContext != null) {\n              prevContext.cancelElection();\n            }\n\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            electionContext.put(coreName, ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af2638813028b254a88b418ebeafb541afb49653":["a1ea01e15f477524516b07b300a3ae03d1bec9bc","19498030e0adab22f604f935cae3c03dcf0952a6"],"19498030e0adab22f604f935cae3c03dcf0952a6":["a1ea01e15f477524516b07b300a3ae03d1bec9bc"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a1ea01e15f477524516b07b300a3ae03d1bec9bc":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["af2638813028b254a88b418ebeafb541afb49653","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["af2638813028b254a88b418ebeafb541afb49653","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"af2638813028b254a88b418ebeafb541afb49653":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a1ea01e15f477524516b07b300a3ae03d1bec9bc"],"a1ea01e15f477524516b07b300a3ae03d1bec9bc":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}