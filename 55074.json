{"path":"solr/core/src/java/org/apache/solr/index/UninvertDocValuesMergePolicyFactory.UninvertDocValuesOneMerge#wrapForMerge(CodecReader).mjava","commits":[{"id":"6d7001ba0a3ddc786d0edd8cb60ec5e813920396","date":1489580117,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/index/UninvertDocValuesMergePolicyFactory.UninvertDocValuesOneMerge#wrapForMerge(CodecReader).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public CodecReader wrapForMerge(CodecReader reader) throws IOException {\n      // Wrap the reader with an uninverting reader if any of the fields have no docvalues but the \n      // Schema says there should be\n      \n      \n      Map<String,UninvertingReader.Type> uninversionMap = null;\n      \n      for(FieldInfo fi: reader.getFieldInfos()) {\n        final UninvertingReader.Type type = getUninversionType(fi);\n        if (type != null) {\n          if (uninversionMap == null) {\n            uninversionMap = new HashMap<>();\n          }\n          uninversionMap.put(fi.name, type);\n        }\n        \n      }\n      \n      if(uninversionMap == null) {\n        return reader; // Default to normal reader if nothing to uninvert\n      } else {\n        return new UninvertingFilterCodecReader(reader, uninversionMap);\n      }\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cb3a881440e661c981ce1f36d1533b359463aa","date":1489651910,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/index/UninvertDocValuesMergePolicyFactory.UninvertDocValuesOneMerge#wrapForMerge(CodecReader).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public CodecReader wrapForMerge(CodecReader reader) throws IOException {\n      // Wrap the reader with an uninverting reader if any of the fields have no docvalues but the \n      // Schema says there should be\n      \n      \n      Map<String,UninvertingReader.Type> uninversionMap = null;\n      \n      for(FieldInfo fi: reader.getFieldInfos()) {\n        final UninvertingReader.Type type = getUninversionType(fi);\n        if (type != null) {\n          if (uninversionMap == null) {\n            uninversionMap = new HashMap<>();\n          }\n          uninversionMap.put(fi.name, type);\n        }\n        \n      }\n      \n      if(uninversionMap == null) {\n        return reader; // Default to normal reader if nothing to uninvert\n      } else {\n        return new UninvertingFilterCodecReader(reader, uninversionMap);\n      }\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/index/UninvertDocValuesMergePolicyFactory.UninvertDocValuesOneMerge#wrapForMerge(CodecReader).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public CodecReader wrapForMerge(CodecReader reader) throws IOException {\n      // Wrap the reader with an uninverting reader if any of the fields have no docvalues but the \n      // Schema says there should be\n      \n      \n      Map<String,UninvertingReader.Type> uninversionMap = null;\n      \n      for(FieldInfo fi: reader.getFieldInfos()) {\n        final UninvertingReader.Type type = getUninversionType(fi);\n        if (type != null) {\n          if (uninversionMap == null) {\n            uninversionMap = new HashMap<>();\n          }\n          uninversionMap.put(fi.name, type);\n        }\n        \n      }\n      \n      if(uninversionMap == null) {\n        return reader; // Default to normal reader if nothing to uninvert\n      } else {\n        return new UninvertingFilterCodecReader(reader, uninversionMap);\n      }\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d7001ba0a3ddc786d0edd8cb60ec5e813920396":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b7cb3a881440e661c981ce1f36d1533b359463aa"],"b7cb3a881440e661c981ce1f36d1533b359463aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d7001ba0a3ddc786d0edd8cb60ec5e813920396"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d7001ba0a3ddc786d0edd8cb60ec5e813920396","ab68488225b6a6c357dda72ed11dedca9914a192","b7cb3a881440e661c981ce1f36d1533b359463aa"],"6d7001ba0a3ddc786d0edd8cb60ec5e813920396":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"b7cb3a881440e661c981ce1f36d1533b359463aa":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}