{"path":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(IndexSearcher,TermRangeQuery,String...).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(IndexSearcher,TermRangeQuery,String...).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(Searcher,TermRangeQuery,String...).mjava","sourceNew":"  private void checkBooleanTerms(IndexSearcher searcher, TermRangeQuery query, String... terms) throws IOException {\n    query.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));\n    final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);\n    final Set<String> allowedTerms = asSet(terms);\n    assertEquals(allowedTerms.size(), bq.clauses().size());\n    for (BooleanClause c : bq.clauses()) {\n      assertTrue(c.getQuery() instanceof TermQuery);\n      final TermQuery tq = (TermQuery) c.getQuery();\n      final String term = tq.getTerm().text();\n      assertTrue(\"invalid term: \"+ term, allowedTerms.contains(term));\n      allowedTerms.remove(term); // remove to fail on double terms\n    }\n    assertEquals(0, allowedTerms.size());\n  }\n\n","sourceOld":"  private void checkBooleanTerms(Searcher searcher, TermRangeQuery query, String... terms) throws IOException {\n    query.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));\n    final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);\n    final Set<String> allowedTerms = asSet(terms);\n    assertEquals(allowedTerms.size(), bq.clauses().size());\n    for (BooleanClause c : bq.clauses()) {\n      assertTrue(c.getQuery() instanceof TermQuery);\n      final TermQuery tq = (TermQuery) c.getQuery();\n      final String term = tq.getTerm().text();\n      assertTrue(\"invalid term: \"+ term, allowedTerms.contains(term));\n      allowedTerms.remove(term); // remove to fail on double terms\n    }\n    assertEquals(0, allowedTerms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(IndexSearcher,TermRangeQuery,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void checkBooleanTerms(IndexSearcher searcher, TermRangeQuery query, String... terms) throws IOException {\n    query.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));\n    final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);\n    final Set<String> allowedTerms = asSet(terms);\n    assertEquals(allowedTerms.size(), bq.clauses().size());\n    for (BooleanClause c : bq.clauses()) {\n      assertTrue(c.getQuery() instanceof TermQuery);\n      final TermQuery tq = (TermQuery) c.getQuery();\n      final String term = tq.getTerm().text();\n      assertTrue(\"invalid term: \"+ term, allowedTerms.contains(term));\n      allowedTerms.remove(term); // remove to fail on double terms\n    }\n    assertEquals(0, allowedTerms.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(IndexSearcher,TermRangeQuery,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void checkBooleanTerms(IndexSearcher searcher, TermRangeQuery query, String... terms) throws IOException {\n    query.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));\n    final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);\n    final Set<String> allowedTerms = asSet(terms);\n    assertEquals(allowedTerms.size(), bq.clauses().size());\n    for (BooleanClause c : bq.clauses()) {\n      assertTrue(c.getQuery() instanceof TermQuery);\n      final TermQuery tq = (TermQuery) c.getQuery();\n      final String term = tq.getTerm().text();\n      assertTrue(\"invalid term: \"+ term, allowedTerms.contains(term));\n      allowedTerms.remove(term); // remove to fail on double terms\n    }\n    assertEquals(0, allowedTerms.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(IndexSearcher,TermRangeQuery,String...).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(IndexSearcher,TermRangeQuery,String...).mjava","sourceNew":"  private void checkBooleanTerms(IndexSearcher searcher, TermRangeQuery query, String... terms) throws IOException {\n    query.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));\n    final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);\n    final Set<String> allowedTerms = asSet(terms);\n    assertEquals(allowedTerms.size(), bq.clauses().size());\n    for (BooleanClause c : bq.clauses()) {\n      assertTrue(c.getQuery() instanceof TermQuery);\n      final TermQuery tq = (TermQuery) c.getQuery();\n      final String term = tq.getTerm().text();\n      assertTrue(\"invalid term: \"+ term, allowedTerms.contains(term));\n      allowedTerms.remove(term); // remove to fail on double terms\n    }\n    assertEquals(0, allowedTerms.size());\n  }\n\n","sourceOld":"  private void checkBooleanTerms(IndexSearcher searcher, TermRangeQuery query, String... terms) throws IOException {\n    query.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));\n    final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);\n    final Set<String> allowedTerms = asSet(terms);\n    assertEquals(allowedTerms.size(), bq.clauses().size());\n    for (BooleanClause c : bq.clauses()) {\n      assertTrue(c.getQuery() instanceof TermQuery);\n      final TermQuery tq = (TermQuery) c.getQuery();\n      final String term = tq.getTerm().text();\n      assertTrue(\"invalid term: \"+ term, allowedTerms.contains(term));\n      allowedTerms.remove(term); // remove to fail on double terms\n    }\n    assertEquals(0, allowedTerms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","3a119bbc8703c10faa329ec201c654b3a35a1e3e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}