{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBulkScorerLocking().mjava","commits":[{"id":"1b92f673a8027e5fb106d73b5d3e321f2c4db3f6","date":1523872632,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBulkScorerLocking().mjava","pathOld":"/dev/null","sourceNew":"  public void testBulkScorerLocking() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    final int numDocs = atLeast(10);\n    Document emptyDoc = new Document();\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(w);\n    DirectoryReader noCacheReader = new DummyDirectoryReader(reader);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 100000, context -> true);\n    IndexSearcher searcher = new AssertingIndexSearcher(random(), reader);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    Query query = new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n        .build());\n\n    searcher.search(query, 1);\n\n    IndexSearcher noCacheHelperSearcher = new AssertingIndexSearcher(random(), noCacheReader);\n    noCacheHelperSearcher.setQueryCache(cache);\n    noCacheHelperSearcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    noCacheHelperSearcher.search(query, 1);\n\n    Thread t = new Thread(() -> {\n      try {\n        noCacheReader.close();\n        w.close();\n        dir.close();\n      }\n      catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    t.start();\n    t.join();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c9d00c591703058371b3dc36f4957a6f24ca302","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBulkScorerLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBulkScorerLocking().mjava","sourceNew":"  public void testBulkScorerLocking() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    final int numDocs = atLeast(10);\n    Document emptyDoc = new Document();\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(w);\n    DirectoryReader noCacheReader = new DummyDirectoryReader(reader);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 100000, context -> true);\n    IndexSearcher searcher = new AssertingIndexSearcher(random(), reader);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    Query query = new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n        .build());\n\n    searcher.search(query, 1);\n\n    IndexSearcher noCacheHelperSearcher = new AssertingIndexSearcher(random(), noCacheReader);\n    noCacheHelperSearcher.setQueryCache(cache);\n    noCacheHelperSearcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    noCacheHelperSearcher.search(query, 1);\n\n    Thread t = new Thread(() -> {\n      try {\n        noCacheReader.close();\n        w.close();\n        dir.close();\n      }\n      catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    t.start();\n    t.join();\n  }\n\n","sourceOld":"  public void testBulkScorerLocking() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    final int numDocs = atLeast(10);\n    Document emptyDoc = new Document();\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(w);\n    DirectoryReader noCacheReader = new DummyDirectoryReader(reader);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 100000, context -> true);\n    IndexSearcher searcher = new AssertingIndexSearcher(random(), reader);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    Query query = new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n        .build());\n\n    searcher.search(query, 1);\n\n    IndexSearcher noCacheHelperSearcher = new AssertingIndexSearcher(random(), noCacheReader);\n    noCacheHelperSearcher.setQueryCache(cache);\n    noCacheHelperSearcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    noCacheHelperSearcher.search(query, 1);\n\n    Thread t = new Thread(() -> {\n      try {\n        noCacheReader.close();\n        w.close();\n        dir.close();\n      }\n      catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    t.start();\n    t.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1f40c48c3869c5ec709482bfe7e25e465205d78","date":1527513741,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBulkScorerLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBulkScorerLocking().mjava","sourceNew":"  public void testBulkScorerLocking() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        // the test framework sometimes sets crazy low values, prevent this since we are indexing many docs\n        .setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    final int numDocs = atLeast(10);\n    Document emptyDoc = new Document();\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(w);\n    DirectoryReader noCacheReader = new DummyDirectoryReader(reader);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 100000, context -> true);\n    IndexSearcher searcher = new AssertingIndexSearcher(random(), reader);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    Query query = new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n        .build());\n\n    searcher.search(query, 1);\n\n    IndexSearcher noCacheHelperSearcher = new AssertingIndexSearcher(random(), noCacheReader);\n    noCacheHelperSearcher.setQueryCache(cache);\n    noCacheHelperSearcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    noCacheHelperSearcher.search(query, 1);\n\n    Thread t = new Thread(() -> {\n      try {\n        noCacheReader.close();\n        w.close();\n        dir.close();\n      }\n      catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    t.start();\n    t.join();\n  }\n\n","sourceOld":"  public void testBulkScorerLocking() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    final int numDocs = atLeast(10);\n    Document emptyDoc = new Document();\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(w);\n    DirectoryReader noCacheReader = new DummyDirectoryReader(reader);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 100000, context -> true);\n    IndexSearcher searcher = new AssertingIndexSearcher(random(), reader);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    Query query = new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n        .build());\n\n    searcher.search(query, 1);\n\n    IndexSearcher noCacheHelperSearcher = new AssertingIndexSearcher(random(), noCacheReader);\n    noCacheHelperSearcher.setQueryCache(cache);\n    noCacheHelperSearcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    noCacheHelperSearcher.search(query, 1);\n\n    Thread t = new Thread(() -> {\n      try {\n        noCacheReader.close();\n        w.close();\n        dir.close();\n      }\n      catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    t.start();\n    t.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBulkScorerLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBulkScorerLocking().mjava","sourceNew":"  public void testBulkScorerLocking() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        // the test framework sometimes sets crazy low values, prevent this since we are indexing many docs\n        .setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    final int numDocs = atLeast(10);\n    Document emptyDoc = new Document();\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(w);\n    DirectoryReader noCacheReader = new DummyDirectoryReader(reader);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 100000, context -> true, Float.POSITIVE_INFINITY);\n    IndexSearcher searcher = new AssertingIndexSearcher(random(), reader);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    Query query = new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n        .build());\n\n    searcher.search(query, 1);\n\n    IndexSearcher noCacheHelperSearcher = new AssertingIndexSearcher(random(), noCacheReader);\n    noCacheHelperSearcher.setQueryCache(cache);\n    noCacheHelperSearcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    noCacheHelperSearcher.search(query, 1);\n\n    Thread t = new Thread(() -> {\n      try {\n        noCacheReader.close();\n        w.close();\n        dir.close();\n      }\n      catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    t.start();\n    t.join();\n  }\n\n","sourceOld":"  public void testBulkScorerLocking() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        // the test framework sometimes sets crazy low values, prevent this since we are indexing many docs\n        .setMaxBufferedDocs(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    final int numDocs = atLeast(10);\n    Document emptyDoc = new Document();\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    DirectoryReader reader = DirectoryReader.open(w);\n    DirectoryReader noCacheReader = new DummyDirectoryReader(reader);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 100000, context -> true);\n    IndexSearcher searcher = new AssertingIndexSearcher(random(), reader);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    Query query = new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n        .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n        .build());\n\n    searcher.search(query, 1);\n\n    IndexSearcher noCacheHelperSearcher = new AssertingIndexSearcher(random(), noCacheReader);\n    noCacheHelperSearcher.setQueryCache(cache);\n    noCacheHelperSearcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    noCacheHelperSearcher.search(query, 1);\n\n    Thread t = new Thread(() -> {\n      try {\n        noCacheReader.close();\n        w.close();\n        dir.close();\n      }\n      catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    t.start();\n    t.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1f40c48c3869c5ec709482bfe7e25e465205d78":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"1b92f673a8027e5fb106d73b5d3e321f2c4db3f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["1b92f673a8027e5fb106d73b5d3e321f2c4db3f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["f1f40c48c3869c5ec709482bfe7e25e465205d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"f1f40c48c3869c5ec709482bfe7e25e465205d78":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"1b92f673a8027e5fb106d73b5d3e321f2c4db3f6":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["f1f40c48c3869c5ec709482bfe7e25e465205d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b92f673a8027e5fb106d73b5d3e321f2c4db3f6"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}