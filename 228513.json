{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testEquals().mjava","commits":[{"id":"a397491f6601f7c45bc425f45e95c41c3a6d1ca3","date":1380651240,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"sqrt(a) + ln(b)\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"a\", SortField.Type.INT));\n    bindings.add(new SortField(\"b\", SortField.Type.INT));\n    \n    ValueSource vs1 = expr.getValueSource(bindings);\n    // same instance\n    assertEquals(vs1, vs1);\n    // null\n    assertFalse(vs1.equals(null));\n    // other object\n    assertFalse(vs1.equals(\"foobar\"));\n    // same bindings and expression instances\n    ValueSource vs2 = expr.getValueSource(bindings);\n    assertEquals(vs1.hashCode(), vs2.hashCode());\n    assertEquals(vs1, vs2);\n    // equiv bindings (different instance)\n    SimpleBindings bindings2 = new SimpleBindings();    \n    bindings2.add(new SortField(\"a\", SortField.Type.INT));\n    bindings2.add(new SortField(\"b\", SortField.Type.INT));\n    ValueSource vs3 = expr.getValueSource(bindings2);\n    assertEquals(vs1, vs3);\n    // different bindings (same names, different types)\n    SimpleBindings bindings3 = new SimpleBindings();    \n    bindings3.add(new SortField(\"a\", SortField.Type.LONG));\n    bindings3.add(new SortField(\"b\", SortField.Type.INT));\n    ValueSource vs4 = expr.getValueSource(bindings3);\n    assertFalse(vs1.equals(vs4));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae1ad302fc92a61505409a38838f2b1a4a2b092","date":1483787106,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testDoubleValuesSourceEquals().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testEquals().mjava","sourceNew":"  public void testDoubleValuesSourceEquals() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"sqrt(a) + ln(b)\");\n\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"a\", SortField.Type.INT));\n    bindings.add(new SortField(\"b\", SortField.Type.INT));\n\n    DoubleValuesSource vs1 = expr.getDoubleValuesSource(bindings);\n    // same instance\n    assertEquals(vs1, vs1);\n    // null\n    assertFalse(vs1.equals(null));\n    // other object\n    assertFalse(vs1.equals(\"foobar\"));\n    // same bindings and expression instances\n    DoubleValuesSource vs2 = expr.getDoubleValuesSource(bindings);\n    assertEquals(vs1.hashCode(), vs2.hashCode());\n    assertEquals(vs1, vs2);\n    // equiv bindings (different instance)\n    SimpleBindings bindings2 = new SimpleBindings();\n    bindings2.add(new SortField(\"a\", SortField.Type.INT));\n    bindings2.add(new SortField(\"b\", SortField.Type.INT));\n    DoubleValuesSource vs3 = expr.getDoubleValuesSource(bindings2);\n    assertEquals(vs1, vs3);\n    // different bindings (same names, different types)\n    SimpleBindings bindings3 = new SimpleBindings();\n    bindings3.add(new SortField(\"a\", SortField.Type.LONG));\n    bindings3.add(new SortField(\"b\", SortField.Type.FLOAT));\n    DoubleValuesSource vs4 = expr.getDoubleValuesSource(bindings3);\n    assertFalse(vs1.equals(vs4));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"sqrt(a) + ln(b)\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"a\", SortField.Type.INT));\n    bindings.add(new SortField(\"b\", SortField.Type.INT));\n    \n    ValueSource vs1 = expr.getValueSource(bindings);\n    // same instance\n    assertEquals(vs1, vs1);\n    // null\n    assertFalse(vs1.equals(null));\n    // other object\n    assertFalse(vs1.equals(\"foobar\"));\n    // same bindings and expression instances\n    ValueSource vs2 = expr.getValueSource(bindings);\n    assertEquals(vs1.hashCode(), vs2.hashCode());\n    assertEquals(vs1, vs2);\n    // equiv bindings (different instance)\n    SimpleBindings bindings2 = new SimpleBindings();    \n    bindings2.add(new SortField(\"a\", SortField.Type.INT));\n    bindings2.add(new SortField(\"b\", SortField.Type.INT));\n    ValueSource vs3 = expr.getValueSource(bindings2);\n    assertEquals(vs1, vs3);\n    // different bindings (same names, different types)\n    SimpleBindings bindings3 = new SimpleBindings();    \n    bindings3.add(new SortField(\"a\", SortField.Type.LONG));\n    bindings3.add(new SortField(\"b\", SortField.Type.INT));\n    ValueSource vs4 = expr.getValueSource(bindings3);\n    assertFalse(vs1.equals(vs4));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testDoubleValuesSourceEquals().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testEquals().mjava","sourceNew":"  public void testDoubleValuesSourceEquals() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"sqrt(a) + ln(b)\");\n\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"a\", SortField.Type.INT));\n    bindings.add(new SortField(\"b\", SortField.Type.INT));\n\n    DoubleValuesSource vs1 = expr.getDoubleValuesSource(bindings);\n    // same instance\n    assertEquals(vs1, vs1);\n    // null\n    assertFalse(vs1.equals(null));\n    // other object\n    assertFalse(vs1.equals(\"foobar\"));\n    // same bindings and expression instances\n    DoubleValuesSource vs2 = expr.getDoubleValuesSource(bindings);\n    assertEquals(vs1.hashCode(), vs2.hashCode());\n    assertEquals(vs1, vs2);\n    // equiv bindings (different instance)\n    SimpleBindings bindings2 = new SimpleBindings();\n    bindings2.add(new SortField(\"a\", SortField.Type.INT));\n    bindings2.add(new SortField(\"b\", SortField.Type.INT));\n    DoubleValuesSource vs3 = expr.getDoubleValuesSource(bindings2);\n    assertEquals(vs1, vs3);\n    // different bindings (same names, different types)\n    SimpleBindings bindings3 = new SimpleBindings();\n    bindings3.add(new SortField(\"a\", SortField.Type.LONG));\n    bindings3.add(new SortField(\"b\", SortField.Type.FLOAT));\n    DoubleValuesSource vs4 = expr.getDoubleValuesSource(bindings3);\n    assertFalse(vs1.equals(vs4));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"sqrt(a) + ln(b)\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"a\", SortField.Type.INT));\n    bindings.add(new SortField(\"b\", SortField.Type.INT));\n    \n    ValueSource vs1 = expr.getValueSource(bindings);\n    // same instance\n    assertEquals(vs1, vs1);\n    // null\n    assertFalse(vs1.equals(null));\n    // other object\n    assertFalse(vs1.equals(\"foobar\"));\n    // same bindings and expression instances\n    ValueSource vs2 = expr.getValueSource(bindings);\n    assertEquals(vs1.hashCode(), vs2.hashCode());\n    assertEquals(vs1, vs2);\n    // equiv bindings (different instance)\n    SimpleBindings bindings2 = new SimpleBindings();    \n    bindings2.add(new SortField(\"a\", SortField.Type.INT));\n    bindings2.add(new SortField(\"b\", SortField.Type.INT));\n    ValueSource vs3 = expr.getValueSource(bindings2);\n    assertEquals(vs1, vs3);\n    // different bindings (same names, different types)\n    SimpleBindings bindings3 = new SimpleBindings();    \n    bindings3.add(new SortField(\"a\", SortField.Type.LONG));\n    bindings3.add(new SortField(\"b\", SortField.Type.INT));\n    ValueSource vs4 = expr.getValueSource(bindings3);\n    assertFalse(vs1.equals(vs4));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3","7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae1ad302fc92a61505409a38838f2b1a4a2b092"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["7ae1ad302fc92a61505409a38838f2b1a4a2b092","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}