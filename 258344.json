{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random);\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random.nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term, random.nextBoolean()));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term, random.nextBoolean()));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random);\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random.nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term, random.nextBoolean()));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term, random.nextBoolean()));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term, random().nextBoolean()));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term, random().nextBoolean()));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random);\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random.nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term, random.nextBoolean()));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term, random.nextBoolean()));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term, random().nextBoolean()));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term, random().nextBoolean()));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term, random().nextBoolean()));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term, random().nextBoolean()));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<BytesRef>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      LightAutomaton automaton = BasicOperations.determinize(new RegExp(reg, RegExp.NONE).toLightAutomaton());\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton());\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (Operations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      LightAutomaton automaton = BasicOperations.determinize(new RegExp(reg, RegExp.NONE).toLightAutomaton());\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton());\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (Operations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (BasicOperations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton(),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (Operations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton());\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (Operations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton(),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator();\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (Operations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton(),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (Operations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeeking().mjava","sourceNew":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton(),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      TermsEnum te = MultiTerms.getTerms(reader, \"field\").iterator();\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (Operations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** seeks to every term accepted by some automata */\n  public void testSeeking() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton(),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator();\n      ArrayList<BytesRef> unsortedTerms = new ArrayList<>(terms);\n      Collections.shuffle(unsortedTerms, random());\n\n      for (BytesRef term : unsortedTerms) {\n        if (Operations.run(automaton, term.utf8ToString())) {\n          // term is accepted\n          if (random().nextBoolean()) {\n            // seek exact\n            assertTrue(te.seekExact(term));\n          } else {\n            // seek ceil\n            assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n            assertEquals(term, te.term());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}