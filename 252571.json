{"path":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSanity(CacheEntry...).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSanity(CacheEntry...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSanity(CacheEntry...).mjava","sourceNew":"  /** \n   * Quick and dirty convenience method that instantiates an instance with \n   * \"good defaults\" and uses it to test the CacheEntrys\n   * @see #check\n   */\n  public static Insanity[] checkSanity(CacheEntry... cacheEntries) {\n    FieldCacheSanityChecker sanityChecker = new FieldCacheSanityChecker();\n    // doesn't check for interned\n    sanityChecker.setRamUsageEstimator(new RamUsageEstimator(false));\n    return sanityChecker.check(cacheEntries);\n  }\n\n","sourceOld":"  /** \n   * Quick and dirty convenience method that instantiates an instance with \n   * \"good defaults\" and uses it to test the CacheEntrys\n   * @see #check\n   */\n  public static Insanity[] checkSanity(CacheEntry... cacheEntries) {\n    FieldCacheSanityChecker sanityChecker = new FieldCacheSanityChecker();\n    // doesn't check for interned\n    sanityChecker.setRamUsageEstimator(new RamUsageEstimator(false));\n    return sanityChecker.check(cacheEntries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSanity(CacheEntry...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSanity(CacheEntry...).mjava","sourceNew":"  /** \n   * Quick and dirty convenience method that instantiates an instance with \n   * \"good defaults\" and uses it to test the CacheEntrys\n   * @see #check\n   */\n  public static Insanity[] checkSanity(CacheEntry... cacheEntries) {\n    FieldCacheSanityChecker sanityChecker = new FieldCacheSanityChecker();\n    sanityChecker.setRamUsageEstimator(true);\n    return sanityChecker.check(cacheEntries);\n  }\n\n","sourceOld":"  /** \n   * Quick and dirty convenience method that instantiates an instance with \n   * \"good defaults\" and uses it to test the CacheEntrys\n   * @see #check\n   */\n  public static Insanity[] checkSanity(CacheEntry... cacheEntries) {\n    FieldCacheSanityChecker sanityChecker = new FieldCacheSanityChecker();\n    // doesn't check for interned\n    sanityChecker.setRamUsageEstimator(new RamUsageEstimator(false));\n    return sanityChecker.check(cacheEntries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#checkSanity(CacheEntry...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSanity(CacheEntry...).mjava","sourceNew":"  /** \n   * Quick and dirty convenience method that instantiates an instance with \n   * \"good defaults\" and uses it to test the CacheEntrys\n   * @see #check\n   */\n  public static Insanity[] checkSanity(CacheEntry... cacheEntries) {\n    FieldCacheSanityChecker sanityChecker = new FieldCacheSanityChecker();\n    sanityChecker.setRamUsageEstimator(true);\n    return sanityChecker.check(cacheEntries);\n  }\n\n","sourceOld":"  /** \n   * Quick and dirty convenience method that instantiates an instance with \n   * \"good defaults\" and uses it to test the CacheEntrys\n   * @see #check\n   */\n  public static Insanity[] checkSanity(CacheEntry... cacheEntries) {\n    FieldCacheSanityChecker sanityChecker = new FieldCacheSanityChecker();\n    sanityChecker.setRamUsageEstimator(true);\n    return sanityChecker.check(cacheEntries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#checkSanity(CacheEntry...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSanity(CacheEntry...).mjava","sourceNew":"  /** \n   * Quick and dirty convenience method that instantiates an instance with \n   * \"good defaults\" and uses it to test the CacheEntrys\n   * @see #check\n   */\n  public static Insanity[] checkSanity(CacheEntry... cacheEntries) {\n    FieldCacheSanityChecker sanityChecker = new FieldCacheSanityChecker();\n    sanityChecker.setRamUsageEstimator(true);\n    return sanityChecker.check(cacheEntries);\n  }\n\n","sourceOld":"  /** \n   * Quick and dirty convenience method that instantiates an instance with \n   * \"good defaults\" and uses it to test the CacheEntrys\n   * @see #check\n   */\n  public static Insanity[] checkSanity(CacheEntry... cacheEntries) {\n    FieldCacheSanityChecker sanityChecker = new FieldCacheSanityChecker();\n    sanityChecker.setRamUsageEstimator(true);\n    return sanityChecker.check(cacheEntries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#checkSanity(CacheEntry...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSanity(CacheEntry...).mjava","sourceNew":"  /** \n   * Quick and dirty convenience method that instantiates an instance with \n   * \"good defaults\" and uses it to test the CacheEntrys\n   * @see #check\n   */\n  public static Insanity[] checkSanity(CacheEntry... cacheEntries) {\n    FieldCacheSanityChecker sanityChecker = new FieldCacheSanityChecker();\n    sanityChecker.setRamUsageEstimator(true);\n    return sanityChecker.check(cacheEntries);\n  }\n\n","sourceOld":"  /** \n   * Quick and dirty convenience method that instantiates an instance with \n   * \"good defaults\" and uses it to test the CacheEntrys\n   * @see #check\n   */\n  public static Insanity[] checkSanity(CacheEntry... cacheEntries) {\n    FieldCacheSanityChecker sanityChecker = new FieldCacheSanityChecker();\n    sanityChecker.setRamUsageEstimator(true);\n    return sanityChecker.check(cacheEntries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["dd6c9e9b1251473f465b0443b56046b2658402da","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["dd6c9e9b1251473f465b0443b56046b2658402da"],"56572ec06f1407c066d6b7399413178b33176cd8":["dd6c9e9b1251473f465b0443b56046b2658402da","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dd6c9e9b1251473f465b0443b56046b2658402da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dd6c9e9b1251473f465b0443b56046b2658402da":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}