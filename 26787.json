{"path":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","commits":[{"id":"d17d4fe0503a62f6522b1dd15204dd25cd231edf","date":1313599393,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], \n                        Field.Store.YES, Field.Index.NO));\n      doc.add(new Field(\"contents\", sortData[i][1], \n                        Field.Store.NO, Field.Index.ANALYZED));\n      if (sortData[i][2] != null) \n        doc.add(new Field(\"US\", usAnalyzer.reusableTokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new Field(\"France\", franceAnalyzer.reusableTokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new Field(\"Sweden\", swedenAnalyzer.reusableTokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new Field(\"Denmark\", denmarkAnalyzer.reusableTokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], \n                        Field.Store.YES, Field.Index.NO));\n      doc.add(new Field(\"contents\", sortData[i][1], \n                        Field.Store.NO, Field.Index.ANALYZED));\n      if (sortData[i][2] != null) \n        doc.add(new Field(\"US\", usAnalyzer.reusableTokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new Field(\"France\", franceAnalyzer.reusableTokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new Field(\"Sweden\", swedenAnalyzer.reusableTokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new Field(\"Denmark\", denmarkAnalyzer.reusableTokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", customType, sortData[i][0]));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.reusableTokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.reusableTokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.reusableTokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.reusableTokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], \n                        Field.Store.YES, Field.Index.NO));\n      doc.add(new Field(\"contents\", sortData[i][1], \n                        Field.Store.NO, Field.Index.ANALYZED));\n      if (sortData[i][2] != null) \n        doc.add(new Field(\"US\", usAnalyzer.reusableTokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new Field(\"France\", franceAnalyzer.reusableTokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new Field(\"Sweden\", swedenAnalyzer.reusableTokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new Field(\"Denmark\", denmarkAnalyzer.reusableTokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", customType, sortData[i][0]));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", customType, sortData[i][0]));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.reusableTokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.reusableTokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.reusableTokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.reusableTokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", customType, sortData[i][0]));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"d17d4fe0503a62f6522b1dd15204dd25cd231edf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d17d4fe0503a62f6522b1dd15204dd25cd231edf"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["69e043c521d4e8db770cc140c63f5ef51f03426a"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d17d4fe0503a62f6522b1dd15204dd25cd231edf":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d17d4fe0503a62f6522b1dd15204dd25cd231edf"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}