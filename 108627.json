{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","sourceNew":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","sourceOld":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","sourceNew":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","sourceOld":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06263309947a9804c326e35ce627be8768e123a4","date":1517286624,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","sourceNew":"  /**\n   * Send request to all replicas of a slice\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n    List<Replica> notLiveReplicas = new ArrayList<>();\n    for (Replica replica : slice.getReplicas()) {\n      if ((stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n        if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n          sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n        } else {\n          notLiveReplicas.add(replica);\n        }\n      }\n    }\n    return notLiveReplicas;\n  }\n\n","sourceOld":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","bugFix":["3bbb741690cdafda7f1f7549c26351c912917a69","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":4,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Send request to all replicas of a slice\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n    List<Replica> notLiveReplicas = new ArrayList<>();\n    for (Replica replica : slice.getReplicas()) {\n      if ((stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n        if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n          sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n        } else {\n          notLiveReplicas.add(replica);\n        }\n      }\n    }\n    return notLiveReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06263309947a9804c326e35ce627be8768e123a4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"69e6520a21709190413a63084ed135271aab1a7c":["06263309947a9804c326e35ce627be8768e123a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69e6520a21709190413a63084ed135271aab1a7c"]},"commit2Childs":{"06263309947a9804c326e35ce627be8768e123a4":["69e6520a21709190413a63084ed135271aab1a7c"],"b94236357aaa22b76c10629851fe4e376e0cea82":["06263309947a9804c326e35ce627be8768e123a4"],"69e6520a21709190413a63084ed135271aab1a7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}