{"path":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void matchHits (Searcher searcher, Sort sort)\n  throws IOException {\n      // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, 1000).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n        Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n        // store hits in TreeMap - TreeMap does not allow duplicates; existing entries are silently overwritten\n        for(int hitid=0;hitid<hitsByRank.length; ++hitid) {\n            resultMap.put(\n                    Integer.valueOf(hitsByRank[hitid].doc),  // Key:   Lucene Document ID\n                    Integer.valueOf(hitid));\t\t\t\t// Value: Hits-Objekt Index\n        }\n        \n        // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search (query, null, 1000, sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n        // besides the sorting both sets of hits must be identical\n        for(int hitid=0;hitid<resultSort.length; ++hitid) {\n            Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID from sorted search\n            if(!resultMap.containsKey(idHitDate)) {\n                log(\"ID \"+idHitDate+\" not found. Possibliy a duplicate.\");\n            }\n            assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the Map from the rank-sorted search\n            // every hit must appear once in both result sets --> remove it from the Map.\n            // At the end the Map must be empty!\n            resultMap.remove(idHitDate);\n        }\n        if(resultMap.size()==0) {\n            // log(\"All hits matched\");\n        } else {\n        log(\"Couldn't match \"+resultMap.size()+\" hits.\");\n        }\n        assertEquals(resultMap.size(), 0);\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void matchHits (Searcher searcher, Sort sort)\n  throws IOException {\n      // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, 1000).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n        Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n        // store hits in TreeMap - TreeMap does not allow duplicates; existing entries are silently overwritten\n        for(int hitid=0;hitid<hitsByRank.length; ++hitid) {\n            resultMap.put(\n                    Integer.valueOf(hitsByRank[hitid].doc),  // Key:   Lucene Document ID\n                    Integer.valueOf(hitid));\t\t\t\t// Value: Hits-Objekt Index\n        }\n        \n        // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search (query, null, 1000, sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n        // besides the sorting both sets of hits must be identical\n        for(int hitid=0;hitid<resultSort.length; ++hitid) {\n            Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID from sorted search\n            if(!resultMap.containsKey(idHitDate)) {\n                log(\"ID \"+idHitDate+\" not found. Possibliy a duplicate.\");\n            }\n            assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the Map from the rank-sorted search\n            // every hit must appear once in both result sets --> remove it from the Map.\n            // At the end the Map must be empty!\n            resultMap.remove(idHitDate);\n        }\n        if(resultMap.size()==0) {\n            // log(\"All hits matched\");\n        } else {\n        log(\"Couldn't match \"+resultMap.size()+\" hits.\");\n        }\n        assertEquals(resultMap.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void matchHits (Searcher searcher, Sort sort)\n  throws IOException {\n      // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n        Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n        // store hits in TreeMap - TreeMap does not allow duplicates; existing entries are silently overwritten\n        for(int hitid=0;hitid<hitsByRank.length; ++hitid) {\n            resultMap.put(\n                    Integer.valueOf(hitsByRank[hitid].doc),  // Key:   Lucene Document ID\n                    Integer.valueOf(hitid));\t\t\t\t// Value: Hits-Objekt Index\n        }\n        \n        // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search (query, null, Integer.MAX_VALUE, sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n        // besides the sorting both sets of hits must be identical\n        for(int hitid=0;hitid<resultSort.length; ++hitid) {\n            Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID from sorted search\n            if(!resultMap.containsKey(idHitDate)) {\n                log(\"ID \"+idHitDate+\" not found. Possibliy a duplicate.\");\n            }\n            assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the Map from the rank-sorted search\n            // every hit must appear once in both result sets --> remove it from the Map.\n            // At the end the Map must be empty!\n            resultMap.remove(idHitDate);\n        }\n        if(resultMap.size()==0) {\n            // log(\"All hits matched\");\n        } else {\n        log(\"Couldn't match \"+resultMap.size()+\" hits.\");\n        }\n        assertEquals(resultMap.size(), 0);\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void matchHits (Searcher searcher, Sort sort)\n  throws IOException {\n      // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, 1000).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n        Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n        // store hits in TreeMap - TreeMap does not allow duplicates; existing entries are silently overwritten\n        for(int hitid=0;hitid<hitsByRank.length; ++hitid) {\n            resultMap.put(\n                    Integer.valueOf(hitsByRank[hitid].doc),  // Key:   Lucene Document ID\n                    Integer.valueOf(hitid));\t\t\t\t// Value: Hits-Objekt Index\n        }\n        \n        // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search (query, null, 1000, sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n        // besides the sorting both sets of hits must be identical\n        for(int hitid=0;hitid<resultSort.length; ++hitid) {\n            Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID from sorted search\n            if(!resultMap.containsKey(idHitDate)) {\n                log(\"ID \"+idHitDate+\" not found. Possibliy a duplicate.\");\n            }\n            assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the Map from the rank-sorted search\n            // every hit must appear once in both result sets --> remove it from the Map.\n            // At the end the Map must be empty!\n            resultMap.remove(idHitDate);\n        }\n        if(resultMap.size()==0) {\n            // log(\"All hits matched\");\n        } else {\n        log(\"Couldn't match \"+resultMap.size()+\" hits.\");\n        }\n        assertEquals(resultMap.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(Searcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void matchHits (Searcher searcher, Sort sort)\n  throws IOException {\n      // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n        Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n        // store hits in TreeMap - TreeMap does not allow duplicates; existing entries are silently overwritten\n        for(int hitid=0;hitid<hitsByRank.length; ++hitid) {\n            resultMap.put(\n                    Integer.valueOf(hitsByRank[hitid].doc),  // Key:   Lucene Document ID\n                    Integer.valueOf(hitid));\t\t\t\t// Value: Hits-Objekt Index\n        }\n        \n        // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search (query, null, Integer.MAX_VALUE, sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n        // besides the sorting both sets of hits must be identical\n        for(int hitid=0;hitid<resultSort.length; ++hitid) {\n            Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID from sorted search\n            if(!resultMap.containsKey(idHitDate)) {\n                log(\"ID \"+idHitDate+\" not found. Possibliy a duplicate.\");\n            }\n            assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the Map from the rank-sorted search\n            // every hit must appear once in both result sets --> remove it from the Map.\n            // At the end the Map must be empty!\n            resultMap.remove(idHitDate);\n        }\n        if(resultMap.size()==0) {\n            // log(\"All hits matched\");\n        } else {\n        log(\"Couldn't match \"+resultMap.size()+\" hits.\");\n        }\n        assertEquals(resultMap.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(Searcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void matchHits (Searcher searcher, Sort sort)\n  throws IOException {\n      // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n        Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n        // store hits in TreeMap - TreeMap does not allow duplicates; existing entries are silently overwritten\n        for(int hitid=0;hitid<hitsByRank.length; ++hitid) {\n            resultMap.put(\n                    Integer.valueOf(hitsByRank[hitid].doc),  // Key:   Lucene Document ID\n                    Integer.valueOf(hitid));\t\t\t\t// Value: Hits-Objekt Index\n        }\n        \n        // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search (query, null, Integer.MAX_VALUE, sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n        // besides the sorting both sets of hits must be identical\n        for(int hitid=0;hitid<resultSort.length; ++hitid) {\n            Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID from sorted search\n            if(!resultMap.containsKey(idHitDate)) {\n                log(\"ID \"+idHitDate+\" not found. Possibliy a duplicate.\");\n            }\n            assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the Map from the rank-sorted search\n            // every hit must appear once in both result sets --> remove it from the Map.\n            // At the end the Map must be empty!\n            resultMap.remove(idHitDate);\n        }\n        if(resultMap.size()==0) {\n            // log(\"All hits matched\");\n        } else {\n        log(\"Couldn't match \"+resultMap.size()+\" hits.\");\n        }\n        assertEquals(resultMap.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(IndexSearcher,Sort).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(IndexSearcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(Searcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","sourceNew":null,"sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(Searcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#matchHits(Searcher,Sort).mjava","sourceNew":null,"sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void matchHits(Searcher searcher, Sort sort) throws IOException {\n    // make a query without sorting first\n    ScoreDoc[] hitsByRank = searcher.search(query, null, Integer.MAX_VALUE).scoreDocs;\n    checkHits(hitsByRank, \"Sort by rank: \"); // check for duplicates\n    Map<Integer,Integer> resultMap = new TreeMap<Integer,Integer>();\n    // store hits in TreeMap - TreeMap does not allow duplicates; existing\n    // entries are silently overwritten\n    for (int hitid = 0; hitid < hitsByRank.length; ++hitid) {\n      resultMap.put(Integer.valueOf(hitsByRank[hitid].doc), // Key: Lucene\n                                                            // Document ID\n          Integer.valueOf(hitid)); // Value: Hits-Objekt Index\n    }\n    \n    // now make a query using the sort criteria\n    ScoreDoc[] resultSort = searcher.search(query, null, Integer.MAX_VALUE,\n        sort).scoreDocs;\n    checkHits(resultSort, \"Sort by custom criteria: \"); // check for duplicates\n    \n    // besides the sorting both sets of hits must be identical\n    for (int hitid = 0; hitid < resultSort.length; ++hitid) {\n      Integer idHitDate = Integer.valueOf(resultSort[hitid].doc); // document ID\n                                                                  // from sorted\n                                                                  // search\n      if (!resultMap.containsKey(idHitDate)) {\n        log(\"ID \" + idHitDate + \" not found. Possibliy a duplicate.\");\n      }\n      assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the\n                                                    // Map from the rank-sorted\n                                                    // search\n      // every hit must appear once in both result sets --> remove it from the\n      // Map.\n      // At the end the Map must be empty!\n      resultMap.remove(idHitDate);\n    }\n    if (resultMap.size() == 0) {\n      // log(\"All hits matched\");\n    } else {\n      log(\"Couldn't match \" + resultMap.size() + \" hits.\");\n    }\n    assertEquals(resultMap.size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["2aafd88401639311b0404e67c94e829e123a0e45"],"70ad682703b8585f5d0a637efec044d57ec05efb":["c084e47df29de3330311d69dabf515ceaa989512","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["c084e47df29de3330311d69dabf515ceaa989512"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2aafd88401639311b0404e67c94e829e123a0e45":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["2aafd88401639311b0404e67c94e829e123a0e45","c084e47df29de3330311d69dabf515ceaa989512"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["5f4e87790277826a2aea119328600dfb07761f32","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","5f4e87790277826a2aea119328600dfb07761f32"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2aafd88401639311b0404e67c94e829e123a0e45":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2aafd88401639311b0404e67c94e829e123a0e45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}