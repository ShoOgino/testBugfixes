{"path":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","sourceNew":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d91b7936af3081e704512ac1234340133e59904","date":1332109642,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","sourceNew":"  /** Change the buffer size used by this IndexInput */\n  public final void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af9ce763a9d61cb88781e638d593430b71efa7dc","date":1586259009,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","sourceNew":"  /** Change the buffer size used by this IndexInput */\n  public final void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.capacity(): \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.capacity() : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        ByteBuffer newBuffer = ByteBuffer.allocate(newSize);\n        assert newBuffer.order() == ByteOrder.BIG_ENDIAN;\n        if (buffer.remaining() > newBuffer.capacity()) {\n          buffer.limit(buffer.position() + newBuffer.capacity());\n        }\n        assert buffer.remaining() <= newBuffer.capacity();\n        newBuffer.put(buffer);\n        newBuffer.flip();\n        buffer = newBuffer;\n      }\n    }\n  }\n\n","sourceOld":"  /** Change the buffer size used by this IndexInput */\n  public final void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"114dc0f0d59ad907d74b3d745b2cde6d645265a4","date":1586269293,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","sourceNew":"  /** Change the buffer size used by this IndexInput */\n  public final void setBufferSize(int newSize) {\n    assert buffer == EMPTY_BYTEBUFFER || bufferSize == buffer.capacity(): \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.capacity() : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        ByteBuffer newBuffer = ByteBuffer.allocate(newSize);\n        assert newBuffer.order() == ByteOrder.BIG_ENDIAN;\n        if (buffer.remaining() > newBuffer.capacity()) {\n          buffer.limit(buffer.position() + newBuffer.capacity());\n        }\n        assert buffer.remaining() <= newBuffer.capacity();\n        newBuffer.put(buffer);\n        newBuffer.flip();\n        buffer = newBuffer;\n      }\n    }\n  }\n\n","sourceOld":"  /** Change the buffer size used by this IndexInput */\n  public final void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.capacity(): \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.capacity() : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        ByteBuffer newBuffer = ByteBuffer.allocate(newSize);\n        assert newBuffer.order() == ByteOrder.BIG_ENDIAN;\n        if (buffer.remaining() > newBuffer.capacity()) {\n          buffer.limit(buffer.position() + newBuffer.capacity());\n        }\n        assert buffer.remaining() <= newBuffer.capacity();\n        newBuffer.put(buffer);\n        newBuffer.flip();\n        buffer = newBuffer;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8287113ecd052d777e27480ac3688b047386cee2","date":1586273081,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","sourceNew":"  /** Change the buffer size used by this IndexInput */\n  public final void setBufferSize(int newSize) {\n    assert buffer == EMPTY_BYTEBUFFER || bufferSize == buffer.capacity(): \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.capacity() : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != EMPTY_BYTEBUFFER) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        ByteBuffer newBuffer = ByteBuffer.allocate(newSize);\n        assert newBuffer.order() == ByteOrder.BIG_ENDIAN;\n        if (buffer.remaining() > newBuffer.capacity()) {\n          buffer.limit(buffer.position() + newBuffer.capacity());\n        }\n        assert buffer.remaining() <= newBuffer.capacity();\n        newBuffer.put(buffer);\n        newBuffer.flip();\n        buffer = newBuffer;\n      }\n    }\n  }\n\n","sourceOld":"  /** Change the buffer size used by this IndexInput */\n  public final void setBufferSize(int newSize) {\n    assert buffer == EMPTY_BYTEBUFFER || bufferSize == buffer.capacity(): \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.capacity() : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        ByteBuffer newBuffer = ByteBuffer.allocate(newSize);\n        assert newBuffer.order() == ByteOrder.BIG_ENDIAN;\n        if (buffer.remaining() > newBuffer.capacity()) {\n          buffer.limit(buffer.position() + newBuffer.capacity());\n        }\n        assert buffer.remaining() <= newBuffer.capacity();\n        newBuffer.put(buffer);\n        newBuffer.flip();\n        buffer = newBuffer;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c924ed848363114bc21dd13c3a1953c42aefb554","date":1586956211,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","sourceNew":null,"sourceOld":"  /** Change the buffer size used by this IndexInput */\n  public final void setBufferSize(int newSize) {\n    assert buffer == EMPTY_BYTEBUFFER || bufferSize == buffer.capacity(): \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.capacity() : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != EMPTY_BYTEBUFFER) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        ByteBuffer newBuffer = ByteBuffer.allocate(newSize);\n        assert newBuffer.order() == ByteOrder.BIG_ENDIAN;\n        if (buffer.remaining() > newBuffer.capacity()) {\n          buffer.limit(buffer.position() + newBuffer.capacity());\n        }\n        assert buffer.remaining() <= newBuffer.capacity();\n        newBuffer.put(buffer);\n        newBuffer.flip();\n        buffer = newBuffer;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c924ed848363114bc21dd13c3a1953c42aefb554":["8287113ecd052d777e27480ac3688b047386cee2"],"af9ce763a9d61cb88781e638d593430b71efa7dc":["7d91b7936af3081e704512ac1234340133e59904"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d91b7936af3081e704512ac1234340133e59904":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8287113ecd052d777e27480ac3688b047386cee2":["114dc0f0d59ad907d74b3d745b2cde6d645265a4"],"114dc0f0d59ad907d74b3d745b2cde6d645265a4":["af9ce763a9d61cb88781e638d593430b71efa7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c924ed848363114bc21dd13c3a1953c42aefb554"]},"commit2Childs":{"c924ed848363114bc21dd13c3a1953c42aefb554":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af9ce763a9d61cb88781e638d593430b71efa7dc":["114dc0f0d59ad907d74b3d745b2cde6d645265a4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7d91b7936af3081e704512ac1234340133e59904"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7d91b7936af3081e704512ac1234340133e59904":["af9ce763a9d61cb88781e638d593430b71efa7dc"],"8287113ecd052d777e27480ac3688b047386cee2":["c924ed848363114bc21dd13c3a1953c42aefb554"],"114dc0f0d59ad907d74b3d745b2cde6d645265a4":["8287113ecd052d777e27480ac3688b047386cee2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}