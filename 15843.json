{"path":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"/dev/null","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    assert merge.registerDone;\n\n    final SegmentInfos sourceSegments = merge.segments;\n    final SegmentInfos sourceSegmentsClone = merge.segmentsClone;\n    final int end = sourceSegments.size();\n    for(int i=0;i<end;i++)\n      mergingSegments.remove(sourceSegments.info(i));\n    merge.registerDone = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c519d40a4bec0e8867dd17d54f04bb67012e4fc8","8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6a1f29c9b1051488fd5fa7d56c98db5f4388408","date":1196281221,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    assert merge.registerDone;\n\n    final SegmentInfos sourceSegments = merge.segments;\n    final int end = sourceSegments.size();\n    for(int i=0;i<end;i++)\n      mergingSegments.remove(sourceSegments.info(i));\n    merge.registerDone = false;\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    assert merge.registerDone;\n\n    final SegmentInfos sourceSegments = merge.segments;\n    final SegmentInfos sourceSegmentsClone = merge.segmentsClone;\n    final int end = sourceSegments.size();\n    for(int i=0;i<end;i++)\n      mergingSegments.remove(sourceSegments.info(i));\n    merge.registerDone = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    assert merge.registerDone;\n\n    final SegmentInfos sourceSegments = merge.segments;\n    final int end = sourceSegments.size();\n    for(int i=0;i<end;i++)\n      mergingSegments.remove(sourceSegments.info(i));\n    mergingSegments.remove(merge.info);\n    merge.registerDone = false;\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    assert merge.registerDone;\n\n    final SegmentInfos sourceSegments = merge.segments;\n    final int end = sourceSegments.size();\n    for(int i=0;i<end;i++)\n      mergingSegments.remove(sourceSegments.info(i));\n    merge.registerDone = false;\n  }\n\n","bugFix":null,"bugIntro":["c519d40a4bec0e8867dd17d54f04bb67012e4fc8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n    \n    // Optimize, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    assert merge.registerDone;\n\n    final SegmentInfos sourceSegments = merge.segments;\n    final int end = sourceSegments.size();\n    for(int i=0;i<end;i++)\n      mergingSegments.remove(sourceSegments.info(i));\n    mergingSegments.remove(merge.info);\n    merge.registerDone = false;\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    assert merge.registerDone;\n\n    final SegmentInfos sourceSegments = merge.segments;\n    final int end = sourceSegments.size();\n    for(int i=0;i<end;i++)\n      mergingSegments.remove(sourceSegments.info(i));\n    mergingSegments.remove(merge.info);\n    merge.registerDone = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c519d40a4bec0e8867dd17d54f04bb67012e4fc8","date":1236338532,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n    \n    // Optimize, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final SegmentInfos sourceSegments = merge.segments;\n      final int end = sourceSegments.size();\n      for(int i=0;i<end;i++)\n        mergingSegments.remove(sourceSegments.info(i));\n      mergingSegments.remove(merge.info);\n      merge.registerDone = false;\n    }\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n    \n    // Optimize, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    assert merge.registerDone;\n\n    final SegmentInfos sourceSegments = merge.segments;\n    final int end = sourceSegments.size();\n    for(int i=0;i<end;i++)\n      mergingSegments.remove(sourceSegments.info(i));\n    mergingSegments.remove(merge.info);\n    merge.registerDone = false;\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf","e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n    \n    // Optimize, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final SegmentInfos sourceSegments = merge.segments;\n      final int end = sourceSegments.size();\n      for(int i=0;i<end;i++)\n        mergingSegments.remove(sourceSegments.info(i));\n      mergingSegments.remove(merge.info);\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n    \n    // Optimize, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final SegmentInfos sourceSegments = merge.segments;\n      final int end = sourceSegments.size();\n      for(int i=0;i<end;i++)\n        mergingSegments.remove(sourceSegments.info(i));\n      mergingSegments.remove(merge.info);\n      merge.registerDone = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#mergeFinish(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n    \n    // Optimize, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final SegmentInfos sourceSegments = merge.segments;\n      final int end = sourceSegments.size();\n      for(int i=0;i<end;i++)\n        mergingSegments.remove(sourceSegments.info(i));\n      mergingSegments.remove(merge.info);\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","sourceOld":"  /** Does fininishing for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance. */\n  final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOException {\n    \n    // Optimize, addIndexes or finishMerges may be waiting\n    // on merges to finish.\n    notifyAll();\n\n    if (merge.increfDone)\n      decrefMergeSegments(merge);\n\n    // It's possible we are called twice, eg if there was an\n    // exception inside mergeInit\n    if (merge.registerDone) {\n      final SegmentInfos sourceSegments = merge.segments;\n      final int end = sourceSegments.size();\n      for(int i=0;i<end;i++)\n        mergingSegments.remove(sourceSegments.info(i));\n      mergingSegments.remove(merge.info);\n      merge.registerDone = false;\n    }\n\n    runningMerges.remove(merge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c519d40a4bec0e8867dd17d54f04bb67012e4fc8":["2586f96f60332eb97ecd2934b0763791462568b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["b6a1f29c9b1051488fd5fa7d56c98db5f4388408"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["c519d40a4bec0e8867dd17d54f04bb67012e4fc8"],"2586f96f60332eb97ecd2934b0763791462568b2":["e82780afe6097066eb5befb86e9432f077667e3d"],"b6a1f29c9b1051488fd5fa7d56c98db5f4388408":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["b6a1f29c9b1051488fd5fa7d56c98db5f4388408"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"c519d40a4bec0e8867dd17d54f04bb67012e4fc8":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"e82780afe6097066eb5befb86e9432f077667e3d":["2586f96f60332eb97ecd2934b0763791462568b2"],"2586f96f60332eb97ecd2934b0763791462568b2":["c519d40a4bec0e8867dd17d54f04bb67012e4fc8"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6a1f29c9b1051488fd5fa7d56c98db5f4388408":["e82780afe6097066eb5befb86e9432f077667e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}