{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#doTestCollectionWatchWithNodeShutdown(boolean).mjava","commits":[{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":1,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#doTestCollectionWatchWithNodeShutdown(boolean).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  private void doTestCollectionWatchWithNodeShutdown(final boolean shutdownUnusedNode)\n    throws Exception {\n    \n    CloudSolrClient client = cluster.getSolrClient();\n\n    // note: one node in our cluster is unsed by collection\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", CLUSTER_SIZE, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, CLUSTER_SIZE, 1));\n\n    final JettySolrRunner extraJetty = cluster.startJettySolrRunner();\n    final JettySolrRunner jettyToShutdown\n      = shutdownUnusedNode ? extraJetty : cluster.getJettySolrRunners().get(0);\n    final int expectedNodesWithActiveReplicas = CLUSTER_SIZE - (shutdownUnusedNode ? 0 : 1);\n    \n    cluster.waitForAllNodes(MAX_WAIT_TIMEOUT);\n    \n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodesWithActiveReplicas = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodesWithActiveReplicas++;\n        }\n      }\n      if (liveNodes.size() == CLUSTER_SIZE\n          && expectedNodesWithActiveReplicas == nodesWithActiveReplicas) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(jettyToShutdown);\n    cluster.waitForJettyToStop(jettyToShutdown);\n    \n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\",\n            MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  //Commented 14-Oct-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    JettySolrRunner j = cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    cluster.waitForJettyToStop(j);\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b366e7dd3172289251a86be96031af4002cd19c"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}