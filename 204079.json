{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random);\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(\"UTF-8\");\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random);\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(\"UTF-8\");\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(\"UTF-8\");\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random);\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(\"UTF-8\");\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(\"UTF-8\");\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(\"UTF-8\");\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    LightAutomaton lex = BasicOperations.unionLight(automata);\n    lex = BasicOperations.determinize(lex);\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    Automaton lex = Operations.union(automata);\n    lex = Operations.determinize(lex);\n    assertTrue(Operations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(Operations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    LightAutomaton lex = BasicOperations.unionLight(automata);\n    lex = BasicOperations.determinize(lex);\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    Automaton lex = Operations.union(automata);\n    lex = Operations.determinize(lex);\n    assertTrue(Operations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(Operations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    final Automaton lex = BasicOperations.union(automata);\n    lex.determinize();\n    assertTrue(SpecialOperations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(BasicOperations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    Automaton lex = Operations.union(automata);\n    lex = Operations.determinize(lex, 1000000);\n    assertTrue(Operations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(Operations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex, false, 1000000);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    Automaton lex = Operations.union(automata);\n    lex = Operations.determinize(lex);\n    assertTrue(Operations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(Operations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#assertLexicon().mjava","sourceNew":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    Automaton lex = Operations.union(automata);\n    lex = Operations.determinize(lex, 1000000);\n    assertTrue(Operations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(Operations.run(lex, s));\n    }\n    if (TEST_NIGHTLY) {\n      // TODO: very wasteful of RAM to do this without minimizing first.\n      final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex, false, 1000000);\n      for (String s : terms) {\n        byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n        assertTrue(lexByte.run(bytes, 0, bytes.length));\n      }\n    }\n  }\n\n","sourceOld":"  public void assertLexicon() throws Exception {\n    Collections.shuffle(automata, random());\n    Automaton lex = Operations.union(automata);\n    lex = Operations.determinize(lex, 1000000);\n    assertTrue(Operations.isFinite(lex));\n    for (String s : terms) {\n      assertTrue(Operations.run(lex, s));\n    }\n    final ByteRunAutomaton lexByte = new ByteRunAutomaton(lex, false, 1000000);\n    for (String s : terms) {\n      byte bytes[] = s.getBytes(StandardCharsets.UTF_8);\n      assertTrue(lexByte.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","7d89d7e4e5101347833eea558851bf4209218619"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["7d89d7e4e5101347833eea558851bf4209218619"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7d89d7e4e5101347833eea558851bf4209218619":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5c84485629d80d203608e8975a1139de9933cc38":["7d89d7e4e5101347833eea558851bf4209218619","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}