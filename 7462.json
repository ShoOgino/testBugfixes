{"path":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Map[String,Collection[Object]]).mjava","commits":[{"id":"07d695a14a1938b01a5d4ab68b3c815eb061da94","date":1415146902,"type":1,"author":"Anshum Gupta","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Map[String,Collection[Object]]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Map[String,ArrayList[String]]).mjava","sourceNew":"  private PriorityQueue<ScoreTerm> retrieveTerms(Map<String, Collection<Object>> fields) throws \n      IOException {\n    HashMap<String,Int> termFreqMap = new HashMap();\n    for (String fieldName : fieldNames) {\n\n      for (String field : fields.keySet()) {\n        Collection<Object> fieldValues = fields.get(field);\n        for(Object fieldValue:fieldValues) {\n          if (fieldValue != null) {\n            addTermFrequencies(new StringReader(String.valueOf(fieldValue)), termFreqMap,\n                fieldName);\n          }\n        }\n      }\n    }\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  private PriorityQueue<ScoreTerm> retrieveTerms(Map<String, ArrayList<String>> fields) throws \n      IOException {\n    HashMap<String,Int> termFreqMap = new HashMap();\n    for (String fieldName : fieldNames) {\n\n      for (String field : fields.keySet()) {\n        ArrayList<String> fieldValues = fields.get(field);\n        for(String fieldValue:fieldValues) {\n          if (fieldValue != null) {\n            addTermFrequencies(new StringReader(fieldValue), termFreqMap,\n                fieldName);\n          }\n        }\n      }\n    }\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"655260340014c640e7d0f9a7a7ea1f00f36f65e5","date":1436227523,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Map[String,Collection[Object]]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Map[String,Collection[Object]]).mjava","sourceNew":"  private PriorityQueue<ScoreTerm> retrieveTerms(Map<String, Collection<Object>> fields) throws \n      IOException {\n    HashMap<String,Int> termFreqMap = new HashMap();\n    for (String fieldName : fieldNames) {\n      for (String field : fields.keySet()) {\n        Collection<Object> fieldValues = fields.get(field);\n        if(fieldValues == null)\n          continue;\n        for(Object fieldValue:fieldValues) {\n          if (fieldValue != null) {\n            addTermFrequencies(new StringReader(String.valueOf(fieldValue)), termFreqMap,\n                fieldName);\n          }\n        }\n      }\n    }\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  private PriorityQueue<ScoreTerm> retrieveTerms(Map<String, Collection<Object>> fields) throws \n      IOException {\n    HashMap<String,Int> termFreqMap = new HashMap();\n    for (String fieldName : fieldNames) {\n\n      for (String field : fields.keySet()) {\n        Collection<Object> fieldValues = fields.get(field);\n        for(Object fieldValue:fieldValues) {\n          if (fieldValue != null) {\n            addTermFrequencies(new StringReader(String.valueOf(fieldValue)), termFreqMap,\n                fieldName);\n          }\n        }\n      }\n    }\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":["07d695a14a1938b01a5d4ab68b3c815eb061da94"],"bugIntro":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dc707eb4c159b3029aac235f5f36bb3c7b58ee4","date":1439660917,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Map[String,Collection[Object]]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Map[String,Collection[Object]]).mjava","sourceNew":"  private PriorityQueue<ScoreTerm> retrieveTerms(Map<String, Collection<Object>> fields) throws \n      IOException {\n    HashMap<String,Int> termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      for (String field : fields.keySet()) {\n        Collection<Object> fieldValues = fields.get(field);\n        if(fieldValues == null)\n          continue;\n        for(Object fieldValue:fieldValues) {\n          if (fieldValue != null) {\n            addTermFrequencies(new StringReader(String.valueOf(fieldValue)), termFreqMap,\n                fieldName);\n          }\n        }\n      }\n    }\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  private PriorityQueue<ScoreTerm> retrieveTerms(Map<String, Collection<Object>> fields) throws \n      IOException {\n    HashMap<String,Int> termFreqMap = new HashMap();\n    for (String fieldName : fieldNames) {\n      for (String field : fields.keySet()) {\n        Collection<Object> fieldValues = fields.get(field);\n        if(fieldValues == null)\n          continue;\n        for(Object fieldValue:fieldValues) {\n          if (fieldValue != null) {\n            addTermFrequencies(new StringReader(String.valueOf(fieldValue)), termFreqMap,\n                fieldName);\n          }\n        }\n      }\n    }\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":["e562682007e295029696e354ac6947531b083c79"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e562682007e295029696e354ac6947531b083c79","date":1459152450,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Map[String,Collection[Object]]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Map[String,Collection[Object]]).mjava","sourceNew":"  private PriorityQueue<ScoreTerm> retrieveTerms(Map<String, Collection<Object>> field2fieldValues) throws\n      IOException {\n    Map<String, Map<String, Int>> field2termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      for (String field : field2fieldValues.keySet()) {\n        Collection<Object> fieldValues = field2fieldValues.get(field);\n        if(fieldValues == null)\n          continue;\n        for(Object fieldValue:fieldValues) {\n          if (fieldValue != null) {\n            addTermFrequencies(new StringReader(String.valueOf(fieldValue)), field2termFreqMap,\n                fieldName);\n          }\n        }\n      }\n    }\n    return createQueue(field2termFreqMap);\n  }\n\n","sourceOld":"  private PriorityQueue<ScoreTerm> retrieveTerms(Map<String, Collection<Object>> fields) throws \n      IOException {\n    HashMap<String,Int> termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      for (String field : fields.keySet()) {\n        Collection<Object> fieldValues = fields.get(field);\n        if(fieldValues == null)\n          continue;\n        for(Object fieldValue:fieldValues) {\n          if (fieldValue != null) {\n            addTermFrequencies(new StringReader(String.valueOf(fieldValue)), termFreqMap,\n                fieldName);\n          }\n        }\n      }\n    }\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":["3dc707eb4c159b3029aac235f5f36bb3c7b58ee4","07d695a14a1938b01a5d4ab68b3c815eb061da94"],"bugIntro":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"303eba9db32cde4e6fbc4e51a44361ef1c302e6c","date":1553596029,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Map[String,Collection[Object]]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Map[String,Collection[Object]]).mjava","sourceNew":"  private PriorityQueue<ScoreTerm> retrieveTerms(Map<String, Collection<Object>> field2fieldValues) throws\n      IOException {\n    Map<String, Map<String, Int>> field2termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      Collection<Object> fieldValues = field2fieldValues.get(fieldName);\n      if (fieldValues == null)\n        continue;\n      for (Object fieldValue : fieldValues) {\n        if (fieldValue != null) {\n          addTermFrequencies(new StringReader(String.valueOf(fieldValue)), field2termFreqMap,\n              fieldName);\n        }\n      }\n    }\n    return createQueue(field2termFreqMap);\n  }\n\n","sourceOld":"  private PriorityQueue<ScoreTerm> retrieveTerms(Map<String, Collection<Object>> field2fieldValues) throws\n      IOException {\n    Map<String, Map<String, Int>> field2termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      for (String field : field2fieldValues.keySet()) {\n        Collection<Object> fieldValues = field2fieldValues.get(field);\n        if(fieldValues == null)\n          continue;\n        for(Object fieldValue:fieldValues) {\n          if (fieldValue != null) {\n            addTermFrequencies(new StringReader(String.valueOf(fieldValue)), field2termFreqMap,\n                fieldName);\n          }\n        }\n      }\n    }\n    return createQueue(field2termFreqMap);\n  }\n\n","bugFix":["e562682007e295029696e354ac6947531b083c79","655260340014c640e7d0f9a7a7ea1f00f36f65e5","07d695a14a1938b01a5d4ab68b3c815eb061da94"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"303eba9db32cde4e6fbc4e51a44361ef1c302e6c":["e562682007e295029696e354ac6947531b083c79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3dc707eb4c159b3029aac235f5f36bb3c7b58ee4":["655260340014c640e7d0f9a7a7ea1f00f36f65e5"],"e562682007e295029696e354ac6947531b083c79":["3dc707eb4c159b3029aac235f5f36bb3c7b58ee4"],"655260340014c640e7d0f9a7a7ea1f00f36f65e5":["07d695a14a1938b01a5d4ab68b3c815eb061da94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"07d695a14a1938b01a5d4ab68b3c815eb061da94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"303eba9db32cde4e6fbc4e51a44361ef1c302e6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07d695a14a1938b01a5d4ab68b3c815eb061da94"],"3dc707eb4c159b3029aac235f5f36bb3c7b58ee4":["e562682007e295029696e354ac6947531b083c79"],"e562682007e295029696e354ac6947531b083c79":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"655260340014c640e7d0f9a7a7ea1f00f36f65e5":["3dc707eb4c159b3029aac235f5f36bb3c7b58ee4"],"07d695a14a1938b01a5d4ab68b3c815eb061da94":["655260340014c640e7d0f9a7a7ea1f00f36f65e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}