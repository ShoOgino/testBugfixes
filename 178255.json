{"path":"src/java/org/apache/lucene/queryParser/FastCharStream#refill().mjava","commits":[{"id":"59959380043274dd52fb071840237c00dc8e57bb","date":1004577157,"type":0,"author":"Brian Goetz","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/FastCharStream#refill().mjava","pathOld":"/dev/null","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\t\t  \n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03ae70812bc33b0270c1366378b2c2da95fe86a6","date":1036648540,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/FastCharStream#refill().mjava","pathOld":"src/java/org/apache/lucene/queryParser/FastCharStream#refill().mjava","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\t\t  \n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/FastCharStream#refill().mjava","pathOld":"src/java/org/apache/lucene/queryParser/FastCharStream#refill().mjava","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59959380043274dd52fb071840237c00dc8e57bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["59959380043274dd52fb071840237c00dc8e57bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["03ae70812bc33b0270c1366378b2c2da95fe86a6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59959380043274dd52fb071840237c00dc8e57bb"],"59959380043274dd52fb071840237c00dc8e57bb":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}