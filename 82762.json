{"path":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","sourceNew":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final Query rewritten = super.rewrite(original);\n        final Set<Term> terms = new HashSet<Term>();\n        rewritten.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<Term>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n              termStatsCache.put(key, ent.getValue());\n            }\n          }\n        }\n\n        return rewritten;\n      }\n\n","sourceOld":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final Query rewritten = super.rewrite(original);\n        final Set<Term> terms = new HashSet<Term>();\n        rewritten.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<Term>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n              termStatsCache.put(key, ent.getValue());\n            }\n          }\n        }\n\n        return rewritten;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","sourceNew":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final Query rewritten = super.rewrite(original);\n        final Set<Term> terms = new HashSet<>();\n        rewritten.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n              termStatsCache.put(key, ent.getValue());\n            }\n          }\n        }\n\n        return rewritten;\n      }\n\n","sourceOld":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final Query rewritten = super.rewrite(original);\n        final Set<Term> terms = new HashSet<Term>();\n        rewritten.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<Term>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n              termStatsCache.put(key, ent.getValue());\n            }\n          }\n        }\n\n        return rewritten;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05c52ac194342b760b830342ee8423fcf00e54d0","date":1429197275,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","sourceNew":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        final Weight weight = localSearcher.createNormalizedWeight(original, true);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n              termStatsCache.put(key, ent.getValue());\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","sourceOld":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final Query rewritten = super.rewrite(original);\n        final Set<Term> terms = new HashSet<>();\n        rewritten.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n              termStatsCache.put(key, ent.getValue());\n            }\n          }\n        }\n\n        return rewritten;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","sourceNew":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        final Weight weight = localSearcher.createNormalizedWeight(original, true);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              if (ent.getValue() != null) {\n                final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n                termStatsCache.put(key, ent.getValue());\n              }\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","sourceOld":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        final Weight weight = localSearcher.createNormalizedWeight(original, true);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n              termStatsCache.put(key, ent.getValue());\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","bugFix":["226aae72c0326f4299c16280195bade4530de537"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","sourceNew":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        final Weight weight = localSearcher.createNormalizedWeight(original, ScoreMode.COMPLETE);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              if (ent.getValue() != null) {\n                final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n                termStatsCache.put(key, ent.getValue());\n              }\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","sourceOld":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        final Weight weight = localSearcher.createNormalizedWeight(original, true);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              if (ent.getValue() != null) {\n                final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n                termStatsCache.put(key, ent.getValue());\n              }\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","sourceNew":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        final Weight weight = localSearcher.createNormalizedWeight(original, ScoreMode.COMPLETE);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              if (ent.getValue() != null) {\n                final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n                termStatsCache.put(key, ent.getValue());\n              }\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","sourceOld":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        final Weight weight = localSearcher.createNormalizedWeight(original, true);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              if (ent.getValue() != null) {\n                final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n                termStatsCache.put(key, ent.getValue());\n              }\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","sourceNew":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        original = localSearcher.rewrite(original);\n        final Weight weight = localSearcher.createWeight(original, ScoreMode.COMPLETE, 1);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              if (ent.getValue() != null) {\n                final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n                termStatsCache.put(key, ent.getValue());\n              }\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","sourceOld":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        final Weight weight = localSearcher.createNormalizedWeight(original, ScoreMode.COMPLETE);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              if (ent.getValue() != null) {\n                final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n                termStatsCache.put(key, ent.getValue());\n              }\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","sourceNew":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        original = localSearcher.rewrite(original);\n        final Weight weight = localSearcher.createWeight(original, ScoreMode.COMPLETE, 1);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              if (ent.getValue() != null) {\n                final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n                termStatsCache.put(key, ent.getValue());\n              }\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","sourceOld":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        final Weight weight = localSearcher.createNormalizedWeight(original, ScoreMode.COMPLETE);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              if (ent.getValue() != null) {\n                final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n                termStatsCache.put(key, ent.getValue());\n              }\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","sourceNew":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        original = localSearcher.rewrite(original);\n        final Set<Term> terms = new HashSet<>();\n        original.visit(QueryVisitor.termCollector(terms));\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              if (ent.getValue() != null) {\n                final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n                termStatsCache.put(key, ent.getValue());\n              }\n            }\n          }\n        }\n\n        return original;\n      }\n\n","sourceOld":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final IndexSearcher localSearcher = new IndexSearcher(getIndexReader());\n        original = localSearcher.rewrite(original);\n        final Weight weight = localSearcher.createWeight(original, ScoreMode.COMPLETE, 1);\n        final Set<Term> terms = new HashSet<>();\n        weight.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              if (ent.getValue() != null) {\n                final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n                termStatsCache.put(key, ent.getValue());\n              }\n            }\n          }\n        }\n\n        return weight.getQuery();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"05c52ac194342b760b830342ee8423fcf00e54d0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["05c52ac194342b760b830342ee8423fcf00e54d0"],"417142ff08fda9cf0b72d5133e63097a166c6458":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["05c52ac194342b760b830342ee8423fcf00e54d0"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"05c52ac194342b760b830342ee8423fcf00e54d0":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}