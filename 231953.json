{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int,CodecProvider).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}, and specified {@link CodecProvider}.\n   *  You should pass readOnly=true, since it gives much\n   *  better concurrent performance, unless you intend to do\n   *  write operations (delete documents or change norms)\n   *  with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @param codecs CodecProvider to use when opening index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, codecs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7","date":1294253125,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int,CodecProvider).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}, and specified {@link CodecProvider}.\n   *  You should pass readOnly=true, since it gives much\n   *  better concurrent performance, unless you intend to do\n   *  write operations (delete documents or change norms)\n   *  with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @param codecs CodecProvider to use when opening index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, codecs);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}, and specified {@link CodecProvider}.\n   *  You should pass readOnly=true, since it gives much\n   *  better concurrent performance, unless you intend to do\n   *  write operations (delete documents or change norms)\n   *  with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @param codecs CodecProvider to use when opening index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, codecs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int,CodecProvider).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}, and specified {@link CodecProvider}.\n   *  You should pass readOnly=true, since it gives much\n   *  better concurrent performance, unless you intend to do\n   *  write operations (delete documents or change norms)\n   *  with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @param codecs CodecProvider to use when opening index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, codecs);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}, and specified {@link CodecProvider}.\n   *  You should pass readOnly=true, since it gives much\n   *  better concurrent performance, unless you intend to do\n   *  write operations (delete documents or change norms)\n   *  with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @param codecs CodecProvider to use when opening index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, codecs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int,CodecProvider).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}, and specified {@link CodecProvider}.\n   *  You should pass readOnly=true, since it gives much\n   *  better concurrent performance, unless you intend to do\n   *  write operations (delete documents or change norms)\n   *  with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @param codecs CodecProvider to use when opening index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, codecs);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}, and specified {@link CodecProvider}.\n   *  You should pass readOnly=true, since it gives much\n   *  better concurrent performance, unless you intend to do\n   *  write operations (delete documents or change norms)\n   *  with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @param codecs CodecProvider to use when opening index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, codecs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(Directory,IndexDeletionPolicy,boolean,int,CodecProvider).mjava","sourceNew":null,"sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, with a custom {@link\n   *  IndexDeletionPolicy}, and specified {@link CodecProvider}.\n   *  You should pass readOnly=true, since it gives much\n   *  better concurrent performance, unless you intend to do\n   *  write operations (delete documents or change norms)\n   *  with the reader.\n   * @param directory the index directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @param codecs CodecProvider to use when opening index\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final Directory directory, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    return open(directory, deletionPolicy, null, readOnly, termInfosIndexDivisor, codecs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["7b91922b55d15444d554721b352861d028eb8278","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}