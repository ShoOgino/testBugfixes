{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#listCollection().mjava","commits":[{"id":"78ae724e55b07e7d158110151c0a7247cd54b460","date":1396011287,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#listCollection().mjava","pathOld":"/dev/null","sourceNew":"  private void listCollection() throws IOException, SolrServerException {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n      assertTrue(COLLECTION_NAME1 + \" was not found in list\", collections.contains(COLLECTION_NAME1));\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#listCollection().mjava","pathOld":"/dev/null","sourceNew":"  private void listCollection() throws IOException, SolrServerException {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n      assertTrue(COLLECTION_NAME1 + \" was not found in list\", collections.contains(COLLECTION_NAME1));\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#listCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#listCollection().mjava","sourceNew":"  private void listCollection() throws IOException, SolrServerException {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n      assertTrue(COLLECTION_NAME1 + \" was not found in list\", collections.contains(COLLECTION_NAME1));\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n\n  }\n\n","sourceOld":"  private void listCollection() throws IOException, SolrServerException {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n      assertTrue(COLLECTION_NAME1 + \" was not found in list\", collections.contains(COLLECTION_NAME1));\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#listCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#listCollection().mjava","sourceNew":"  private void listCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n      assertTrue(COLLECTION_NAME1 + \" was not found in list\", collections.contains(COLLECTION_NAME1));\n    }\n\n  }\n\n","sourceOld":"  private void listCollection() throws IOException, SolrServerException {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n      assertTrue(COLLECTION_NAME1 + \" was not found in list\", collections.contains(COLLECTION_NAME1));\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#listCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#listCollection().mjava","sourceNew":"  private void listCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n      assertTrue(COLLECTION_NAME1 + \" was not found in list\", collections.contains(COLLECTION_NAME1));\n    }\n\n  }\n\n","sourceOld":"  private void listCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n      assertTrue(COLLECTION_NAME1 + \" was not found in list\", collections.contains(COLLECTION_NAME1));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#listCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#listCollection().mjava","sourceNew":"  private void listCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n      assertTrue(COLLECTION_NAME1 + \" was not found in list\", collections.contains(COLLECTION_NAME1));\n    }\n\n  }\n\n","sourceOld":"  private void listCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n      assertTrue(COLLECTION_NAME1 + \" was not found in list\", collections.contains(COLLECTION_NAME1));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","78ae724e55b07e7d158110151c0a7247cd54b460"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cc3b13b430571c2e169f98fe38e1e7666f88522d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["78ae724e55b07e7d158110151c0a7247cd54b460"],"78ae724e55b07e7d158110151c0a7247cd54b460":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","78ae724e55b07e7d158110151c0a7247cd54b460"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"78ae724e55b07e7d158110151c0a7247cd54b460":["5eb2511ababf862ea11e10761c70ee560cd84510","bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}