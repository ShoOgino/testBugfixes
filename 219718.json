{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","sourceNew":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      FSDirectory d = ctor.newInstance(file);\n      if (lockFactory != null) {\n        d.setLockFactory(lockFactory);\n      }\n      return d;\n    } catch (Exception e) {\n      return FSDirectory.open(file);\n    }\n  }\n\n","sourceOld":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      FSDirectory d = ctor.newInstance(file);\n      if (lockFactory != null) {\n        d.setLockFactory(lockFactory);\n      }\n      return d;\n    } catch (Exception e) {\n      return FSDirectory.open(file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","sourceNew":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      FSDirectory d = ctor.newInstance(file);\n      if (lockFactory != null) {\n        d.setLockFactory(lockFactory);\n      }\n      return d;\n    } catch (Exception e) {\n      return FSDirectory.open(file);\n    }\n  }\n\n","sourceOld":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      FSDirectory d = ctor.newInstance(file);\n      if (lockFactory != null) {\n        d.setLockFactory(lockFactory);\n      }\n      return d;\n    } catch (Exception e) {\n      return FSDirectory.open(file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","sourceNew":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      FSDirectory d = ctor.newInstance(file);\n      if (lockFactory != null) {\n        d.setLockFactory(lockFactory);\n      }\n      return d;\n    } catch (Exception e) {\n      return FSDirectory.open(file);\n    }\n  }\n\n","sourceOld":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      FSDirectory d = ctor.newInstance(file);\n      if (lockFactory != null) {\n        d.setLockFactory(lockFactory);\n      }\n      return d;\n    } catch (Exception e) {\n      return FSDirectory.open(file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cf78aa65e7fc78bc3182422d81d3c12777e9b02","date":1304268913,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","sourceNew":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    FSDirectory d = null;\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      d = ctor.newInstance(file);\n      return d;\n    } catch (Exception e) {\n      d = FSDirectory.open(file);\n    }\n    if (lockFactory != null) {\n      d.setLockFactory(lockFactory);\n    }\n    return d;\n  }\n\n","sourceOld":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      FSDirectory d = ctor.newInstance(file);\n      if (lockFactory != null) {\n        d.setLockFactory(lockFactory);\n      }\n      return d;\n    } catch (Exception e) {\n      return FSDirectory.open(file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27ffacae4131b5c43600dd08226bfbee837bb8ae","date":1304271810,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","sourceNew":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    FSDirectory d = null;\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      d = ctor.newInstance(file);\n    } catch (Exception e) {\n      d = FSDirectory.open(file);\n    }\n    if (lockFactory != null) {\n      d.setLockFactory(lockFactory);\n    }\n    return d;\n  }\n\n","sourceOld":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    FSDirectory d = null;\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      d = ctor.newInstance(file);\n      return d;\n    } catch (Exception e) {\n      d = FSDirectory.open(file);\n    }\n    if (lockFactory != null) {\n      d.setLockFactory(lockFactory);\n    }\n    return d;\n  }\n\n","bugFix":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","sourceNew":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    FSDirectory d = null;\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      d = ctor.newInstance(file);\n    } catch (Exception e) {\n      d = FSDirectory.open(file);\n    }\n    if (lockFactory != null) {\n      d.setLockFactory(lockFactory);\n    }\n    return d;\n  }\n\n","sourceOld":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      FSDirectory d = ctor.newInstance(file);\n      if (lockFactory != null) {\n        d.setLockFactory(lockFactory);\n      }\n      return d;\n    } catch (Exception e) {\n      return FSDirectory.open(file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","sourceNew":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    FSDirectory d = null;\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      d = ctor.newInstance(file);\n    } catch (Exception e) {\n      d = FSDirectory.open(file);\n    }\n    if (lockFactory != null) {\n      d.setLockFactory(lockFactory);\n    }\n    return d;\n  }\n\n","sourceOld":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      FSDirectory d = ctor.newInstance(file);\n      if (lockFactory != null) {\n        d.setLockFactory(lockFactory);\n      }\n      return d;\n    } catch (Exception e) {\n      return FSDirectory.open(file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","sourceNew":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file)\n      throws IOException {\n    FSDirectory d = null;\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      d = ctor.newInstance(file);\n    } catch (Exception e) {\n      d = FSDirectory.open(file);\n    }\n    return d;\n  }\n\n","sourceOld":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    FSDirectory d = null;\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      d = ctor.newInstance(file);\n    } catch (Exception e) {\n      d = FSDirectory.open(file);\n    }\n    if (lockFactory != null) {\n      d.setLockFactory(lockFactory);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","sourceNew":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file)\n      throws IOException {\n    FSDirectory d = null;\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      d = ctor.newInstance(file);\n    } catch (Exception e) {\n      d = FSDirectory.open(file);\n    }\n    return d;\n  }\n\n","sourceOld":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    FSDirectory d = null;\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      d = ctor.newInstance(file);\n    } catch (Exception e) {\n      d = FSDirectory.open(file);\n    }\n    if (lockFactory != null) {\n      d.setLockFactory(lockFactory);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectoryImpl(Class[#-extends-FSDirectory],File,LockFactory).mjava","sourceNew":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file)\n      throws IOException {\n    FSDirectory d = null;\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      d = ctor.newInstance(file);\n    } catch (Exception e) {\n      d = FSDirectory.open(file);\n    }\n    return d;\n  }\n\n","sourceOld":"  private static Directory newFSDirectoryImpl(\n      Class<? extends FSDirectory> clazz, File file, LockFactory lockFactory)\n      throws IOException {\n    FSDirectory d = null;\n    try {\n      // Assuming every FSDirectory has a ctor(File), but not all may take a\n      // LockFactory too, so setting it afterwards.\n      Constructor<? extends FSDirectory> ctor = clazz.getConstructor(File.class);\n      d = ctor.newInstance(file);\n    } catch (Exception e) {\n      d = FSDirectory.open(file);\n    }\n    if (lockFactory != null) {\n      d.setLockFactory(lockFactory);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"efb7a19703a037c29e30440260d393500febc1f4":["27ffacae4131b5c43600dd08226bfbee837bb8ae"],"27ffacae4131b5c43600dd08226bfbee837bb8ae":["1cf78aa65e7fc78bc3182422d81d3c12777e9b02"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","27ffacae4131b5c43600dd08226bfbee837bb8ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","27ffacae4131b5c43600dd08226bfbee837bb8ae"],"1cf78aa65e7fc78bc3182422d81d3c12777e9b02":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["efb7a19703a037c29e30440260d393500febc1f4"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"efb7a19703a037c29e30440260d393500febc1f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"27ffacae4131b5c43600dd08226bfbee837bb8ae":["efb7a19703a037c29e30440260d393500febc1f4","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"1cf78aa65e7fc78bc3182422d81d3c12777e9b02":["27ffacae4131b5c43600dd08226bfbee837bb8ae"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233","1cf78aa65e7fc78bc3182422d81d3c12777e9b02","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}