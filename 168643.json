{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","commits":[{"id":"f8dfd02cf03e7a1810924be21cddfdde6d265c14","date":1273590676,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock(boolean).mjava","sourceNew":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      numBytesUsed += INT_BLOCK_SIZE*INT_NUM_BYTE;\n    } else\n      b = freeIntBlocks.remove(size-1);\n    return b;\n  }\n\n","sourceOld":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock(boolean trackAllocations) {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      // Always record a block allocated, even if\n      // trackAllocations is false.  This is necessary\n      // because this block will be shared between\n      // things that don't track allocations (term\n      // vectors) and things that do (freq/prox\n      // postings).\n      numBytesUsed += INT_BLOCK_SIZE*INT_NUM_BYTE;\n    } else\n      b = freeIntBlocks.remove(size-1);\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","sourceNew":null,"sourceOld":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      numBytesUsed += INT_BLOCK_SIZE*INT_NUM_BYTE;\n    } else\n      b = freeIntBlocks.remove(size-1);\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","pathOld":"/dev/null","sourceNew":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      numBytesUsed += INT_BLOCK_SIZE*INT_NUM_BYTE;\n    } else\n      b = freeIntBlocks.remove(size-1);\n    return b;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","sourceNew":null,"sourceOld":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      numBytesUsed += INT_BLOCK_SIZE*INT_NUM_BYTE;\n    } else\n      b = freeIntBlocks.remove(size-1);\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","sourceNew":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      bytesUsed.addAndGet(INT_BLOCK_SIZE*INT_NUM_BYTE);\n    } else\n      b = freeIntBlocks.remove(size-1);\n    return b;\n  }\n\n","sourceOld":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      numBytesUsed += INT_BLOCK_SIZE*INT_NUM_BYTE;\n    } else\n      b = freeIntBlocks.remove(size-1);\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","sourceNew":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      bytesUsed.addAndGet(INT_BLOCK_SIZE*RamUsageEstimator.NUM_BYTES_INT);\n    } else\n      b = freeIntBlocks.remove(size-1);\n    return b;\n  }\n\n","sourceOld":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      bytesUsed.addAndGet(INT_BLOCK_SIZE*INT_NUM_BYTE);\n    } else\n      b = freeIntBlocks.remove(size-1);\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","sourceNew":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      bytesUsed.addAndGet(INT_BLOCK_SIZE*RamUsageEstimator.NUM_BYTES_INT);\n    } else {\n      b = freeIntBlocks.remove(size-1);\n    }\n    return b;\n  }\n\n","sourceOld":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      bytesUsed.addAndGet(INT_BLOCK_SIZE*RamUsageEstimator.NUM_BYTES_INT);\n    } else\n      b = freeIntBlocks.remove(size-1);\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","sourceNew":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      bytesUsed.addAndGet(INT_BLOCK_SIZE*RamUsageEstimator.NUM_BYTES_INT);\n    } else {\n      b = freeIntBlocks.remove(size-1);\n    }\n    return b;\n  }\n\n","sourceOld":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      bytesUsed.addAndGet(INT_BLOCK_SIZE*INT_NUM_BYTE);\n    } else\n      b = freeIntBlocks.remove(size-1);\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","sourceNew":null,"sourceOld":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      bytesUsed.addAndGet(INT_BLOCK_SIZE*RamUsageEstimator.NUM_BYTES_INT);\n    } else {\n      b = freeIntBlocks.remove(size-1);\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","sourceNew":null,"sourceOld":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      bytesUsed.addAndGet(INT_BLOCK_SIZE*RamUsageEstimator.NUM_BYTES_INT);\n    } else {\n      b = freeIntBlocks.remove(size-1);\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getIntBlock().mjava","sourceNew":null,"sourceOld":"  /* Allocate another int[] from the shared pool */\n  synchronized int[] getIntBlock() {\n    final int size = freeIntBlocks.size();\n    final int[] b;\n    if (0 == size) {\n      b = new int[INT_BLOCK_SIZE];\n      bytesUsed.addAndGet(INT_BLOCK_SIZE*RamUsageEstimator.NUM_BYTES_INT);\n    } else {\n      b = freeIntBlocks.remove(size-1);\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["334c1175813aea771a71728cd2c4ee4754fd0603"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","8fe956d65251358d755c56f14fe8380644790e47"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"334c1175813aea771a71728cd2c4ee4754fd0603":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"8fe956d65251358d755c56f14fe8380644790e47":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014","8fe956d65251358d755c56f14fe8380644790e47"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}