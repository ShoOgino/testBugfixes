{"path":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#BitDocIdSetCachingWrapperFilter(Filter).mjava","commits":[{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#BitDocIdSetCachingWrapperFilter(Filter).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public BitDocIdSetCachingWrapperFilter(Filter filter) {\n    super();\n    this.filter = new CachingWrapperFilter(filter) {\n      @Override\n      protected BitDocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader) throws IOException {\n        if (docIdSet == null || docIdSet instanceof BitDocIdSet) {\n          // this is different from CachingWrapperFilter: even when the DocIdSet is\n          // cacheable, we convert it to a BitSet since we require all the\n          // cached filters to be BitSets\n          return (BitDocIdSet) docIdSet;\n        }\n\n        final DocIdSetIterator it = docIdSet.iterator();\n        if (it == null) {\n          return null;\n        }\n        BitDocIdSet.Builder builder = new BitDocIdSet.Builder(reader.maxDoc());\n        builder.or(it);\n        return builder.build();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#BitDocIdSetCachingWrapperFilter(Filter).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#BitDocIdSetCachingWrapperFilter(Filter).mjava","sourceNew":"  /** Sole constructor. */\n  public BitDocIdSetCachingWrapperFilter(Filter filter) {\n    super();\n    this.filter = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE) {\n      @Override\n      protected BitDocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader) throws IOException {\n        if (docIdSet == null || docIdSet instanceof BitDocIdSet) {\n          // this is different from CachingWrapperFilter: even when the DocIdSet is\n          // cacheable, we convert it to a BitSet since we require all the\n          // cached filters to be BitSets\n          return (BitDocIdSet) docIdSet;\n        }\n\n        final DocIdSetIterator it = docIdSet.iterator();\n        if (it == null) {\n          return null;\n        }\n        BitDocIdSet.Builder builder = new BitDocIdSet.Builder(reader.maxDoc());\n        builder.or(it);\n        return builder.build();\n      }\n    };\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BitDocIdSetCachingWrapperFilter(Filter filter) {\n    super();\n    this.filter = new CachingWrapperFilter(filter) {\n      @Override\n      protected BitDocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader) throws IOException {\n        if (docIdSet == null || docIdSet instanceof BitDocIdSet) {\n          // this is different from CachingWrapperFilter: even when the DocIdSet is\n          // cacheable, we convert it to a BitSet since we require all the\n          // cached filters to be BitSets\n          return (BitDocIdSet) docIdSet;\n        }\n\n        final DocIdSetIterator it = docIdSet.iterator();\n        if (it == null) {\n          return null;\n        }\n        BitDocIdSet.Builder builder = new BitDocIdSet.Builder(reader.maxDoc());\n        builder.or(it);\n        return builder.build();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#BitDocIdSetCachingWrapperFilter(Filter).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#BitDocIdSetCachingWrapperFilter(Filter).mjava","sourceNew":"  /** Wraps another filter's result and caches it into bitsets.\n   * @param filter Filter to cache results of\n   */\n  public BitDocIdSetCachingWrapperFilter(Filter filter) {\n    this.filter = filter;\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BitDocIdSetCachingWrapperFilter(Filter filter) {\n    super();\n    this.filter = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE) {\n      @Override\n      protected BitDocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader) throws IOException {\n        if (docIdSet == null || docIdSet instanceof BitDocIdSet) {\n          // this is different from CachingWrapperFilter: even when the DocIdSet is\n          // cacheable, we convert it to a BitSet since we require all the\n          // cached filters to be BitSets\n          return (BitDocIdSet) docIdSet;\n        }\n\n        final DocIdSetIterator it = docIdSet.iterator();\n        if (it == null) {\n          return null;\n        }\n        BitDocIdSet.Builder builder = new BitDocIdSet.Builder(reader.maxDoc());\n        builder.or(it);\n        return builder.build();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#BitDocIdSetCachingWrapperFilter(Filter).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#BitDocIdSetCachingWrapperFilter(Filter).mjava","sourceNew":"  /** Wraps another filter's result and caches it into bitsets.\n   * @param filter Filter to cache results of\n   */\n  public BitDocIdSetCachingWrapperFilter(Filter filter) {\n    this.filter = filter;\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BitDocIdSetCachingWrapperFilter(Filter filter) {\n    super();\n    this.filter = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE) {\n      @Override\n      protected BitDocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader) throws IOException {\n        if (docIdSet == null || docIdSet instanceof BitDocIdSet) {\n          // this is different from CachingWrapperFilter: even when the DocIdSet is\n          // cacheable, we convert it to a BitSet since we require all the\n          // cached filters to be BitSets\n          return (BitDocIdSet) docIdSet;\n        }\n\n        final DocIdSetIterator it = docIdSet.iterator();\n        if (it == null) {\n          return null;\n        }\n        BitDocIdSet.Builder builder = new BitDocIdSet.Builder(reader.maxDoc());\n        builder.or(it);\n        return builder.build();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#BitDocIdSetCachingWrapperFilter(Filter).mjava","sourceNew":null,"sourceOld":"  /** Wraps another filter's result and caches it into bitsets.\n   * @param filter Filter to cache results of\n   */\n  public BitDocIdSetCachingWrapperFilter(Filter filter) {\n    this.filter = filter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b3915945926c0bf7def01b0c504977709d3aed3":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b3915945926c0bf7def01b0c504977709d3aed3"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4b3915945926c0bf7def01b0c504977709d3aed3"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"4b3915945926c0bf7def01b0c504977709d3aed3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}