{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#copy(Reader,int,Mutable,int,int,int).mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#copy(Reader,int,Mutable,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy <code>src[srcPos:srcPos+len]</code> into\n   * <code>dest[destPos:destPos+len]</code> using at most <code>mem</code>\n   * bytes.\n   */\n  public static void copy(Reader src, int srcPos, Mutable dest, int destPos, int len, int mem) {\n    assert srcPos + len <= src.size();\n    assert destPos + len <= dest.size();\n    final int capacity = mem >>> 3;\n    if (capacity == 0) {\n      for (int i = 0; i < len; ++i) {\n        dest.set(destPos++, src.get(srcPos++));\n      }\n    } else {\n      // use bulk operations\n      long[] buf = new long[Math.min(capacity, len)];\n      int remaining = 0;\n      while (len > 0) {\n        final int read = src.get(srcPos, buf, remaining, Math.min(len, buf.length - remaining));\n        assert read > 0;\n        srcPos += read;\n        len -= read;\n        remaining += read;\n        final int written = dest.set(destPos, buf, 0, remaining);\n        assert written > 0;\n        destPos += written;\n        if (written < remaining) {\n          System.arraycopy(buf, written, buf, 0, remaining - written);\n        }\n        remaining -= written;\n      }\n      while (remaining > 0) {\n        final int written = dest.set(destPos, buf, 0, remaining);\n        remaining -= written;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de4347ab0fe69a9f7b94709da9f24119a07a3ceb","date":1359630917,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#copy(Reader,int,Mutable,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#copy(Reader,int,Mutable,int,int,int).mjava","sourceNew":"  /**\n   * Copy <code>src[srcPos:srcPos+len]</code> into\n   * <code>dest[destPos:destPos+len]</code> using at most <code>mem</code>\n   * bytes.\n   */\n  public static void copy(Reader src, int srcPos, Mutable dest, int destPos, int len, int mem) {\n    assert srcPos + len <= src.size();\n    assert destPos + len <= dest.size();\n    final int capacity = mem >>> 3;\n    if (capacity == 0) {\n      for (int i = 0; i < len; ++i) {\n        dest.set(destPos++, src.get(srcPos++));\n      }\n    } else {\n      // use bulk operations\n      long[] buf = new long[Math.min(capacity, len)];\n      int remaining = 0;\n      while (len > 0) {\n        final int read = src.get(srcPos, buf, remaining, Math.min(len, buf.length - remaining));\n        assert read > 0;\n        srcPos += read;\n        len -= read;\n        remaining += read;\n        final int written = dest.set(destPos, buf, 0, remaining);\n        assert written > 0;\n        destPos += written;\n        if (written < remaining) {\n          System.arraycopy(buf, written, buf, 0, remaining - written);\n        }\n        remaining -= written;\n      }\n      while (remaining > 0) {\n        final int written = dest.set(destPos, buf, 0, remaining);\n        destPos += written;\n        remaining -= written;\n        System.arraycopy(buf, written, buf, 0, remaining);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy <code>src[srcPos:srcPos+len]</code> into\n   * <code>dest[destPos:destPos+len]</code> using at most <code>mem</code>\n   * bytes.\n   */\n  public static void copy(Reader src, int srcPos, Mutable dest, int destPos, int len, int mem) {\n    assert srcPos + len <= src.size();\n    assert destPos + len <= dest.size();\n    final int capacity = mem >>> 3;\n    if (capacity == 0) {\n      for (int i = 0; i < len; ++i) {\n        dest.set(destPos++, src.get(srcPos++));\n      }\n    } else {\n      // use bulk operations\n      long[] buf = new long[Math.min(capacity, len)];\n      int remaining = 0;\n      while (len > 0) {\n        final int read = src.get(srcPos, buf, remaining, Math.min(len, buf.length - remaining));\n        assert read > 0;\n        srcPos += read;\n        len -= read;\n        remaining += read;\n        final int written = dest.set(destPos, buf, 0, remaining);\n        assert written > 0;\n        destPos += written;\n        if (written < remaining) {\n          System.arraycopy(buf, written, buf, 0, remaining - written);\n        }\n        remaining -= written;\n      }\n      while (remaining > 0) {\n        final int written = dest.set(destPos, buf, 0, remaining);\n        remaining -= written;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","date":1359670147,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#copy(Reader,int,Mutable,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#copy(Reader,int,Mutable,int,int,int).mjava","sourceNew":"  /**\n   * Copy <code>src[srcPos:srcPos+len]</code> into\n   * <code>dest[destPos:destPos+len]</code> using at most <code>mem</code>\n   * bytes.\n   */\n  public static void copy(Reader src, int srcPos, Mutable dest, int destPos, int len, int mem) {\n    assert srcPos + len <= src.size();\n    assert destPos + len <= dest.size();\n    final int capacity = mem >>> 3;\n    if (capacity == 0) {\n      for (int i = 0; i < len; ++i) {\n        dest.set(destPos++, src.get(srcPos++));\n      }\n    } else {\n      // use bulk operations\n      long[] buf = new long[Math.min(capacity, len)];\n      int remaining = 0;\n      while (len > 0) {\n        final int read = src.get(srcPos, buf, remaining, Math.min(len, buf.length - remaining));\n        assert read > 0;\n        srcPos += read;\n        len -= read;\n        remaining += read;\n        final int written = dest.set(destPos, buf, 0, remaining);\n        assert written > 0;\n        destPos += written;\n        if (written < remaining) {\n          System.arraycopy(buf, written, buf, 0, remaining - written);\n        }\n        remaining -= written;\n      }\n      while (remaining > 0) {\n        final int written = dest.set(destPos, buf, 0, remaining);\n        destPos += written;\n        remaining -= written;\n        System.arraycopy(buf, written, buf, 0, remaining);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy <code>src[srcPos:srcPos+len]</code> into\n   * <code>dest[destPos:destPos+len]</code> using at most <code>mem</code>\n   * bytes.\n   */\n  public static void copy(Reader src, int srcPos, Mutable dest, int destPos, int len, int mem) {\n    assert srcPos + len <= src.size();\n    assert destPos + len <= dest.size();\n    final int capacity = mem >>> 3;\n    if (capacity == 0) {\n      for (int i = 0; i < len; ++i) {\n        dest.set(destPos++, src.get(srcPos++));\n      }\n    } else {\n      // use bulk operations\n      long[] buf = new long[Math.min(capacity, len)];\n      int remaining = 0;\n      while (len > 0) {\n        final int read = src.get(srcPos, buf, remaining, Math.min(len, buf.length - remaining));\n        assert read > 0;\n        srcPos += read;\n        len -= read;\n        remaining += read;\n        final int written = dest.set(destPos, buf, 0, remaining);\n        assert written > 0;\n        destPos += written;\n        if (written < remaining) {\n          System.arraycopy(buf, written, buf, 0, remaining - written);\n        }\n        remaining -= written;\n      }\n      while (remaining > 0) {\n        final int written = dest.set(destPos, buf, 0, remaining);\n        remaining -= written;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f375a9203c9124207e176f4dc59bd8e832b239a0","date":1370270173,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#copy(Reader,int,Mutable,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#copy(Reader,int,Mutable,int,int,int).mjava","sourceNew":"  /**\n   * Copy <code>src[srcPos:srcPos+len]</code> into\n   * <code>dest[destPos:destPos+len]</code> using at most <code>mem</code>\n   * bytes.\n   */\n  public static void copy(Reader src, int srcPos, Mutable dest, int destPos, int len, int mem) {\n    assert srcPos + len <= src.size();\n    assert destPos + len <= dest.size();\n    final int capacity = mem >>> 3;\n    if (capacity == 0) {\n      for (int i = 0; i < len; ++i) {\n        dest.set(destPos++, src.get(srcPos++));\n      }\n    } else if (len > 0) {\n      // use bulk operations\n      final long[] buf = new long[Math.min(capacity, len)];\n      copy(src, srcPos, dest, destPos, len, buf);\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy <code>src[srcPos:srcPos+len]</code> into\n   * <code>dest[destPos:destPos+len]</code> using at most <code>mem</code>\n   * bytes.\n   */\n  public static void copy(Reader src, int srcPos, Mutable dest, int destPos, int len, int mem) {\n    assert srcPos + len <= src.size();\n    assert destPos + len <= dest.size();\n    final int capacity = mem >>> 3;\n    if (capacity == 0) {\n      for (int i = 0; i < len; ++i) {\n        dest.set(destPos++, src.get(srcPos++));\n      }\n    } else {\n      // use bulk operations\n      long[] buf = new long[Math.min(capacity, len)];\n      int remaining = 0;\n      while (len > 0) {\n        final int read = src.get(srcPos, buf, remaining, Math.min(len, buf.length - remaining));\n        assert read > 0;\n        srcPos += read;\n        len -= read;\n        remaining += read;\n        final int written = dest.set(destPos, buf, 0, remaining);\n        assert written > 0;\n        destPos += written;\n        if (written < remaining) {\n          System.arraycopy(buf, written, buf, 0, remaining - written);\n        }\n        remaining -= written;\n      }\n      while (remaining > 0) {\n        final int written = dest.set(destPos, buf, 0, remaining);\n        destPos += written;\n        remaining -= written;\n        System.arraycopy(buf, written, buf, 0, remaining);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de4347ab0fe69a9f7b94709da9f24119a07a3ceb":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":["747628bb19a950ac2141b16756bdce9a47e94cc2","de4347ab0fe69a9f7b94709da9f24119a07a3ceb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f375a9203c9124207e176f4dc59bd8e832b239a0":["de4347ab0fe69a9f7b94709da9f24119a07a3ceb"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f375a9203c9124207e176f4dc59bd8e832b239a0"]},"commit2Childs":{"de4347ab0fe69a9f7b94709da9f24119a07a3ceb":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","f375a9203c9124207e176f4dc59bd8e832b239a0"],"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"f375a9203c9124207e176f4dc59bd8e832b239a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["de4347ab0fe69a9f7b94709da9f24119a07a3ceb","b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}