{"path":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            ZkStateReader.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            ZkStateReader.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n            null, null, true));\n        props = props.plus(\"urlScheme\", \"https\");\n        zkStateReader.getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(props), true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n            null, null, true));\n        props = props.plus(\"urlScheme\", \"https\");\n        zkStateReader.getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(props), true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n            null, null, true));\n        props = props.plus(\"urlScheme\", \"https\");\n        zkStateReader.getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(props), true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#distribSetUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n            null, null, true));\n        props = props.plus(\"urlScheme\", \"https\");\n        zkStateReader.getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(props), true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n            null, null, true));\n        props = props.plus(\"urlScheme\", \"https\");\n        zkStateReader.getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(props), true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n            null, null, true));\n        props = props.plus(\"urlScheme\", \"https\");\n        zkStateReader.getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(props), true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n            null, null, true));\n        props = props.plus(\"urlScheme\", \"https\");\n        zkStateReader.getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(props), true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#distribSetUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n            null, null, true));\n        props = props.plus(\"urlScheme\", \"https\");\n        zkStateReader.getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(props), true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n            null, null, true));\n        props = props.plus(\"urlScheme\", \"https\");\n        zkStateReader.getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(props), true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#distribSetUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n            null, null, true));\n        props = props.plus(\"urlScheme\", \"https\");\n        zkStateReader.getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(props), true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    if (shardCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(shardCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      } catch (KeeperException.NodeExistsException e) {\n        ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n            null, null, true));\n        props = props.plus(\"urlScheme\", \"https\");\n        zkStateReader.getZkClient().setData(CLUSTER_PROPS, Utils.toJSON(props), true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["28288370235ed02234a64753cdbf0c6ec096304a"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["b693a83132c9e45afcd564fd65a25b60ed80388b","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["b693a83132c9e45afcd564fd65a25b60ed80388b","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}