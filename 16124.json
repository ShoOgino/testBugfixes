{"path":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,DirContext,String,boolean).mjava","commits":[{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,DirContext,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path,  DirContext dirContext, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,DirContext,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String,boolean).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path,  DirContext dirContext, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54f9a16329716fa08b653c53f1c3dfc6b284d2cc","date":1363905854,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,DirContext,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path unless forceNew,\n   * in which case a new Directory is returned. There is no need to call\n   * {@link #doneWithDirectory(Directory)} in this case - the old Directory\n   * will be closed when it's ref count hits 0.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path,  DirContext dirContext, String rawLockType,\n      boolean forceNew) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"]},"commit2Childs":{"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8917bfede3b4ca30f4305c1e391e9218959cd723","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}