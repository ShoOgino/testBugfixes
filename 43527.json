{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(DataOutput,int[],int,int,IntFunction[BytesRef]).mjava","commits":[{"id":"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9","date":1481155163,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(DataOutput,int[],int,int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","sourceNew":"  private void writeLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","sourceOld":"  private void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(DataOutput,int[],int,int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(IndexOutput,int[],int,int,IntFunction[BytesRef]).mjava","sourceNew":"  private void writeLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","sourceOld":"  protected void writeLeafBlockPackedValues(IndexOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d774afea15a18cc375fae2ffaa8319935d0a7b2a","date":1536414150,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(DataOutput,int[],int,int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(DataOutput,int[],int,int,IntFunction[BytesRef]).mjava","sourceNew":"  private void writeLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      if (numDims != 1) {\n        writeActualBounds(out, commonPrefixLengths, count, packedValues);\n      }\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","sourceOld":"  private void writeLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(DataOutput,int[],int,int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(DataOutput,int[],int,int,IntFunction[BytesRef]).mjava","sourceNew":"  private void writeLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      if (numIndexDims != 1) {\n        writeActualBounds(out, commonPrefixLengths, count, packedValues);\n      }\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","sourceOld":"  private void writeLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      if (numDims != 1) {\n        writeActualBounds(out, commonPrefixLengths, count, packedValues);\n      }\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b","date":1561536972,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLeafBlockPackedValues(DataOutput,int[],int,int,IntFunction[BytesRef]).mjava","sourceNew":null,"sourceOld":"  private void writeLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, int sortedDim, IntFunction<BytesRef> packedValues) throws IOException {\n    int prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\n    if (prefixLenSum == packedBytesLength) {\n      // all values in this block are equal\n      out.writeByte((byte) -1);\n    } else {\n      if (numIndexDims != 1) {\n        writeActualBounds(out, commonPrefixLengths, count, packedValues);\n      }\n      assert commonPrefixLengths[sortedDim] < bytesPerDim;\n      out.writeByte((byte) sortedDim);\n      int compressedByteOffset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n      commonPrefixLengths[sortedDim]++;\n      for (int i = 0; i < count; ) {\n        // do run-length compression on the byte at compressedByteOffset\n        int runLen = runLen(packedValues, i, Math.min(i + 0xff, count), compressedByteOffset);\n        assert runLen <= 0xff;\n        BytesRef first = packedValues.apply(i);\n        byte prefixByte = first.bytes[first.offset + compressedByteOffset];\n        out.writeByte(prefixByte);\n        out.writeByte((byte) runLen);\n        writeLeafBlockPackedValuesRange(out, commonPrefixLengths, i, i + runLen, packedValues);\n        i += runLen;\n        assert i <= count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6652c943595e92c187ee904c382863013eae28f":["d774afea15a18cc375fae2ffaa8319935d0a7b2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["f6652c943595e92c187ee904c382863013eae28f"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f6652c943595e92c187ee904c382863013eae28f":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9856095f7afb5a607bf5e65077615ed91273508c","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["f6652c943595e92c187ee904c382863013eae28f"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["9856095f7afb5a607bf5e65077615ed91273508c","d774afea15a18cc375fae2ffaa8319935d0a7b2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}