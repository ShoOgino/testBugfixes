{"path":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,WaitForState).mjava","commits":[{"id":"970a667af41fa94f5b9e55f7d08c90b51daf989d","date":1478330202,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,WaitForState).mjava","pathOld":"/dev/null","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl, WaitForState prepCmd)\n      throws SolrServerException, IOException, InterruptedException, ExecutionException {\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderBaseUrl).build()) {\n      client.setConnectionTimeout(10000);\n      client.setSoTimeout(10000);\n      HttpUriRequestResponse mrr = client.httpUriRequest(prepCmd);\n      prevSendPreRecoveryHttpUriRequest = mrr.httpUriRequest;\n\n      LOG.info(\"Sending prep recovery command to [{}]; [{}]\", leaderBaseUrl, prepCmd.toString());\n\n      mrr.future.get();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,WaitForState).mjava","pathOld":"/dev/null","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl, WaitForState prepCmd)\n      throws SolrServerException, IOException, InterruptedException, ExecutionException {\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderBaseUrl).build()) {\n      client.setConnectionTimeout(10000);\n      client.setSoTimeout(10000);\n      HttpUriRequestResponse mrr = client.httpUriRequest(prepCmd);\n      prevSendPreRecoveryHttpUriRequest = mrr.httpUriRequest;\n\n      LOG.info(\"Sending prep recovery command to [{}]; [{}]\", leaderBaseUrl, prepCmd.toString());\n\n      mrr.future.get();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7392b75d2c2f2aecf31188732a0764fe0dc74ade","date":1489420141,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,WaitForState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,WaitForState).mjava","sourceNew":"  final private void sendPrepRecoveryCmd(String leaderBaseUrl, WaitForState prepCmd)\n      throws SolrServerException, IOException, InterruptedException, ExecutionException {\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderBaseUrl).build()) {\n      client.setConnectionTimeout(10000);\n      client.setSoTimeout(10000);\n      HttpUriRequestResponse mrr = client.httpUriRequest(prepCmd);\n      prevSendPreRecoveryHttpUriRequest = mrr.httpUriRequest;\n\n      LOG.info(\"Sending prep recovery command to [{}]; [{}]\", leaderBaseUrl, prepCmd.toString());\n\n      mrr.future.get();\n    }\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl, WaitForState prepCmd)\n      throws SolrServerException, IOException, InterruptedException, ExecutionException {\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderBaseUrl).build()) {\n      client.setConnectionTimeout(10000);\n      client.setSoTimeout(10000);\n      HttpUriRequestResponse mrr = client.httpUriRequest(prepCmd);\n      prevSendPreRecoveryHttpUriRequest = mrr.httpUriRequest;\n\n      LOG.info(\"Sending prep recovery command to [{}]; [{}]\", leaderBaseUrl, prepCmd.toString());\n\n      mrr.future.get();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1","date":1499091633,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,WaitForState).mjava","sourceNew":null,"sourceOld":"  final private void sendPrepRecoveryCmd(String leaderBaseUrl, WaitForState prepCmd)\n      throws SolrServerException, IOException, InterruptedException, ExecutionException {\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderBaseUrl).build()) {\n      client.setConnectionTimeout(10000);\n      client.setSoTimeout(10000);\n      HttpUriRequestResponse mrr = client.httpUriRequest(prepCmd);\n      prevSendPreRecoveryHttpUriRequest = mrr.httpUriRequest;\n\n      LOG.info(\"Sending prep recovery command to [{}]; [{}]\", leaderBaseUrl, prepCmd.toString());\n\n      mrr.future.get();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,WaitForState).mjava","sourceNew":null,"sourceOld":"  final private void sendPrepRecoveryCmd(String leaderBaseUrl, WaitForState prepCmd)\n      throws SolrServerException, IOException, InterruptedException, ExecutionException {\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderBaseUrl).build()) {\n      client.setConnectionTimeout(10000);\n      client.setSoTimeout(10000);\n      HttpUriRequestResponse mrr = client.httpUriRequest(prepCmd);\n      prevSendPreRecoveryHttpUriRequest = mrr.httpUriRequest;\n\n      LOG.info(\"Sending prep recovery command to [{}]; [{}]\", leaderBaseUrl, prepCmd.toString());\n\n      mrr.future.get();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["7392b75d2c2f2aecf31188732a0764fe0dc74ade","8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","970a667af41fa94f5b9e55f7d08c90b51daf989d"],"8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1":["7392b75d2c2f2aecf31188732a0764fe0dc74ade"],"7392b75d2c2f2aecf31188732a0764fe0dc74ade":["970a667af41fa94f5b9e55f7d08c90b51daf989d"],"970a667af41fa94f5b9e55f7d08c90b51daf989d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","970a667af41fa94f5b9e55f7d08c90b51daf989d"],"30c8e5574b55d57947e989443dfde611646530ee":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7392b75d2c2f2aecf31188732a0764fe0dc74ade":["30c8e5574b55d57947e989443dfde611646530ee","8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1"],"970a667af41fa94f5b9e55f7d08c90b51daf989d":["199dfa410f1fdbfd3294106b04096cce5ed34b21","7392b75d2c2f2aecf31188732a0764fe0dc74ade"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}