{"path":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"c11e1d33f2ba742976268153f6edd2d29710cf69","date":1347851822,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Shape shape1 = ctx.readShape(part1);\n    Shape shape2 = ctx.readShape(part2);\n    if (!(shape1 instanceof Point) || !(shape2 instanceof Point))\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be points: \" + field.getName());\n    Point p1 = (Point) shape1;\n    Point p2 = (Point) shape2;\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d196c8ed32bc794a6555ac1b2c4efea6dcb57635","date":1357135393,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Shape shape1 = parseShape(part1);\n    Shape shape2 = parseShape(part2);\n    if (!(shape1 instanceof Point) || !(shape2 instanceof Point))\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be points: \" + field.getName());\n    Point p1 = (Point) shape1;\n    Point p2 = (Point) shape2;\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Shape shape1 = ctx.readShape(part1);\n    Shape shape2 = ctx.readShape(part2);\n    if (!(shape1 instanceof Point) || !(shape2 instanceof Point))\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be points: \" + field.getName());\n    Point p1 = (Point) shape1;\n    Point p2 = (Point) shape2;\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Shape shape1 = parseShape(part1);\n    Shape shape2 = parseShape(part2);\n    if (!(shape1 instanceof Point) || !(shape2 instanceof Point))\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be points: \" + field.getName());\n    Point p1 = (Point) shape1;\n    Point p2 = (Point) shape2;\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Shape shape1 = ctx.readShape(part1);\n    Shape shape2 = ctx.readShape(part2);\n    if (!(shape1 instanceof Point) || !(shape2 instanceof Point))\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be points: \" + field.getName());\n    Point p1 = (Point) shape1;\n    Point p2 = (Point) shape2;\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Point p1 = SpatialUtils.parsePointSolrException(part1, ctx);\n    Point p2 = SpatialUtils.parsePointSolrException(part2, ctx);\n\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Shape shape1 = parseShape(part1);\n    Shape shape2 = parseShape(part2);\n    if (!(shape1 instanceof Point) || !(shape2 instanceof Point))\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be points: \" + field.getName());\n    Point p1 = (Point) shape1;\n    Point p2 = (Point) shape2;\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Point p1 = SpatialUtils.parsePointSolrException(part1, ctx);\n    Point p2 = SpatialUtils.parsePointSolrException(part2, ctx);\n\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Point p1 = SpatialUtils.parsePointSolrException(part1, ctx);\n    Point p2 = SpatialUtils.parsePointSolrException(part2, ctx);\n\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Point p1 = SpatialUtils.parsePointSolrException(part1, ctx);\n    Point p2 = SpatialUtils.parsePointSolrException(part2, ctx);\n\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Point p1 = SpatialUtils.parsePointSolrException(part1, ctx);\n    Point p2 = SpatialUtils.parsePointSolrException(part2, ctx);\n\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Point p1 = SpatialUtils.parsePointSolrException(part1, ctx);\n    Point p2 = SpatialUtils.parsePointSolrException(part2, ctx);\n\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","sourceOld":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Point p1 = SpatialUtils.parsePointSolrException(part1, ctx);\n    Point p2 = SpatialUtils.parsePointSolrException(part2, ctx);\n\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Point p1 = SpatialUtils.parsePointSolrException(part1, ctx);\n    Point p2 = SpatialUtils.parsePointSolrException(part2, ctx);\n\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","sourceOld":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Point p1 = SpatialUtils.parsePointSolrException(part1, ctx);\n    Point p2 = SpatialUtils.parsePointSolrException(part2, ctx);\n\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Point p1 = SpatialUtils.parsePointSolrException(part1, ctx);\n    Point p2 = SpatialUtils.parsePointSolrException(part2, ctx);\n\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    if (!minInclusive || !maxInclusive)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both sides of spatial range query must be inclusive: \" + field.getName());\n    Point p1 = SpatialUtils.parsePointSolrException(part1, ctx);\n    Point p2 = SpatialUtils.parsePointSolrException(part2, ctx);\n\n    Rectangle bbox = ctx.makeRectangle(p1, p2);\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, bbox);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);//won't score by default\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d196c8ed32bc794a6555ac1b2c4efea6dcb57635":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c11e1d33f2ba742976268153f6edd2d29710cf69","d196c8ed32bc794a6555ac1b2c4efea6dcb57635"],"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"0c81907bd971f786e378654d32b80da32b0e950d":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["d196c8ed32bc794a6555ac1b2c4efea6dcb57635"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","0c81907bd971f786e378654d32b80da32b0e950d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"d196c8ed32bc794a6555ac1b2c4efea6dcb57635":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["d196c8ed32bc794a6555ac1b2c4efea6dcb57635","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["0c81907bd971f786e378654d32b80da32b0e950d","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}