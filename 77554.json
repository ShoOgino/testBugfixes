{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#pointInPolygon(double[],double[],double,double).mjava","commits":[{"id":"33bb6bd7295e66f93f182556f5353b97243e62ba","date":1449525768,"type":1,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#pointInPolygon(double[],double[],double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#pointInPolygon(double[],double[],double,double).mjava","sourceNew":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  public static boolean pointInPolygon(double[] x, double[] y, double lat, double lon) {\n    assert x.length == y.length;\n    boolean inPoly = false;\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < x.length; i++) {\n      if (x[i] < lon && x[i-1] >= lon || x[i-1] < lon && x[i] >= lon) {\n        if (y[i] + (lon - x[i]) / (x[i-1] - x[i]) * (y[i-1] - y[i]) < lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","sourceOld":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  public static boolean pointInPolygon(double[] x, double[] y, double lat, double lon) {\n    assert x.length == y.length;\n    boolean inPoly = false;\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < x.length; i++) {\n      if (x[i] < lon && x[i-1] >= lon || x[i-1] < lon && x[i] >= lon) {\n        if (y[i] + (lon - x[i]) / (x[i-1] - x[i]) * (y[i-1] - y[i]) < lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b40ebb10ce3de00cc12680ddbced2e2004391a7","date":1454568229,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#pointInPolygon(double[],double[],double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#pointInPolygon(double[],double[],double,double).mjava","sourceNew":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  public static boolean pointInPolygon(double[] x, double[] y, double lat, double lon) {\n    assert x.length == y.length;\n    boolean inPoly = false;\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < x.length; i++) {\n      if (x[i] <= lon && x[i-1] >= lon || x[i-1] <= lon && x[i] >= lon) {\n        if (y[i] + (lon - x[i]) / (x[i-1] - x[i]) * (y[i-1] - y[i]) <= lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","sourceOld":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  public static boolean pointInPolygon(double[] x, double[] y, double lat, double lon) {\n    assert x.length == y.length;\n    boolean inPoly = false;\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < x.length; i++) {\n      if (x[i] < lon && x[i-1] >= lon || x[i-1] < lon && x[i] >= lon) {\n        if (y[i] + (lon - x[i]) / (x[i-1] - x[i]) * (y[i-1] - y[i]) < lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#pointInPolygon(double[],double[],double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#pointInPolygon(double[],double[],double,double).mjava","sourceNew":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  public static boolean pointInPolygon(double[] x, double[] y, double lat, double lon) {\n    assert x.length == y.length;\n    boolean inPoly = false;\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < x.length; i++) {\n      if (x[i] <= lon && x[i-1] >= lon || x[i-1] <= lon && x[i] >= lon) {\n        if (y[i] + (lon - x[i]) / (x[i-1] - x[i]) * (y[i-1] - y[i]) <= lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","sourceOld":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  public static boolean pointInPolygon(double[] x, double[] y, double lat, double lon) {\n    assert x.length == y.length;\n    boolean inPoly = false;\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < x.length; i++) {\n      if (x[i] <= lon && x[i-1] >= lon || x[i-1] <= lon && x[i] >= lon) {\n        if (y[i] + (lon - x[i]) / (x[i-1] - x[i]) * (y[i-1] - y[i]) <= lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#pointInPolygon(double[],double[],double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#pointInPolygon(double[],double[],double,double).mjava","sourceNew":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  public static boolean pointInPolygon(double[] x, double[] y, double lat, double lon) {\n    assert x.length == y.length;\n    boolean inPoly = false;\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < x.length; i++) {\n      if (x[i] <= lon && x[i-1] >= lon || x[i-1] <= lon && x[i] >= lon) {\n        if (y[i] + (lon - x[i]) / (x[i-1] - x[i]) * (y[i-1] - y[i]) <= lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","sourceOld":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  public static boolean pointInPolygon(double[] x, double[] y, double lat, double lon) {\n    assert x.length == y.length;\n    boolean inPoly = false;\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < x.length; i++) {\n      if (x[i] < lon && x[i-1] >= lon || x[i-1] < lon && x[i] >= lon) {\n        if (y[i] + (lon - x[i]) / (x[i-1] - x[i]) * (y[i-1] - y[i]) < lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#pointInPolygon(double[],double[],double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#pointInPolygon(double[],double[],double,double).mjava","sourceNew":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  public static boolean pointInPolygon(double[] x, double[] y, double lat, double lon) {\n    assert x.length == y.length;\n    boolean inPoly = false;\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < x.length; i++) {\n      if (x[i] <= lon && x[i-1] >= lon || x[i-1] <= lon && x[i] >= lon) {\n        if (y[i] + (lon - x[i]) / (x[i-1] - x[i]) * (y[i-1] - y[i]) <= lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","sourceOld":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  public static boolean pointInPolygon(double[] x, double[] y, double lat, double lon) {\n    assert x.length == y.length;\n    boolean inPoly = false;\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < x.length; i++) {\n      if (x[i] < lon && x[i-1] >= lon || x[i-1] < lon && x[i] >= lon) {\n        if (y[i] + (lon - x[i]) / (x[i-1] - x[i]) * (y[i-1] - y[i]) < lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["33bb6bd7295e66f93f182556f5353b97243e62ba","937923083e4d137932336fc80f3d78758ff698a6"],"b1704c078ec59838c9d95d5bf5738b393b537494":["33bb6bd7295e66f93f182556f5353b97243e62ba","5b40ebb10ce3de00cc12680ddbced2e2004391a7"],"5b40ebb10ce3de00cc12680ddbced2e2004391a7":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"937923083e4d137932336fc80f3d78758ff698a6":["5b40ebb10ce3de00cc12680ddbced2e2004391a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"5b40ebb10ce3de00cc12680ddbced2e2004391a7":["b1704c078ec59838c9d95d5bf5738b393b537494","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","5b40ebb10ce3de00cc12680ddbced2e2004391a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}