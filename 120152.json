{"path":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":null,"sourceOld":"  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","sourceOld":"  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97717e39aa2b623ee82207818f39348f25026cdc","date":1269095041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","sourceOld":"  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8ff61b47b93c8379ce91bf7ae7b5c3a759467ec","date":1287253661,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433","date":1293817845,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = request.getCore().getHighlighter();\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = request.getCore().getHighlighter();\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testGetHighlightFields().mjava","sourceNew":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGetHighlightFields() {\n    HashMap<String, String> args = new HashMap<String, String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"t*\");\n\n    assertU(adoc(\"id\", \"0\", \"title\", \"test\", // static stored\n        \"text\", \"test\", // static not stored\n        \"foo_s\", \"test\", // dynamic stored\n        \"foo_sI\", \"test\", // dynamic not stored\n        \"weight\", \"1.0\")); // stored but not text\n    assertU(commit());\n    assertU(optimize());\n\n    TestHarness.LocalRequestFactory lrf = h.getRequestFactory(\"standard\", 0,\n        10, args);\n\n    SolrQueryRequest request = lrf.makeRequest(\"test\");\n    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    List<String> highlightFieldNames = Arrays.asList(highlighter\n        .getHighlightFields(null, request, new String[] {}));\n    assertTrue(\"Expected to highlight on field \\\"title\\\"\", highlightFieldNames\n        .contains(\"title\"));\n    assertFalse(\"Expected to not highlight on field \\\"text\\\"\",\n        highlightFieldNames.contains(\"text\"));\n    assertFalse(\"Expected to not highlight on field \\\"weight\\\"\",\n        highlightFieldNames.contains(\"weight\"));\n    request.close();\n\n    args.put(\"hl.fl\", \"foo_*\");\n    lrf = h.getRequestFactory(\"standard\", 0, 10, args);\n    request = lrf.makeRequest(\"test\");\n    highlighter = HighlightComponent.getHighlighter(h.getCore());\n    highlightFieldNames = Arrays.asList(highlighter.getHighlightFields(null,\n        request, new String[] {}));\n    assertEquals(\"Expected one field to highlight on\", 1, highlightFieldNames\n        .size());\n    assertEquals(\"Expected to highlight on field \\\"foo_s\\\"\", \"foo_s\",\n        highlightFieldNames.get(0));\n    request.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433":["e8ff61b47b93c8379ce91bf7ae7b5c3a759467ec"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["863f5f4b9cd4134d4bd9d6528419bf72ddbe4433","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["97717e39aa2b623ee82207818f39348f25026cdc","e8ff61b47b93c8379ce91bf7ae7b5c3a759467ec"],"e8ff61b47b93c8379ce91bf7ae7b5c3a759467ec":["97717e39aa2b623ee82207818f39348f25026cdc"],"97717e39aa2b623ee82207818f39348f25026cdc":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["97717e39aa2b623ee82207818f39348f25026cdc","e8ff61b47b93c8379ce91bf7ae7b5c3a759467ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433":["70ad682703b8585f5d0a637efec044d57ec05efb","c26f00b574427b55127e869b935845554afde1fa","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"e8ff61b47b93c8379ce91bf7ae7b5c3a759467ec":["863f5f4b9cd4134d4bd9d6528419bf72ddbe4433","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"97717e39aa2b623ee82207818f39348f25026cdc":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e8ff61b47b93c8379ce91bf7ae7b5c3a759467ec","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"1da8d55113b689b06716246649de6f62430f15c0":["97717e39aa2b623ee82207818f39348f25026cdc"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["70ad682703b8585f5d0a637efec044d57ec05efb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}