{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#testFlat().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#testFlat().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanOr#testFlat().mjava","sourceNew":"  /**\n   * <code>T:files T:deleting C:production C:optimize </code>\n   * it works.\n   *\n   * @throws IOException\n   */\n  public void testFlat() throws IOException {\n    BooleanQuery q = new BooleanQuery();\n    q.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));\n    assertEquals(1, search(q));\n  }\n\n","sourceOld":"  /**\n   * <code>T:files T:deleting C:production C:optimize </code>\n   * it works.\n   *\n   * @throws IOException\n   */\n  public void testFlat() throws IOException {\n    BooleanQuery q = new BooleanQuery();\n    q.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));\n    assertEquals(1, search(q));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#testFlat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#testFlat().mjava","sourceNew":"  /**\n   * <code>T:files T:deleting C:production C:optimize </code>\n   * it works.\n   */\n  public void testFlat() throws IOException {\n    BooleanQuery q = new BooleanQuery();\n    q.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));\n    assertEquals(1, search(q));\n  }\n\n","sourceOld":"  /**\n   * <code>T:files T:deleting C:production C:optimize </code>\n   * it works.\n   *\n   * @throws IOException\n   */\n  public void testFlat() throws IOException {\n    BooleanQuery q = new BooleanQuery();\n    q.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));\n    assertEquals(1, search(q));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#testFlat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#testFlat().mjava","sourceNew":"  /**\n   * <code>T:files T:deleting C:production C:optimize </code>\n   * it works.\n   */\n  public void testFlat() throws IOException {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));\n    assertEquals(1, search(q.build()));\n  }\n\n","sourceOld":"  /**\n   * <code>T:files T:deleting C:production C:optimize </code>\n   * it works.\n   */\n  public void testFlat() throws IOException {\n    BooleanQuery q = new BooleanQuery();\n    q.add(new BooleanClause(t1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(t2, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c1, BooleanClause.Occur.SHOULD));\n    q.add(new BooleanClause(c2, BooleanClause.Occur.SHOULD));\n    assertEquals(1, search(q));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}