{"path":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],PhraseQuery,PhraseQuery).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],PhraseQuery,PhraseQuery).mjava","pathOld":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],PhraseQuery,PhraseQuery).mjava","sourceNew":"  /*\n   * Check if PhraseQuery A and B have overlapped part.\n   * \n   * ex1) A=\"a b\", B=\"b c\" => overlap; expandQueries={\"a b c\"}\n   * ex2) A=\"b c\", B=\"a b\" => overlap; expandQueries={\"a b c\"}\n   * ex3) A=\"a b\", B=\"c d\" => no overlap; expandQueries={}\n   */\n  private void checkOverlap( Collection<Query> expandQueries, PhraseQuery a, PhraseQuery b ){\n    if( a.getSlop() != b.getSlop() ) return;\n    Term[] ats = a.getTerms();\n    Term[] bts = b.getTerms();\n    if( fieldMatch && !ats[0].field().equals( bts[0].field() ) ) return;\n    checkOverlap( expandQueries, ats, bts, a.getSlop(), a.getBoost() );\n    checkOverlap( expandQueries, bts, ats, b.getSlop(), b.getBoost() );\n  }\n\n","sourceOld":"  /*\n   * Check if PhraseQuery A and B have overlapped part.\n   * \n   * ex1) A=\"a b\", B=\"b c\" => overlap; expandQueries={\"a b c\"}\n   * ex2) A=\"b c\", B=\"a b\" => overlap; expandQueries={\"a b c\"}\n   * ex3) A=\"a b\", B=\"c d\" => no overlap; expandQueries={}\n   */\n  private void checkOverlap( Collection<Query> expandQueries, PhraseQuery a, PhraseQuery b ){\n    if( a.getSlop() != b.getSlop() ) return;\n    Term[] ats = a.getTerms();\n    Term[] bts = b.getTerms();\n    if( fieldMatch && !ats[0].field().equals( bts[0].field() ) ) return;\n    checkOverlap( expandQueries, ats, bts, a.getSlop(), a.getBoost() );\n    checkOverlap( expandQueries, bts, ats, b.getSlop(), b.getBoost() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],PhraseQuery,PhraseQuery).mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],PhraseQuery,PhraseQuery).mjava","sourceNew":"  /*\n   * Check if PhraseQuery A and B have overlapped part.\n   * \n   * ex1) A=\"a b\", B=\"b c\" => overlap; expandQueries={\"a b c\"}\n   * ex2) A=\"b c\", B=\"a b\" => overlap; expandQueries={\"a b c\"}\n   * ex3) A=\"a b\", B=\"c d\" => no overlap; expandQueries={}\n   */\n  private void checkOverlap( Collection<Query> expandQueries, PhraseQuery a, PhraseQuery b ){\n    if( a.getSlop() != b.getSlop() ) return;\n    Term[] ats = a.getTerms();\n    Term[] bts = b.getTerms();\n    if( fieldMatch && !ats[0].field().equals( bts[0].field() ) ) return;\n    checkOverlap( expandQueries, ats, bts, a.getSlop(), a.getBoost() );\n    checkOverlap( expandQueries, bts, ats, b.getSlop(), b.getBoost() );\n  }\n\n","sourceOld":"  /*\n   * Check if PhraseQuery A and B have overlapped part.\n   * \n   * ex1) A=\"a b\", B=\"b c\" => overlap; expandQueries={\"a b c\"}\n   * ex2) A=\"b c\", B=\"a b\" => overlap; expandQueries={\"a b c\"}\n   * ex3) A=\"a b\", B=\"c d\" => no overlap; expandQueries={}\n   */\n  private void checkOverlap( Collection<Query> expandQueries, PhraseQuery a, PhraseQuery b ){\n    if( a.getSlop() != b.getSlop() ) return;\n    Term[] ats = a.getTerms();\n    Term[] bts = b.getTerms();\n    if( fieldMatch && !ats[0].field().equals( bts[0].field() ) ) return;\n    checkOverlap( expandQueries, ats, bts, a.getSlop(), a.getBoost() );\n    checkOverlap( expandQueries, bts, ats, b.getSlop(), b.getBoost() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}