{"path":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","commits":[{"id":"1d6028dbe4a16095efe9f1651fe1a8e88d683e92","date":1224723463,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean).mjava","sourceNew":"  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      public void postCommit() {\n        if(getCommit){\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames());\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  private SolrEventListener getEventListener(final boolean snapshoot) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      public void postCommit() {\n        indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames());\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**Register a listener for postcommit/optimize\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   * @return an instance of the eventlistener\n   */\n\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      public void postCommit() {\n        if(getCommit){\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames());\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      public void postCommit() {\n        if(getCommit){\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames());\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames());\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**Register a listener for postcommit/optimize\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   * @return an instance of the eventlistener\n   */\n\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      public void postCommit() {\n        if(getCommit){\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames());\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames());\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames());\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"217dd2e5ec780896e70b9d4bf5ff18c0079142fb","date":1241459287,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames());\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4623d61231036b71956ea057612b3d78d440508a","date":1243501872,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cdac6591b64f43f87663e70518d79dd137454b4","date":1254069460,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit || snapshoot) {\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(indexCommitPoint.getFileNames(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":["b5b99d924e3bae842d6e1e1af92474d9247784a5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5b99d924e3bae842d6e1e1af92474d9247784a5","date":1255113388,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommmitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit || snapshoot) {\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(indexCommitPoint.getFileNames(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":["7cdac6591b64f43f87663e70518d79dd137454b4"],"bugIntro":["064fca6c24f8c0608a9c2ba2688c31d244c9f262","9b87acd61509ed222a7ae58c584568eca5a6243e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b87acd61509ed222a7ae58c584568eca5a6243e","date":1255125162,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommmitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit().getFileNames(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":["b5b99d924e3bae842d6e1e1af92474d9247784a5"],"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","064fca6c24f8c0608a9c2ba2688c31d244c9f262"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getEventListener(boolean,boolean).mjava","sourceNew":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","sourceOld":"  /**\n   * Register a listener for postcommit/optimize\n   *\n   * @param snapshoot do a snapshoot\n   * @param getCommit get a commitpoint also\n   *\n   * @return an instance of the eventlistener\n   */\n  private SolrEventListener getEventListener(final boolean snapshoot, final boolean getCommit) {\n    return new SolrEventListener() {\n      public void init(NamedList args) {/*no op*/ }\n\n      /**\n       * This refreshes the latest replicateable index commit and optionally can create Snapshots as well\n       */\n      public void postCommit() {\n        if (getCommit) {\n          IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();\n          core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n      public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) { /*no op*/}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9b87acd61509ed222a7ae58c584568eca5a6243e":["b5b99d924e3bae842d6e1e1af92474d9247784a5"],"9be231d18ef58129524215a1d30331523320b744":["8620c64e323e74078214cf931e505179d14c888e"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"b5b99d924e3bae842d6e1e1af92474d9247784a5":["7cdac6591b64f43f87663e70518d79dd137454b4"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4623d61231036b71956ea057612b3d78d440508a":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["9b87acd61509ed222a7ae58c584568eca5a6243e"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"7cdac6591b64f43f87663e70518d79dd137454b4":["4623d61231036b71956ea057612b3d78d440508a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"217dd2e5ec780896e70b9d4bf5ff18c0079142fb":["9be231d18ef58129524215a1d30331523320b744"]},"commit2Childs":{"9b87acd61509ed222a7ae58c584568eca5a6243e":["ad94625fb8d088209f46650c8097196fec67f00c"],"9be231d18ef58129524215a1d30331523320b744":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"b5b99d924e3bae842d6e1e1af92474d9247784a5":["9b87acd61509ed222a7ae58c584568eca5a6243e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"8620c64e323e74078214cf931e505179d14c888e":["9be231d18ef58129524215a1d30331523320b744"],"4623d61231036b71956ea057612b3d78d440508a":["7cdac6591b64f43f87663e70518d79dd137454b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7cdac6591b64f43f87663e70518d79dd137454b4":["b5b99d924e3bae842d6e1e1af92474d9247784a5"],"217dd2e5ec780896e70b9d4bf5ff18c0079142fb":["4623d61231036b71956ea057612b3d78d440508a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}