{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos.FindSegmentsFile#doBody(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos.FindSegmentsFile#doBody(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos.FindSegmentsFile#doBody(String).mjava","sourceNew":"    /**\n     * Subclass must implement this.  The assumption is an\n     * IOException will be thrown if something goes wrong\n     * during the processing that could have been caused by\n     * a writer committing.\n     */\n    protected abstract Object doBody(String segmentFileName) throws CorruptIndexException, IOException;\n\n","sourceOld":"    /**\n     * Subclass must implement this.  The assumption is an\n     * IOException will be thrown if something goes wrong\n     * during the processing that could have been caused by\n     * a writer committing.\n     */\n    protected abstract Object doBody(String segmentFileName) throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos.FindSegmentsFile#doBody(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos.FindSegmentsFile#doBody(String).mjava","sourceNew":"    /**\n     * Subclass must implement this.  The assumption is an\n     * IOException will be thrown if something goes wrong\n     * during the processing that could have been caused by\n     * a writer committing.\n     */\n    protected abstract Object doBody(String segmentFileName) throws IOException;\n\n","sourceOld":"    /**\n     * Subclass must implement this.  The assumption is an\n     * IOException will be thrown if something goes wrong\n     * during the processing that could have been caused by\n     * a writer committing.\n     */\n    protected abstract Object doBody(String segmentFileName) throws CorruptIndexException, IOException;\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos.FindSegmentsFile#doBody(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos.FindSegmentsFile#doBody(String).mjava","sourceNew":"    /**\n     * Subclass must implement this.  The assumption is an\n     * IOException will be thrown if something goes wrong\n     * during the processing that could have been caused by\n     * a writer committing.\n     */\n    protected abstract Object doBody(String segmentFileName) throws IOException;\n\n","sourceOld":"    /**\n     * Subclass must implement this.  The assumption is an\n     * IOException will be thrown if something goes wrong\n     * during the processing that could have been caused by\n     * a writer committing.\n     */\n    protected abstract Object doBody(String segmentFileName) throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos.FindSegmentsFile#doBody(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos.FindSegmentsFile#doBody(String).mjava","sourceNew":"    /**\n     * Subclass must implement this.  The assumption is an\n     * IOException will be thrown if something goes wrong\n     * during the processing that could have been caused by\n     * a writer committing.\n     */\n    protected abstract T doBody(String segmentFileName) throws IOException;\n\n","sourceOld":"    /**\n     * Subclass must implement this.  The assumption is an\n     * IOException will be thrown if something goes wrong\n     * during the processing that could have been caused by\n     * a writer committing.\n     */\n    protected abstract Object doBody(String segmentFileName) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos.FindSegmentsFile#doBody(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos.FindSegmentsFile#doBody(String).mjava","sourceNew":"    /**\n     * Subclass must implement this.  The assumption is an\n     * IOException will be thrown if something goes wrong\n     * during the processing that could have been caused by\n     * a writer committing.\n     */\n    protected abstract T doBody(String segmentFileName) throws IOException;\n\n","sourceOld":"    /**\n     * Subclass must implement this.  The assumption is an\n     * IOException will be thrown if something goes wrong\n     * during the processing that could have been caused by\n     * a writer committing.\n     */\n    protected abstract Object doBody(String segmentFileName) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","3384e6013a93e4d11b7d75388693f8d0388602bf"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}