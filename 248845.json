{"path":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testEmptySynonyms().mjava","commits":[{"id":"728a2d83ed18643ec79ecf8f778ba8641d283a9d","date":1310442397,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testEmptySynonyms().mjava","pathOld":"/dev/null","sourceNew":"  /** if the synonyms are completely empty, test that we still analyze correctly */\n  public void testEmptySynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.putAll(DEFAULT_VERSION_PARAM);\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\")); // empty file!\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts, new String[] { \"GB\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testEmptySynonyms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testEmptySynonyms().mjava","sourceNew":"  /** if the synonyms are completely empty, test that we still analyze correctly */\n  public void testEmptySynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\")); // empty file!\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts, new String[] { \"GB\" });\n  }\n\n","sourceOld":"  /** if the synonyms are completely empty, test that we still analyze correctly */\n  public void testEmptySynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.putAll(DEFAULT_VERSION_PARAM);\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\")); // empty file!\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts, new String[] { \"GB\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92ed69fd02d759d98f62e869eaa64e64e22302bf","date":1336612003,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testEmptySynonyms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testEmptySynonyms().mjava","sourceNew":"  /** if the synonyms are completely empty, test that we still analyze correctly */\n  public void testEmptySynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\")); // empty file!\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts, new String[] { \"GB\" });\n  }\n\n","sourceOld":"  /** if the synonyms are completely empty, test that we still analyze correctly */\n  public void testEmptySynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\")); // empty file!\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts, new String[] { \"GB\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05464f071eda06541fd9ed6f04aaca99b131dfa","date":1343110729,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testEmptySynonyms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testEmptySynonyms().mjava","sourceNew":"  /** if the synonyms are completely empty, test that we still analyze correctly */\n  public void testEmptySynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockResourceLoader(\"\")); // empty file!\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts, new String[] { \"GB\" });\n  }\n\n","sourceOld":"  /** if the synonyms are completely empty, test that we still analyze correctly */\n  public void testEmptySynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\")); // empty file!\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts, new String[] { \"GB\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testEmptySynonyms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testEmptySynonyms().mjava","sourceNew":"  /** if the synonyms are completely empty, test that we still analyze correctly */\n  public void testEmptySynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockResourceLoader(\"\")); // empty file!\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts, new String[] { \"GB\" });\n  }\n\n","sourceOld":"  /** if the synonyms are completely empty, test that we still analyze correctly */\n  public void testEmptySynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\")); // empty file!\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts, new String[] { \"GB\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testEmptySynonyms().mjava","sourceNew":null,"sourceOld":"  /** if the synonyms are completely empty, test that we still analyze correctly */\n  public void testEmptySynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\")); // empty file!\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts, new String[] { \"GB\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testEmptySynonyms().mjava","sourceNew":null,"sourceOld":"  /** if the synonyms are completely empty, test that we still analyze correctly */\n  public void testEmptySynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\")); // empty file!\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts, new String[] { \"GB\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["92ed69fd02d759d98f62e869eaa64e64e22302bf","5a1a22b1ad88b436661458df567f3fdb446392a4"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["728a2d83ed18643ec79ecf8f778ba8641d283a9d"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"728a2d83ed18643ec79ecf8f778ba8641d283a9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["92ed69fd02d759d98f62e869eaa64e64e22302bf","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["92ed69fd02d759d98f62e869eaa64e64e22302bf","a05464f071eda06541fd9ed6f04aaca99b131dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a05464f071eda06541fd9ed6f04aaca99b131dfa","5a1a22b1ad88b436661458df567f3fdb446392a4"],"728a2d83ed18643ec79ecf8f778ba8641d283a9d":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["728a2d83ed18643ec79ecf8f778ba8641d283a9d"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}