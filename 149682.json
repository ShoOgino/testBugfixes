{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testGetRelationship().mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testGetRelationship().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPathTest#testGetRelationship().mjava","sourceNew":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n    GeoPath c;\n    GeoPoint point;\n    GeoPoint pointApprox;\n    int relationship;\n    GeoArea area;\n    PlanetModel planetModel;\n    \n    planetModel = new PlanetModel(1.151145876105594, 0.8488541238944061);\n    c = new GeoPath(planetModel, 0.008726646259971648);\n    c.addPoint(-0.6925658899376476, 0.6316613927914589);\n    c.addPoint(0.27828548161836364, 0.6785795524104564);\n    c.done();\n    point = new GeoPoint(planetModel,-0.49298555067758226, 0.9892440995026406);\n    pointApprox = new GeoPoint(0.5110940362119821, 0.7774603209946239, -0.49984312299556544);\n    area = GeoAreaFactory.makeGeoArea(planetModel, 0.49937141144985997, 0.5161765426256085, 0.3337218719537796,0.8544419570901649, -0.6347692823688085, 0.3069696588119369);\n    assertTrue(!c.isWithin(point));\n    \n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n    GeoPath c;\n    GeoPoint point;\n    GeoPoint pointApprox;\n    int relationship;\n    GeoArea area;\n    PlanetModel planetModel;\n    \n    planetModel = new PlanetModel(1.151145876105594, 0.8488541238944061);\n    c = new GeoPath(planetModel, 0.008726646259971648);\n    c.addPoint(-0.6925658899376476, 0.6316613927914589);\n    c.addPoint(0.27828548161836364, 0.6785795524104564);\n    c.done();\n    point = new GeoPoint(planetModel,-0.49298555067758226, 0.9892440995026406);\n    pointApprox = new GeoPoint(0.5110940362119821, 0.7774603209946239, -0.49984312299556544);\n    area = GeoAreaFactory.makeGeoArea(planetModel, 0.49937141144985997, 0.5161765426256085, 0.3337218719537796,0.8544419570901649, -0.6347692823688085, 0.3069696588119369);\n    assertTrue(!c.isWithin(point));\n    \n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"760628478e121972168791a2afa6af915192c4a6","date":1459842108,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testGetRelationship().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testGetRelationship().mjava","sourceNew":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoStandardPath p;\n    GeoStandardPath c;\n    GeoPoint point;\n    GeoPoint pointApprox;\n    int relationship;\n    GeoArea area;\n    PlanetModel planetModel;\n    \n    planetModel = new PlanetModel(1.151145876105594, 0.8488541238944061);\n    c = new GeoStandardPath(planetModel, 0.008726646259971648);\n    c.addPoint(-0.6925658899376476, 0.6316613927914589);\n    c.addPoint(0.27828548161836364, 0.6785795524104564);\n    c.done();\n    point = new GeoPoint(planetModel,-0.49298555067758226, 0.9892440995026406);\n    pointApprox = new GeoPoint(0.5110940362119821, 0.7774603209946239, -0.49984312299556544);\n    area = GeoAreaFactory.makeGeoArea(planetModel, 0.49937141144985997, 0.5161765426256085, 0.3337218719537796,0.8544419570901649, -0.6347692823688085, 0.3069696588119369);\n    assertTrue(!c.isWithin(point));\n    \n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n    GeoPath c;\n    GeoPoint point;\n    GeoPoint pointApprox;\n    int relationship;\n    GeoArea area;\n    PlanetModel planetModel;\n    \n    planetModel = new PlanetModel(1.151145876105594, 0.8488541238944061);\n    c = new GeoPath(planetModel, 0.008726646259971648);\n    c.addPoint(-0.6925658899376476, 0.6316613927914589);\n    c.addPoint(0.27828548161836364, 0.6785795524104564);\n    c.done();\n    point = new GeoPoint(planetModel,-0.49298555067758226, 0.9892440995026406);\n    pointApprox = new GeoPoint(0.5110940362119821, 0.7774603209946239, -0.49984312299556544);\n    area = GeoAreaFactory.makeGeoArea(planetModel, 0.49937141144985997, 0.5161765426256085, 0.3337218719537796,0.8544419570901649, -0.6347692823688085, 0.3069696588119369);\n    assertTrue(!c.isWithin(point));\n    \n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testGetRelationship().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testGetRelationship().mjava","sourceNew":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoStandardPath p;\n    GeoStandardPath c;\n    GeoPoint point;\n    GeoPoint pointApprox;\n    int relationship;\n    GeoArea area;\n    PlanetModel planetModel;\n    \n    planetModel = new PlanetModel(1.151145876105594, 0.8488541238944061);\n    c = new GeoStandardPath(planetModel, 0.008726646259971648);\n    c.addPoint(-0.6925658899376476, 0.6316613927914589);\n    c.addPoint(0.27828548161836364, 0.6785795524104564);\n    c.done();\n    point = new GeoPoint(planetModel,-0.49298555067758226, 0.9892440995026406);\n    pointApprox = new GeoPoint(0.5110940362119821, 0.7774603209946239, -0.49984312299556544);\n    area = GeoAreaFactory.makeGeoArea(planetModel, 0.49937141144985997, 0.5161765426256085, 0.3337218719537796,0.8544419570901649, -0.6347692823688085, 0.3069696588119369);\n    assertTrue(!c.isWithin(point));\n    \n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoStandardPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRelationship() {\n    GeoArea rect;\n    GeoPath p;\n    GeoPath c;\n    GeoPoint point;\n    GeoPoint pointApprox;\n    int relationship;\n    GeoArea area;\n    PlanetModel planetModel;\n    \n    planetModel = new PlanetModel(1.151145876105594, 0.8488541238944061);\n    c = new GeoPath(planetModel, 0.008726646259971648);\n    c.addPoint(-0.6925658899376476, 0.6316613927914589);\n    c.addPoint(0.27828548161836364, 0.6785795524104564);\n    c.done();\n    point = new GeoPoint(planetModel,-0.49298555067758226, 0.9892440995026406);\n    pointApprox = new GeoPoint(0.5110940362119821, 0.7774603209946239, -0.49984312299556544);\n    area = GeoAreaFactory.makeGeoArea(planetModel, 0.49937141144985997, 0.5161765426256085, 0.3337218719537796,0.8544419570901649, -0.6347692823688085, 0.3069696588119369);\n    assertTrue(!c.isWithin(point));\n    \n    // Start by testing the basic kinds of relationship, increasing in order of difficulty.\n\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    p.addPoint(-0.3, -0.3);\n    p.addPoint(0.3, 0.3);\n    p.done();\n    // Easiest: The path is wholly contains the georect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.05);\n    assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));\n    // Next easiest: Some endpoints of the rectangle are inside, and some are outside.\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.05, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Now, all points are outside, but the figures intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.05, -0.05, -0.5, 0.5);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    // Finally, all points are outside, and the figures *do not* intersect\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, 0.5);\n    assertEquals(GeoArea.WITHIN, rect.getRelationship(p));\n    // Check that segment edge overlap detection works\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.1, 0.0, -0.1, 0.0);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.2, 0.1, -0.2, -0.1);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n    // Check if overlap at endpoints behaves as expected next\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.35);\n    assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));\n    rect = new GeoRectangle(PlanetModel.SPHERE, 0.5, -0.5, -0.5, -0.45);\n    assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"760628478e121972168791a2afa6af915192c4a6":["b4e444678504caf66a8060b1d514383aa4feac0c"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["b4e444678504caf66a8060b1d514383aa4feac0c","760628478e121972168791a2afa6af915192c4a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["760628478e121972168791a2afa6af915192c4a6"]},"commit2Childs":{"760628478e121972168791a2afa6af915192c4a6":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["760628478e121972168791a2afa6af915192c4a6","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}