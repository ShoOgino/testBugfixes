{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"/dev/null","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      Shape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar(cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb53c8e9da2afe33252ee698dda412264252cfa7","date":1418531581,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      Shape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar(cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["cb53c8e9da2afe33252ee698dda412264252cfa7","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}