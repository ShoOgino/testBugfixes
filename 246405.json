{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/URLScopeFilter#handleRequest(Message).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/URLScopeFilter#handleRequest(Message).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * this method will be called by the message handler. Tests the URL\n\t * and throws it out if it's not in the scope\n     */\n\tpublic Message handleRequest(Message message)\n\t{\n\t    if(message instanceof URLMessage)\n\t    {\n\t        String urlString = ((URLMessage)message).toString();\n\t        int length = urlString.length();\n\t        char buffer[] = new char[length];\n\t        urlString.getChars(0,length,buffer,0);\n\n            //System.out.println(\"using pattern: \" + pattern);\n\t        boolean match = matcher.matches(buffer, pattern);\n\t        if(!match)\n\t        {\n\t            //System.out.println(\"not in Scope: \" + urlString);\n                filtered++;\n\t            return null;\n\t        }\n\t    }\n        return message;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21b526e3e9974b2651365fbae52a976e6fc77aa4","date":1022108962,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/URLScopeFilter#handleRequest(Message).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/URLScopeFilter#handleRequest(Message).mjava","sourceNew":"    /**\n     * this method will be called by the message handler. Tests the URL\n     * and throws it out if it's not in the scope\n     */\n    public Message handleRequest(Message message)\n    {\n        if(message instanceof URLMessage)\n        {\n            String urlString = ((URLMessage)message).toString();\n            int length = urlString.length();\n            char buffer[] = new char[length];\n            urlString.getChars(0,length,buffer,0);\n\n            //System.out.println(\"using pattern: \" + pattern);\n            boolean match = matcher.matches(buffer, pattern);\n            if(!match)\n            {\n                //System.out.println(\"not in Scope: \" + urlString);\n                filtered++;\n                return null;\n            }\n        }\n        return message;\n    }\n\n","sourceOld":"    /**\n     * this method will be called by the message handler. Tests the URL\n\t * and throws it out if it's not in the scope\n     */\n\tpublic Message handleRequest(Message message)\n\t{\n\t    if(message instanceof URLMessage)\n\t    {\n\t        String urlString = ((URLMessage)message).toString();\n\t        int length = urlString.length();\n\t        char buffer[] = new char[length];\n\t        urlString.getChars(0,length,buffer,0);\n\n            //System.out.println(\"using pattern: \" + pattern);\n\t        boolean match = matcher.matches(buffer, pattern);\n\t        if(!match)\n\t        {\n\t            //System.out.println(\"not in Scope: \" + urlString);\n                filtered++;\n\t            return null;\n\t        }\n\t    }\n        return message;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0260588aa2e9895fb49f45cbcecdcca72ceeff7","date":1035300060,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/URLScopeFilter#handleRequest(Message).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/URLScopeFilter#handleRequest(Message).mjava","sourceNew":"    /**\n     * this method will be called by the message handler. Tests the URL\n     * and throws it out if it's not in the scope\n     */\n    public Message handleRequest(Message message)\n    {\n        if(message instanceof URLMessage)\n        {\n            String urlString = ((URLMessage)message).getNormalizedURLString();\n            int length = urlString.length();\n            char buffer[] = new char[length];\n            urlString.getChars(0,length,buffer,0);\n\n            //System.out.println(\"using pattern: \" + pattern);\n            boolean match = matcher.matches(buffer, pattern);\n            if(!match)\n            {\n                //log.log(\"URLScopeFilter: not in scope: \" + urlString);\n                log.log(message.toString());\n                filtered++;\n\n                return null;\n            }\n        }\n        return message;\n    }\n\n","sourceOld":"    /**\n     * this method will be called by the message handler. Tests the URL\n     * and throws it out if it's not in the scope\n     */\n    public Message handleRequest(Message message)\n    {\n        if(message instanceof URLMessage)\n        {\n            String urlString = ((URLMessage)message).toString();\n            int length = urlString.length();\n            char buffer[] = new char[length];\n            urlString.getChars(0,length,buffer,0);\n\n            //System.out.println(\"using pattern: \" + pattern);\n            boolean match = matcher.matches(buffer, pattern);\n            if(!match)\n            {\n                //System.out.println(\"not in Scope: \" + urlString);\n                filtered++;\n                return null;\n            }\n        }\n        return message;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/URLScopeFilter#handleRequest(Message).mjava","sourceNew":null,"sourceOld":"    /**\n     * this method will be called by the message handler. Tests the URL\n     * and throws it out if it's not in the scope\n     */\n    public Message handleRequest(Message message)\n    {\n        if(message instanceof URLMessage)\n        {\n            String urlString = ((URLMessage)message).getNormalizedURLString();\n            int length = urlString.length();\n            char buffer[] = new char[length];\n            urlString.getChars(0,length,buffer,0);\n\n            //System.out.println(\"using pattern: \" + pattern);\n            boolean match = matcher.matches(buffer, pattern);\n            if(!match)\n            {\n                //log.log(\"URLScopeFilter: not in scope: \" + urlString);\n                log.log(message.toString());\n                filtered++;\n\n                return null;\n            }\n        }\n        return message;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["a0260588aa2e9895fb49f45cbcecdcca72ceeff7"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0260588aa2e9895fb49f45cbcecdcca72ceeff7":["21b526e3e9974b2651365fbae52a976e6fc77aa4"]},"commit2Childs":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["a0260588aa2e9895fb49f45cbcecdcca72ceeff7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"a0260588aa2e9895fb49f45cbcecdcca72ceeff7":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}