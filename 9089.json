{"path":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...).mjava","sourceNew":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, DefaultFacetIndexingParams iParams,\n      int k, String... facetNames) throws IOException,\n      IllegalAccessException, InstantiationException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    Collection<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      facetSearchParams.addFacetRequest(fq);\n      fRequests.add(fq);\n    }\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","sourceOld":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, DefaultFacetIndexingParams iParams,\n      int k, String... facetNames) throws IOException,\n      IllegalAccessException, InstantiationException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    Collection<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      facetSearchParams.addFacetRequest(fq);\n      fRequests.add(fq);\n    }\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...).mjava","sourceNew":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, DefaultFacetIndexingParams iParams,\n      int k, String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    Collection<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      facetSearchParams.addFacetRequest(fq);\n      fRequests.add(fq);\n    }\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","sourceOld":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, DefaultFacetIndexingParams iParams,\n      int k, String... facetNames) throws IOException,\n      IllegalAccessException, InstantiationException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    Collection<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      facetSearchParams.addFacetRequest(fq);\n      fRequests.add(fq);\n    }\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...).mjava","sourceNew":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, DefaultFacetIndexingParams iParams,\n      int k, String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    Collection<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      facetSearchParams.addFacetRequest(fq);\n      fRequests.add(fq);\n    }\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","sourceOld":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, DefaultFacetIndexingParams iParams,\n      int k, String... facetNames) throws IOException,\n      IllegalAccessException, InstantiationException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    Collection<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      facetSearchParams.addFacetRequest(fq);\n      fRequests.add(fq);\n    }\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,FacetIndexingParams,int,String...).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...).mjava","sourceNew":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, FacetIndexingParams iParams, int k,\n      String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    List<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      fRequests.add(fq);\n    }\n    FacetSearchParams facetSearchParams = new FacetSearchParams(fRequests, iParams);\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","sourceOld":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, DefaultFacetIndexingParams iParams,\n      int k, String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    Collection<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      facetSearchParams.addFacetRequest(fq);\n      fRequests.add(fq);\n    }\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestUtils#search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...).mjava","sourceNew":null,"sourceOld":"  public static Collector[] search(IndexSearcher searcher,\n      TaxonomyReader taxonomyReader, DefaultFacetIndexingParams iParams,\n      int k, String... facetNames) throws IOException {\n    \n    Collector[] collectors = new Collector[2];\n    \n    FacetSearchParams facetSearchParams = new FacetSearchParams(iParams);\n    Collection<FacetRequest> fRequests = new ArrayList<FacetRequest>();\n    for (String facetName : facetNames) {\n      CategoryPath cp = new CategoryPath(facetName);\n      FacetRequest fq = new CountFacetRequest(cp, k);\n      facetSearchParams.addFacetRequest(fq);\n      fRequests.add(fq);\n    }\n\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(\n        searcher.getIndexReader().maxDoc(), true);\n    FacetsCollector facetsCollector = new FacetsCollector(\n        facetSearchParams, searcher.getIndexReader(), taxonomyReader);\n    Collector mColl = MultiCollector.wrap(topDocsCollector, facetsCollector);\n    \n    collectors[0] = topDocsCollector;\n    collectors[1] = facetsCollector;\n\n    searcher.search(new MatchAllDocsQuery(), mColl);\n    return collectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}