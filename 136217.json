{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(List[GeoPoint],int).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(List[GeoPoint],int).mjava","pathOld":"/dev/null","sourceNew":"    /** Create a GeoMembershipShape of the right kind given the specified bounds.\n     *@param pointList is a list of the GeoPoints to build an arbitrary polygon out of.\n     *@param convexPointIndex is the index of a single convex point whose conformation with\n     * its neighbors determines inside/outside for the entire polygon.\n     *@return a GeoMembershipShape corresponding to what was specified.\n     */\n    public static GeoMembershipShape makeGeoPolygon(List<GeoPoint> pointList, int convexPointIndex) {\n        // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n        // describing membership.\n        return buildPolygonShape(pointList, convexPointIndex, getLegalIndex(convexPointIndex+1,pointList.size()),\n            new SidedPlane(pointList.get(getLegalIndex(convexPointIndex-1,pointList.size())),\n                pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex+1,pointList.size()))));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(List[GeoPoint],int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(List[GeoPoint],int).mjava","sourceNew":"    /** Create a GeoMembershipShape of the right kind given the specified bounds.\n     *@param pointList is a list of the GeoPoints to build an arbitrary polygon out of.\n     *@param convexPointIndex is the index of a single convex point whose conformation with\n     * its neighbors determines inside/outside for the entire polygon.\n     *@return a GeoMembershipShape corresponding to what was specified.\n     */\n    public static GeoMembershipShape makeGeoPolygon(List<GeoPoint> pointList, int convexPointIndex) {\n        // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n        // describing membership.\n        return buildPolygonShape(pointList, convexPointIndex, getLegalIndex(convexPointIndex+1,pointList.size()),\n            new SidedPlane(pointList.get(getLegalIndex(convexPointIndex-1,pointList.size())),\n                pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex+1,pointList.size()))),\n            false);\n    }\n\n","sourceOld":"    /** Create a GeoMembershipShape of the right kind given the specified bounds.\n     *@param pointList is a list of the GeoPoints to build an arbitrary polygon out of.\n     *@param convexPointIndex is the index of a single convex point whose conformation with\n     * its neighbors determines inside/outside for the entire polygon.\n     *@return a GeoMembershipShape corresponding to what was specified.\n     */\n    public static GeoMembershipShape makeGeoPolygon(List<GeoPoint> pointList, int convexPointIndex) {\n        // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n        // describing membership.\n        return buildPolygonShape(pointList, convexPointIndex, getLegalIndex(convexPointIndex+1,pointList.size()),\n            new SidedPlane(pointList.get(getLegalIndex(convexPointIndex-1,pointList.size())),\n                pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex+1,pointList.size()))));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(List[GeoPoint],int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(List[GeoPoint],int).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoMembershipShape makeGeoPolygon(List<GeoPoint> pointList, int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","sourceOld":"    /** Create a GeoMembershipShape of the right kind given the specified bounds.\n     *@param pointList is a list of the GeoPoints to build an arbitrary polygon out of.\n     *@param convexPointIndex is the index of a single convex point whose conformation with\n     * its neighbors determines inside/outside for the entire polygon.\n     *@return a GeoMembershipShape corresponding to what was specified.\n     */\n    public static GeoMembershipShape makeGeoPolygon(List<GeoPoint> pointList, int convexPointIndex) {\n        // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n        // describing membership.\n        return buildPolygonShape(pointList, convexPointIndex, getLegalIndex(convexPointIndex+1,pointList.size()),\n            new SidedPlane(pointList.get(getLegalIndex(convexPointIndex-1,pointList.size())),\n                pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex+1,pointList.size()))),\n            false);\n    }\n\n","bugFix":null,"bugIntro":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48","9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(List[GeoPoint],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoMembershipShape makeGeoPolygon(List<GeoPoint> pointList, int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(List[GeoPoint],int).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoMembershipShape makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoMembershipShape makeGeoPolygon(List<GeoPoint> pointList, int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","bugFix":null,"bugIntro":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48","9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":5,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#makeGeoPolygon(List[GeoPoint],int).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoMembershipShape makeGeoPolygon(final PlanetModel planetModel, final List<GeoPoint> pointList, final int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoMembershipShape makeGeoPolygon(List<GeoPoint> pointList, int convexPointIndex) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fec06d6753751ae302c7d35866763e6cb414112d"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"fec06d6753751ae302c7d35866763e6cb414112d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"851e4197476b684154a7b65f996f535522e67400":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}