{"path":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2eaa5d4d2618a012373ae4574ebb6563933aa9f6","date":1331337973,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms[0]);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, 0);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, 0);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, 0) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, 0);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, 0);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, 0) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, 0);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, 0) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, false);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, false) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, 0);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, 0) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, 0);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, 0) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b799defcfda6d303cbb180917bf1e749089adf42","date":1370695356,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["b799defcfda6d303cbb180917bf1e749089adf42"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"b799defcfda6d303cbb180917bf1e749089adf42":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6","02331260bb246364779cb6f04919ca47900d01bb"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6","02331260bb246364779cb6f04919ca47900d01bb"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["b799defcfda6d303cbb180917bf1e749089adf42","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"02331260bb246364779cb6f04919ca47900d01bb":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["38e3b736c7ca086d61b7dbb841c905ee115490da","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"b799defcfda6d303cbb180917bf1e749089adf42":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["b799defcfda6d303cbb180917bf1e749089adf42"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","38e3b736c7ca086d61b7dbb841c905ee115490da","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}