{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","commits":[{"id":"e25c332f157326faecb36f76173033c1284776a5","date":1414729852,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null) {\n        // find it using the localPort\n        String solrUrl = cli.getOptionValue(\"solrUrl\");\n        if (solrUrl == null)\n          throw new IllegalStateException(\n              \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n        if (!solrUrl.endsWith(\"/\"))\n          solrUrl += \"/\";\n\n        String systemInfoUrl = solrUrl+\"admin/info/system\";\n        HttpClient httpClient = getHttpClient();\n        try {\n          // hit Solr to get system info\n          Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n          // convert raw JSON into user-friendly output\n          StatusTool statusTool = new StatusTool();\n          Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n\n          Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n          if (cloud == null)\n            throw new IllegalArgumentException(\"Solr server at \"+solrUrl+\" not running in SolrCloud mode!\");\n\n          String zookeeper = (String) cloud.get(\"ZooKeeper\");\n          if (zookeeper.endsWith(\"(embedded)\")) {\n            zookeeper = zookeeper.substring(0,zookeeper.length()-\"(embedded)\".length());\n          }\n          zkHost = zookeeper;\n        } finally {\n          closeHttpClient(httpClient);\n        }\n      }\n\n      CloudSolrServer cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrServer(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \"+zkHost);\n        cloudSolrServer.connect();\n        runCloudTool(cloudSolrServer, cli);\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb","date":1417043528,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null) {\n        // find it using the localPort\n        String solrUrl = cli.getOptionValue(\"solrUrl\");\n        if (solrUrl == null)\n          throw new IllegalStateException(\n              \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n        if (!solrUrl.endsWith(\"/\"))\n          solrUrl += \"/\";\n\n        String systemInfoUrl = solrUrl+\"admin/info/system\";\n        HttpClient httpClient = getHttpClient();\n        try {\n          // hit Solr to get system info\n          Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n          // convert raw JSON into user-friendly output\n          StatusTool statusTool = new StatusTool();\n          Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n\n          Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n          if (cloud == null) {\n            System.err.println(\"\\nERROR: Solr at \"+solrUrl+\n                \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n                \"create_collection can only be used when running in SolrCloud mode.\\n\");\n            return 1;\n          }\n\n          String zookeeper = (String) cloud.get(\"ZooKeeper\");\n          if (zookeeper.endsWith(\"(embedded)\")) {\n            zookeeper = zookeeper.substring(0,zookeeper.length()-\"(embedded)\".length());\n          }\n          zkHost = zookeeper;\n        } finally {\n          closeHttpClient(httpClient);\n        }\n      }\n\n      CloudSolrServer cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrServer(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \"+zkHost);\n        cloudSolrServer.connect();\n        runCloudTool(cloudSolrServer, cli);\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return 0;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null) {\n        // find it using the localPort\n        String solrUrl = cli.getOptionValue(\"solrUrl\");\n        if (solrUrl == null)\n          throw new IllegalStateException(\n              \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n        if (!solrUrl.endsWith(\"/\"))\n          solrUrl += \"/\";\n\n        String systemInfoUrl = solrUrl+\"admin/info/system\";\n        HttpClient httpClient = getHttpClient();\n        try {\n          // hit Solr to get system info\n          Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n          // convert raw JSON into user-friendly output\n          StatusTool statusTool = new StatusTool();\n          Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n\n          Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n          if (cloud == null)\n            throw new IllegalArgumentException(\"Solr server at \"+solrUrl+\" not running in SolrCloud mode!\");\n\n          String zookeeper = (String) cloud.get(\"ZooKeeper\");\n          if (zookeeper.endsWith(\"(embedded)\")) {\n            zookeeper = zookeeper.substring(0,zookeeper.length()-\"(embedded)\".length());\n          }\n          zkHost = zookeeper;\n        } finally {\n          closeHttpClient(httpClient);\n        }\n      }\n\n      CloudSolrServer cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrServer(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \"+zkHost);\n        cloudSolrServer.connect();\n        runCloudTool(cloudSolrServer, cli);\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"209c0259a9b7087b2111411ec790d6557ef86307","date":1419393649,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null) {\n        // find it using the localPort\n        String solrUrl = cli.getOptionValue(\"solrUrl\");\n        if (solrUrl == null)\n          throw new IllegalStateException(\n              \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n        if (!solrUrl.endsWith(\"/\"))\n          solrUrl += \"/\";\n\n        String systemInfoUrl = solrUrl+\"admin/info/system\";\n        HttpClient httpClient = getHttpClient();\n        try {\n          // hit Solr to get system info\n          Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n          // convert raw JSON into user-friendly output\n          StatusTool statusTool = new StatusTool();\n          Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n\n          Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n          if (cloud == null) {\n            System.err.println(\"\\nERROR: Solr at \"+solrUrl+\n                \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n                \"create_collection can only be used when running in SolrCloud mode.\\n\");\n            return 1;\n          }\n\n          String zookeeper = (String) cloud.get(\"ZooKeeper\");\n          if (zookeeper.endsWith(\"(embedded)\")) {\n            zookeeper = zookeeper.substring(0,zookeeper.length()-\"(embedded)\".length());\n          }\n          zkHost = zookeeper;\n        } finally {\n          closeHttpClient(httpClient);\n        }\n      }\n\n      int toolExitStatus = 0;\n      CloudSolrServer cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrServer(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrServer.connect();\n        toolExitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null) {\n        // find it using the localPort\n        String solrUrl = cli.getOptionValue(\"solrUrl\");\n        if (solrUrl == null)\n          throw new IllegalStateException(\n              \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n        if (!solrUrl.endsWith(\"/\"))\n          solrUrl += \"/\";\n\n        String systemInfoUrl = solrUrl+\"admin/info/system\";\n        HttpClient httpClient = getHttpClient();\n        try {\n          // hit Solr to get system info\n          Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n          // convert raw JSON into user-friendly output\n          StatusTool statusTool = new StatusTool();\n          Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n\n          Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n          if (cloud == null) {\n            System.err.println(\"\\nERROR: Solr at \"+solrUrl+\n                \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n                \"create_collection can only be used when running in SolrCloud mode.\\n\");\n            return 1;\n          }\n\n          String zookeeper = (String) cloud.get(\"ZooKeeper\");\n          if (zookeeper.endsWith(\"(embedded)\")) {\n            zookeeper = zookeeper.substring(0,zookeeper.length()-\"(embedded)\".length());\n          }\n          zkHost = zookeeper;\n        } finally {\n          closeHttpClient(httpClient);\n        }\n      }\n\n      CloudSolrServer cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrServer(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \"+zkHost);\n        cloudSolrServer.connect();\n        runCloudTool(cloudSolrServer, cli);\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null) {\n        // find it using the localPort\n        String solrUrl = cli.getOptionValue(\"solrUrl\");\n        if (solrUrl == null)\n          throw new IllegalStateException(\n              \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n        if (!solrUrl.endsWith(\"/\"))\n          solrUrl += \"/\";\n\n        String systemInfoUrl = solrUrl+\"admin/info/system\";\n        HttpClient httpClient = getHttpClient();\n        try {\n          // hit Solr to get system info\n          Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n          // convert raw JSON into user-friendly output\n          StatusTool statusTool = new StatusTool();\n          Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n\n          Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n          if (cloud == null) {\n            System.err.println(\"\\nERROR: Solr at \"+solrUrl+\n                \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n                \"create_collection can only be used when running in SolrCloud mode.\\n\");\n            return 1;\n          }\n\n          String zookeeper = (String) cloud.get(\"ZooKeeper\");\n          if (zookeeper.endsWith(\"(embedded)\")) {\n            zookeeper = zookeeper.substring(0,zookeeper.length()-\"(embedded)\".length());\n          }\n          zkHost = zookeeper;\n        } finally {\n          closeHttpClient(httpClient);\n        }\n      }\n\n      int toolExitStatus = 0;\n      CloudSolrClient cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrClient(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrServer.connect();\n        toolExitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null) {\n        // find it using the localPort\n        String solrUrl = cli.getOptionValue(\"solrUrl\");\n        if (solrUrl == null)\n          throw new IllegalStateException(\n              \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n        if (!solrUrl.endsWith(\"/\"))\n          solrUrl += \"/\";\n\n        String systemInfoUrl = solrUrl+\"admin/info/system\";\n        HttpClient httpClient = getHttpClient();\n        try {\n          // hit Solr to get system info\n          Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n          // convert raw JSON into user-friendly output\n          StatusTool statusTool = new StatusTool();\n          Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n\n          Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n          if (cloud == null) {\n            System.err.println(\"\\nERROR: Solr at \"+solrUrl+\n                \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n                \"create_collection can only be used when running in SolrCloud mode.\\n\");\n            return 1;\n          }\n\n          String zookeeper = (String) cloud.get(\"ZooKeeper\");\n          if (zookeeper.endsWith(\"(embedded)\")) {\n            zookeeper = zookeeper.substring(0,zookeeper.length()-\"(embedded)\".length());\n          }\n          zkHost = zookeeper;\n        } finally {\n          closeHttpClient(httpClient);\n        }\n      }\n\n      int toolExitStatus = 0;\n      CloudSolrServer cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrServer(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrServer.connect();\n        toolExitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null) {\n        // find it using the localPort\n        String solrUrl = cli.getOptionValue(\"solrUrl\");\n        if (solrUrl == null)\n          throw new IllegalStateException(\n              \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n        if (!solrUrl.endsWith(\"/\"))\n          solrUrl += \"/\";\n\n        String systemInfoUrl = solrUrl+\"admin/info/system\";\n        CloseableHttpClient httpClient = getHttpClient();\n        try {\n          // hit Solr to get system info\n          Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n          // convert raw JSON into user-friendly output\n          StatusTool statusTool = new StatusTool();\n          Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n\n          Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n          if (cloud == null) {\n            System.err.println(\"\\nERROR: Solr at \"+solrUrl+\n                \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n                \"create_collection can only be used when running in SolrCloud mode.\\n\");\n            return 1;\n          }\n\n          String zookeeper = (String) cloud.get(\"ZooKeeper\");\n          if (zookeeper.endsWith(\"(embedded)\")) {\n            zookeeper = zookeeper.substring(0,zookeeper.length()-\"(embedded)\".length());\n          }\n          zkHost = zookeeper;\n        } finally {\n          HttpClientUtil.close(httpClient);\n        }\n      }\n\n      int toolExitStatus = 0;\n      CloudSolrClient cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrClient(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrServer.connect();\n        toolExitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null) {\n        // find it using the localPort\n        String solrUrl = cli.getOptionValue(\"solrUrl\");\n        if (solrUrl == null)\n          throw new IllegalStateException(\n              \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n        if (!solrUrl.endsWith(\"/\"))\n          solrUrl += \"/\";\n\n        String systemInfoUrl = solrUrl+\"admin/info/system\";\n        HttpClient httpClient = getHttpClient();\n        try {\n          // hit Solr to get system info\n          Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n          // convert raw JSON into user-friendly output\n          StatusTool statusTool = new StatusTool();\n          Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n\n          Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n          if (cloud == null) {\n            System.err.println(\"\\nERROR: Solr at \"+solrUrl+\n                \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n                \"create_collection can only be used when running in SolrCloud mode.\\n\");\n            return 1;\n          }\n\n          String zookeeper = (String) cloud.get(\"ZooKeeper\");\n          if (zookeeper.endsWith(\"(embedded)\")) {\n            zookeeper = zookeeper.substring(0,zookeeper.length()-\"(embedded)\".length());\n          }\n          zkHost = zookeeper;\n        } finally {\n          closeHttpClient(httpClient);\n        }\n      }\n\n      int toolExitStatus = 0;\n      CloudSolrClient cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrClient(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrServer.connect();\n        toolExitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","bugFix":["e25c332f157326faecb36f76173033c1284776a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1cd9cffef251190badd40d1da8b604d0185d744","date":1421390175,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        System.err.println(\"\\nERROR: Solr at \"+cli.getOptionValue(\"solrUrl\")+\n            \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n            \"create_collection can only be used when running in SolrCloud mode.\\n\");\n        return 1;\n      }\n\n      int toolExitStatus = 0;\n      CloudSolrClient cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrClient(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrServer.connect();\n        toolExitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null) {\n        // find it using the localPort\n        String solrUrl = cli.getOptionValue(\"solrUrl\");\n        if (solrUrl == null)\n          throw new IllegalStateException(\n              \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n        if (!solrUrl.endsWith(\"/\"))\n          solrUrl += \"/\";\n\n        String systemInfoUrl = solrUrl+\"admin/info/system\";\n        CloseableHttpClient httpClient = getHttpClient();\n        try {\n          // hit Solr to get system info\n          Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n          // convert raw JSON into user-friendly output\n          StatusTool statusTool = new StatusTool();\n          Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n\n          Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n          if (cloud == null) {\n            System.err.println(\"\\nERROR: Solr at \"+solrUrl+\n                \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n                \"create_collection can only be used when running in SolrCloud mode.\\n\");\n            return 1;\n          }\n\n          String zookeeper = (String) cloud.get(\"ZooKeeper\");\n          if (zookeeper.endsWith(\"(embedded)\")) {\n            zookeeper = zookeeper.substring(0,zookeeper.length()-\"(embedded)\".length());\n          }\n          zkHost = zookeeper;\n        } finally {\n          HttpClientUtil.close(httpClient);\n        }\n      }\n\n      int toolExitStatus = 0;\n      CloudSolrClient cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrClient(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrServer.connect();\n        toolExitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        System.err.println(\"\\nERROR: Solr at \"+cli.getOptionValue(\"solrUrl\")+\n            \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n            \"create_collection can only be used when running in SolrCloud mode.\\n\");\n        return 1;\n      }\n\n      int toolExitStatus = 0;\n\n      try (CloudSolrClient cloudSolrServer = new CloudSolrClient(zkHost)) {\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrServer.connect();\n        toolExitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        System.err.println(\"\\nERROR: Solr at \"+cli.getOptionValue(\"solrUrl\")+\n            \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n            \"create_collection can only be used when running in SolrCloud mode.\\n\");\n        return 1;\n      }\n\n      int toolExitStatus = 0;\n      CloudSolrClient cloudSolrServer = null;\n      try {\n        cloudSolrServer = new CloudSolrClient(zkHost);\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrServer.connect();\n        toolExitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      } finally {\n        if (cloudSolrServer != null) {\n          try {\n            cloudSolrServer.shutdown();\n          } catch (Exception ignore) {}\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        System.err.println(\"\\nERROR: Solr at \"+cli.getOptionValue(\"solrUrl\")+\n            \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n            \"create_collection can only be used when running in SolrCloud mode.\\n\");\n        return 1;\n      }\n\n      int toolExitStatus = 0;\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrClient.connect();\n        toolExitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        System.err.println(\"\\nERROR: Solr at \"+cli.getOptionValue(\"solrUrl\")+\n            \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n            \"create_collection can only be used when running in SolrCloud mode.\\n\");\n        return 1;\n      }\n\n      int toolExitStatus = 0;\n\n      try (CloudSolrClient cloudSolrServer = new CloudSolrClient(zkHost)) {\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrServer.connect();\n        toolExitStatus = runCloudTool(cloudSolrServer, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1","date":1437834887,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        System.err.println(\"\\nERROR: Solr at \"+cli.getOptionValue(\"solrUrl\")+\n            \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n            \"create_collection can only be used when running in SolrCloud mode.\\n\");\n        return 1;\n      }\n\n      int toolExitStatus = 0;\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrClient.connect();\n        toolExitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n\n      // quiet down the ZK logging for cli tools\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        System.err.println(\"\\nERROR: Solr at \"+cli.getOptionValue(\"solrUrl\")+\n            \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n            \"create_collection can only be used when running in SolrCloud mode.\\n\");\n        return 1;\n      }\n\n      int toolExitStatus = 0;\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrClient.connect();\n        toolExitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":6,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \"+cli.getOptionValue(\"solrUrl\")+\n            \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n            \"create_collection can only be used when running in SolrCloud mode.\\n\");\n      }\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost+\" ...\");\n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        System.err.println(\"\\nERROR: Solr at \"+cli.getOptionValue(\"solrUrl\")+\n            \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n            \"create_collection can only be used when running in SolrCloud mode.\\n\");\n        return 1;\n      }\n\n      int toolExitStatus = 0;\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrClient.connect();\n        toolExitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":5,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ToolBase#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runTool(CommandLine).mjava","sourceNew":"    public int runTool(CommandLine cli) throws Exception {\n      verbose = cli.hasOption(\"verbose\");\n\n      int toolExitStatus = 0;\n      try {\n        runImpl(cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n      return toolExitStatus;\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        System.err.println(\"\\nERROR: Solr at \"+cli.getOptionValue(\"solrUrl\")+\n            \" is running in standalone server mode, please use the create_core command instead;\\n\" +\n            \"create_collection can only be used when running in SolrCloud mode.\\n\");\n        return 1;\n      }\n\n      int toolExitStatus = 0;\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        System.out.println(\"Connecting to ZooKeeper at \" + zkHost);\n        cloudSolrClient.connect();\n        toolExitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          toolExitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n\n      return toolExitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"209c0259a9b7087b2111411ec790d6557ef86307":["1b1713aa2c66e65f3f024e9c3c4876dfed130ceb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["f1cd9cffef251190badd40d1da8b604d0185d744"],"bafca15d8e408346a67f4282ad1143b88023893b":["209c0259a9b7087b2111411ec790d6557ef86307"],"e25c332f157326faecb36f76173033c1284776a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"f1cd9cffef251190badd40d1da8b604d0185d744":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ca20be81c9284c840498143264e583ccbb8525a"],"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb":["e25c332f157326faecb36f76173033c1284776a5"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1"],"209c0259a9b7087b2111411ec790d6557ef86307":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e25c332f157326faecb36f76173033c1284776a5"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"e25c332f157326faecb36f76173033c1284776a5":["1b1713aa2c66e65f3f024e9c3c4876dfed130ceb"],"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1":["4ca20be81c9284c840498143264e583ccbb8525a"],"f1cd9cffef251190badd40d1da8b604d0185d744":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["f1cd9cffef251190badd40d1da8b604d0185d744"],"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb":["209c0259a9b7087b2111411ec790d6557ef86307"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}