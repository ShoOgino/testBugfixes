{"path":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","commits":[{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,Filter,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore);\n    } else {\n      hitsCollector = TopScoreDocCollector.create(n, after);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, Filter filter, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    if (filter != null) {\n      q = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n    }\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore);\n    } else {\n      hitsCollector = TopScoreDocCollector.create(n, after);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e39cd8d540c08cb1d59823f497611de694c18ba","date":1476797004,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore);\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore);\n    } else {\n      hitsCollector = TopScoreDocCollector.create(n, after);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef","date":1476800106,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore);\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore);\n    } else {\n      hitsCollector = TopScoreDocCollector.create(n, after);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore);\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore);\n    } else {\n      hitsCollector = TopScoreDocCollector.create(n, after);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore);\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore);\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0]);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","sourceNew":null,"sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocs topDocs = null;\n    if (n==0) {\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      searcher.search(q, MultiCollector.wrap(totalHitCountCollector, fc));\n      topDocs = new TopDocs(totalHitCountCollector.getTotalHits(), new ScoreDoc[0], Float.NaN);\n    } else {\n      TopDocsCollector<?> hitsCollector;\n      if (sort != null) {\n        if (after != null && !(after instanceof FieldDoc)) {\n          // TODO: if we fix type safety of TopFieldDocs we can\n          // remove this\n          throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n        }\n        boolean fillFields = true;\n        hitsCollector = TopFieldCollector.create(sort, n,\n                                                 (FieldDoc) after,\n                                                 fillFields,\n                                                 doDocScores,\n                                                 doMaxScore,\n                                                 true); // TODO: can we disable exact hit counts\n      } else {\n        hitsCollector = TopScoreDocCollector.create(n, after, true);\n      }\n      searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    \n      topDocs = hitsCollector.topDocs();\n    }\n    return topDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["f177ec0246f5d1788b56d8f5d5c66cb38d66bcef","404d1ab7f6f396235047017c88d545fec15dafb7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["417142ff08fda9cf0b72d5133e63097a166c6458","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"404d1ab7f6f396235047017c88d545fec15dafb7":["f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9e39cd8d540c08cb1d59823f497611de694c18ba":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5","f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5","9e39cd8d540c08cb1d59823f497611de694c18ba"],"417142ff08fda9cf0b72d5133e63097a166c6458":["1aad05eeff7818b0833c02ac6b743aa72054963b","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e39cd8d540c08cb1d59823f497611de694c18ba":["f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["9e39cd8d540c08cb1d59823f497611de694c18ba","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef":["1aad05eeff7818b0833c02ac6b743aa72054963b","404d1ab7f6f396235047017c88d545fec15dafb7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"417142ff08fda9cf0b72d5133e63097a166c6458":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}