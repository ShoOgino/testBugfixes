{"path":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getField(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getField(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getField(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getField(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["044cc6e1551cd0687478395eeceb9cde12caf10b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"044cc6e1551cd0687478395eeceb9cde12caf10b","date":1150919367,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getField(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getField(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getField(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getField(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca937aa1df116d98918d34d612d66eda116108aa","date":1171375612,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.FIELD_2_COMPRESSED_TEXT, value.equals(DocHelper.FIELD_2_COMPRESSED_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.FIELD_2_COMPRESSED_TEXT, value.equals(DocHelper.FIELD_2_COMPRESSED_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.FIELD_2_COMPRESSED_TEXT, value.equals(DocHelper.FIELD_2_COMPRESSED_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e","date":1205362958,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    assertTrue(\"binaryValue isn't null for lazy string field\", field.binaryValue() == null);\n    value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.FIELD_2_COMPRESSED_TEXT, value.equals(DocHelper.FIELD_2_COMPRESSED_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.FIELD_2_COMPRESSED_TEXT, value.equals(DocHelper.FIELD_2_COMPRESSED_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    assertTrue(\"binaryValue isn't null for lazy string field\", field.binaryValue() == null);\n    value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.FIELD_2_COMPRESSED_TEXT, value.equals(DocHelper.FIELD_2_COMPRESSED_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44f07aa147c21735d6c43bafa4fde560d0362e1","date":1255024926,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.binaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFields().mjava","sourceNew":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","sourceOld":"  public void testLazyFields() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    //new String[]{DocHelper.LARGE_LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_KEY, DocHelper.LAZY_FIELD_BINARY_KEY};\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    String value = field.stringValue();\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    assertTrue(value + \" is not equal to \" + DocHelper.LAZY_FIELD_TEXT, value.equals(DocHelper.LAZY_FIELD_TEXT) == true);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF1_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == false);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF1_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF1_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.TEXT_FIELD_UTF2_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"Field is lazy and it should not be\", field.isLazy() == true);\n    assertTrue(field.stringValue() + \" is not equal to \" + DocHelper.FIELD_UTF2_TEXT, field.stringValue().equals(DocHelper.FIELD_UTF2_TEXT) == true);\n\n    field = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"stringValue isn't null for lazy binary field\", field.stringValue() == null);\n\n    byte [] bytes = field.getBinaryValue();\n    assertTrue(\"bytes is null and it shouldn't be\", bytes != null);\n    assertTrue(\"\", DocHelper.LAZY_FIELD_BINARY_BYTES.length == bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n      assertTrue(\"byte[\" + i + \"] is mismatched\", bytes[i] == DocHelper.LAZY_FIELD_BINARY_BYTES[i]);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["e0c804f7aa477229414a7e12882af490c241f64d"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["ca937aa1df116d98918d34d612d66eda116108aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"ca937aa1df116d98918d34d612d66eda116108aa":["044cc6e1551cd0687478395eeceb9cde12caf10b"],"044cc6e1551cd0687478395eeceb9cde12caf10b":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e0c804f7aa477229414a7e12882af490c241f64d":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"ca937aa1df116d98918d34d612d66eda116108aa":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e":["e0c804f7aa477229414a7e12882af490c241f64d"],"044cc6e1551cd0687478395eeceb9cde12caf10b":["ca937aa1df116d98918d34d612d66eda116108aa"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["044cc6e1551cd0687478395eeceb9cde12caf10b"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e0c804f7aa477229414a7e12882af490c241f64d":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}