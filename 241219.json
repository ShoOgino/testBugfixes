{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testModifyCollectionAttribute().mjava","commits":[{"id":"45fa1a53285f45ccee13cbb116cf56246a61eab8","date":1529933997,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testModifyCollectionAttribute().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testModifyCollectionAttribute() throws IOException, SolrServerException {\n    final String collection = \"testAddAndDeleteCollectionAttribute\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .setAttribute(\"replicationFactor\", 25)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'replicationFactor' to be 25\", collection,\n        (n, c) -> 25 == c.getReplicationFactor());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .unsetAttribute(\"maxShardsPerNode\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'maxShardsPerNode' to be deleted\", collection,\n        (n, c) -> null == c.get(\"maxShardsPerNode\"));\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .setAttribute(\"non_existent_attr\", 25)\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to set unknown collection attribute should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .setAttribute(\"non_existent_attr\", null)\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to set null value should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .unsetAttribute(\"non_existent_attr\")\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to unset unknown collection attribute should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testModifyCollectionAttribute().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testModifyCollectionAttribute() throws IOException, SolrServerException {\n    final String collection = \"testAddAndDeleteCollectionAttribute\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .setAttribute(\"replicationFactor\", 25)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'replicationFactor' to be 25\", collection,\n        (n, c) -> 25 == c.getReplicationFactor());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .unsetAttribute(\"maxShardsPerNode\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'maxShardsPerNode' to be deleted\", collection,\n        (n, c) -> null == c.get(\"maxShardsPerNode\"));\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .setAttribute(\"non_existent_attr\", 25)\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to set unknown collection attribute should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .setAttribute(\"non_existent_attr\", null)\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to set null value should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .unsetAttribute(\"non_existent_attr\")\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to unset unknown collection attribute should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testModifyCollectionAttribute().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testModifyCollectionAttribute() throws IOException, SolrServerException {\n    final String collection = \"testAddAndDeleteCollectionAttribute\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .setAttribute(\"replicationFactor\", 25)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'replicationFactor' to be 25\", collection,\n        (n, c) -> 25 == c.getReplicationFactor());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .unsetAttribute(\"maxShardsPerNode\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'maxShardsPerNode' to be deleted\", collection,\n        (n, c) -> null == c.get(\"maxShardsPerNode\"));\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .setAttribute(\"non_existent_attr\", 25)\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to set unknown collection attribute should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .setAttribute(\"non_existent_attr\", null)\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to set null value should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .unsetAttribute(\"non_existent_attr\")\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to unset unknown collection attribute should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testModifyCollectionAttribute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testModifyCollectionAttribute().mjava","sourceNew":"  @Test\n  public void testModifyCollectionAttribute() throws IOException, SolrServerException {\n    final String collection = \"testAddAndDeleteCollectionAttribute\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .setAttribute(\"replicationFactor\", 25)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'replicationFactor' to be 25\", collection,\n        (n, c) -> 25 == c.getReplicationFactor());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .unsetAttribute(\"maxShardsPerNode\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'maxShardsPerNode' to be deleted\", collection,\n        (n, c) -> null == c.get(\"maxShardsPerNode\"));\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to set unknown collection attribute should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .setAttribute(\"non_existent_attr\", 25)\n            .process(cluster.getSolrClient())\n    );\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to set null value should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .setAttribute(\"non_existent_attr\", null)\n            .process(cluster.getSolrClient())\n    );\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to unset unknown collection attribute should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .unsetAttribute(\"non_existent_attr\")\n            .process(cluster.getSolrClient())\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testModifyCollectionAttribute() throws IOException, SolrServerException {\n    final String collection = \"testAddAndDeleteCollectionAttribute\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .setAttribute(\"replicationFactor\", 25)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'replicationFactor' to be 25\", collection,\n        (n, c) -> 25 == c.getReplicationFactor());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .unsetAttribute(\"maxShardsPerNode\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'maxShardsPerNode' to be deleted\", collection,\n        (n, c) -> null == c.get(\"maxShardsPerNode\"));\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .setAttribute(\"non_existent_attr\", 25)\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to set unknown collection attribute should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .setAttribute(\"non_existent_attr\", null)\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to set null value should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    try {\n      CollectionAdminRequest.modifyCollection(collection, null)\n          .unsetAttribute(\"non_existent_attr\")\n          .process(cluster.getSolrClient());\n      fail(\"An attempt to unset unknown collection attribute should have failed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testModifyCollectionAttribute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testModifyCollectionAttribute().mjava","sourceNew":"  @Test\n  public void testModifyCollectionAttribute() throws IOException, SolrServerException {\n    final String collection = \"testAddAndDeleteCollectionAttribute\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 1, 1);\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .setAttribute(\"replicationFactor\", 25)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'replicationFactor' to be 25\", collection,\n        (n, c) -> 25 == c.getReplicationFactor());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .unsetAttribute(\"maxShardsPerNode\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'maxShardsPerNode' to be deleted\", collection,\n        (n, c) -> null == c.get(\"maxShardsPerNode\"));\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to set unknown collection attribute should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .setAttribute(\"non_existent_attr\", 25)\n            .process(cluster.getSolrClient())\n    );\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to set null value should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .setAttribute(\"non_existent_attr\", null)\n            .process(cluster.getSolrClient())\n    );\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to unset unknown collection attribute should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .unsetAttribute(\"non_existent_attr\")\n            .process(cluster.getSolrClient())\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testModifyCollectionAttribute() throws IOException, SolrServerException {\n    final String collection = \"testAddAndDeleteCollectionAttribute\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .setAttribute(\"replicationFactor\", 25)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'replicationFactor' to be 25\", collection,\n        (n, c) -> 25 == c.getReplicationFactor());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .unsetAttribute(\"maxShardsPerNode\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'maxShardsPerNode' to be deleted\", collection,\n        (n, c) -> null == c.get(\"maxShardsPerNode\"));\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to set unknown collection attribute should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .setAttribute(\"non_existent_attr\", 25)\n            .process(cluster.getSolrClient())\n    );\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to set null value should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .setAttribute(\"non_existent_attr\", null)\n            .process(cluster.getSolrClient())\n    );\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to unset unknown collection attribute should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .unsetAttribute(\"non_existent_attr\")\n            .process(cluster.getSolrClient())\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testModifyCollectionAttribute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testModifyCollectionAttribute().mjava","sourceNew":"  @Test\n  public void testModifyCollectionAttribute() throws IOException, SolrServerException {\n    final String collection = \"testAddAndDeleteCollectionAttribute\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 1, 1);\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .setAttribute(\"replicationFactor\", 25)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'replicationFactor' to be 25\", collection,\n        (n, c) -> 25 == c.getReplicationFactor());\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to set unknown collection attribute should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .setAttribute(\"non_existent_attr\", 25)\n            .process(cluster.getSolrClient())\n    );\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to set null value should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .setAttribute(\"non_existent_attr\", null)\n            .process(cluster.getSolrClient())\n    );\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to unset unknown collection attribute should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .unsetAttribute(\"non_existent_attr\")\n            .process(cluster.getSolrClient())\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testModifyCollectionAttribute() throws IOException, SolrServerException {\n    final String collection = \"testAddAndDeleteCollectionAttribute\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 1, 1);\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .setAttribute(\"replicationFactor\", 25)\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'replicationFactor' to be 25\", collection,\n        (n, c) -> 25 == c.getReplicationFactor());\n\n    CollectionAdminRequest.modifyCollection(collection, null)\n        .unsetAttribute(\"maxShardsPerNode\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expecting attribute 'maxShardsPerNode' to be deleted\", collection,\n        (n, c) -> null == c.get(\"maxShardsPerNode\"));\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to set unknown collection attribute should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .setAttribute(\"non_existent_attr\", 25)\n            .process(cluster.getSolrClient())\n    );\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to set null value should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .setAttribute(\"non_existent_attr\", null)\n            .process(cluster.getSolrClient())\n    );\n\n    expectThrows(IllegalArgumentException.class,\n        \"An attempt to unset unknown collection attribute should have failed\",\n        () -> CollectionAdminRequest.modifyCollection(collection, null)\n            .unsetAttribute(\"non_existent_attr\")\n            .process(cluster.getSolrClient())\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45fa1a53285f45ccee13cbb116cf56246a61eab8"],"45fa1a53285f45ccee13cbb116cf56246a61eab8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["45fa1a53285f45ccee13cbb116cf56246a61eab8"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45fa1a53285f45ccee13cbb116cf56246a61eab8"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"45fa1a53285f45ccee13cbb116cf56246a61eab8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","92f789dbd1886e4b468e61b0def88b29a3f55228","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","45fa1a53285f45ccee13cbb116cf56246a61eab8","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}