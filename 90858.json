{"path":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#updateParsedCollectionAliases().mjava","commits":[{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#updateParsedCollectionAliases().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ensure {@link #parsedCollectionsAliases} is up to date. If it was modified, return true.\n   * Note that this will return true if some other alias was modified or if metadata was modified. These\n   * are spurious and the caller should be written to be tolerant of no material changes.\n   */\n  private boolean updateParsedCollectionAliases() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases(); // note: might be different from last request\n    if (this.parsedCollectionsAliases != aliases) {\n      if (this.parsedCollectionsAliases != null) {\n        log.debug(\"Observing possibly updated alias: {}\", aliasName);\n      }\n      this.parsedCollectionsDesc = parseCollections(aliasName, aliases, this::newAliasMustExistException);\n      this.parsedCollectionsAliases = aliases;\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#updateParsedCollectionAliases().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ensure {@link #parsedCollectionsAliases} is up to date. If it was modified, return true.\n   * Note that this will return true if some other alias was modified or if metadata was modified. These\n   * are spurious and the caller should be written to be tolerant of no material changes.\n   */\n  private boolean updateParsedCollectionAliases() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases(); // note: might be different from last request\n    if (this.parsedCollectionsAliases != aliases) {\n      if (this.parsedCollectionsAliases != null) {\n        log.debug(\"Observing possibly updated alias: {}\", aliasName);\n      }\n      this.parsedCollectionsDesc = parseCollections(aliasName, aliases, this::newAliasMustExistException);\n      this.parsedCollectionsAliases = aliases;\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46589ed5cc841861bf6b5e2afc55f718ebcd02a0","date":1516984620,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#updateParsedCollectionAliases().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#updateParsedCollectionAliases().mjava","sourceNew":"  /**\n   * Ensure {@link #parsedCollectionsAliases} is up to date. If it was modified, return true.\n   * Note that this will return true if some other alias was modified or if metadata was modified. These\n   * are spurious and the caller should be written to be tolerant of no material changes.\n   */\n  private boolean updateParsedCollectionAliases() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases(); // note: might be different from last request\n    if (this.parsedCollectionsAliases != aliases) {\n      if (this.parsedCollectionsAliases != null) {\n        log.debug(\"Observing possibly updated alias: {}\", getAliasName());\n      }\n      this.parsedCollectionsDesc = timeRoutedAlias.parseCollections(aliases, this::newAliasMustExistException);\n      this.parsedCollectionsAliases = aliases;\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Ensure {@link #parsedCollectionsAliases} is up to date. If it was modified, return true.\n   * Note that this will return true if some other alias was modified or if metadata was modified. These\n   * are spurious and the caller should be written to be tolerant of no material changes.\n   */\n  private boolean updateParsedCollectionAliases() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases(); // note: might be different from last request\n    if (this.parsedCollectionsAliases != aliases) {\n      if (this.parsedCollectionsAliases != null) {\n        log.debug(\"Observing possibly updated alias: {}\", aliasName);\n      }\n      this.parsedCollectionsDesc = parseCollections(aliasName, aliases, this::newAliasMustExistException);\n      this.parsedCollectionsAliases = aliases;\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767","date":1520865397,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#updateParsedCollectionAliases().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#updateParsedCollectionAliases().mjava","sourceNew":"  /**\n   * Ensure {@link #parsedCollectionsAliases} is up to date. If it was modified, return true.\n   * Note that this will return true if some other alias was modified or if properties were modified. These\n   * are spurious and the caller should be written to be tolerant of no material changes.\n   */\n  private boolean updateParsedCollectionAliases() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases(); // note: might be different from last request\n    if (this.parsedCollectionsAliases != aliases) {\n      if (this.parsedCollectionsAliases != null) {\n        log.debug(\"Observing possibly updated alias: {}\", getAliasName());\n      }\n      this.parsedCollectionsDesc = timeRoutedAlias.parseCollections(aliases, this::newAliasMustExistException);\n      this.parsedCollectionsAliases = aliases;\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Ensure {@link #parsedCollectionsAliases} is up to date. If it was modified, return true.\n   * Note that this will return true if some other alias was modified or if metadata was modified. These\n   * are spurious and the caller should be written to be tolerant of no material changes.\n   */\n  private boolean updateParsedCollectionAliases() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases(); // note: might be different from last request\n    if (this.parsedCollectionsAliases != aliases) {\n      if (this.parsedCollectionsAliases != null) {\n        log.debug(\"Observing possibly updated alias: {}\", getAliasName());\n      }\n      this.parsedCollectionsDesc = timeRoutedAlias.parseCollections(aliases, this::newAliasMustExistException);\n      this.parsedCollectionsAliases = aliases;\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":5,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#updateParsedCollectionAliases(ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#updateParsedCollectionAliases().mjava","sourceNew":"  @Override\n  public boolean updateParsedCollectionAliases(ZkController zkController) {\n    final Aliases aliases = zkController.getZkStateReader().getAliases(); // note: might be different from last request\n    if (this.parsedCollectionsAliases != aliases) {\n      if (this.parsedCollectionsAliases != null) {\n        log.debug(\"Observing possibly updated alias: {}\", getAliasName());\n      }\n      this.parsedCollectionsDesc = parseCollections(aliases );\n      this.parsedCollectionsAliases = aliases;\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Ensure {@link #parsedCollectionsAliases} is up to date. If it was modified, return true.\n   * Note that this will return true if some other alias was modified or if properties were modified. These\n   * are spurious and the caller should be written to be tolerant of no material changes.\n   */\n  private boolean updateParsedCollectionAliases() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases(); // note: might be different from last request\n    if (this.parsedCollectionsAliases != aliases) {\n      if (this.parsedCollectionsAliases != null) {\n        log.debug(\"Observing possibly updated alias: {}\", getAliasName());\n      }\n      this.parsedCollectionsDesc = timeRoutedAlias.parseCollections(aliases, this::newAliasMustExistException);\n      this.parsedCollectionsAliases = aliases;\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b627755385655c7cd3fb296f17593658805cf4d5"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["b627755385655c7cd3fb296f17593658805cf4d5"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"b627755385655c7cd3fb296f17593658805cf4d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}