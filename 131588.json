{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testCustomDictionary().mjava","commits":[{"id":"c0b14f16b545ec357d824d7dd34040f8b0460284","date":1568213150,"type":0,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testCustomDictionary().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure loading custom dictionaries from classpath works:\n  public void testCustomDictionary() throws Exception {\n    Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(),\n        new TokenInfoDictionary(ResourceScheme.CLASSPATH, \"org/apache/lucene/analysis/ja/dict/TokenInfoDictionary\"),\n        new UnknownDictionary(ResourceScheme.CLASSPATH, \"org/apache/lucene/analysis/ja/dict/UnknownDictionary\"),\n        new ConnectionCosts(ResourceScheme.CLASSPATH, \"org/apache/lucene/analysis/ja/dict/ConnectionCosts\"),\n        readDict(), true, Mode.SEARCH);\n    try (Analyzer a = makeAnalyzer(tokenizer)) {\n      assertTokenStreamContents(a.tokenStream(\"foo\", \"abcd\"),\n                                new String[] { \"a\", \"b\", \"cd\"  },\n                                new int[] { 0, 1, 2 },\n                                new int[] { 1, 2, 4 },\n                                4\n                                );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9dcc09cac106847a24991642f3bb5444c60ddbe7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9dcc09cac106847a24991642f3bb5444c60ddbe7","date":1580536269,"type":3,"author":"Kazuaki Hiraga","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testCustomDictionary().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testCustomDictionary().mjava","sourceNew":"  // Make sure loading custom dictionaries from classpath works:\n  public void testCustomDictionary() throws Exception {\n    Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(),\n        new TokenInfoDictionary(ResourceScheme.CLASSPATH, \"org/apache/lucene/analysis/ja/dict/TokenInfoDictionary\"),\n        new UnknownDictionary(ResourceScheme.CLASSPATH, \"org/apache/lucene/analysis/ja/dict/UnknownDictionary\"),\n        new ConnectionCosts(ResourceScheme.CLASSPATH, \"org/apache/lucene/analysis/ja/dict/ConnectionCosts\"),\n        readDict(), true, false, Mode.SEARCH);\n    try (Analyzer a = makeAnalyzer(tokenizer)) {\n      assertTokenStreamContents(a.tokenStream(\"foo\", \"abcd\"),\n                                new String[] { \"a\", \"b\", \"cd\"  },\n                                new int[] { 0, 1, 2 },\n                                new int[] { 1, 2, 4 },\n                                4\n                                );\n    }\n  }\n\n","sourceOld":"  // Make sure loading custom dictionaries from classpath works:\n  public void testCustomDictionary() throws Exception {\n    Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(),\n        new TokenInfoDictionary(ResourceScheme.CLASSPATH, \"org/apache/lucene/analysis/ja/dict/TokenInfoDictionary\"),\n        new UnknownDictionary(ResourceScheme.CLASSPATH, \"org/apache/lucene/analysis/ja/dict/UnknownDictionary\"),\n        new ConnectionCosts(ResourceScheme.CLASSPATH, \"org/apache/lucene/analysis/ja/dict/ConnectionCosts\"),\n        readDict(), true, Mode.SEARCH);\n    try (Analyzer a = makeAnalyzer(tokenizer)) {\n      assertTokenStreamContents(a.tokenStream(\"foo\", \"abcd\"),\n                                new String[] { \"a\", \"b\", \"cd\"  },\n                                new int[] { 0, 1, 2 },\n                                new int[] { 1, 2, 4 },\n                                4\n                                );\n    }\n  }\n\n","bugFix":["c0b14f16b545ec357d824d7dd34040f8b0460284"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0b14f16b545ec357d824d7dd34040f8b0460284":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dcc09cac106847a24991642f3bb5444c60ddbe7":["c0b14f16b545ec357d824d7dd34040f8b0460284"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dcc09cac106847a24991642f3bb5444c60ddbe7"]},"commit2Childs":{"c0b14f16b545ec357d824d7dd34040f8b0460284":["9dcc09cac106847a24991642f3bb5444c60ddbe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0b14f16b545ec357d824d7dd34040f8b0460284"],"9dcc09cac106847a24991642f3bb5444c60ddbe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}