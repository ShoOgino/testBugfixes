{"path":"src/java/org/apache/lucene/analysis/CharArraySet#getHashCode(CharSequence).mjava","commits":[{"id":"050b03edbe9b8423ff4c09685c6f03d900e86b83","date":1195514584,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#getHashCode(CharSequence).mjava","pathOld":"/dev/null","sourceNew":"  private int getHashCode(CharSequence text) {\n    int code;\n    if (ignoreCase) {\n      code = 0;\n      int len = text.length();\n      for (int i=0; i<len; i++) {\n        code = code*31 + Character.toLowerCase(text.charAt(i));\n      }\n    } else {\n      if (false && text instanceof String) {\n        code = text.hashCode();\n      } else {\n        code = 0;\n        int len = text.length();\n        for (int i=0; i<len; i++) {\n          code = code*31 + text.charAt(i);\n        }\n      }\n    }\n    return code;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0923e125411508bc912fc3d421ebd462aa0ee99f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0923e125411508bc912fc3d421ebd462aa0ee99f","date":1231279295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#getHashCode(CharSequence).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#getHashCode(CharSequence).mjava","sourceNew":"  private int getHashCode(CharSequence text) {\n    int code = 0;\n    int len = text.length();\n    if (ignoreCase) {\n      for (int i=0; i<len; i++) {\n        code = code*31 + Character.toLowerCase(text.charAt(i));\n      }\n    } else {\n      for (int i=0; i<len; i++) {\n        code = code*31 + text.charAt(i);\n      }\n    }\n    return code;\n  }\n\n","sourceOld":"  private int getHashCode(CharSequence text) {\n    int code;\n    if (ignoreCase) {\n      code = 0;\n      int len = text.length();\n      for (int i=0; i<len; i++) {\n        code = code*31 + Character.toLowerCase(text.charAt(i));\n      }\n    } else {\n      if (false && text instanceof String) {\n        code = text.hashCode();\n      } else {\n        code = 0;\n        int len = text.length();\n        for (int i=0; i<len; i++) {\n          code = code*31 + text.charAt(i);\n        }\n      }\n    }\n    return code;\n  }\n\n","bugFix":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#getHashCode(CharSequence).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#getHashCode(CharSequence).mjava","sourceNew":"  private int getHashCode(CharSequence text) {\n    int code = 0;\n    int len = text.length();\n    if (ignoreCase) {\n      for (int i=0; i<len;) {\n        int codePointAt = charUtils.codePointAt(text, i);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=0; i<len; i++) {\n        code = code*31 + text.charAt(i);\n      }\n    }\n    return code;\n  }\n\n","sourceOld":"  private int getHashCode(CharSequence text) {\n    int code = 0;\n    int len = text.length();\n    if (ignoreCase) {\n      for (int i=0; i<len; i++) {\n        code = code*31 + Character.toLowerCase(text.charAt(i));\n      }\n    } else {\n      for (int i=0; i<len; i++) {\n        code = code*31 + text.charAt(i);\n      }\n    }\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c09067bd60a59f680992d62794689898c0148ac","date":1265200673,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArrayMap#getHashCode(CharSequence).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#getHashCode(CharSequence).mjava","sourceNew":"  private int getHashCode(CharSequence text) {\n    if (text == null)\n      throw new NullPointerException();\n    int code = 0;\n    int len = text.length();\n    if (ignoreCase) {\n      for (int i=0; i<len;) {\n        int codePointAt = charUtils.codePointAt(text, i);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=0; i<len; i++) {\n        code = code*31 + text.charAt(i);\n      }\n    }\n    return code;\n  }\n\n","sourceOld":"  private int getHashCode(CharSequence text) {\n    int code = 0;\n    int len = text.length();\n    if (ignoreCase) {\n      for (int i=0; i<len;) {\n        int codePointAt = charUtils.codePointAt(text, i);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=0; i<len; i++) {\n        code = code*31 + text.charAt(i);\n      }\n    }\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0923e125411508bc912fc3d421ebd462aa0ee99f":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"3c09067bd60a59f680992d62794689898c0148ac":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c09067bd60a59f680992d62794689898c0148ac"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["0923e125411508bc912fc3d421ebd462aa0ee99f"]},"commit2Childs":{"0923e125411508bc912fc3d421ebd462aa0ee99f":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"3c09067bd60a59f680992d62794689898c0148ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["0923e125411508bc912fc3d421ebd462aa0ee99f"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["3c09067bd60a59f680992d62794689898c0148ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}