{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","commits":[{"id":"f9a98541130dbb2dd570f39bd89ced65760cad80","date":1355032328,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,boolean).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(500);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is close\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":null,"bugIntro":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   *\n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n                                        final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is close\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is close\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":null,"bugIntro":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   *\n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n                                        final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is close\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is close\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1bee4bba8988141f8357bda2ccd9405926c4e5","date":1449703835,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   *\n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n                                        final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is closed\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   *\n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n                                        final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is close\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   *\n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n                                        final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new AlreadyClosedException();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   *\n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n                                        final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is closed\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbb0b5c5101d175049b4ced1462f4c266d32fc63","date":1559534216,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   *\n   * @return leader props\n   * @throws SessionExpiredException on zk session expiration.\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n                                        final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException, SessionExpiredException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw e;\n        }\n        exp = e;\n        Thread.sleep(1000);\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new AlreadyClosedException();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   *\n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n                                        final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new AlreadyClosedException();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":["fbcfc050b9f253136eaa5950b57248b2109eac11","a6378064655e76cd7b908b1cab4ce425b384b508"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0ef034a4f10871667ae75181537775ddcf8ade4","fbcfc050b9f253136eaa5950b57248b2109eac11"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"9f1bee4bba8988141f8357bda2ccd9405926c4e5":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"f9a98541130dbb2dd570f39bd89ced65760cad80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9a98541130dbb2dd570f39bd89ced65760cad80"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f9a98541130dbb2dd570f39bd89ced65760cad80"],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"9f1bee4bba8988141f8357bda2ccd9405926c4e5":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f9a98541130dbb2dd570f39bd89ced65760cad80":["407687e67faf6e1f02a211ca078d8e3eed631027","d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9a98541130dbb2dd570f39bd89ced65760cad80","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}