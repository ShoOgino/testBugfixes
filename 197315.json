{"path":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","commits":[{"id":"5391288921372c32bf6096df320497ad2d05757f","date":1200634221,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField\" );\n    }\n    idField = sf.getName().intern();\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          IndexReader reader = core.getSearcher().get().getReader(); \n          getElevationMap( reader, core );\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["69c61db95ce530798352d3377f7cfeaae4b470c9","b9ee90cb9c9196a70b1d7cc96cca56fdabaad263"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b9ee90cb9c9196a70b1d7cc96cca56fdabaad263","date":1216648894,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField\" );\n    }\n    idField = sf.getName().intern();\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(true);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField\" );\n    }\n    idField = sf.getName().intern();\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          IndexReader reader = core.getSearcher().get().getReader(); \n          getElevationMap( reader, core );\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":["5391288921372c32bf6096df320497ad2d05757f"],"bugIntro":["b15cb31ad4da143fb3df1810938b921a4e3df1f4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b15cb31ad4da143fb3df1810938b921a4e3df1f4","date":1239876490,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField\" );\n    }\n    idField = sf.getName().intern();\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField\" );\n    }\n    idField = sf.getName().intern();\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(true);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":["b9ee90cb9c9196a70b1d7cc96cca56fdabaad263"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5273ec4ccf60d47cc2763bc7da6b09918a80c5d","date":1240450309,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField\" );\n    }\n    idField = sf.getName().intern();\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField\" );\n    }\n    idField = sf.getName().intern();\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ce664c39aec5f3a923284c202061999768425db","date":1249649666,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField\" );\n    }\n    idField = sf.getName().intern();\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69c61db95ce530798352d3377f7cfeaae4b470c9","date":1259205623,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":["5391288921372c32bf6096df320497ad2d05757f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"69c61db95ce530798352d3377f7cfeaae4b470c9":["6ce664c39aec5f3a923284c202061999768425db"],"b5273ec4ccf60d47cc2763bc7da6b09918a80c5d":["b15cb31ad4da143fb3df1810938b921a4e3df1f4"],"5391288921372c32bf6096df320497ad2d05757f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"b15cb31ad4da143fb3df1810938b921a4e3df1f4":["b9ee90cb9c9196a70b1d7cc96cca56fdabaad263"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["69c61db95ce530798352d3377f7cfeaae4b470c9"],"b9ee90cb9c9196a70b1d7cc96cca56fdabaad263":["5391288921372c32bf6096df320497ad2d05757f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6ce664c39aec5f3a923284c202061999768425db":["b5273ec4ccf60d47cc2763bc7da6b09918a80c5d"]},"commit2Childs":{"69c61db95ce530798352d3377f7cfeaae4b470c9":["ad94625fb8d088209f46650c8097196fec67f00c"],"b5273ec4ccf60d47cc2763bc7da6b09918a80c5d":["6ce664c39aec5f3a923284c202061999768425db"],"5391288921372c32bf6096df320497ad2d05757f":["b9ee90cb9c9196a70b1d7cc96cca56fdabaad263"],"b15cb31ad4da143fb3df1810938b921a4e3df1f4":["b5273ec4ccf60d47cc2763bc7da6b09918a80c5d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5391288921372c32bf6096df320497ad2d05757f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b9ee90cb9c9196a70b1d7cc96cca56fdabaad263":["b15cb31ad4da143fb3df1810938b921a4e3df1f4"],"6ce664c39aec5f3a923284c202061999768425db":["69c61db95ce530798352d3377f7cfeaae4b470c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}