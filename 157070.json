{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","commits":[{"id":"32f306edd62f81390a6e263e8b913f089f3e98a1","date":1305615519,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Healthiness#updateStalled(DocumentsWriterFlushControl).mjava","sourceNew":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (flushControl.netBytes() > flushControl.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link Healthiness} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing DWPT than numActiveDWPT we stall!\n      while (flushControl.numActiveDWPT() < flushControl.numFlushingDWPT()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Healthiness#updateStalled(DocumentsWriterFlushControl).mjava","sourceNew":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (flushControl.netBytes() > flushControl.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link Healthiness} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing DWPT than numActiveDWPT we stall!\n      while (flushControl.numActiveDWPT() < flushControl.numFlushingDWPT()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (flushControl.netBytes() > flushControl.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","sourceNew":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (flushControl.netBytes() > flushControl.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (flushControl.netBytes() > flushControl.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","32f306edd62f81390a6e263e8b913f089f3e98a1"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["c3a8a449466c1ff7ce2274fe73dab487256964b4","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}