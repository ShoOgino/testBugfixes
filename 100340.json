{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/NumericDocValuesSorter#sort(AtomicReader).mjava","commits":[{"id":"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","date":1363331426,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/NumericDocValuesSorter#sort(AtomicReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Sorter.DocMap sort(final AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(fieldName);\n    final DocComparator comparator = new DocComparator() {\n\n      @Override\n      public int compare(int docID1, int docID2) {\n        final long v1 = ndv.get(docID1);\n        final long v2 = ndv.get(docID2);\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n      \n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36e7ee652ccd538115c356b212269017fe6f4757","date":1365591252,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/NumericDocValuesSorter#sort(AtomicReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/NumericDocValuesSorter#sort(AtomicReader).mjava","sourceNew":"  @Override\n  public Sorter.DocMap sort(final AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(fieldName);\n    final DocComparator comparator;\n    if (ascending) {\n      comparator = new DocComparator() {\n        @Override\n        public int compare(int docID1, int docID2) {\n          final long v1 = ndv.get(docID1);\n          final long v2 = ndv.get(docID2);\n          return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n        }\n      };\n    } else {\n      comparator = new DocComparator() {\n        @Override\n        public int compare(int docID1, int docID2) {\n          final long v1 = ndv.get(docID1);\n          final long v2 = ndv.get(docID2);\n          return v1 > v2 ? -1 : v1 == v2 ? 0 : 1;\n        }\n      };\n    }\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  @Override\n  public Sorter.DocMap sort(final AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(fieldName);\n    final DocComparator comparator = new DocComparator() {\n\n      @Override\n      public int compare(int docID1, int docID2) {\n        final long v1 = ndv.get(docID1);\n        final long v2 = ndv.get(docID2);\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n      \n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbe87c1ed50e47c3704b5fb2b690461bfc158aba","date":1394111115,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/NumericDocValuesSorter#sort(AtomicReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Sorter.DocMap sort(final AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(fieldName);\n    final DocComparator comparator;\n    if (ascending) {\n      comparator = new DocComparator() {\n        @Override\n        public int compare(int docID1, int docID2) {\n          final long v1 = ndv.get(docID1);\n          final long v2 = ndv.get(docID2);\n          return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n        }\n      };\n    } else {\n      comparator = new DocComparator() {\n        @Override\n        public int compare(int docID1, int docID2) {\n          final long v1 = ndv.get(docID1);\n          final long v2 = ndv.get(docID2);\n          return v1 > v2 ? -1 : v1 == v2 ? 0 : 1;\n        }\n      };\n    }\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/NumericDocValuesSorter#sort(AtomicReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Sorter.DocMap sort(final AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(fieldName);\n    final DocComparator comparator;\n    if (ascending) {\n      comparator = new DocComparator() {\n        @Override\n        public int compare(int docID1, int docID2) {\n          final long v1 = ndv.get(docID1);\n          final long v2 = ndv.get(docID2);\n          return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n        }\n      };\n    } else {\n      comparator = new DocComparator() {\n        @Override\n        public int compare(int docID1, int docID2) {\n          final long v1 = ndv.get(docID1);\n          final long v2 = ndv.get(docID2);\n          return v1 > v2 ? -1 : v1 == v2 ? 0 : 1;\n        }\n      };\n    }\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/NumericDocValuesSorter#sort(AtomicReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Sorter.DocMap sort(final AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(fieldName);\n    final DocComparator comparator;\n    if (ascending) {\n      comparator = new DocComparator() {\n        @Override\n        public int compare(int docID1, int docID2) {\n          final long v1 = ndv.get(docID1);\n          final long v2 = ndv.get(docID2);\n          return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n        }\n      };\n    } else {\n      comparator = new DocComparator() {\n        @Override\n        public int compare(int docID1, int docID2) {\n          final long v1 = ndv.get(docID1);\n          final long v2 = ndv.get(docID2);\n          return v1 > v2 ? -1 : v1 == v2 ? 0 : 1;\n        }\n      };\n    }\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["36e7ee652ccd538115c356b212269017fe6f4757","4637747f71df783fc2014ef1f1e0418466e3bed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cbe87c1ed50e47c3704b5fb2b690461bfc158aba":["36e7ee652ccd538115c356b212269017fe6f4757"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["36e7ee652ccd538115c356b212269017fe6f4757","cbe87c1ed50e47c3704b5fb2b690461bfc158aba"],"36e7ee652ccd538115c356b212269017fe6f4757":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4637747f71df783fc2014ef1f1e0418466e3bed6"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"cbe87c1ed50e47c3704b5fb2b690461bfc158aba":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["36e7ee652ccd538115c356b212269017fe6f4757"],"36e7ee652ccd538115c356b212269017fe6f4757":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cbe87c1ed50e47c3704b5fb2b690461bfc158aba","4637747f71df783fc2014ef1f1e0418466e3bed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}