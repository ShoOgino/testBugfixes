{"path":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#test404Locally().mjava","commits":[{"id":"fd45d359393ce293fc33bb4770a2fa8582298ee4","date":1356134855,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#test404Locally().mjava","pathOld":"/dev/null","sourceNew":"  public void test404Locally() throws Exception {\n\n    // we need to test that executing the handler directly does not \n    // throw an exception, just sets the exception on the response.\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n    try {\n      // bypass TestHarness since it will throw any exception found in the\n      // response.\n      SolrCore core = h.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(\"/admin/file\"),\n                   req(\"file\", \"does-not-exist-404.txt\"), rsp);\n      assertNotNull(\"no exception in response\", rsp.getException());\n      assertTrue(\"wrong type of exception: \" + rsp.getException().getClass(),\n                 rsp.getException() instanceof SolrException);\n      assertEquals(404, ((SolrException)rsp.getException()).code());\n\n    } catch (Exception e) {\n      assertNull(\"Should not have caught an exception\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#test404Locally().mjava","pathOld":"/dev/null","sourceNew":"  public void test404Locally() throws Exception {\n\n    // we need to test that executing the handler directly does not \n    // throw an exception, just sets the exception on the response.\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n    try {\n      // bypass TestHarness since it will throw any exception found in the\n      // response.\n      SolrCore core = h.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(\"/admin/file\"),\n                   req(\"file\", \"does-not-exist-404.txt\"), rsp);\n      assertNotNull(\"no exception in response\", rsp.getException());\n      assertTrue(\"wrong type of exception: \" + rsp.getException().getClass(),\n                 rsp.getException() instanceof SolrException);\n      assertEquals(404, ((SolrException)rsp.getException()).code());\n\n    } catch (Exception e) {\n      assertNull(\"Should not have caught an exception\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#test404Locally().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#test404Locally().mjava","sourceNew":"  public void test404Locally() throws Exception {\n\n    // we need to test that executing the handler directly does not \n    // throw an exception, just sets the exception on the response.\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // bypass TestHarness since it will throw any exception found in the\n    // response.\n    SolrCore core = h.getCore();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(\"/admin/file\"),\n        req(\"file\", \"does-not-exist-404.txt\"), rsp);\n    assertNotNull(\"no exception in response\", rsp.getException());\n    assertTrue(\"wrong type of exception: \" + rsp.getException().getClass(),\n        rsp.getException() instanceof SolrException);\n    assertEquals(404, ((SolrException)rsp.getException()).code());\n  }\n\n","sourceOld":"  public void test404Locally() throws Exception {\n\n    // we need to test that executing the handler directly does not \n    // throw an exception, just sets the exception on the response.\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n    try {\n      // bypass TestHarness since it will throw any exception found in the\n      // response.\n      SolrCore core = h.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(\"/admin/file\"),\n                   req(\"file\", \"does-not-exist-404.txt\"), rsp);\n      assertNotNull(\"no exception in response\", rsp.getException());\n      assertTrue(\"wrong type of exception: \" + rsp.getException().getClass(),\n                 rsp.getException() instanceof SolrException);\n      assertEquals(404, ((SolrException)rsp.getException()).code());\n\n    } catch (Exception e) {\n      assertNull(\"Should not have caught an exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#test404Locally().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#test404Locally().mjava","sourceNew":"  public void test404Locally() throws Exception {\n\n    // we need to test that executing the handler directly does not \n    // throw an exception, just sets the exception on the response.\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // bypass TestHarness since it will throw any exception found in the\n    // response.\n    SolrCore core = h.getCore();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(\"/admin/file\"),\n        req(\"file\", \"does-not-exist-404.txt\"), rsp);\n    assertNotNull(\"no exception in response\", rsp.getException());\n    assertTrue(\"wrong type of exception: \" + rsp.getException().getClass(),\n        rsp.getException() instanceof SolrException);\n    assertEquals(404, ((SolrException)rsp.getException()).code());\n  }\n\n","sourceOld":"  public void test404Locally() throws Exception {\n\n    // we need to test that executing the handler directly does not \n    // throw an exception, just sets the exception on the response.\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n    try {\n      // bypass TestHarness since it will throw any exception found in the\n      // response.\n      SolrCore core = h.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(\"/admin/file\"),\n                   req(\"file\", \"does-not-exist-404.txt\"), rsp);\n      assertNotNull(\"no exception in response\", rsp.getException());\n      assertTrue(\"wrong type of exception: \" + rsp.getException().getClass(),\n                 rsp.getException() instanceof SolrException);\n      assertEquals(404, ((SolrException)rsp.getException()).code());\n\n    } catch (Exception e) {\n      assertNull(\"Should not have caught an exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#test404Locally().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#test404Locally().mjava","sourceNew":"  public void test404Locally() throws Exception {\n\n    // we need to test that executing the handler directly does not \n    // throw an exception, just sets the exception on the response.\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n\n    // bypass TestHarness since it will throw any exception found in the\n    // response.\n    SolrCore core = h.getCore();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(\"/admin/file\"),\n        req(\"file\", \"does-not-exist-404.txt\"), rsp);\n    assertNotNull(\"no exception in response\", rsp.getException());\n    assertTrue(\"wrong type of exception: \" + rsp.getException().getClass(),\n        rsp.getException() instanceof SolrException);\n    assertEquals(404, ((SolrException)rsp.getException()).code());\n  }\n\n","sourceOld":"  public void test404Locally() throws Exception {\n\n    // we need to test that executing the handler directly does not \n    // throw an exception, just sets the exception on the response.\n    initCore(\"solrconfig.xml\", \"schema.xml\");\n    try {\n      // bypass TestHarness since it will throw any exception found in the\n      // response.\n      SolrCore core = h.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(\"/admin/file\"),\n                   req(\"file\", \"does-not-exist-404.txt\"), rsp);\n      assertNotNull(\"no exception in response\", rsp.getException());\n      assertTrue(\"wrong type of exception: \" + rsp.getException().getClass(),\n                 rsp.getException() instanceof SolrException);\n      assertEquals(404, ((SolrException)rsp.getException()).code());\n\n    } catch (Exception e) {\n      assertNull(\"Should not have caught an exception\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd45d359393ce293fc33bb4770a2fa8582298ee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd45d359393ce293fc33bb4770a2fa8582298ee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["fd45d359393ce293fc33bb4770a2fa8582298ee4"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["fd45d359393ce293fc33bb4770a2fa8582298ee4","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["fd45d359393ce293fc33bb4770a2fa8582298ee4","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fd45d359393ce293fc33bb4770a2fa8582298ee4"],"fd45d359393ce293fc33bb4770a2fa8582298ee4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}