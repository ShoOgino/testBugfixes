{"path":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests {@link RestManager}'s responses to REST API requests on /config/managed\n   * and /schema/managed.  Also tests {@link ManagedWordSetResource} functionality\n   * through the REST API.\n   */\n  @Test\n  public void testRestManagerEndpoints() throws Exception {\n    // relies on these ManagedResources being activated in the schema-rest.xml used by this test\n    assertJQ(\"/schema/managed\",\n             \"/responseHeader/status==0\");\n    /*\n     * TODO: can't assume these will be here unless schema-rest.xml includes these declarations\n     * \n             \"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\",\n             \"/managedResources/[0]/resourceId=='/schema/analysis/stopwords/english'\",\n             \"/managedResources/[1]/class=='org.apache.solr.rest.schema.analysis.ManagedSynonymFilterFactory$SynonymManager'\",\n             \"/managedResources/[1]/resourceId=='/schema/analysis/synonyms/english'\");\n    */\n    \n    // no pre-existing managed config components\n    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n        \n    // add a ManagedWordSetResource for managing protected words (for stemming)\n    String newEndpoint = \"/schema/analysis/protwords/english\";\n    \n    assertJPut(newEndpoint, json(\"{ 'class':'solr.ManagedWordSetResource' }\"), \"/responseHeader/status==0\");\n        \n    assertJQ(\"/schema/managed\"\n        ,\"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\"\n        ,\"/managedResources/[0]/resourceId=='/schema/analysis/protwords/english'\");\n    \n    // query the resource we just created\n    assertJQ(newEndpoint, \"/wordSet/managedList==[]\");\n    \n    // add some words to this new word list manager\n    assertJPut(newEndpoint, JSONUtil.toJSON(Arrays.asList(\"this\", \"is\", \"a\", \"test\")), \"/responseHeader/status==0\");\n\n    assertJQ(newEndpoint\n        ,\"/wordSet/managedList==['a','is','test','this']\"\n        ,\"/wordSet/initArgs=={'ignoreCase':false}\"); // make sure the default is serialized even if not specified\n\n    // Test for case-sensitivity - \"Test\" lookup should fail\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==404\");\n\n    // Switch to case-insensitive\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':'true' } }\"), \"/responseHeader/status==0\");\n\n    // Test for case-insensitivity - \"Test\" lookup should succeed\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==0\");\n\n    // Switch to case-sensitive - this request should fail: changing ignoreCase from true to false is not permitted\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':false } }\"), \"/responseHeader/status==400\");\n\n    // Test XML response format\n    assertQ(newEndpoint + \"?wt=xml\"\n        ,\"/response/lst[@name='responseHeader']/int[@name='status']=0\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[1]='a'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[2]='is'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[3]='test'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[4]='this'\");\n\n    // delete the one we created above\n    assertJDelete(newEndpoint, \"/responseHeader/status==0\");\n\n    // make sure it's really gone\n    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","sourceNew":"  /**\n   * Tests {@link RestManager}'s responses to REST API requests on /config/managed\n   * and /schema/managed.  Also tests {@link ManagedWordSetResource} functionality\n   * through the REST API.\n   */\n  @Test\n  public void testRestManagerEndpoints() throws Exception {\n    // relies on these ManagedResources being activated in the schema-rest.xml used by this test\n    assertJQ(\"/schema/managed\",\n             \"/responseHeader/status==0\");\n    /*\n     * TODO: can't assume these will be here unless schema-rest.xml includes these declarations\n     * \n             \"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\",\n             \"/managedResources/[0]/resourceId=='/schema/analysis/stopwords/english'\",\n             \"/managedResources/[1]/class=='org.apache.solr.rest.schema.analysis.ManagedSynonymFilterFactory$SynonymManager'\",\n             \"/managedResources/[1]/resourceId=='/schema/analysis/synonyms/english'\");\n    */\n    \n    // no pre-existing managed config components\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n        \n    // add a ManagedWordSetResource for managing protected words (for stemming)\n    String newEndpoint = \"/schema/analysis/protwords/english\";\n    \n    assertJPut(newEndpoint, json(\"{ 'class':'solr.ManagedWordSetResource' }\"), \"/responseHeader/status==0\");\n        \n    assertJQ(\"/schema/managed\"\n        ,\"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\"\n        ,\"/managedResources/[0]/resourceId=='/schema/analysis/protwords/english'\");\n    \n    // query the resource we just created\n    assertJQ(newEndpoint, \"/wordSet/managedList==[]\");\n    \n    // add some words to this new word list manager\n    assertJPut(newEndpoint, JSONUtil.toJSON(Arrays.asList(\"this\", \"is\", \"a\", \"test\")), \"/responseHeader/status==0\");\n\n    assertJQ(newEndpoint\n        ,\"/wordSet/managedList==['a','is','test','this']\"\n        ,\"/wordSet/initArgs=={'ignoreCase':false}\"); // make sure the default is serialized even if not specified\n\n    // Test for case-sensitivity - \"Test\" lookup should fail\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==404\");\n\n    // Switch to case-insensitive\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':'true' } }\"), \"/responseHeader/status==0\");\n\n    // Test for case-insensitivity - \"Test\" lookup should succeed\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==0\");\n\n    // Switch to case-sensitive - this request should fail: changing ignoreCase from true to false is not permitted\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':false } }\"), \"/responseHeader/status==400\");\n\n    // Test XML response format\n    assertQ(newEndpoint + \"?wt=xml\"\n        ,\"/response/lst[@name='responseHeader']/int[@name='status']=0\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[1]='a'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[2]='is'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[3]='test'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[4]='this'\");\n\n    // delete the one we created above\n    assertJDelete(newEndpoint, \"/responseHeader/status==0\");\n\n    // make sure it's really gone\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n  }\n\n","sourceOld":"  /**\n   * Tests {@link RestManager}'s responses to REST API requests on /config/managed\n   * and /schema/managed.  Also tests {@link ManagedWordSetResource} functionality\n   * through the REST API.\n   */\n  @Test\n  public void testRestManagerEndpoints() throws Exception {\n    // relies on these ManagedResources being activated in the schema-rest.xml used by this test\n    assertJQ(\"/schema/managed\",\n             \"/responseHeader/status==0\");\n    /*\n     * TODO: can't assume these will be here unless schema-rest.xml includes these declarations\n     * \n             \"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\",\n             \"/managedResources/[0]/resourceId=='/schema/analysis/stopwords/english'\",\n             \"/managedResources/[1]/class=='org.apache.solr.rest.schema.analysis.ManagedSynonymFilterFactory$SynonymManager'\",\n             \"/managedResources/[1]/resourceId=='/schema/analysis/synonyms/english'\");\n    */\n    \n    // no pre-existing managed config components\n    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n        \n    // add a ManagedWordSetResource for managing protected words (for stemming)\n    String newEndpoint = \"/schema/analysis/protwords/english\";\n    \n    assertJPut(newEndpoint, json(\"{ 'class':'solr.ManagedWordSetResource' }\"), \"/responseHeader/status==0\");\n        \n    assertJQ(\"/schema/managed\"\n        ,\"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\"\n        ,\"/managedResources/[0]/resourceId=='/schema/analysis/protwords/english'\");\n    \n    // query the resource we just created\n    assertJQ(newEndpoint, \"/wordSet/managedList==[]\");\n    \n    // add some words to this new word list manager\n    assertJPut(newEndpoint, JSONUtil.toJSON(Arrays.asList(\"this\", \"is\", \"a\", \"test\")), \"/responseHeader/status==0\");\n\n    assertJQ(newEndpoint\n        ,\"/wordSet/managedList==['a','is','test','this']\"\n        ,\"/wordSet/initArgs=={'ignoreCase':false}\"); // make sure the default is serialized even if not specified\n\n    // Test for case-sensitivity - \"Test\" lookup should fail\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==404\");\n\n    // Switch to case-insensitive\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':'true' } }\"), \"/responseHeader/status==0\");\n\n    // Test for case-insensitivity - \"Test\" lookup should succeed\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==0\");\n\n    // Switch to case-sensitive - this request should fail: changing ignoreCase from true to false is not permitted\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':false } }\"), \"/responseHeader/status==400\");\n\n    // Test XML response format\n    assertQ(newEndpoint + \"?wt=xml\"\n        ,\"/response/lst[@name='responseHeader']/int[@name='status']=0\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[1]='a'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[2]='is'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[3]='test'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[4]='this'\");\n\n    // delete the one we created above\n    assertJDelete(newEndpoint, \"/responseHeader/status==0\");\n\n    // make sure it's really gone\n    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb58c4024f450cc56f3a748012536d763700adb5","date":1495748960,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","sourceNew":"  /**\n   * Tests {@link RestManager}'s responses to REST API requests on /config/managed\n   * and /schema/managed.  Also tests {@link ManagedWordSetResource} functionality\n   * through the REST API.\n   */\n  @Test\n  public void testRestManagerEndpoints() throws Exception {\n    // relies on these ManagedResources being activated in the schema-rest.xml used by this test\n    assertJQ(\"/schema/managed\",\n             \"/responseHeader/status==0\");\n    /*\n     * TODO: can't assume these will be here unless schema-rest.xml includes these declarations\n     * \n             \"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\",\n             \"/managedResources/[0]/resourceId=='/schema/analysis/stopwords/english'\",\n             \"/managedResources/[1]/class=='org.apache.solr.rest.schema.analysis.ManagedSynonymGraphFilterFactory$SynonymManager'\",\n             \"/managedResources/[1]/resourceId=='/schema/analysis/synonyms/englishgraph'\");\n    */\n    \n    // no pre-existing managed config components\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n        \n    // add a ManagedWordSetResource for managing protected words (for stemming)\n    String newEndpoint = \"/schema/analysis/protwords/english\";\n    \n    assertJPut(newEndpoint, json(\"{ 'class':'solr.ManagedWordSetResource' }\"), \"/responseHeader/status==0\");\n        \n    assertJQ(\"/schema/managed\"\n        ,\"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\"\n        ,\"/managedResources/[0]/resourceId=='/schema/analysis/protwords/english'\");\n    \n    // query the resource we just created\n    assertJQ(newEndpoint, \"/wordSet/managedList==[]\");\n    \n    // add some words to this new word list manager\n    assertJPut(newEndpoint, JSONUtil.toJSON(Arrays.asList(\"this\", \"is\", \"a\", \"test\")), \"/responseHeader/status==0\");\n\n    assertJQ(newEndpoint\n        ,\"/wordSet/managedList==['a','is','test','this']\"\n        ,\"/wordSet/initArgs=={'ignoreCase':false}\"); // make sure the default is serialized even if not specified\n\n    // Test for case-sensitivity - \"Test\" lookup should fail\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==404\");\n\n    // Switch to case-insensitive\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':'true' } }\"), \"/responseHeader/status==0\");\n\n    // Test for case-insensitivity - \"Test\" lookup should succeed\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==0\");\n\n    // Switch to case-sensitive - this request should fail: changing ignoreCase from true to false is not permitted\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':false } }\"), \"/responseHeader/status==400\");\n\n    // Test XML response format\n    assertQ(newEndpoint + \"?wt=xml\"\n        ,\"/response/lst[@name='responseHeader']/int[@name='status']=0\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[1]='a'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[2]='is'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[3]='test'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[4]='this'\");\n\n    // delete the one we created above\n    assertJDelete(newEndpoint, \"/responseHeader/status==0\");\n\n    // make sure it's really gone\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n  }\n\n","sourceOld":"  /**\n   * Tests {@link RestManager}'s responses to REST API requests on /config/managed\n   * and /schema/managed.  Also tests {@link ManagedWordSetResource} functionality\n   * through the REST API.\n   */\n  @Test\n  public void testRestManagerEndpoints() throws Exception {\n    // relies on these ManagedResources being activated in the schema-rest.xml used by this test\n    assertJQ(\"/schema/managed\",\n             \"/responseHeader/status==0\");\n    /*\n     * TODO: can't assume these will be here unless schema-rest.xml includes these declarations\n     * \n             \"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\",\n             \"/managedResources/[0]/resourceId=='/schema/analysis/stopwords/english'\",\n             \"/managedResources/[1]/class=='org.apache.solr.rest.schema.analysis.ManagedSynonymFilterFactory$SynonymManager'\",\n             \"/managedResources/[1]/resourceId=='/schema/analysis/synonyms/english'\");\n    */\n    \n    // no pre-existing managed config components\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n        \n    // add a ManagedWordSetResource for managing protected words (for stemming)\n    String newEndpoint = \"/schema/analysis/protwords/english\";\n    \n    assertJPut(newEndpoint, json(\"{ 'class':'solr.ManagedWordSetResource' }\"), \"/responseHeader/status==0\");\n        \n    assertJQ(\"/schema/managed\"\n        ,\"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\"\n        ,\"/managedResources/[0]/resourceId=='/schema/analysis/protwords/english'\");\n    \n    // query the resource we just created\n    assertJQ(newEndpoint, \"/wordSet/managedList==[]\");\n    \n    // add some words to this new word list manager\n    assertJPut(newEndpoint, JSONUtil.toJSON(Arrays.asList(\"this\", \"is\", \"a\", \"test\")), \"/responseHeader/status==0\");\n\n    assertJQ(newEndpoint\n        ,\"/wordSet/managedList==['a','is','test','this']\"\n        ,\"/wordSet/initArgs=={'ignoreCase':false}\"); // make sure the default is serialized even if not specified\n\n    // Test for case-sensitivity - \"Test\" lookup should fail\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==404\");\n\n    // Switch to case-insensitive\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':'true' } }\"), \"/responseHeader/status==0\");\n\n    // Test for case-insensitivity - \"Test\" lookup should succeed\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==0\");\n\n    // Switch to case-sensitive - this request should fail: changing ignoreCase from true to false is not permitted\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':false } }\"), \"/responseHeader/status==400\");\n\n    // Test XML response format\n    assertQ(newEndpoint + \"?wt=xml\"\n        ,\"/response/lst[@name='responseHeader']/int[@name='status']=0\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[1]='a'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[2]='is'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[3]='test'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[4]='this'\");\n\n    // delete the one we created above\n    assertJDelete(newEndpoint, \"/responseHeader/status==0\");\n\n    // make sure it's really gone\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","sourceNew":"  /**\n   * Tests {@link RestManager}'s responses to REST API requests on /config/managed\n   * and /schema/managed.  Also tests {@link ManagedWordSetResource} functionality\n   * through the REST API.\n   */\n  @Test\n  public void testRestManagerEndpoints() throws Exception {\n    // relies on these ManagedResources being activated in the schema-rest.xml used by this test\n    assertJQ(\"/schema/managed\",\n             \"/responseHeader/status==0\");\n    /*\n     * TODO: can't assume these will be here unless schema-rest.xml includes these declarations\n     * \n             \"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\",\n             \"/managedResources/[0]/resourceId=='/schema/analysis/stopwords/english'\",\n             \"/managedResources/[1]/class=='org.apache.solr.rest.schema.analysis.ManagedSynonymGraphFilterFactory$SynonymManager'\",\n             \"/managedResources/[1]/resourceId=='/schema/analysis/synonyms/englishgraph'\");\n    */\n    \n    // no pre-existing managed config components\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n        \n    // add a ManagedWordSetResource for managing protected words (for stemming)\n    String newEndpoint = \"/schema/analysis/protwords/english\";\n    \n    assertJPut(newEndpoint, json(\"{ 'class':'solr.ManagedWordSetResource' }\"), \"/responseHeader/status==0\");\n        \n    assertJQ(\"/schema/managed\"\n        ,\"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\"\n        ,\"/managedResources/[0]/resourceId=='/schema/analysis/protwords/english'\");\n    \n    // query the resource we just created\n    assertJQ(newEndpoint, \"/wordSet/managedList==[]\");\n    \n    // add some words to this new word list manager\n    assertJPut(newEndpoint, JSONUtil.toJSON(Arrays.asList(\"this\", \"is\", \"a\", \"test\")), \"/responseHeader/status==0\");\n\n    assertJQ(newEndpoint\n        ,\"/wordSet/managedList==['a','is','test','this']\"\n        ,\"/wordSet/initArgs=={'ignoreCase':false}\"); // make sure the default is serialized even if not specified\n\n    // Test for case-sensitivity - \"Test\" lookup should fail\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==404\");\n\n    // Switch to case-insensitive\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':'true' } }\"), \"/responseHeader/status==0\");\n\n    // Test for case-insensitivity - \"Test\" lookup should succeed\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==0\");\n\n    // Switch to case-sensitive - this request should fail: changing ignoreCase from true to false is not permitted\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':false } }\"), \"/responseHeader/status==400\");\n\n    // Test XML response format\n    assertQ(newEndpoint + \"?wt=xml\"\n        ,\"/response/lst[@name='responseHeader']/int[@name='status']=0\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[1]='a'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[2]='is'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[3]='test'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[4]='this'\");\n\n    // delete the one we created above\n    assertJDelete(newEndpoint, \"/responseHeader/status==0\");\n\n    // make sure it's really gone\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n  }\n\n","sourceOld":"  /**\n   * Tests {@link RestManager}'s responses to REST API requests on /config/managed\n   * and /schema/managed.  Also tests {@link ManagedWordSetResource} functionality\n   * through the REST API.\n   */\n  @Test\n  public void testRestManagerEndpoints() throws Exception {\n    // relies on these ManagedResources being activated in the schema-rest.xml used by this test\n    assertJQ(\"/schema/managed\",\n             \"/responseHeader/status==0\");\n    /*\n     * TODO: can't assume these will be here unless schema-rest.xml includes these declarations\n     * \n             \"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\",\n             \"/managedResources/[0]/resourceId=='/schema/analysis/stopwords/english'\",\n             \"/managedResources/[1]/class=='org.apache.solr.rest.schema.analysis.ManagedSynonymFilterFactory$SynonymManager'\",\n             \"/managedResources/[1]/resourceId=='/schema/analysis/synonyms/english'\");\n    */\n    \n    // no pre-existing managed config components\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n        \n    // add a ManagedWordSetResource for managing protected words (for stemming)\n    String newEndpoint = \"/schema/analysis/protwords/english\";\n    \n    assertJPut(newEndpoint, json(\"{ 'class':'solr.ManagedWordSetResource' }\"), \"/responseHeader/status==0\");\n        \n    assertJQ(\"/schema/managed\"\n        ,\"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\"\n        ,\"/managedResources/[0]/resourceId=='/schema/analysis/protwords/english'\");\n    \n    // query the resource we just created\n    assertJQ(newEndpoint, \"/wordSet/managedList==[]\");\n    \n    // add some words to this new word list manager\n    assertJPut(newEndpoint, JSONUtil.toJSON(Arrays.asList(\"this\", \"is\", \"a\", \"test\")), \"/responseHeader/status==0\");\n\n    assertJQ(newEndpoint\n        ,\"/wordSet/managedList==['a','is','test','this']\"\n        ,\"/wordSet/initArgs=={'ignoreCase':false}\"); // make sure the default is serialized even if not specified\n\n    // Test for case-sensitivity - \"Test\" lookup should fail\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==404\");\n\n    // Switch to case-insensitive\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':'true' } }\"), \"/responseHeader/status==0\");\n\n    // Test for case-insensitivity - \"Test\" lookup should succeed\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==0\");\n\n    // Switch to case-sensitive - this request should fail: changing ignoreCase from true to false is not permitted\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':false } }\"), \"/responseHeader/status==400\");\n\n    // Test XML response format\n    assertQ(newEndpoint + \"?wt=xml\"\n        ,\"/response/lst[@name='responseHeader']/int[@name='status']=0\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[1]='a'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[2]='is'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[3]='test'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[4]='this'\");\n\n    // delete the one we created above\n    assertJDelete(newEndpoint, \"/responseHeader/status==0\");\n\n    // make sure it's really gone\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","sourceNew":"  /**\n   * Tests {@link RestManager}'s responses to REST API requests on /config/managed\n   * and /schema/managed.  Also tests {@link ManagedWordSetResource} functionality\n   * through the REST API.\n   */\n  @Test\n  public void testRestManagerEndpoints() throws Exception {\n    // relies on these ManagedResources being activated in the schema-rest.xml used by this test\n    assertJQ(\"/schema/managed\",\n             \"/responseHeader/status==0\");\n    /*\n     * TODO: can't assume these will be here unless schema-rest.xml includes these declarations\n     * \n             \"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\",\n             \"/managedResources/[0]/resourceId=='/schema/analysis/stopwords/english'\",\n             \"/managedResources/[1]/class=='org.apache.solr.rest.schema.analysis.ManagedSynonymGraphFilterFactory$SynonymManager'\",\n             \"/managedResources/[1]/resourceId=='/schema/analysis/synonyms/englishgraph'\");\n    */\n    \n    // no pre-existing managed config components\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n        \n    // add a ManagedWordSetResource for managing protected words (for stemming)\n    String newEndpoint = \"/schema/analysis/protwords/english\";\n    \n    assertJPut(newEndpoint, json(\"{ 'class':'solr.ManagedWordSetResource' }\"), \"/responseHeader/status==0\");\n        \n    assertJQ(\"/schema/managed\"\n        ,\"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\"\n        ,\"/managedResources/[0]/resourceId=='/schema/analysis/protwords/english'\");\n    \n    // query the resource we just created\n    assertJQ(newEndpoint, \"/wordSet/managedList==[]\");\n    \n    // add some words to this new word list manager\n    assertJPut(newEndpoint, JSONUtil.toJSON(Arrays.asList(\"this\", \"is\", \"a\", \"test\")), \"/responseHeader/status==0\");\n\n    assertJQ(newEndpoint\n        ,\"/wordSet/managedList==['a','is','test','this']\"\n        ,\"/wordSet/initArgs=={'ignoreCase':false}\"); // make sure the default is serialized even if not specified\n\n    // Test for case-sensitivity - \"Test\" lookup should fail\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==404\");\n\n    // Switch to case-insensitive\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':'true' } }\"), \"/responseHeader/status==0\");\n\n    // Test for case-insensitivity - \"Test\" lookup should succeed\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==0\");\n\n    // Switch to case-sensitive - this request should fail: changing ignoreCase from true to false is not permitted\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':false } }\"), \"/responseHeader/status==400\");\n\n    // Test XML response format\n    assertQ(newEndpoint + \"?wt=xml\"\n        ,\"/response/lst[@name='responseHeader']/int[@name='status']=0\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[1]='a'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[2]='is'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[3]='test'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[4]='this'\");\n\n    // delete the one we created above\n    assertJDelete(newEndpoint, \"/responseHeader/status==0\");\n\n    // make sure it's really gone\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n  }\n\n","sourceOld":"  /**\n   * Tests {@link RestManager}'s responses to REST API requests on /config/managed\n   * and /schema/managed.  Also tests {@link ManagedWordSetResource} functionality\n   * through the REST API.\n   */\n  @Test\n  public void testRestManagerEndpoints() throws Exception {\n    // relies on these ManagedResources being activated in the schema-rest.xml used by this test\n    assertJQ(\"/schema/managed\",\n             \"/responseHeader/status==0\");\n    /*\n     * TODO: can't assume these will be here unless schema-rest.xml includes these declarations\n     * \n             \"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\",\n             \"/managedResources/[0]/resourceId=='/schema/analysis/stopwords/english'\",\n             \"/managedResources/[1]/class=='org.apache.solr.rest.schema.analysis.ManagedSynonymFilterFactory$SynonymManager'\",\n             \"/managedResources/[1]/resourceId=='/schema/analysis/synonyms/english'\");\n    */\n    \n    // no pre-existing managed config components\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n        \n    // add a ManagedWordSetResource for managing protected words (for stemming)\n    String newEndpoint = \"/schema/analysis/protwords/english\";\n    \n    assertJPut(newEndpoint, json(\"{ 'class':'solr.ManagedWordSetResource' }\"), \"/responseHeader/status==0\");\n        \n    assertJQ(\"/schema/managed\"\n        ,\"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\"\n        ,\"/managedResources/[0]/resourceId=='/schema/analysis/protwords/english'\");\n    \n    // query the resource we just created\n    assertJQ(newEndpoint, \"/wordSet/managedList==[]\");\n    \n    // add some words to this new word list manager\n    assertJPut(newEndpoint, JSONUtil.toJSON(Arrays.asList(\"this\", \"is\", \"a\", \"test\")), \"/responseHeader/status==0\");\n\n    assertJQ(newEndpoint\n        ,\"/wordSet/managedList==['a','is','test','this']\"\n        ,\"/wordSet/initArgs=={'ignoreCase':false}\"); // make sure the default is serialized even if not specified\n\n    // Test for case-sensitivity - \"Test\" lookup should fail\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==404\");\n\n    // Switch to case-insensitive\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':'true' } }\"), \"/responseHeader/status==0\");\n\n    // Test for case-insensitivity - \"Test\" lookup should succeed\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==0\");\n\n    // Switch to case-sensitive - this request should fail: changing ignoreCase from true to false is not permitted\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':false } }\"), \"/responseHeader/status==400\");\n\n    // Test XML response format\n    assertQ(newEndpoint + \"?wt=xml\"\n        ,\"/response/lst[@name='responseHeader']/int[@name='status']=0\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[1]='a'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[2]='is'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[3]='test'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[4]='this'\");\n\n    // delete the one we created above\n    assertJDelete(newEndpoint, \"/responseHeader/status==0\");\n\n    // make sure it's really gone\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestRestManager#testRestManagerEndpoints().mjava","sourceNew":"  /**\n   * Tests {@link RestManager}'s responses to REST API requests on /config/managed\n   * and /schema/managed.  Also tests {@link ManagedWordSetResource} functionality\n   * through the REST API.\n   */\n  @Test\n  public void testRestManagerEndpoints() throws Exception {\n    // relies on these ManagedResources being activated in the schema-rest.xml used by this test\n    assertJQ(\"/schema/managed\",\n             \"/responseHeader/status==0\");\n    /*\n     * TODO: can't assume these will be here unless schema-rest.xml includes these declarations\n     * \n             \"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\",\n             \"/managedResources/[0]/resourceId=='/schema/analysis/stopwords/english'\",\n             \"/managedResources/[1]/class=='org.apache.solr.rest.schema.analysis.ManagedSynonymGraphFilterFactory$SynonymManager'\",\n             \"/managedResources/[1]/resourceId=='/schema/analysis/synonyms/englishgraph'\");\n    */\n    \n    // no pre-existing managed config components\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n        \n    // add a ManagedWordSetResource for managing protected words (for stemming)\n    String newEndpoint = \"/schema/analysis/protwords/english\";\n    \n    assertJPut(newEndpoint, json(\"{ 'class':'solr.ManagedWordSetResource' }\"), \"/responseHeader/status==0\");\n        \n    assertJQ(\"/schema/managed\"\n        ,\"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\"\n        ,\"/managedResources/[0]/resourceId=='/schema/analysis/protwords/english'\");\n    \n    // query the resource we just created\n    assertJQ(newEndpoint, \"/wordSet/managedList==[]\");\n    \n    // add some words to this new word list manager\n    assertJPut(newEndpoint, Utils.toJSONString(Arrays.asList(\"this\", \"is\", \"a\", \"test\")), \"/responseHeader/status==0\");\n\n    assertJQ(newEndpoint\n        ,\"/wordSet/managedList==['a','is','test','this']\"\n        ,\"/wordSet/initArgs=={'ignoreCase':false}\"); // make sure the default is serialized even if not specified\n\n    // Test for case-sensitivity - \"Test\" lookup should fail\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==404\");\n\n    // Switch to case-insensitive\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':'true' } }\"), \"/responseHeader/status==0\");\n\n    // Test for case-insensitivity - \"Test\" lookup should succeed\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==0\");\n\n    // Switch to case-sensitive - this request should fail: changing ignoreCase from true to false is not permitted\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':false } }\"), \"/responseHeader/status==400\");\n\n    // Test XML response format\n    assertQ(newEndpoint + \"?wt=xml\"\n        ,\"/response/lst[@name='responseHeader']/int[@name='status']=0\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[1]='a'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[2]='is'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[3]='test'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[4]='this'\");\n\n    // delete the one we created above\n    assertJDelete(newEndpoint, \"/responseHeader/status==0\");\n\n    // make sure it's really gone\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n  }\n\n","sourceOld":"  /**\n   * Tests {@link RestManager}'s responses to REST API requests on /config/managed\n   * and /schema/managed.  Also tests {@link ManagedWordSetResource} functionality\n   * through the REST API.\n   */\n  @Test\n  public void testRestManagerEndpoints() throws Exception {\n    // relies on these ManagedResources being activated in the schema-rest.xml used by this test\n    assertJQ(\"/schema/managed\",\n             \"/responseHeader/status==0\");\n    /*\n     * TODO: can't assume these will be here unless schema-rest.xml includes these declarations\n     * \n             \"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\",\n             \"/managedResources/[0]/resourceId=='/schema/analysis/stopwords/english'\",\n             \"/managedResources/[1]/class=='org.apache.solr.rest.schema.analysis.ManagedSynonymGraphFilterFactory$SynonymManager'\",\n             \"/managedResources/[1]/resourceId=='/schema/analysis/synonyms/englishgraph'\");\n    */\n    \n    // no pre-existing managed config components\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n        \n    // add a ManagedWordSetResource for managing protected words (for stemming)\n    String newEndpoint = \"/schema/analysis/protwords/english\";\n    \n    assertJPut(newEndpoint, json(\"{ 'class':'solr.ManagedWordSetResource' }\"), \"/responseHeader/status==0\");\n        \n    assertJQ(\"/schema/managed\"\n        ,\"/managedResources/[0]/class=='org.apache.solr.rest.schema.analysis.ManagedWordSetResource'\"\n        ,\"/managedResources/[0]/resourceId=='/schema/analysis/protwords/english'\");\n    \n    // query the resource we just created\n    assertJQ(newEndpoint, \"/wordSet/managedList==[]\");\n    \n    // add some words to this new word list manager\n    assertJPut(newEndpoint, JSONUtil.toJSON(Arrays.asList(\"this\", \"is\", \"a\", \"test\")), \"/responseHeader/status==0\");\n\n    assertJQ(newEndpoint\n        ,\"/wordSet/managedList==['a','is','test','this']\"\n        ,\"/wordSet/initArgs=={'ignoreCase':false}\"); // make sure the default is serialized even if not specified\n\n    // Test for case-sensitivity - \"Test\" lookup should fail\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==404\");\n\n    // Switch to case-insensitive\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':'true' } }\"), \"/responseHeader/status==0\");\n\n    // Test for case-insensitivity - \"Test\" lookup should succeed\n    assertJQ(newEndpoint + \"/Test\", \"/responseHeader/status==0\");\n\n    // Switch to case-sensitive - this request should fail: changing ignoreCase from true to false is not permitted\n    assertJPut(newEndpoint, json(\"{ 'initArgs':{ 'ignoreCase':false } }\"), \"/responseHeader/status==400\");\n\n    // Test XML response format\n    assertQ(newEndpoint + \"?wt=xml\"\n        ,\"/response/lst[@name='responseHeader']/int[@name='status']=0\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[1]='a'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[2]='is'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[3]='test'\"\n        ,\"/response/lst[@name='wordSet']/arr[@name='managedList']/str[4]='this'\");\n\n    // delete the one we created above\n    assertJDelete(newEndpoint, \"/responseHeader/status==0\");\n\n    // make sure it's really gone\n//    assertJQ(\"/config/managed\", \"/managedResources==[]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["531fe719c7218235a679452eb3d137bfd8fc6af1","eb58c4024f450cc56f3a748012536d763700adb5"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb58c4024f450cc56f3a748012536d763700adb5":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["531fe719c7218235a679452eb3d137bfd8fc6af1","eb58c4024f450cc56f3a748012536d763700adb5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"531fe719c7218235a679452eb3d137bfd8fc6af1":["e9017cf144952056066919f1ebc7897ff9bd71b1","eb58c4024f450cc56f3a748012536d763700adb5","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"eb58c4024f450cc56f3a748012536d763700adb5":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}