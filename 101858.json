{"path":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testFormatter().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testFormatter().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testFormatter().mjava","sourceNew":"  public void testFormatter() {\n    assertEquals(\"1970-01-01T00:00:00.005\", f.formatDate(new Date(5)));\n    assertEquals(\"1970-01-01T00:00:00\",     f.formatDate(new Date(0)));\n    assertEquals(\"1970-01-01T00:00:00.37\",  f.formatDate(new Date(370)));\n    assertEquals(\"1970-01-01T00:00:00.9\",   f.formatDate(new Date(900)));\n\n  }\n\n","sourceOld":"  public void testFormatter() {\n    assertEquals(\"1970-01-01T00:00:00.005\", f.formatDate(new Date(5)));\n    assertEquals(\"1970-01-01T00:00:00\",     f.formatDate(new Date(0)));\n    assertEquals(\"1970-01-01T00:00:00.37\",  f.formatDate(new Date(370)));\n    assertEquals(\"1970-01-01T00:00:00.9\",   f.formatDate(new Date(900)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testFormatter().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testFormatter().mjava","sourceNew":"  public void testFormatter() {\n    assertEquals(\"1970-01-01T00:00:00.005\", f.formatDate(new Date(5)));\n    assertEquals(\"1970-01-01T00:00:00\",     f.formatDate(new Date(0)));\n    assertEquals(\"1970-01-01T00:00:00.37\",  f.formatDate(new Date(370)));\n    assertEquals(\"1970-01-01T00:00:00.9\",   f.formatDate(new Date(900)));\n\n  }\n\n","sourceOld":"  public void testFormatter() {\n    assertEquals(\"1970-01-01T00:00:00.005\", f.formatDate(new Date(5)));\n    assertEquals(\"1970-01-01T00:00:00\",     f.formatDate(new Date(0)));\n    assertEquals(\"1970-01-01T00:00:00.37\",  f.formatDate(new Date(370)));\n    assertEquals(\"1970-01-01T00:00:00.9\",   f.formatDate(new Date(900)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testFormatter().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testFormatter().mjava","sourceNew":"  public void testFormatter() {\n    assertEquals(\"1970-01-01T00:00:00.005\", f.formatDate(new Date(5)));\n    assertEquals(\"1970-01-01T00:00:00\",     f.formatDate(new Date(0)));\n    assertEquals(\"1970-01-01T00:00:00.37\",  f.formatDate(new Date(370)));\n    assertEquals(\"1970-01-01T00:00:00.9\",   f.formatDate(new Date(900)));\n\n  }\n\n","sourceOld":"  public void testFormatter() {\n    assertEquals(\"1970-01-01T00:00:00.005\", f.formatDate(new Date(5)));\n    assertEquals(\"1970-01-01T00:00:00\",     f.formatDate(new Date(0)));\n    assertEquals(\"1970-01-01T00:00:00.37\",  f.formatDate(new Date(370)));\n    assertEquals(\"1970-01-01T00:00:00.9\",   f.formatDate(new Date(900)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"461fea4b90072bede0ef2dc0dba66a8c5dbf1356","date":1316194960,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testFormatter().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testFormatter().mjava","sourceNew":"  public void testFormatter() {\n    // just after epoch\n    assertFormat(\"1970-01-01T00:00:00.005\", 5L);\n    assertFormat(\"1970-01-01T00:00:00\",     0L);\n    assertFormat(\"1970-01-01T00:00:00.37\",  370L);\n    assertFormat(\"1970-01-01T00:00:00.9\",   900L);\n\n    // well after epoch\n    assertFormat(\"1999-12-31T23:59:59.005\", 946684799005L);\n    assertFormat(\"1999-12-31T23:59:59\",     946684799000L);\n    assertFormat(\"1999-12-31T23:59:59.37\",  946684799370L);\n    assertFormat(\"1999-12-31T23:59:59.9\",   946684799900L);\n\n    // waaaay after epoch\n    assertFormat(\"12345-12-31T23:59:59.005\", 327434918399005L);\n    assertFormat(\"12345-12-31T23:59:59\",     327434918399000L);\n    assertFormat(\"12345-12-31T23:59:59.37\",  327434918399370L);\n    assertFormat(\"12345-12-31T23:59:59.9\",   327434918399900L);\n\n    // well before epoch\n    assertFormat(\"0299-12-31T23:59:59\",     -52700112001000L);\n    assertFormat(\"0299-12-31T23:59:59.123\", -52700112000877L);\n    assertFormat(\"0299-12-31T23:59:59.09\",  -52700112000910L);\n\n  }\n\n","sourceOld":"  public void testFormatter() {\n    assertEquals(\"1970-01-01T00:00:00.005\", f.formatDate(new Date(5)));\n    assertEquals(\"1970-01-01T00:00:00\",     f.formatDate(new Date(0)));\n    assertEquals(\"1970-01-01T00:00:00.37\",  f.formatDate(new Date(370)));\n    assertEquals(\"1970-01-01T00:00:00.9\",   f.formatDate(new Date(900)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testFormatter().mjava","sourceNew":null,"sourceOld":"  public void testFormatter() {\n    // just after epoch\n    assertFormat(\"1970-01-01T00:00:00.005\", 5L);\n    assertFormat(\"1970-01-01T00:00:00\",     0L);\n    assertFormat(\"1970-01-01T00:00:00.37\",  370L);\n    assertFormat(\"1970-01-01T00:00:00.9\",   900L);\n\n    // well after epoch\n    assertFormat(\"1999-12-31T23:59:59.005\", 946684799005L);\n    assertFormat(\"1999-12-31T23:59:59\",     946684799000L);\n    assertFormat(\"1999-12-31T23:59:59.37\",  946684799370L);\n    assertFormat(\"1999-12-31T23:59:59.9\",   946684799900L);\n\n    // waaaay after epoch\n    assertFormat(\"12345-12-31T23:59:59.005\", 327434918399005L);\n    assertFormat(\"12345-12-31T23:59:59\",     327434918399000L);\n    assertFormat(\"12345-12-31T23:59:59.37\",  327434918399370L);\n    assertFormat(\"12345-12-31T23:59:59.9\",   327434918399900L);\n\n    // well before epoch\n    assertFormat(\"0299-12-31T23:59:59\",     -52700112001000L);\n    assertFormat(\"0299-12-31T23:59:59.123\", -52700112000877L);\n    assertFormat(\"0299-12-31T23:59:59.09\",  -52700112000910L);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["461fea4b90072bede0ef2dc0dba66a8c5dbf1356"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"461fea4b90072bede0ef2dc0dba66a8c5dbf1356":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3f6c7717a0f1decd1668144537943efcc70cd95"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["461fea4b90072bede0ef2dc0dba66a8c5dbf1356"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"461fea4b90072bede0ef2dc0dba66a8c5dbf1356":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}