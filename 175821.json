{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                @Override\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                @Override\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                @Override\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                @Override\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                @Override\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                @Override\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          if (oldVal instanceof UnInvertedField) {\n            UnInvertedField.getUnInvertedField((String) oldKey, newSearcher);\n          }\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          newSearcher.cacheDocSet((Query) oldKey, null, false);\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          QueryResultKey key = (QueryResultKey) oldKey;\n          int nDocs = 1;\n          // request 1 doc and let caching round up to the next window size...\n          // unless the window size is <=1, in which case we will pick\n          // the minimum of the number of documents requested last time and\n          // a reasonable number such as 40.\n          // TODO: make more configurable later...\n\n          if (queryResultWindowSize <= 1) {\n            DocList oldList = (DocList) oldVal;\n            int oldnDocs = oldList.offset() + oldList.size();\n            // 40 has factors of 2,4,5,10,20\n            nDocs = Math.min(oldnDocs, 40);\n          }\n\n          int flags = NO_CHECK_QCACHE | key.nc_flags;\n          QueryCommand qc = new QueryCommand();\n          qc.setQuery(key.query)\n              .setFilterList(key.filters)\n              .setSort(key.sort)\n              .setLen(nDocs)\n              .setSupersetMaxDoc(nDocs)\n              .setFlags(flags);\n          QueryResult qr = new QueryResult();\n          newSearcher.getDocListC(qr, qc);\n          return true;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                @Override\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  if (oldVal instanceof UnInvertedField) {\n                    UnInvertedField.getUnInvertedField((String)oldKey, newSearcher);\n                  }\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                @Override\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  newSearcher.cacheDocSet((Query)oldKey, null, false);\n                  return true;\n                }\n              }\n      );\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(\n              new CacheRegenerator() {\n                @Override\n                public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n                  QueryResultKey key = (QueryResultKey)oldKey;\n                  int nDocs=1;\n                  // request 1 doc and let caching round up to the next window size...\n                  // unless the window size is <=1, in which case we will pick\n                  // the minimum of the number of documents requested last time and\n                  // a reasonable number such as 40.\n                  // TODO: make more configurable later...\n\n                  if (queryResultWindowSize<=1) {\n                    DocList oldList = (DocList)oldVal;\n                    int oldnDocs = oldList.offset() + oldList.size();\n                    // 40 has factors of 2,4,5,10,20\n                    nDocs = Math.min(oldnDocs,40);\n                  }\n\n                  int flags=NO_CHECK_QCACHE | key.nc_flags;\n                  QueryCommand qc = new QueryCommand();\n                  qc.setQuery(key.query)\n                    .setFilterList(key.filters)\n                    .setSort(key.sort)\n                    .setLen(nDocs)\n                    .setSupersetMaxDoc(nDocs)\n                    .setFlags(flags);\n                  QueryResult qr = new QueryResult();\n                  newSearcher.getDocListC(qr,qc);\n                  return true;\n                }\n              }\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"053c4cbd30d228154839dc536ca5a15a5f0c48bf","date":1564559417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null) {\n      solrConfig.fieldValueCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          if (oldVal instanceof UnInvertedField) {\n            UnInvertedField.getUnInvertedField((String) oldKey, newSearcher);\n          }\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.filterCacheConfig != null ) {\n      solrConfig.filterCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          newSearcher.cacheDocSet((Query) oldKey, null, false);\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.queryResultCacheConfig != null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          QueryResultKey key = (QueryResultKey) oldKey;\n          int nDocs = 1;\n          // request 1 doc and let caching round up to the next window size...\n          // unless the window size is <=1, in which case we will pick\n          // the minimum of the number of documents requested last time and\n          // a reasonable number such as 40.\n          // TODO: make more configurable later...\n\n          if (queryResultWindowSize <= 1) {\n            DocList oldList = (DocList) oldVal;\n            int oldnDocs = oldList.offset() + oldList.size();\n            // 40 has factors of 2,4,5,10,20\n            nDocs = Math.min(oldnDocs, 40);\n          }\n\n          int flags = NO_CHECK_QCACHE | key.nc_flags;\n          QueryCommand qc = new QueryCommand();\n          qc.setQuery(key.query)\n              .setFilterList(key.filters)\n              .setSort(key.sort)\n              .setLen(nDocs)\n              .setSupersetMaxDoc(nDocs)\n              .setFlags(flags);\n          QueryResult qr = new QueryResult();\n          newSearcher.getDocListC(qr, qc);\n          return true;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          if (oldVal instanceof UnInvertedField) {\n            UnInvertedField.getUnInvertedField((String) oldKey, newSearcher);\n          }\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          newSearcher.cacheDocSet((Query) oldKey, null, false);\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          QueryResultKey key = (QueryResultKey) oldKey;\n          int nDocs = 1;\n          // request 1 doc and let caching round up to the next window size...\n          // unless the window size is <=1, in which case we will pick\n          // the minimum of the number of documents requested last time and\n          // a reasonable number such as 40.\n          // TODO: make more configurable later...\n\n          if (queryResultWindowSize <= 1) {\n            DocList oldList = (DocList) oldVal;\n            int oldnDocs = oldList.offset() + oldList.size();\n            // 40 has factors of 2,4,5,10,20\n            nDocs = Math.min(oldnDocs, 40);\n          }\n\n          int flags = NO_CHECK_QCACHE | key.nc_flags;\n          QueryCommand qc = new QueryCommand();\n          qc.setQuery(key.query)\n              .setFilterList(key.filters)\n              .setSort(key.sort)\n              .setLen(nDocs)\n              .setSupersetMaxDoc(nDocs)\n              .setFlags(flags);\n          QueryResult qr = new QueryResult();\n          newSearcher.getDocListC(qr, qc);\n          return true;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null) {\n      solrConfig.fieldValueCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          if (oldVal instanceof UnInvertedField) {\n            UnInvertedField.getUnInvertedField((String) oldKey, newSearcher);\n          }\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.filterCacheConfig != null ) {\n      solrConfig.filterCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          newSearcher.cacheDocSet((Query) oldKey, null, false);\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.queryResultCacheConfig != null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          QueryResultKey key = (QueryResultKey) oldKey;\n          int nDocs = 1;\n          // request 1 doc and let caching round up to the next window size...\n          // unless the window size is <=1, in which case we will pick\n          // the minimum of the number of documents requested last time and\n          // a reasonable number such as 40.\n          // TODO: make more configurable later...\n\n          if (queryResultWindowSize <= 1) {\n            DocList oldList = (DocList) oldVal;\n            int oldnDocs = oldList.offset() + oldList.size();\n            // 40 has factors of 2,4,5,10,20\n            nDocs = Math.min(oldnDocs, 40);\n          }\n\n          int flags = NO_CHECK_QCACHE | key.nc_flags;\n          QueryCommand qc = new QueryCommand();\n          qc.setQuery(key.query)\n              .setFilterList(key.filters)\n              .setSort(key.sort)\n              .setLen(nDocs)\n              .setSupersetMaxDoc(nDocs)\n              .setFlags(flags);\n          QueryResult qr = new QueryResult();\n          newSearcher.getDocListC(qr, qc);\n          return true;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          if (oldVal instanceof UnInvertedField) {\n            UnInvertedField.getUnInvertedField((String) oldKey, newSearcher);\n          }\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          newSearcher.cacheDocSet((Query) oldKey, null, false);\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          QueryResultKey key = (QueryResultKey) oldKey;\n          int nDocs = 1;\n          // request 1 doc and let caching round up to the next window size...\n          // unless the window size is <=1, in which case we will pick\n          // the minimum of the number of documents requested last time and\n          // a reasonable number such as 40.\n          // TODO: make more configurable later...\n\n          if (queryResultWindowSize <= 1) {\n            DocList oldList = (DocList) oldVal;\n            int oldnDocs = oldList.offset() + oldList.size();\n            // 40 has factors of 2,4,5,10,20\n            nDocs = Math.min(oldnDocs, 40);\n          }\n\n          int flags = NO_CHECK_QCACHE | key.nc_flags;\n          QueryCommand qc = new QueryCommand();\n          qc.setQuery(key.query)\n              .setFilterList(key.filters)\n              .setSort(key.sort)\n              .setLen(nDocs)\n              .setSupersetMaxDoc(nDocs)\n              .setFlags(flags);\n          QueryResult qr = new QueryResult();\n          newSearcher.getDocListC(qr, qc);\n          return true;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          if (oldVal instanceof UnInvertedField) {\n            UnInvertedField.getUnInvertedField((String) oldKey, newSearcher);\n          }\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          newSearcher.cacheDocSet((Query) oldKey, null, false);\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          QueryResultKey key = (QueryResultKey) oldKey;\n          int nDocs = 1;\n          // request 1 doc and let caching round up to the next window size...\n          // unless the window size is <=1, in which case we will pick\n          // the minimum of the number of documents requested last time and\n          // a reasonable number such as 40.\n          // TODO: make more configurable later...\n\n          if (queryResultWindowSize <= 1) {\n            DocList oldList = (DocList) oldVal;\n            int oldnDocs = oldList.offset() + oldList.size();\n            // 40 has factors of 2,4,5,10,20\n            nDocs = Math.min(oldnDocs, 40);\n          }\n\n          int flags = NO_CHECK_QCACHE | key.nc_flags;\n          QueryCommand qc = new QueryCommand();\n          qc.setQuery(key.query)\n              .setFilterList(key.filters)\n              .setSort(key.sort)\n              .setLen(nDocs)\n              .setSupersetMaxDoc(nDocs)\n              .setFlags(flags);\n          QueryResult qr = new QueryResult();\n          newSearcher.getDocListC(qr, qc);\n          return true;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null) {\n      solrConfig.fieldValueCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          if (oldVal instanceof UnInvertedField) {\n            UnInvertedField.getUnInvertedField((String) oldKey, newSearcher);\n          }\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.filterCacheConfig != null ) {\n      solrConfig.filterCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          newSearcher.cacheDocSet((Query) oldKey, null, false);\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.queryResultCacheConfig != null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          QueryResultKey key = (QueryResultKey) oldKey;\n          int nDocs = 1;\n          // request 1 doc and let caching round up to the next window size...\n          // unless the window size is <=1, in which case we will pick\n          // the minimum of the number of documents requested last time and\n          // a reasonable number such as 40.\n          // TODO: make more configurable later...\n\n          if (queryResultWindowSize <= 1) {\n            DocList oldList = (DocList) oldVal;\n            int oldnDocs = oldList.offset() + oldList.size();\n            // 40 has factors of 2,4,5,10,20\n            nDocs = Math.min(oldnDocs, 40);\n          }\n\n          int flags = NO_CHECK_QCACHE | key.nc_flags;\n          QueryCommand qc = new QueryCommand();\n          qc.setQuery(key.query)\n              .setFilterList(key.filters)\n              .setSort(key.sort)\n              .setLen(nDocs)\n              .setSupersetMaxDoc(nDocs)\n              .setFlags(flags);\n          QueryResult qr = new QueryResult();\n          newSearcher.getDocListC(qr, qc);\n          return true;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          if (oldVal instanceof UnInvertedField) {\n            UnInvertedField.getUnInvertedField((String) oldKey, newSearcher);\n          }\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          newSearcher.cacheDocSet((Query) oldKey, null, false);\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          QueryResultKey key = (QueryResultKey) oldKey;\n          int nDocs = 1;\n          // request 1 doc and let caching round up to the next window size...\n          // unless the window size is <=1, in which case we will pick\n          // the minimum of the number of documents requested last time and\n          // a reasonable number such as 40.\n          // TODO: make more configurable later...\n\n          if (queryResultWindowSize <= 1) {\n            DocList oldList = (DocList) oldVal;\n            int oldnDocs = oldList.offset() + oldList.size();\n            // 40 has factors of 2,4,5,10,20\n            nDocs = Math.min(oldnDocs, 40);\n          }\n\n          int flags = NO_CHECK_QCACHE | key.nc_flags;\n          QueryCommand qc = new QueryCommand();\n          qc.setQuery(key.query)\n              .setFilterList(key.filters)\n              .setSort(key.sort)\n              .setLen(nDocs)\n              .setSupersetMaxDoc(nDocs)\n              .setFlags(flags);\n          QueryResult qr = new QueryResult();\n          newSearcher.getDocListC(qr, qc);\n          return true;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null) {\n      solrConfig.fieldValueCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          if (oldVal instanceof UnInvertedField) {\n            UnInvertedField.getUnInvertedField((String) oldKey, newSearcher);\n          }\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.filterCacheConfig != null ) {\n      solrConfig.filterCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          newSearcher.cacheDocSet((Query) oldKey, null, false);\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.queryResultCacheConfig != null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setDefaultRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          QueryResultKey key = (QueryResultKey) oldKey;\n          int nDocs = 1;\n          // request 1 doc and let caching round up to the next window size...\n          // unless the window size is <=1, in which case we will pick\n          // the minimum of the number of documents requested last time and\n          // a reasonable number such as 40.\n          // TODO: make more configurable later...\n\n          if (queryResultWindowSize <= 1) {\n            DocList oldList = (DocList) oldVal;\n            int oldnDocs = oldList.offset() + oldList.size();\n            // 40 has factors of 2,4,5,10,20\n            nDocs = Math.min(oldnDocs, 40);\n          }\n\n          int flags = NO_CHECK_QCACHE | key.nc_flags;\n          QueryCommand qc = new QueryCommand();\n          qc.setQuery(key.query)\n              .setFilterList(key.filters)\n              .setSort(key.sort)\n              .setLen(nDocs)\n              .setSupersetMaxDoc(nDocs)\n              .setFlags(flags);\n          QueryResult qr = new QueryResult();\n          newSearcher.getDocListC(qr, qc);\n          return true;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initRegenerators(SolrConfig).mjava","sourceNew":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher,\n                                      @SuppressWarnings({\"rawtypes\"})SolrCache newCache,\n                                      @SuppressWarnings({\"rawtypes\"})SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          if (oldVal instanceof UnInvertedField) {\n            UnInvertedField.getUnInvertedField((String) oldKey, newSearcher);\n          }\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        @SuppressWarnings({\"rawtypes\"})public boolean regenerateItem(SolrIndexSearcher newSearcher\n                , @SuppressWarnings({\"rawtypes\"})SolrCache newCache\n                , @SuppressWarnings({\"rawtypes\"})SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          newSearcher.cacheDocSet((Query) oldKey, null, false);\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        @SuppressWarnings({\"rawtypes\"})\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          QueryResultKey key = (QueryResultKey) oldKey;\n          int nDocs = 1;\n          // request 1 doc and let caching round up to the next window size...\n          // unless the window size is <=1, in which case we will pick\n          // the minimum of the number of documents requested last time and\n          // a reasonable number such as 40.\n          // TODO: make more configurable later...\n\n          if (queryResultWindowSize <= 1) {\n            DocList oldList = (DocList) oldVal;\n            int oldnDocs = oldList.offset() + oldList.size();\n            // 40 has factors of 2,4,5,10,20\n            nDocs = Math.min(oldnDocs, 40);\n          }\n\n          int flags = NO_CHECK_QCACHE | key.nc_flags;\n          QueryCommand qc = new QueryCommand();\n          qc.setQuery(key.query)\n              .setFilterList(key.filters)\n              .setSort(key.sort)\n              .setLen(nDocs)\n              .setSupersetMaxDoc(nDocs)\n              .setFlags(flags);\n          QueryResult qr = new QueryResult();\n          newSearcher.getDocListC(qr, qc);\n          return true;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  //\n  // Set default regenerators on filter and query caches if they don't have any\n  //\n  public static void initRegenerators(SolrConfig solrConfig) {\n    if (solrConfig.fieldValueCacheConfig != null && solrConfig.fieldValueCacheConfig.getRegenerator() == null) {\n      solrConfig.fieldValueCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          if (oldVal instanceof UnInvertedField) {\n            UnInvertedField.getUnInvertedField((String) oldKey, newSearcher);\n          }\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.filterCacheConfig != null && solrConfig.filterCacheConfig.getRegenerator() == null) {\n      solrConfig.filterCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          newSearcher.cacheDocSet((Query) oldKey, null, false);\n          return true;\n        }\n      });\n    }\n\n    if (solrConfig.queryResultCacheConfig != null && solrConfig.queryResultCacheConfig.getRegenerator() == null) {\n      final int queryResultWindowSize = solrConfig.queryResultWindowSize;\n      solrConfig.queryResultCacheConfig.setRegenerator(new CacheRegenerator() {\n        @Override\n        public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache,\n            Object oldKey, Object oldVal) throws IOException {\n          QueryResultKey key = (QueryResultKey) oldKey;\n          int nDocs = 1;\n          // request 1 doc and let caching round up to the next window size...\n          // unless the window size is <=1, in which case we will pick\n          // the minimum of the number of documents requested last time and\n          // a reasonable number such as 40.\n          // TODO: make more configurable later...\n\n          if (queryResultWindowSize <= 1) {\n            DocList oldList = (DocList) oldVal;\n            int oldnDocs = oldList.offset() + oldList.size();\n            // 40 has factors of 2,4,5,10,20\n            nDocs = Math.min(oldnDocs, 40);\n          }\n\n          int flags = NO_CHECK_QCACHE | key.nc_flags;\n          QueryCommand qc = new QueryCommand();\n          qc.setQuery(key.query)\n              .setFilterList(key.filters)\n              .setSort(key.sort)\n              .setLen(nDocs)\n              .setSupersetMaxDoc(nDocs)\n              .setFlags(flags);\n          QueryResult qr = new QueryResult();\n          newSearcher.getDocListC(qr, qc);\n          return true;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"053c4cbd30d228154839dc536ca5a15a5f0c48bf":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c44cc06c26e456fe9c215072b79fce30babe3975":["053c4cbd30d228154839dc536ca5a15a5f0c48bf"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["7530de27b87b961b51f01bd1299b7004d46e8823"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ac9de183adbc9483681f275ac1e2d92ed19f52e1","053c4cbd30d228154839dc536ca5a15a5f0c48bf"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"b0b597c65628ca9e73913a07e81691f8229bae35":["053c4cbd30d228154839dc536ca5a15a5f0c48bf","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"053c4cbd30d228154839dc536ca5a15a5f0c48bf":["c44cc06c26e456fe9c215072b79fce30babe3975","f8061ddd97f3352007d927dae445884a6f3d857b","b0b597c65628ca9e73913a07e81691f8229bae35"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"c44cc06c26e456fe9c215072b79fce30babe3975":["50dfd19525c8d73e856dca6edb64b7aea074037f","b0b597c65628ca9e73913a07e81691f8229bae35"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["053c4cbd30d228154839dc536ca5a15a5f0c48bf","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f8061ddd97f3352007d927dae445884a6f3d857b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}