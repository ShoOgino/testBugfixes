{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        try {\n          parseParams(FacetParams.FACET_QUERY, q);\n\n          // TODO: slight optimization would prevent double-parsing of any localParams\n          Query qobj = QParser.getParser(q, null, req).getQuery();\n          res.add(key, searcher.numDocs(qobj, base));\n        }\n        catch (Exception e) {\n          String msg = \"Exception during facet.query of \" + q;\n          SolrException.logOnce(SolrCore.log, msg, e);\n          addException(msg , e);\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        try {\n          parseParams(FacetParams.FACET_QUERY, q);\n\n          // TODO: slight optimization would prevent double-parsing of any localParams\n          Query qobj = QParser.getParser(q, null, req).getQuery();\n          res.add(key, searcher.numDocs(qobj, base));\n        }\n        catch (Exception e) {\n          String msg = \"Exception during facet.query of \" + q;\n          SolrException.logOnce(SolrCore.log, msg, e);\n          addException(msg , e);\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        try {\n          parseParams(FacetParams.FACET_QUERY, q);\n\n          // TODO: slight optimization would prevent double-parsing of any localParams\n          Query qobj = QParser.getParser(q, null, req).getQuery();\n          res.add(key, searcher.numDocs(qobj, base));\n        }\n        catch (Exception e) {\n          String msg = \"Exception during facet.query of \" + q;\n          SolrException.logOnce(SolrCore.log, msg, e);\n          addException(msg , e);\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        try {\n          parseParams(FacetParams.FACET_QUERY, q);\n\n          // TODO: slight optimization would prevent double-parsing of any localParams\n          Query qobj = QParser.getParser(q, null, req).getQuery();\n          res.add(key, searcher.numDocs(qobj, base));\n        }\n        catch (Exception e) {\n          String msg = \"Exception during facet.query of \" + q;\n          SolrException.logOnce(SolrCore.log, msg, e);\n          addException(msg , e);\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        try {\n          parseParams(FacetParams.FACET_QUERY, q);\n\n          // TODO: slight optimization would prevent double-parsing of any localParams\n          Query qobj = QParser.getParser(q, null, req).getQuery();\n          res.add(key, searcher.numDocs(qobj, base));\n        }\n        catch (Exception e) {\n          String msg = \"Exception during facet.query of \" + q;\n          SolrException.logOnce(SolrCore.log, msg, e);\n          addException(msg , e);\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        try {\n          parseParams(FacetParams.FACET_QUERY, q);\n\n          // TODO: slight optimization would prevent double-parsing of any localParams\n          Query qobj = QParser.getParser(q, null, req).getQuery();\n          res.add(key, searcher.numDocs(qobj, base));\n        }\n        catch (Exception e) {\n          String msg = \"Exception during facet.query of \" + q;\n          SolrException.logOnce(SolrCore.log, msg, e);\n          addException(msg , e);\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7a2fb72910dc110efb34c773de307e5cbe4305a","date":1312025755,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n        res.add(key, searcher.numDocs(qobj, base));\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        try {\n          parseParams(FacetParams.FACET_QUERY, q);\n\n          // TODO: slight optimization would prevent double-parsing of any localParams\n          Query qobj = QParser.getParser(q, null, req).getQuery();\n          res.add(key, searcher.numDocs(qobj, base));\n        }\n        catch (Exception e) {\n          String msg = \"Exception during facet.query of \" + q;\n          SolrException.logOnce(SolrCore.log, msg, e);\n          addException(msg , e);\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02e2650f264d07432d3cd716538163ca711df73d","date":1340003800,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, base));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n        res.add(key, searcher.numDocs(qobj, base));\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["83d5056adea94bfcf3d0b12e4c2cbbbcabfe7161","aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a2ba67a463f52915e77a5fd8714aa7d36faf59c","date":1348538193,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, base));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,ParseException {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83d5056adea94bfcf3d0b12e4c2cbbbcabfe7161","date":1373673910,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (qobj == null) {\n          res.add(key, 0);\n        } else if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":["02e2650f264d07432d3cd716538163ca711df73d"],"bugIntro":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (qobj == null) {\n          res.add(key, 0);\n        } else if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (qobj == null) {\n          res.add(key, 0);\n        } else if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<Integer>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (qobj == null) {\n          res.add(key, 0);\n        } else if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"52c5280f6286c7546ab75b72c663f7bb1dc10e96","date":1427372570,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (qobj == null) {\n          res.add(key, 0);\n        } else if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (qobj == null) {\n          res.add(key, 0);\n        } else if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (qobj == null) {\n          res.add(key, 0);\n        } else if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    \n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (qobj == null) {\n          res.add(key, 0);\n        } else if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa62c79a7afa4d7f22e1f71b883659f3213d7db1","date":1435334422,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = global.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        final ParsedParams parsed = parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (qobj == null) {\n          res.add(parsed.key, 0);\n        } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed));\n        } else {\n          res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = params.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (qobj == null) {\n          res.add(key, 0);\n        } else if (params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(key, getGroupedFacetQueryCount(qobj));\n        } else {\n          res.add(key, searcher.numDocs(qobj, docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","83d5056adea94bfcf3d0b12e4c2cbbbcabfe7161","d7a2fb72910dc110efb34c773de307e5cbe4305a","02e2650f264d07432d3cd716538163ca711df73d","7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCounts().mjava","sourceNew":"  /**\n   * Returns a list of facet counts for each of the facet queries\n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = global.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        final ParsedParams parsed = parseParams(FacetParams.FACET_QUERY, q);\n        getFacetQueryCount(parsed, res);\n      }\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of facet counts for each of the facet queries \n   * specified in the params\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public NamedList<Integer> getFacetQueryCounts() throws IOException,SyntaxError {\n\n    NamedList<Integer> res = new SimpleOrderedMap<>();\n\n    /* Ignore CommonParams.DF - could have init param facet.query assuming\n     * the schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default for facet.query, they should be\n     * explicit.\n     */\n    // SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);\n\n    String[] facetQs = global.getParams(FacetParams.FACET_QUERY);\n\n    if (null != facetQs && 0 != facetQs.length) {\n      for (String q : facetQs) {\n        final ParsedParams parsed = parseParams(FacetParams.FACET_QUERY, q);\n\n        // TODO: slight optimization would prevent double-parsing of any localParams\n        Query qobj = QParser.getParser(q, null, req).getQuery();\n\n        if (qobj == null) {\n          res.add(parsed.key, 0);\n        } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {\n          res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed));\n        } else {\n          res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));\n        }\n      }\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["83d5056adea94bfcf3d0b12e4c2cbbbcabfe7161"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3cdb67100dc016748799a77218aa409478372d79","83d5056adea94bfcf3d0b12e4c2cbbbcabfe7161"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3cdb67100dc016748799a77218aa409478372d79":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"407687e67faf6e1f02a211ca078d8e3eed631027":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c","3cdb67100dc016748799a77218aa409478372d79"],"83d5056adea94bfcf3d0b12e4c2cbbbcabfe7161":["3cdb67100dc016748799a77218aa409478372d79"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a2ba67a463f52915e77a5fd8714aa7d36faf59c":["02e2650f264d07432d3cd716538163ca711df73d"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d7a2fb72910dc110efb34c773de307e5cbe4305a":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"02e2650f264d07432d3cd716538163ca711df73d":["d7a2fb72910dc110efb34c773de307e5cbe4305a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["52c5280f6286c7546ab75b72c663f7bb1dc10e96","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3cdb67100dc016748799a77218aa409478372d79":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","83d5056adea94bfcf3d0b12e4c2cbbbcabfe7161"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c26f00b574427b55127e869b935845554afde1fa":["d7a2fb72910dc110efb34c773de307e5cbe4305a"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"83d5056adea94bfcf3d0b12e4c2cbbbcabfe7161":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7a2ba67a463f52915e77a5fd8714aa7d36faf59c":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d7a2fb72910dc110efb34c773de307e5cbe4305a":["02e2650f264d07432d3cd716538163ca711df73d"],"02e2650f264d07432d3cd716538163ca711df73d":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}