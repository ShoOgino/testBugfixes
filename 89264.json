{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getDictionaryEncoding(InputStream).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getDictionaryEncoding(InputStream).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getDictionaryEncoding(InputStream).mjava","sourceNew":"  /**\n   * Parses the encoding specified in the affix file readable through the provided InputStream\n   *\n   * @param affix InputStream for reading the affix file\n   * @return Encoding specified in the affix file\n   * @throws IOException Can be thrown while reading from the InputStream\n   * @throws ParseException Thrown if the first non-empty non-comment line read from the file does not adhere to the format {@code SET <encoding>}\n   */\n  private String getDictionaryEncoding(InputStream affix) throws IOException, ParseException {\n    final StringBuilder encoding = new StringBuilder();\n    for (;;) {\n      encoding.setLength(0);\n      int ch;\n      while ((ch = affix.read()) >= 0) {\n        if (ch == '\\n') {\n          break;\n        }\n        if (ch != '\\r') {\n          encoding.append((char)ch);\n        }\n      }\n      if (\n          encoding.length() == 0 || encoding.charAt(0) == '#' ||\n          // this test only at the end as ineffective but would allow lines only containing spaces:\n          encoding.toString().trim().length() == 0\n      ) {\n        if (ch < 0) {\n          throw new ParseException(\"Unexpected end of affix file.\", 0);\n        }\n        continue;\n      }\n      if (\"SET \".equals(encoding.substring(0, 4))) {\n        // cleanup the encoding string, too (whitespace)\n        return encoding.substring(4).trim();\n      }\n      throw new ParseException(\"The first non-comment line in the affix file must \"+\n          \"be a 'SET charset', was: '\" + encoding +\"'\", 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses the encoding specified in the affix file readable through the provided InputStream\n   *\n   * @param affix InputStream for reading the affix file\n   * @return Encoding specified in the affix file\n   * @throws IOException Can be thrown while reading from the InputStream\n   * @throws ParseException Thrown if the first non-empty non-comment line read from the file does not adhere to the format {@code SET <encoding>}\n   */\n  private String getDictionaryEncoding(InputStream affix) throws IOException, ParseException {\n    final StringBuilder encoding = new StringBuilder();\n    for (;;) {\n      encoding.setLength(0);\n      int ch;\n      while ((ch = affix.read()) >= 0) {\n        if (ch == '\\n') {\n          break;\n        }\n        if (ch != '\\r') {\n          encoding.append((char)ch);\n        }\n      }\n      if (\n          encoding.length() == 0 || encoding.charAt(0) == '#' ||\n          // this test only at the end as ineffective but would allow lines only containing spaces:\n          encoding.toString().trim().length() == 0\n      ) {\n        if (ch < 0) {\n          throw new ParseException(\"Unexpected end of affix file.\", 0);\n        }\n        continue;\n      }\n      if (\"SET \".equals(encoding.substring(0, 4))) {\n        // cleanup the encoding string, too (whitespace)\n        return encoding.substring(4).trim();\n      }\n      throw new ParseException(\"The first non-comment line in the affix file must \"+\n          \"be a 'SET charset', was: '\" + encoding +\"'\", 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getDictionaryEncoding(InputStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses the encoding specified in the affix file readable through the provided InputStream\n   *\n   * @param affix InputStream for reading the affix file\n   * @return Encoding specified in the affix file\n   * @throws IOException Can be thrown while reading from the InputStream\n   * @throws ParseException Thrown if the first non-empty non-comment line read from the file does not adhere to the format {@code SET <encoding>}\n   */\n  private String getDictionaryEncoding(InputStream affix) throws IOException, ParseException {\n    final StringBuilder encoding = new StringBuilder();\n    for (;;) {\n      encoding.setLength(0);\n      int ch;\n      while ((ch = affix.read()) >= 0) {\n        if (ch == '\\n') {\n          break;\n        }\n        if (ch != '\\r') {\n          encoding.append((char)ch);\n        }\n      }\n      if (\n          encoding.length() == 0 || encoding.charAt(0) == '#' ||\n          // this test only at the end as ineffective but would allow lines only containing spaces:\n          encoding.toString().trim().length() == 0\n      ) {\n        if (ch < 0) {\n          throw new ParseException(\"Unexpected end of affix file.\", 0);\n        }\n        continue;\n      }\n      if (\"SET \".equals(encoding.substring(0, 4))) {\n        // cleanup the encoding string, too (whitespace)\n        return encoding.substring(4).trim();\n      }\n      throw new ParseException(\"The first non-comment line in the affix file must \"+\n          \"be a 'SET charset', was: '\" + encoding +\"'\", 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#getDictionaryEncoding(InputStream).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getDictionaryEncoding(InputStream).mjava","sourceNew":"  /**\n   * Parses the encoding specified in the affix file readable through the provided InputStream\n   *\n   * @param affix InputStream for reading the affix file\n   * @return Encoding specified in the affix file\n   * @throws IOException Can be thrown while reading from the InputStream\n   * @throws ParseException Thrown if the first non-empty non-comment line read from the file does not adhere to the format {@code SET <encoding>}\n   */\n  private String getDictionaryEncoding(InputStream affix) throws IOException, ParseException {\n    final StringBuilder encoding = new StringBuilder();\n    for (;;) {\n      encoding.setLength(0);\n      int ch;\n      while ((ch = affix.read()) >= 0) {\n        if (ch == '\\n') {\n          break;\n        }\n        if (ch != '\\r') {\n          encoding.append((char)ch);\n        }\n      }\n      if (\n          encoding.length() == 0 || encoding.charAt(0) == '#' ||\n          // this test only at the end as ineffective but would allow lines only containing spaces:\n          encoding.toString().trim().length() == 0\n      ) {\n        if (ch < 0) {\n          throw new ParseException(\"Unexpected end of affix file.\", 0);\n        }\n        continue;\n      }\n      if (encoding.length() > 4 && \"SET \".equals(encoding.substring(0, 4))) {\n        // cleanup the encoding string, too (whitespace)\n        return encoding.substring(4).trim();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses the encoding specified in the affix file readable through the provided InputStream\n   *\n   * @param affix InputStream for reading the affix file\n   * @return Encoding specified in the affix file\n   * @throws IOException Can be thrown while reading from the InputStream\n   * @throws ParseException Thrown if the first non-empty non-comment line read from the file does not adhere to the format {@code SET <encoding>}\n   */\n  private String getDictionaryEncoding(InputStream affix) throws IOException, ParseException {\n    final StringBuilder encoding = new StringBuilder();\n    for (;;) {\n      encoding.setLength(0);\n      int ch;\n      while ((ch = affix.read()) >= 0) {\n        if (ch == '\\n') {\n          break;\n        }\n        if (ch != '\\r') {\n          encoding.append((char)ch);\n        }\n      }\n      if (\n          encoding.length() == 0 || encoding.charAt(0) == '#' ||\n          // this test only at the end as ineffective but would allow lines only containing spaces:\n          encoding.toString().trim().length() == 0\n      ) {\n        if (ch < 0) {\n          throw new ParseException(\"Unexpected end of affix file.\", 0);\n        }\n        continue;\n      }\n      if (\"SET \".equals(encoding.substring(0, 4))) {\n        // cleanup the encoding string, too (whitespace)\n        return encoding.substring(4).trim();\n      }\n      throw new ParseException(\"The first non-comment line in the affix file must \"+\n          \"be a 'SET charset', was: '\" + encoding +\"'\", 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["b89678825b68eccaf09e6ab71675fc0b0af1e099","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}