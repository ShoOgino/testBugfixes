{"path":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","sourceNew":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant:node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    val = val.trim();\n    assertTrue(val + \" is not equal to \" + \"linkNews\", val.equals(\"linkNews\") == true);//there are two <a> tags, and they get collapesd\n  }\n\n","sourceOld":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant:node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    val = val.trim();\n    assertTrue(val + \" is not equal to \" + \"linkNews\", val.equals(\"linkNews\") == true);//there are two <a> tags, and they get collapesd\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","sourceNew":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant:node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    val = val.trim();\n    assertTrue(val + \" is not equal to \" + \"linkNews\", val.equals(\"linkNews\") == true);//there are two <a> tags, and they get collapesd\n  }\n\n","sourceOld":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant:node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    val = val.trim();\n    assertTrue(val + \" is not equal to \" + \"linkNews\", val.equals(\"linkNews\") == true);//there are two <a> tags, and they get collapesd\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abd55340ba9df8b62edcd692b34e46cf0614a52e","date":1311341057,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","sourceNew":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant:node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    val = val.trim();\n    assertTrue(val + \" is not equal to \" + \"linkNews\", val.equals(\"linkNews\") == true);//there are two <a> tags, and they get collapesd\n  }\n\n","sourceOld":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant:node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    val = val.trim();\n    assertTrue(val + \" is not equal to \" + \"linkNews\", val.equals(\"linkNews\") == true);//there are two <a> tags, and they get collapesd\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ae9ffabd75a5e21eb54bc365eaebeaf858c4f0","date":1422056685,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","sourceNew":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant::node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    assertEquals(\"News\", val.trim()); //there is only one matching <a> tag\n\n    loadLocal(\"extraction/example.html\",\n        \"literal.id\", \"example1\",\n        \"captureAttr\", \"true\",\n        \"defaultField\", \"text\",\n        \"capture\", \"div\",\n        \"fmap.div\", \"foo_t\",\n        \"boost.foo_t\", \"3\",\n        \"xpath\", \"/xhtml:html/xhtml:body/xhtml:div//node()\",\n        \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:example1 +foo_t:\\\"here is some text in a div\\\"\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant:node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    val = val.trim();\n    assertTrue(val + \" is not equal to \" + \"linkNews\", val.equals(\"linkNews\") == true);//there are two <a> tags, and they get collapesd\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant::node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    assertEquals(\"News\", val.trim()); //there is only one matching <a> tag\n\n    loadLocal(\"extraction/example.html\",\n        \"literal.id\", \"example1\",\n        \"captureAttr\", \"true\",\n        \"defaultField\", \"text\",\n        \"capture\", \"div\",\n        \"fmap.div\", \"foo_t\",\n        \"boost.foo_t\", \"3\",\n        \"xpath\", \"/xhtml:html/xhtml:body/xhtml:div//node()\",\n        \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:example1 +foo_t:\\\"here is some text in a div\\\"\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant::node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    assertEquals(\"News\", val.trim()); //there is only one matching <a> tag\n\n    loadLocal(\"extraction/example.html\",\n        \"literal.id\", \"example1\",\n        \"captureAttr\", \"true\",\n        \"defaultField\", \"text\",\n        \"capture\", \"div\",\n        \"fmap.div\", \"foo_t\",\n        \"boost.foo_t\", \"3\",\n        \"xpath\", \"/xhtml:html/xhtml:body/xhtml:div//node()\",\n        \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:example1 +foo_t:\\\"here is some text in a div\\\"\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","sourceNew":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant::node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    assertEquals(\"News\", val.trim()); //there is only one matching <a> tag\n\n    loadLocal(\"extraction/example.html\",\n        \"literal.id\", \"example1\",\n        \"captureAttr\", \"true\",\n        \"defaultField\", \"text\",\n        \"capture\", \"div\",\n        \"fmap.div\", \"foo_t\",\n        \"boost.foo_t\", \"3\",\n        \"xpath\", \"/xhtml:html/xhtml:body/xhtml:div//node()\",\n        \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:example1 +foo_t:\\\"here is some text in a div\\\"\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant::node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    assertEquals(\"News\", val.trim()); //there is only one matching <a> tag\n\n    loadLocal(\"extraction/example.html\",\n        \"literal.id\", \"example1\",\n        \"captureAttr\", \"true\",\n        \"defaultField\", \"text\",\n        \"capture\", \"div\",\n        \"fmap.div\", \"foo_t\",\n        \"boost.foo_t\", \"3\",\n        \"xpath\", \"/xhtml:html/xhtml:body/xhtml:div//node()\",\n        \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:example1 +foo_t:\\\"here is some text in a div\\\"\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testXPath().mjava","sourceNew":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant::node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    assertEquals(\"News\", val.trim()); //there is only one matching <a> tag\n\n    loadLocal(\"extraction/example.html\",\n        \"literal.id\", \"example1\",\n        \"captureAttr\", \"true\",\n        \"defaultField\", \"text\",\n        \"capture\", \"div\",\n        \"fmap.div\", \"foo_t\",\n        \"boost.foo_t\", \"3\",\n        \"xpath\", \"/xhtml:html/xhtml:body/xhtml:div//node()\",\n        \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:example1 +foo_t:\\\"here is some text in a div\\\"\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testXPath() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    SolrQueryResponse rsp = loadLocal(\"extraction/example.html\",\n            ExtractingParams.XPATH_EXPRESSION, \"/xhtml:html/xhtml:body/xhtml:a/descendant::node()\",\n            ExtractingParams.EXTRACT_ONLY, \"true\"\n    );\n    assertTrue(\"rsp is null and it shouldn't be\", rsp != null);\n    NamedList list = rsp.getValues();\n    String val = (String) list.get(\"example.html\");\n    assertEquals(\"News\", val.trim()); //there is only one matching <a> tag\n\n    loadLocal(\"extraction/example.html\",\n        \"literal.id\", \"example1\",\n        \"captureAttr\", \"true\",\n        \"defaultField\", \"text\",\n        \"capture\", \"div\",\n        \"fmap.div\", \"foo_t\",\n        \"boost.foo_t\", \"3\",\n        \"xpath\", \"/xhtml:html/xhtml:body/xhtml:div//node()\",\n        \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:example1 +foo_t:\\\"here is some text in a div\\\"\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14ae9ffabd75a5e21eb54bc365eaebeaf858c4f0":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["14ae9ffabd75a5e21eb54bc365eaebeaf858c4f0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"14ae9ffabd75a5e21eb54bc365eaebeaf858c4f0":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["14ae9ffabd75a5e21eb54bc365eaebeaf858c4f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}