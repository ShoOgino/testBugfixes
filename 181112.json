{"path":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","commits":[{"id":"f7fd147f6ec145b926803480f62aa12e2aad258e","date":1465448343,"type":0,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, child -> true).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, child -> true).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, child -> false).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77c9633f72998c3815ffe21baa5f16d6e50f1e4a","date":1465453043,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, child -> true).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, child -> true).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, child -> false).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0","date":1465495031,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","sourceNew":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue()).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue()).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse()).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","sourceOld":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, child -> true).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, child -> true).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, child -> false).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue()).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue()).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse()).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","sourceNew":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    Predicate<String> alwaysTrue = s -> true;\n    Predicate<String> alwaysFalse = s -> false;\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","sourceOld":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue()).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue()).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse()).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","sourceNew":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    Predicate<String> alwaysTrue = s -> true;\n    Predicate<String> alwaysFalse = s -> false;\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","sourceOld":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue()).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue()).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse()).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","sourceNew":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    ZkDistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    Predicate<String> alwaysTrue = s -> true;\n    Predicate<String> alwaysFalse = s -> false;\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","sourceOld":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    Predicate<String> alwaysTrue = s -> true;\n    Predicate<String> alwaysFalse = s -> false;\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","sourceNew":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    ZkDistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    Predicate<String> alwaysTrue = s -> true;\n    Predicate<String> alwaysFalse = s -> false;\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","sourceOld":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    Predicate<String> alwaysTrue = s -> true;\n    Predicate<String> alwaysFalse = s -> false;\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"424a36843bb57d1f3e09de57d1d6c569d5d8a4f5","date":1558119286,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testPeekElements().mjava","sourceNew":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    ZkDistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    Predicate<String> alwaysTrue = s -> true;\n    Predicate<String> alwaysFalse = s -> false;\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    long timeTaken = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n    assertTrue(\"Time was \" + timeTaken + \"ms, expected 250-1500ms\", timeTaken > 250 && timeTaken < 1500);\n  }\n\n","sourceOld":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    ZkDistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    Predicate<String> alwaysTrue = s -> true;\n    Predicate<String> alwaysFalse = s -> false;\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    assertTrue(System.nanoTime() - start < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"424a36843bb57d1f3e09de57d1d6c569d5d8a4f5":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7fd147f6ec145b926803480f62aa12e2aad258e"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["424a36843bb57d1f3e09de57d1d6c569d5d8a4f5"]},"commit2Childs":{"424a36843bb57d1f3e09de57d1d6c569d5d8a4f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7fd147f6ec145b926803480f62aa12e2aad258e","77c9633f72998c3815ffe21baa5f16d6e50f1e4a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["6240b74b884c5587f2a4062dd27d6c32bf228889","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","320888923ec13b91f53082558f01f4c9960dd226"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["424a36843bb57d1f3e09de57d1d6c569d5d8a4f5","6240b74b884c5587f2a4062dd27d6c32bf228889"],"320888923ec13b91f53082558f01f4c9960dd226":[],"c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}