{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits,boolean).mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs, boolean needsScores) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null, needsScores);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: this doesn't take acceptDocs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitDocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      if (parents == null) {\n        // No parents\n        return null;\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores, acceptDocs);\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: this doesn't take acceptDocs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitDocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      if (parents == null) {\n        // No parents\n        return null;\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: this doesn't take acceptDocs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitDocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      if (parents == null) {\n        // No parents\n        return null;\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores, acceptDocs);\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs, boolean needsScores) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null, needsScores);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: this doesn't take acceptDocs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitDocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      if (parents == null) {\n        // No parents\n        return null;\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}