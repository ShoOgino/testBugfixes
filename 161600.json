{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries.MultiPolygonValidator#testPolygonQuery(Polygon2D,Object).mjava","commits":[{"id":"5e8251ad51618827e557dd369f16921a666914b5","date":1548082828,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries.MultiPolygonValidator#testPolygonQuery(Polygon2D,Object).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean testPolygonQuery(Polygon2D query, Object shape) {\n      Polygon[] polygons = (Polygon[])shape;\n      for (Polygon p : polygons) {\n        boolean b = POLYGONVALIDATOR.testPolygonQuery(query, p);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries.MultiPolygonValidator#testPolygonQuery(Polygon2D,Object).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean testPolygonQuery(Polygon2D query, Object shape) {\n      Polygon[] polygons = (Polygon[])shape;\n      for (Polygon p : polygons) {\n        boolean b = POLYGONVALIDATOR.testPolygonQuery(query, p);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries.MultiPolygonValidator#testPolygonQuery(Object,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries.MultiPolygonValidator#testPolygonQuery(Polygon2D,Object).mjava","sourceNew":"    @Override\n    public boolean testPolygonQuery(Object query, Object shape) {\n      Polygon[] polygons = (Polygon[])shape;\n      for (Polygon p : polygons) {\n        boolean b = POLYGONVALIDATOR.testPolygonQuery(query, p);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","sourceOld":"    @Override\n    public boolean testPolygonQuery(Polygon2D query, Object shape) {\n      Polygon[] polygons = (Polygon[])shape;\n      for (Polygon p : polygons) {\n        boolean b = POLYGONVALIDATOR.testPolygonQuery(query, p);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":6,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestXYMultiPolygonShapeQueries.MultiPolygonValidator#testPolygonQuery(Object,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries.MultiPolygonValidator#testPolygonQuery(Polygon2D,Object).mjava","sourceNew":"    @Override\n    public boolean testPolygonQuery(Object query, Object shape) {\n      XYPolygon[] polygons = (XYPolygon[])shape;\n      for (XYPolygon p : polygons) {\n        boolean b = POLYGONVALIDATOR.testPolygonQuery(query, p);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","sourceOld":"    @Override\n    public boolean testPolygonQuery(Polygon2D query, Object shape) {\n      Polygon[] polygons = (Polygon[])shape;\n      for (Polygon p : polygons) {\n        boolean b = POLYGONVALIDATOR.testPolygonQuery(query, p);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5e8251ad51618827e557dd369f16921a666914b5"],"5e8251ad51618827e557dd369f16921a666914b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e8251ad51618827e557dd369f16921a666914b5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e8251ad51618827e557dd369f16921a666914b5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e8251ad51618827e557dd369f16921a666914b5":["c286b0d8c507a88b289407e2fe161effa275c6b0","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}