{"path":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","pathOld":"/dev/null","sourceNew":"  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" );      \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","sourceNew":null,"sourceOld":"  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" );      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","pathOld":"src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","sourceNew":"  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" );      \n  }\n\n","sourceOld":"  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" );      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","pathOld":"/dev/null","sourceNew":"  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" );      \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","pathOld":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","sourceNew":"  @Test\n  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" ); \n    clearIndex();\n  }\n\n","sourceOld":"  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" );      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8c633afac17ca587a6fb40dc558a47a620be2f5","date":1269369790,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","pathOld":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","sourceNew":"  @Test\n  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    ignoreException(\"missing required field\");\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    resetExceptionIgnores();\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" ); \n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" ); \n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","pathOld":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","sourceNew":"  @Test\n  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    ignoreException(\"missing required field\");\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    resetExceptionIgnores();\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" ); \n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    ignoreException(\"missing required field\");\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    resetExceptionIgnores();\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" ); \n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","pathOld":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","sourceNew":"  @Test\n  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    ignoreException(\"missing required field\");\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    resetExceptionIgnores();\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" ); \n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    ignoreException(\"missing required field\");\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    resetExceptionIgnores();\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" ); \n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","pathOld":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","sourceNew":"  @Test\n  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    ignoreException(\"missing required field\");\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    resetExceptionIgnores();\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" ); \n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    ignoreException(\"missing required field\");\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    resetExceptionIgnores();\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" ); \n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c8c633afac17ca587a6fb40dc558a47a620be2f5"],"c26f00b574427b55127e869b935845554afde1fa":["c8c633afac17ca587a6fb40dc558a47a620be2f5","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["c8c633afac17ca587a6fb40dc558a47a620be2f5"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"c8c633afac17ca587a6fb40dc558a47a620be2f5":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["c8c633afac17ca587a6fb40dc558a47a620be2f5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"c8c633afac17ca587a6fb40dc558a47a620be2f5":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}