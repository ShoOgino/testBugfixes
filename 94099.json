{"path":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#doTest().mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n\n    Map editable_prop_map = (Map) new ObjectBuilder(new JSONParser(new StringReader(\n        ConfigOverlay.MAPPING))).getObject();\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    Map editable_prop_map = (Map) new ObjectBuilder(new JSONParser(new StringReader(\n        ConfigOverlay.MAPPING))).getObject();\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n\n    Map editable_prop_map = (Map) new ObjectBuilder(new JSONParser(new StringReader(\n        ConfigOverlay.MAPPING))).getObject();\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    Map editable_prop_map = (Map) new ObjectBuilder(new JSONParser(new StringReader(\n        ConfigOverlay.MAPPING))).getObject();\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    Map editable_prop_map = (Map) new ObjectBuilder(new JSONParser(new StringReader(\n        ConfigOverlay.MAPPING))).getObject();\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) new ObjectBuilder(new JSONParser(new StringReader(\n        ConfigOverlay.MAPPING))).getObject();\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    Map editable_prop_map = (Map) new ObjectBuilder(new JSONParser(new StringReader(\n        ConfigOverlay.MAPPING))).getObject();\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"abb23fcc2461782ab204e61213240feb77d355aa":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["abb23fcc2461782ab204e61213240feb77d355aa"],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}