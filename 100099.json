{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#unionTerms(Collection[BytesRef]).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#unionTerms(Collection[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#unionTerms(Collection[BytesRef]).mjava","sourceNew":"  private Automaton unionTerms(Collection<BytesRef> terms) {\n    Automaton a;\n    if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: unionTerms: use union\");\n      }\n      List<Automaton> as = new ArrayList<>();\n      for(BytesRef term : terms) {\n        as.add(Automata.makeString(term.utf8ToString()));\n      }\n      a = Operations.union(as);\n    } else {\n      if (VERBOSE) {\n        System.out.println(\"TEST: unionTerms: use makeStringUnion\");\n      }\n      List<BytesRef> termsList = new ArrayList<>(terms);\n      Collections.sort(termsList);\n      a = Automata.makeStringUnion(termsList);\n    }\n\n    return randomNoOp(a);\n  }\n\n","sourceOld":"  private LightAutomaton unionTerms(Collection<BytesRef> terms) {\n    LightAutomaton a;\n    if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: unionTerms: use union\");\n      }\n      List<LightAutomaton> as = new ArrayList<>();\n      for(BytesRef term : terms) {\n        as.add(BasicAutomata.makeStringLight(term.utf8ToString()));\n      }\n      a = BasicOperations.unionLight(as);\n    } else {\n      if (VERBOSE) {\n        System.out.println(\"TEST: unionTerms: use makeStringUnion\");\n      }\n      List<BytesRef> termsList = new ArrayList<>(terms);\n      Collections.sort(termsList);\n      a = BasicAutomata.makeStringUnionLight(termsList);\n    }\n\n    return randomNoOp(a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#unionTerms(Collection[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private Automaton unionTerms(Collection<BytesRef> terms) {\n    Automaton a;\n    if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: unionTerms: use union\");\n      }\n      List<Automaton> as = new ArrayList<>();\n      for(BytesRef term : terms) {\n        as.add(Automata.makeString(term.utf8ToString()));\n      }\n      a = Operations.union(as);\n    } else {\n      if (VERBOSE) {\n        System.out.println(\"TEST: unionTerms: use makeStringUnion\");\n      }\n      List<BytesRef> termsList = new ArrayList<>(terms);\n      Collections.sort(termsList);\n      a = Automata.makeStringUnion(termsList);\n    }\n\n    return randomNoOp(a);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}