{"path":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#setupMorphline(String,String,boolean).mjava","commits":[{"id":"96fdd7189254bc9698a673fdf4e2b0e97e993ede","date":1387480427,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#setupMorphline(String,String,boolean).mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MRUnitBase#setupMorphline(String,String).mjava","sourceNew":"  public static void setupMorphline(String tempDir, String file, boolean replaceSolrLocator) throws IOException {\n    String morphlineText = FileUtils.readFileToString(new File(RESOURCES_DIR + \"/\" + file + \".conf\"), \"UTF-8\");\n    morphlineText = morphlineText.replaceAll(\"RESOURCES_DIR\", new File(tempDir).getAbsolutePath());\n    if (replaceSolrLocator) {\n      morphlineText = morphlineText.replaceAll(\"\\\\$\\\\{SOLR_LOCATOR\\\\}\",\n          \"{ collection : collection1 }\");\n    }\n    new File(tempDir + \"/\" + file + \".conf\").getParentFile().mkdirs();\n    FileUtils.writeStringToFile(new File(tempDir + \"/\" + file + \".conf\"), morphlineText, \"UTF-8\");\n  }\n\n","sourceOld":"  public static void setupMorphline(String tempDir, String file) throws IOException {\n    String morphlineText = FileUtils.readFileToString(new File(RESOURCES_DIR + \"/\" + file + \".conf\"), \"UTF-8\");\n    morphlineText = morphlineText.replaceAll(\"RESOURCES_DIR\", new File(tempDir).getAbsolutePath());\n    morphlineText = morphlineText.replaceAll(\"\\\\$\\\\{SOLR_LOCATOR\\\\}\",  \"{ collection : collection1 }\");\n    \n    FileUtils.writeStringToFile(new File(tempDir + \"/\" + file + \".conf\"), morphlineText, \"UTF-8\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a475a1c165e02515bff766b3b7be0c42edf1870c","date":1393099333,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#setupMorphline(String,String,boolean).mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#setupMorphline(String,String,boolean).mjava","sourceNew":"  public static void setupMorphline(String tempDir, String file, boolean replaceSolrLocator) throws IOException {\n    String morphlineText = FileUtils.readFileToString(new File(RESOURCES_DIR + \"/\" + file + \".conf\"), \"UTF-8\");\n    morphlineText = morphlineText.replace(\"RESOURCES_DIR\", new File(tempDir).getAbsolutePath());\n    if (replaceSolrLocator) {\n      morphlineText = morphlineText.replace(\"${SOLR_LOCATOR}\",\n          \"{ collection : collection1 }\");\n    }\n    new File(tempDir + \"/\" + file + \".conf\").getParentFile().mkdirs();\n    FileUtils.writeStringToFile(new File(tempDir + \"/\" + file + \".conf\"), morphlineText, \"UTF-8\");\n  }\n\n","sourceOld":"  public static void setupMorphline(String tempDir, String file, boolean replaceSolrLocator) throws IOException {\n    String morphlineText = FileUtils.readFileToString(new File(RESOURCES_DIR + \"/\" + file + \".conf\"), \"UTF-8\");\n    morphlineText = morphlineText.replaceAll(\"RESOURCES_DIR\", new File(tempDir).getAbsolutePath());\n    if (replaceSolrLocator) {\n      morphlineText = morphlineText.replaceAll(\"\\\\$\\\\{SOLR_LOCATOR\\\\}\",\n          \"{ collection : collection1 }\");\n    }\n    new File(tempDir + \"/\" + file + \".conf\").getParentFile().mkdirs();\n    FileUtils.writeStringToFile(new File(tempDir + \"/\" + file + \".conf\"), morphlineText, \"UTF-8\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#setupMorphline(String,String,boolean).mjava","sourceNew":null,"sourceOld":"  public static void setupMorphline(String tempDir, String file, boolean replaceSolrLocator) throws IOException {\n    String morphlineText = FileUtils.readFileToString(new File(RESOURCES_DIR + \"/\" + file + \".conf\"), \"UTF-8\");\n    morphlineText = morphlineText.replace(\"RESOURCES_DIR\", new File(tempDir).getAbsolutePath());\n    if (replaceSolrLocator) {\n      morphlineText = morphlineText.replace(\"${SOLR_LOCATOR}\",\n          \"{ collection : collection1 }\");\n    }\n    new File(tempDir + \"/\" + file + \".conf\").getParentFile().mkdirs();\n    FileUtils.writeStringToFile(new File(tempDir + \"/\" + file + \".conf\"), morphlineText, \"UTF-8\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#setupMorphline(String,String,boolean).mjava","sourceNew":null,"sourceOld":"  public static void setupMorphline(String tempDir, String file, boolean replaceSolrLocator) throws IOException {\n    String morphlineText = FileUtils.readFileToString(new File(RESOURCES_DIR + \"/\" + file + \".conf\"), \"UTF-8\");\n    morphlineText = morphlineText.replace(\"RESOURCES_DIR\", new File(tempDir).getAbsolutePath());\n    if (replaceSolrLocator) {\n      morphlineText = morphlineText.replace(\"${SOLR_LOCATOR}\",\n          \"{ collection : collection1 }\");\n    }\n    new File(tempDir + \"/\" + file + \".conf\").getParentFile().mkdirs();\n    FileUtils.writeStringToFile(new File(tempDir + \"/\" + file + \".conf\"), morphlineText, \"UTF-8\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["a475a1c165e02515bff766b3b7be0c42edf1870c"],"a475a1c165e02515bff766b3b7be0c42edf1870c":["96fdd7189254bc9698a673fdf4e2b0e97e993ede"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["a475a1c165e02515bff766b3b7be0c42edf1870c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a475a1c165e02515bff766b3b7be0c42edf1870c":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96fdd7189254bc9698a673fdf4e2b0e97e993ede"],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["a475a1c165e02515bff766b3b7be0c42edf1870c"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}