{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<String,String>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, params);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a027750b86452a8dcd054ac993d54b203dae9102","date":1451953949,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<String,String>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, params);\n  }\n\n","sourceOld":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<String,String>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","sourceOld":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<String,String>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","sourceOld":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<String,String>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"071baff2e8ccdf4709b106e0c0f720868fd7b444","date":1463622773,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","sourceOld":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb10453c4217aa50392c51e3e89deb8b779bd51","date":1463648949,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","sourceOld":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","sourceOld":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<String,String>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","sourceOld":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<String,String>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","sourceOld":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","sourceOld":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#CloudSolrStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n\n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","sourceOld":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // Aliases, optional, if provided then need to split\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    /*\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    */\n    \n    // We've got all the required items\n    init(collectionName, zkHost, mParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eb10453c4217aa50392c51e3e89deb8b779bd51":["826d15444ddf61716dc768c229cd54b2c2ccce1c","071baff2e8ccdf4709b106e0c0f720868fd7b444"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["826d15444ddf61716dc768c229cd54b2c2ccce1c"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["a027750b86452a8dcd054ac993d54b203dae9102"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a027750b86452a8dcd054ac993d54b203dae9102","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a027750b86452a8dcd054ac993d54b203dae9102","1eb10453c4217aa50392c51e3e89deb8b779bd51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a027750b86452a8dcd054ac993d54b203dae9102","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"a027750b86452a8dcd054ac993d54b203dae9102":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70d9c44f68e848648da304352cf7c045c33148f4"],"70d9c44f68e848648da304352cf7c045c33148f4":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a027750b86452a8dcd054ac993d54b203dae9102"],"1eb10453c4217aa50392c51e3e89deb8b779bd51":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["1eb10453c4217aa50392c51e3e89deb8b779bd51"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["70d9c44f68e848648da304352cf7c045c33148f4"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["1eb10453c4217aa50392c51e3e89deb8b779bd51","071baff2e8ccdf4709b106e0c0f720868fd7b444","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"a027750b86452a8dcd054ac993d54b203dae9102":["826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"70d9c44f68e848648da304352cf7c045c33148f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}