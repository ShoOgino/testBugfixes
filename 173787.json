{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#toExpression(StreamFactory,boolean).mjava","commits":[{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // stream\n      if(stream instanceof Expressible){\n        expression.addParameter(((Expressible)stream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This SelectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n    \n    // selects\n    for(Map.Entry<String, String> selectField : selectedFields.entrySet()) {\n      if(selectField.getKey().equals(selectField.getValue())){\n        expression.addParameter(selectField.getKey());\n      }\n      else{\n        expression.addParameter(String.format(Locale.ROOT, \"%s as %s\", selectField.getKey(), selectField.getValue()));\n      }\n    }\n    \n    for(StreamOperation operation : operations){\n      expression.addParameter(operation.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // stream\n      if(stream instanceof Expressible){\n        expression.addParameter(((Expressible)stream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This SelectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n    \n    // selects\n    for(Map.Entry<String, String> selectField : selectedFields.entrySet()) {\n      if(selectField.getKey().equals(selectField.getValue())){\n        expression.addParameter(selectField.getKey());\n      }\n      else{\n        expression.addParameter(String.format(Locale.ROOT, \"%s as %s\", selectField.getKey(), selectField.getValue()));\n      }\n    }\n    \n    for(StreamOperation operation : operations){\n      expression.addParameter(operation.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // stream\n      if(stream instanceof Expressible){\n        expression.addParameter(((Expressible)stream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This SelectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n    \n    // selected fields\n    for(Map.Entry<String, String> selectField : selectedFields.entrySet()) {\n      if(selectField.getKey().equals(selectField.getValue())){\n        expression.addParameter(selectField.getKey());\n      }\n      else{\n        expression.addParameter(String.format(Locale.ROOT, \"%s as %s\", selectField.getKey(), selectField.getValue()));\n      }\n    }\n    \n    // selected evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      expression.addParameter(String.format(Locale.ROOT, \"%s as %s\", selectedEvaluator.getKey().toExpression(factory), selectedEvaluator.getValue()));\n    }\n    \n    for(StreamOperation operation : operations){\n      expression.addParameter(operation.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      // stream\n      if(stream instanceof Expressible){\n        expression.addParameter(((Expressible)stream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This SelectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n    \n    // selects\n    for(Map.Entry<String, String> selectField : selectedFields.entrySet()) {\n      if(selectField.getKey().equals(selectField.getValue())){\n        expression.addParameter(selectField.getKey());\n      }\n      else{\n        expression.addParameter(String.format(Locale.ROOT, \"%s as %s\", selectField.getKey(), selectField.getValue()));\n      }\n    }\n    \n    for(StreamOperation operation : operations){\n      expression.addParameter(operation.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"]},"commit2Childs":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}