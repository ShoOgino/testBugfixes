{"path":"src/test/org/apache/solr/TestTrie#testTrieIntRangeSearch().mjava","commits":[{"id":"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0","date":1236796963,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/TestTrie#testTrieIntRangeSearch().mjava","pathOld":"/dev/null","sourceNew":"  public void testTrieIntRangeSearch() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \"tint\", String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(\"Range filter must match only 5 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[2 TO 6]\"), \"//*[@numFound='5']\");\n    for (int i = 1; i < 11; i++) {\n      assertU(adoc(\"id\", String.valueOf(-i), \"tint\", String.valueOf(-i)));\n    }\n    assertU(commit());\n    assertQ(\"Range filter must match only 5 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[-6 TO -2]\"), \"//*[@numFound='5']\");\n\n    // Test open ended range searches\n    assertQ(\"Range filter tint:[-9 to *] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[-10 TO *]\"), \"//*[@numFound='20']\");\n    assertQ(\"Range filter tint:[* to 9] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[* TO 10]\"), \"//*[@numFound='20']\");\n    assertQ(\"Range filter tint:[* to *] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[* TO *]\"), \"//*[@numFound='20']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d72e3710bede9618eb9b2b5c6936369f3d3f9579","date":1239534189,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/TestTrie#testTrieIntRangeSearch().mjava","pathOld":"src/test/org/apache/solr/TestTrie#testTrieIntRangeSearch().mjava","sourceNew":"  public void testTrieIntRangeSearch() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \"tint\", String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(\"Range filter must match only 5 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[2 TO 6]\"), \"//*[@numFound='5']\");\n    for (int i = 1; i < 11; i++) {\n      assertU(adoc(\"id\", String.valueOf(-i), \"tint\", String.valueOf(-i)));\n    }\n    assertU(commit());\n    assertQ(\"Range filter must match only 5 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[-6 TO -2]\"), \"//*[@numFound='5']\");\n\n    // Test open ended range searches\n    assertQ(\"Range filter tint:[-9 to *] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[-10 TO *]\"), \"//*[@numFound='20']\");\n    assertQ(\"Range filter tint:[* to 9] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[* TO 10]\"), \"//*[@numFound='20']\");\n    assertQ(\"Range filter tint:[* to *] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[* TO *]\"), \"//*[@numFound='20']\");\n\n    // Sorting\n    assertQ(\"Sort descending does not work correctly on tint fields\", req(\"q\", \"*:*\", \"sort\", \"tint desc\"), \"//*[@numFound='20']\", \"//int[@name='tint'][.='9']\");\n    assertQ(\"Sort ascending does not work correctly on tint fields\", req(\"q\", \"*:*\", \"sort\", \"tint asc\"), \"//*[@numFound='20']\", \"//int[@name='tint'][.='-10']\");\n\n    // Function queries\n    assertQ(\"Function queries does not work correctly on tint fields\", req(\"q\", \"_val_:\\\"sum(tint,1)\\\"\"), \"//*[@numFound='20']\", \"//int[@name='tint'][.='9']\");\n  }\n\n","sourceOld":"  public void testTrieIntRangeSearch() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \"tint\", String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(\"Range filter must match only 5 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[2 TO 6]\"), \"//*[@numFound='5']\");\n    for (int i = 1; i < 11; i++) {\n      assertU(adoc(\"id\", String.valueOf(-i), \"tint\", String.valueOf(-i)));\n    }\n    assertU(commit());\n    assertQ(\"Range filter must match only 5 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[-6 TO -2]\"), \"//*[@numFound='5']\");\n\n    // Test open ended range searches\n    assertQ(\"Range filter tint:[-9 to *] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[-10 TO *]\"), \"//*[@numFound='20']\");\n    assertQ(\"Range filter tint:[* to 9] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[* TO 10]\"), \"//*[@numFound='20']\");\n    assertQ(\"Range filter tint:[* to *] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[* TO *]\"), \"//*[@numFound='20']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/TestTrie#testTrieIntRangeSearch().mjava","pathOld":"src/test/org/apache/solr/TestTrie#testTrieIntRangeSearch().mjava","sourceNew":"  public void testTrieIntRangeSearch() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \"tint\", String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(\"Range filter must match only 5 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[2 TO 6]\"), \"//*[@numFound='5']\");\n    for (int i = 1; i < 11; i++) {\n      assertU(adoc(\"id\", String.valueOf(-i), \"tint\", String.valueOf(-i)));\n    }\n    assertU(commit());\n    assertQ(\"Range filter must match only 5 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[-6 TO -2]\"), \"//*[@numFound='5']\");\n\n    // Test open ended range searches\n    assertQ(\"Range filter tint:[-9 to *] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[-10 TO *]\"), \"//*[@numFound='20']\");\n    assertQ(\"Range filter tint:[* to 9] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[* TO 10]\"), \"//*[@numFound='20']\");\n    assertQ(\"Range filter tint:[* to *] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[* TO *]\"), \"//*[@numFound='20']\");\n\n    // Sorting\n    assertQ(\"Sort descending does not work correctly on tint fields\", req(\"q\", \"*:*\", \"sort\", \"tint desc\"), \"//*[@numFound='20']\", \"//int[@name='tint'][.='9']\");\n    assertQ(\"Sort ascending does not work correctly on tint fields\", req(\"q\", \"*:*\", \"sort\", \"tint asc\"), \"//*[@numFound='20']\", \"//int[@name='tint'][.='-10']\");\n\n    // Function queries\n    assertQ(\"Function queries does not work correctly on tint fields\", req(\"q\", \"_val_:\\\"sum(tint,1)\\\"\"), \"//*[@numFound='20']\", \"//int[@name='tint'][.='9']\");\n  }\n\n","sourceOld":"  public void testTrieIntRangeSearch() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \"tint\", String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(\"Range filter must match only 5 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[2 TO 6]\"), \"//*[@numFound='5']\");\n    for (int i = 1; i < 11; i++) {\n      assertU(adoc(\"id\", String.valueOf(-i), \"tint\", String.valueOf(-i)));\n    }\n    assertU(commit());\n    assertQ(\"Range filter must match only 5 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[-6 TO -2]\"), \"//*[@numFound='5']\");\n\n    // Test open ended range searches\n    assertQ(\"Range filter tint:[-9 to *] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[-10 TO *]\"), \"//*[@numFound='20']\");\n    assertQ(\"Range filter tint:[* to 9] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[* TO 10]\"), \"//*[@numFound='20']\");\n    assertQ(\"Range filter tint:[* to *] must match 20 documents\", req(\"q\", \"*:*\", \"fq\", \"tint:[* TO *]\"), \"//*[@numFound='20']\");\n\n    // Sorting\n    assertQ(\"Sort descending does not work correctly on tint fields\", req(\"q\", \"*:*\", \"sort\", \"tint desc\"), \"//*[@numFound='20']\", \"//int[@name='tint'][.='9']\");\n    assertQ(\"Sort ascending does not work correctly on tint fields\", req(\"q\", \"*:*\", \"sort\", \"tint asc\"), \"//*[@numFound='20']\", \"//int[@name='tint'][.='-10']\");\n\n    // Function queries\n    assertQ(\"Function queries does not work correctly on tint fields\", req(\"q\", \"_val_:\\\"sum(tint,1)\\\"\"), \"//*[@numFound='20']\", \"//int[@name='tint'][.='9']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d72e3710bede9618eb9b2b5c6936369f3d3f9579":["1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["d72e3710bede9618eb9b2b5c6936369f3d3f9579"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d72e3710bede9618eb9b2b5c6936369f3d3f9579":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0"],"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0":["d72e3710bede9618eb9b2b5c6936369f3d3f9579"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}