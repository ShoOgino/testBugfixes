{"path":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest#testHealthCheckV2Api().mjava","commits":[{"id":"1949be020da305d0d64d348458ac933994b52e8d","date":1586255171,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest#testHealthCheckV2Api().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HealthCheckHandlerTest#testHealthCheckV2Api().mjava","sourceNew":"  @Test\n  public void testHealthCheckV2Api() throws Exception {\n    V2Response res = new V2Request.Builder(\"/node/health\").build().process(cluster.getSolrClient());\n    assertEquals(0, res.getStatus());\n    assertEquals(CommonParams.OK, res.getResponse().get(CommonParams.STATUS));\n\n    // add a new node for the purpose of negative testing\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      // postive check that our (new) \"healthy\" node works with direct http client\n      assertEquals(CommonParams.OK, new V2Request.Builder(\"/node/health\").build().process(httpSolrClient).\n          getResponse().get(CommonParams.STATUS));\n\n      // now \"break\" our (new) node\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      // negative check of our (new) \"broken\" node that we deliberately put into an unhealth state\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        new V2Request.Builder(\"/node/health\").build().process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHealthCheckV2Api() throws Exception {\n    V2Response res = new V2Request.Builder(\"/node/health\").build().process(cluster.getSolrClient());\n    assertEquals(0, res.getStatus());\n    assertEquals(CommonParams.OK, res.getResponse().get(CommonParams.STATUS));\n\n    // add a new node for the purpose of negative testing\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      // postive check that our (new) \"healthy\" node works with direct http client\n      assertEquals(CommonParams.OK, new V2Request.Builder(\"/node/health\").build().process(httpSolrClient).\n          getResponse().get(CommonParams.STATUS));\n\n      // now \"break\" our (new) node\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      // negative check of our (new) \"broken\" node that we deliberately put into an unhealth state\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        new V2Request.Builder(\"/node/health\").build().process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1949be020da305d0d64d348458ac933994b52e8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1949be020da305d0d64d348458ac933994b52e8d"]},"commit2Childs":{"1949be020da305d0d64d348458ac933994b52e8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1949be020da305d0d64d348458ac933994b52e8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}