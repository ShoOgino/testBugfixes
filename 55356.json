{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","commits":[{"id":"b2262f0d8ead49d04485950fba849e166dbe28fb","date":1451569279,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  // Return a BulkScorer for the optional clauses only,\n  // or null if it is not applicable\n  // pkg-private for forcing use of BooleanScorer in tests\n  BulkScorer optionalBulkScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      if (c.getOccur() != Occur.SHOULD) {\n        continue;\n      }\n      BulkScorer subScorer = w.bulkScorer(context);\n\n      if (subScorer != null) {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    if (optional.size() == 1) {\n      BulkScorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedBulkScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    }\n\n    return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, query.getMinimumNumberShouldMatch()), needsScores);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","sourceNew":"  // Return a BulkScorer for the optional clauses only,\n  // or null if it is not applicable\n  // pkg-private for forcing use of BooleanScorer in tests\n  BulkScorer optionalBulkScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      if (c.getOccur() != Occur.SHOULD) {\n        continue;\n      }\n      BulkScorer subScorer = w.bulkScorer(context);\n\n      if (subScorer != null) {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    if (optional.size() == 1) {\n      return optional.get(0);\n    }\n\n    return new BooleanScorer(this, optional, Math.max(1, query.getMinimumNumberShouldMatch()), needsScores);\n  }\n\n","sourceOld":"  // Return a BulkScorer for the optional clauses only,\n  // or null if it is not applicable\n  // pkg-private for forcing use of BooleanScorer in tests\n  BulkScorer optionalBulkScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      if (c.getOccur() != Occur.SHOULD) {\n        continue;\n      }\n      BulkScorer subScorer = w.bulkScorer(context);\n\n      if (subScorer != null) {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    if (optional.size() == 1) {\n      BulkScorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedBulkScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    }\n\n    return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, query.getMinimumNumberShouldMatch()), needsScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","sourceNew":"  // Return a BulkScorer for the optional clauses only,\n  // or null if it is not applicable\n  // pkg-private for forcing use of BooleanScorer in tests\n  BulkScorer optionalBulkScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      if (c.getOccur() != Occur.SHOULD) {\n        continue;\n      }\n      BulkScorer subScorer = w.bulkScorer(context);\n\n      if (subScorer != null) {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    if (optional.size() == 1) {\n      return optional.get(0);\n    }\n\n    return new BooleanScorer(this, optional, Math.max(1, query.getMinimumNumberShouldMatch()), needsScores);\n  }\n\n","sourceOld":"  // Return a BulkScorer for the optional clauses only,\n  // or null if it is not applicable\n  // pkg-private for forcing use of BooleanScorer in tests\n  BulkScorer optionalBulkScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      if (c.getOccur() != Occur.SHOULD) {\n        continue;\n      }\n      BulkScorer subScorer = w.bulkScorer(context);\n\n      if (subScorer != null) {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    if (optional.size() == 1) {\n      BulkScorer opt = optional.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedBulkScorer(opt, coord(1, maxCoord));\n      } else {\n        return opt;\n      }\n    }\n\n    return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, query.getMinimumNumberShouldMatch()), needsScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","sourceNew":"  // Return a BulkScorer for the optional clauses only,\n  // or null if it is not applicable\n  // pkg-private for forcing use of BooleanScorer in tests\n  BulkScorer optionalBulkScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      if (c.getOccur() != Occur.SHOULD) {\n        continue;\n      }\n      BulkScorer subScorer = w.bulkScorer(context);\n\n      if (subScorer != null) {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    if (optional.size() == 1) {\n      return optional.get(0);\n    }\n\n    return new BooleanScorer(this, optional, Math.max(1, query.getMinimumNumberShouldMatch()), scoreMode.needsScores());\n  }\n\n","sourceOld":"  // Return a BulkScorer for the optional clauses only,\n  // or null if it is not applicable\n  // pkg-private for forcing use of BooleanScorer in tests\n  BulkScorer optionalBulkScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      if (c.getOccur() != Occur.SHOULD) {\n        continue;\n      }\n      BulkScorer subScorer = w.bulkScorer(context);\n\n      if (subScorer != null) {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    if (optional.size() == 1) {\n      return optional.get(0);\n    }\n\n    return new BooleanScorer(this, optional, Math.max(1, query.getMinimumNumberShouldMatch()), needsScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","sourceNew":"  // Return a BulkScorer for the optional clauses only,\n  // or null if it is not applicable\n  // pkg-private for forcing use of BooleanScorer in tests\n  BulkScorer optionalBulkScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      if (c.getOccur() != Occur.SHOULD) {\n        continue;\n      }\n      BulkScorer subScorer = w.bulkScorer(context);\n\n      if (subScorer != null) {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    if (optional.size() == 1) {\n      return optional.get(0);\n    }\n\n    return new BooleanScorer(this, optional, Math.max(1, query.getMinimumNumberShouldMatch()), scoreMode.needsScores());\n  }\n\n","sourceOld":"  // Return a BulkScorer for the optional clauses only,\n  // or null if it is not applicable\n  // pkg-private for forcing use of BooleanScorer in tests\n  BulkScorer optionalBulkScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      if (c.getOccur() != Occur.SHOULD) {\n        continue;\n      }\n      BulkScorer subScorer = w.bulkScorer(context);\n\n      if (subScorer != null) {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    if (optional.size() == 1) {\n      return optional.get(0);\n    }\n\n    return new BooleanScorer(this, optional, Math.max(1, query.getMinimumNumberShouldMatch()), needsScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a13f208db1e7d2e6004f070428b8dc9f533a14c","date":1561708237,"type":3,"author":"Sven Amann","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#optionalBulkScorer(LeafReaderContext).mjava","sourceNew":"  // Return a BulkScorer for the optional clauses only,\n  // or null if it is not applicable\n  // pkg-private for forcing use of BooleanScorer in tests\n  BulkScorer optionalBulkScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    for (WeightedBooleanClause wc : weightedClauses) {\n      Weight w = wc.weight;\n      BooleanClause c = wc.clause;\n      if (c.getOccur() != Occur.SHOULD) {\n        continue;\n      }\n      BulkScorer subScorer = w.bulkScorer(context);\n\n      if (subScorer != null) {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    if (optional.size() == 1) {\n      return optional.get(0);\n    }\n\n    return new BooleanScorer(this, optional, Math.max(1, query.getMinimumNumberShouldMatch()), scoreMode.needsScores());\n  }\n\n","sourceOld":"  // Return a BulkScorer for the optional clauses only,\n  // or null if it is not applicable\n  // pkg-private for forcing use of BooleanScorer in tests\n  BulkScorer optionalBulkScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      if (c.getOccur() != Occur.SHOULD) {\n        continue;\n      }\n      BulkScorer subScorer = w.bulkScorer(context);\n\n      if (subScorer != null) {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    if (optional.size() == 1) {\n      return optional.get(0);\n    }\n\n    return new BooleanScorer(this, optional, Math.max(1, query.getMinimumNumberShouldMatch()), scoreMode.needsScores());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["b2262f0d8ead49d04485950fba849e166dbe28fb"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["c8a0e442f7b61f811680273b25da95994a724466"],"3a13f208db1e7d2e6004f070428b8dc9f533a14c":["417142ff08fda9cf0b72d5133e63097a166c6458"],"b2262f0d8ead49d04485950fba849e166dbe28fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b2262f0d8ead49d04485950fba849e166dbe28fb","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a13f208db1e7d2e6004f070428b8dc9f533a14c"],"417142ff08fda9cf0b72d5133e63097a166c6458":["c8a0e442f7b61f811680273b25da95994a724466","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2262f0d8ead49d04485950fba849e166dbe28fb"],"c8a0e442f7b61f811680273b25da95994a724466":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"3a13f208db1e7d2e6004f070428b8dc9f533a14c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b2262f0d8ead49d04485950fba849e166dbe28fb":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["3a13f208db1e7d2e6004f070428b8dc9f533a14c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}