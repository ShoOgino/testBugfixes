{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","commits":[{"id":"53f6c67ebf2e8c3ab674868621bfa5e99e4ea163","date":1291984276,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  public void crashJRE() {\n    try {\n      Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n      // we should use getUnsafe instead, harmony implements it, etc.\n      Field field = clazz.getDeclaredField(\"theUnsafe\");\n      field.setAccessible(true);\n      Object o = field.get(null);\n      Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n      m.invoke(o, 0L, 0L);\n    } catch (Exception e) { e.printStackTrace(); }\n    fail();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  public void crashJRE() {\n    try {\n      Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n      // we should use getUnsafe instead, harmony implements it, etc.\n      Field field = clazz.getDeclaredField(\"theUnsafe\");\n      field.setAccessible(true);\n      Object o = field.get(null);\n      Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n      m.invoke(o, 0L, 0L);\n    } catch (Exception e) { e.printStackTrace(); }\n    fail();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  public void crashJRE() {\n    try {\n      Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n      // we should use getUnsafe instead, harmony implements it, etc.\n      Field field = clazz.getDeclaredField(\"theUnsafe\");\n      field.setAccessible(true);\n      Object o = field.get(null);\n      Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n      m.invoke(o, 0L, 0L);\n    } catch (Exception e) { e.printStackTrace(); }\n    fail();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","sourceNew":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  public void crashJRE() {\n    try {\n      Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n      // we should use getUnsafe instead, harmony implements it, etc.\n      Field field = clazz.getDeclaredField(\"theUnsafe\");\n      field.setAccessible(true);\n      Object o = field.get(null);\n      Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n      m.invoke(o, 0L, 0L);\n    } catch (Exception e) { e.printStackTrace(); }\n    fail();\n  }\n\n","sourceOld":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  public void crashJRE() {\n    try {\n      Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n      // we should use getUnsafe instead, harmony implements it, etc.\n      Field field = clazz.getDeclaredField(\"theUnsafe\");\n      field.setAccessible(true);\n      Object o = field.get(null);\n      Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n      m.invoke(o, 0L, 0L);\n    } catch (Exception e) { e.printStackTrace(); }\n    fail();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"53f6c67ebf2e8c3ab674868621bfa5e99e4ea163":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"53f6c67ebf2e8c3ab674868621bfa5e99e4ea163":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}