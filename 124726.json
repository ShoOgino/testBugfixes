{"path":"src/java/org/apache/solr/search/function/MultiFloatFunction#getValues(Map,IndexReader).mjava","commits":[{"id":"aa4607364a2fc156ffb717ddc21d860e466ac7fd","date":1258218641,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/MultiFloatFunction#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/MultiFloatFunction[SumFloatFunction]#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues[] valsArr = new DocValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, reader);\n    }\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues[] valsArr = new DocValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, reader);\n    }\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()+'(');\n        boolean firstTime=true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/MultiFloatFunction#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/MultiFloatFunction#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues[] valsArr = new DocValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, reader);\n    }\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues[] valsArr = new DocValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, reader);\n    }\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}