{"path":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createSubBoxes(Rectangle,Function[Rectangle,Relation]).mjava","commits":[{"id":"ee49d43fb47965f24d4ad89e7a1bdcc10410d615","date":1485765906,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createSubBoxes(Rectangle,Function[Rectangle,Relation]).mjava","pathOld":"/dev/null","sourceNew":"  private static Grid createSubBoxes(Rectangle boundingBox, Function<Rectangle, Relation> boxToRelation) {\n    final int minLat = encodeLatitudeCeil(boundingBox.minLat);\n    final int maxLat = encodeLatitude(boundingBox.maxLat);\n    final int minLon = encodeLongitudeCeil(boundingBox.minLon);\n    final int maxLon = encodeLongitude(boundingBox.maxLon);\n\n    if (maxLat < minLat || (boundingBox.crossesDateline() == false && maxLon < minLon)) {\n      // the box cannot match any quantized point\n      return new Grid(1, 1, 0, 0, 0, 0, new byte[0]);\n    }\n\n    final int latShift, lonShift;\n    final int latBase, lonBase;\n    final int maxLatDelta, maxLonDelta;\n    {\n      long minLat2 = (long) minLat - Integer.MIN_VALUE;\n      long maxLat2 = (long) maxLat - Integer.MIN_VALUE;\n      latShift = computeShift(minLat2, maxLat2);\n      latBase = (int) (minLat2 >>> latShift);\n      maxLatDelta = (int) (maxLat2 >>> latShift) - latBase + 1;\n      assert maxLatDelta > 0;\n    }\n    {\n      long minLon2 = (long) minLon - Integer.MIN_VALUE;\n      long maxLon2 = (long) maxLon - Integer.MIN_VALUE;\n      if (boundingBox.crossesDateline()) {\n        maxLon2 += 1L << 32; // wrap\n      }\n      lonShift = computeShift(minLon2, maxLon2);\n      lonBase = (int) (minLon2 >>> lonShift);\n      maxLonDelta = (int) (maxLon2 >>> lonShift) - lonBase + 1;\n      assert maxLonDelta > 0;\n    }\n\n    final byte[] relations = new byte[maxLatDelta * maxLonDelta];\n    for (int i = 0; i < maxLatDelta; ++i) {\n      for (int j = 0; j < maxLonDelta; ++j) {\n        final int boxMinLat = ((latBase + i) << latShift) + Integer.MIN_VALUE;\n        final int boxMinLon = ((lonBase + j) << lonShift) + Integer.MIN_VALUE;\n        final int boxMaxLat = boxMinLat + (1 << latShift) - 1;\n        final int boxMaxLon = boxMinLon + (1 << lonShift) - 1;\n\n        relations[i * maxLonDelta + j] = (byte) boxToRelation.apply(new Rectangle(\n            decodeLatitude(boxMinLat), decodeLatitude(boxMaxLat),\n            decodeLongitude(boxMinLon), decodeLongitude(boxMaxLon))).ordinal();\n      }\n    }\n\n    return new Grid(\n        latShift, lonShift,\n        latBase, lonBase,\n        maxLatDelta, maxLonDelta,\n        relations);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createSubBoxes(Rectangle,Function[Rectangle,Relation]).mjava","pathOld":"/dev/null","sourceNew":"  private static Grid createSubBoxes(Rectangle boundingBox, Function<Rectangle, Relation> boxToRelation) {\n    final int minLat = encodeLatitudeCeil(boundingBox.minLat);\n    final int maxLat = encodeLatitude(boundingBox.maxLat);\n    final int minLon = encodeLongitudeCeil(boundingBox.minLon);\n    final int maxLon = encodeLongitude(boundingBox.maxLon);\n\n    if (maxLat < minLat || (boundingBox.crossesDateline() == false && maxLon < minLon)) {\n      // the box cannot match any quantized point\n      return new Grid(1, 1, 0, 0, 0, 0, new byte[0]);\n    }\n\n    final int latShift, lonShift;\n    final int latBase, lonBase;\n    final int maxLatDelta, maxLonDelta;\n    {\n      long minLat2 = (long) minLat - Integer.MIN_VALUE;\n      long maxLat2 = (long) maxLat - Integer.MIN_VALUE;\n      latShift = computeShift(minLat2, maxLat2);\n      latBase = (int) (minLat2 >>> latShift);\n      maxLatDelta = (int) (maxLat2 >>> latShift) - latBase + 1;\n      assert maxLatDelta > 0;\n    }\n    {\n      long minLon2 = (long) minLon - Integer.MIN_VALUE;\n      long maxLon2 = (long) maxLon - Integer.MIN_VALUE;\n      if (boundingBox.crossesDateline()) {\n        maxLon2 += 1L << 32; // wrap\n      }\n      lonShift = computeShift(minLon2, maxLon2);\n      lonBase = (int) (minLon2 >>> lonShift);\n      maxLonDelta = (int) (maxLon2 >>> lonShift) - lonBase + 1;\n      assert maxLonDelta > 0;\n    }\n\n    final byte[] relations = new byte[maxLatDelta * maxLonDelta];\n    for (int i = 0; i < maxLatDelta; ++i) {\n      for (int j = 0; j < maxLonDelta; ++j) {\n        final int boxMinLat = ((latBase + i) << latShift) + Integer.MIN_VALUE;\n        final int boxMinLon = ((lonBase + j) << lonShift) + Integer.MIN_VALUE;\n        final int boxMaxLat = boxMinLat + (1 << latShift) - 1;\n        final int boxMaxLon = boxMinLon + (1 << lonShift) - 1;\n\n        relations[i * maxLonDelta + j] = (byte) boxToRelation.apply(new Rectangle(\n            decodeLatitude(boxMinLat), decodeLatitude(boxMaxLat),\n            decodeLongitude(boxMinLon), decodeLongitude(boxMaxLon))).ordinal();\n      }\n    }\n\n    return new Grid(\n        latShift, lonShift,\n        latBase, lonBase,\n        maxLatDelta, maxLonDelta,\n        relations);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createSubBoxes(Rectangle,Function[Rectangle,Relation]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createSubBoxes(Rectangle,Function[Rectangle,Relation]).mjava","sourceNew":"  private static Grid createSubBoxes(Rectangle boundingBox, Function<Rectangle, Relation> boxToRelation) {\n    final int minLat = encodeLatitudeCeil(boundingBox.minLat);\n    final int maxLat = encodeLatitude(boundingBox.maxLat);\n    final int minLon = encodeLongitudeCeil(boundingBox.minLon);\n    final int maxLon = encodeLongitude(boundingBox.maxLon);\n\n    if (maxLat < minLat || (boundingBox.crossesDateline() == false && maxLon < minLon)) {\n      // the box cannot match any quantized point\n      return new Grid(1, 1, 0, 0, 0, 0, new byte[0]);\n    }\n\n    final int latShift, lonShift;\n    final int latBase, lonBase;\n    final int maxLatDelta, maxLonDelta;\n    {\n      long minLat2 = (long) minLat - Integer.MIN_VALUE;\n      long maxLat2 = (long) maxLat - Integer.MIN_VALUE;\n      latShift = computeShift(minLat2, maxLat2);\n      latBase = (int) (minLat2 >>> latShift);\n      maxLatDelta = (int) (maxLat2 >>> latShift) - latBase + 1;\n      assert maxLatDelta > 0;\n    }\n    {\n      long minLon2 = (long) minLon - Integer.MIN_VALUE;\n      long maxLon2 = (long) maxLon - Integer.MIN_VALUE;\n      if (boundingBox.crossesDateline()) {\n        maxLon2 += 1L << 32; // wrap\n      }\n      lonShift = computeShift(minLon2, maxLon2);\n      lonBase = (int) (minLon2 >>> lonShift);\n      maxLonDelta = (int) (maxLon2 >>> lonShift) - lonBase + 1;\n      assert maxLonDelta > 0;\n    }\n\n    final byte[] relations = new byte[maxLatDelta * maxLonDelta];\n    for (int i = 0; i < maxLatDelta; ++i) {\n      for (int j = 0; j < maxLonDelta; ++j) {\n        final int boxMinLat = ((latBase + i) << latShift) + Integer.MIN_VALUE;\n        final int boxMinLon = ((lonBase + j) << lonShift) + Integer.MIN_VALUE;\n        final int boxMaxLat = boxMinLat + (1 << latShift) - 1;\n        final int boxMaxLon = boxMinLon + (1 << lonShift) - 1;\n\n        relations[i * maxLonDelta + j] = (byte) boxToRelation.apply(new Rectangle(\n                decodeLatitude(boxMinLat), decodeLatitude(boxMaxLat),\n            decodeLongitude(boxMinLon), decodeLongitude(boxMaxLon))\n            ).ordinal();\n      }\n    }\n\n    return new Grid(\n        latShift, lonShift,\n        latBase, lonBase,\n        maxLatDelta, maxLonDelta,\n        relations);\n  }\n\n","sourceOld":"  private static Grid createSubBoxes(Rectangle boundingBox, Function<Rectangle, Relation> boxToRelation) {\n    final int minLat = encodeLatitudeCeil(boundingBox.minLat);\n    final int maxLat = encodeLatitude(boundingBox.maxLat);\n    final int minLon = encodeLongitudeCeil(boundingBox.minLon);\n    final int maxLon = encodeLongitude(boundingBox.maxLon);\n\n    if (maxLat < minLat || (boundingBox.crossesDateline() == false && maxLon < minLon)) {\n      // the box cannot match any quantized point\n      return new Grid(1, 1, 0, 0, 0, 0, new byte[0]);\n    }\n\n    final int latShift, lonShift;\n    final int latBase, lonBase;\n    final int maxLatDelta, maxLonDelta;\n    {\n      long minLat2 = (long) minLat - Integer.MIN_VALUE;\n      long maxLat2 = (long) maxLat - Integer.MIN_VALUE;\n      latShift = computeShift(minLat2, maxLat2);\n      latBase = (int) (minLat2 >>> latShift);\n      maxLatDelta = (int) (maxLat2 >>> latShift) - latBase + 1;\n      assert maxLatDelta > 0;\n    }\n    {\n      long minLon2 = (long) minLon - Integer.MIN_VALUE;\n      long maxLon2 = (long) maxLon - Integer.MIN_VALUE;\n      if (boundingBox.crossesDateline()) {\n        maxLon2 += 1L << 32; // wrap\n      }\n      lonShift = computeShift(minLon2, maxLon2);\n      lonBase = (int) (minLon2 >>> lonShift);\n      maxLonDelta = (int) (maxLon2 >>> lonShift) - lonBase + 1;\n      assert maxLonDelta > 0;\n    }\n\n    final byte[] relations = new byte[maxLatDelta * maxLonDelta];\n    for (int i = 0; i < maxLatDelta; ++i) {\n      for (int j = 0; j < maxLonDelta; ++j) {\n        final int boxMinLat = ((latBase + i) << latShift) + Integer.MIN_VALUE;\n        final int boxMinLon = ((lonBase + j) << lonShift) + Integer.MIN_VALUE;\n        final int boxMaxLat = boxMinLat + (1 << latShift) - 1;\n        final int boxMaxLon = boxMinLon + (1 << lonShift) - 1;\n\n        relations[i * maxLonDelta + j] = (byte) boxToRelation.apply(new Rectangle(\n            decodeLatitude(boxMinLat), decodeLatitude(boxMaxLat),\n            decodeLongitude(boxMinLon), decodeLongitude(boxMaxLon))).ordinal();\n      }\n    }\n\n    return new Grid(\n        latShift, lonShift,\n        latBase, lonBase,\n        maxLatDelta, maxLonDelta,\n        relations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createSubBoxes(Rectangle,Function[Rectangle,Relation]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createSubBoxes(Rectangle,Function[Rectangle,Relation]).mjava","sourceNew":"  private static Grid createSubBoxes(Rectangle boundingBox, Function<Rectangle, Relation> boxToRelation) {\n    final int minLat = encodeLatitudeCeil(boundingBox.minLat);\n    final int maxLat = encodeLatitude(boundingBox.maxLat);\n    final int minLon = encodeLongitudeCeil(boundingBox.minLon);\n    final int maxLon = encodeLongitude(boundingBox.maxLon);\n\n    if (maxLat < minLat || (boundingBox.crossesDateline() == false && maxLon < minLon)) {\n      // the box cannot match any quantized point\n      return new Grid(1, 1, 0, 0, 0, 0, new byte[0]);\n    }\n\n    final int latShift, lonShift;\n    final int latBase, lonBase;\n    final int maxLatDelta, maxLonDelta;\n    {\n      long minLat2 = (long) minLat - Integer.MIN_VALUE;\n      long maxLat2 = (long) maxLat - Integer.MIN_VALUE;\n      latShift = computeShift(minLat2, maxLat2);\n      latBase = (int) (minLat2 >>> latShift);\n      maxLatDelta = (int) (maxLat2 >>> latShift) - latBase + 1;\n      assert maxLatDelta > 0;\n    }\n    {\n      long minLon2 = (long) minLon - Integer.MIN_VALUE;\n      long maxLon2 = (long) maxLon - Integer.MIN_VALUE;\n      if (boundingBox.crossesDateline()) {\n        maxLon2 += 1L << 32; // wrap\n      }\n      lonShift = computeShift(minLon2, maxLon2);\n      lonBase = (int) (minLon2 >>> lonShift);\n      maxLonDelta = (int) (maxLon2 >>> lonShift) - lonBase + 1;\n      assert maxLonDelta > 0;\n    }\n\n    final byte[] relations = new byte[maxLatDelta * maxLonDelta];\n    for (int i = 0; i < maxLatDelta; ++i) {\n      for (int j = 0; j < maxLonDelta; ++j) {\n        final int boxMinLat = ((latBase + i) << latShift) + Integer.MIN_VALUE;\n        final int boxMinLon = ((lonBase + j) << lonShift) + Integer.MIN_VALUE;\n        final int boxMaxLat = boxMinLat + (1 << latShift) - 1;\n        final int boxMaxLon = boxMinLon + (1 << lonShift) - 1;\n\n        relations[i * maxLonDelta + j] = (byte) boxToRelation.apply(new Rectangle(\n                decodeLatitude(boxMinLat), decodeLatitude(boxMaxLat),\n            decodeLongitude(boxMinLon), decodeLongitude(boxMaxLon))\n            ).ordinal();\n      }\n    }\n\n    return new Grid(\n        latShift, lonShift,\n        latBase, lonBase,\n        maxLatDelta, maxLonDelta,\n        relations);\n  }\n\n","sourceOld":"  private static Grid createSubBoxes(Rectangle boundingBox, Function<Rectangle, Relation> boxToRelation) {\n    final int minLat = encodeLatitudeCeil(boundingBox.minLat);\n    final int maxLat = encodeLatitude(boundingBox.maxLat);\n    final int minLon = encodeLongitudeCeil(boundingBox.minLon);\n    final int maxLon = encodeLongitude(boundingBox.maxLon);\n\n    if (maxLat < minLat || (boundingBox.crossesDateline() == false && maxLon < minLon)) {\n      // the box cannot match any quantized point\n      return new Grid(1, 1, 0, 0, 0, 0, new byte[0]);\n    }\n\n    final int latShift, lonShift;\n    final int latBase, lonBase;\n    final int maxLatDelta, maxLonDelta;\n    {\n      long minLat2 = (long) minLat - Integer.MIN_VALUE;\n      long maxLat2 = (long) maxLat - Integer.MIN_VALUE;\n      latShift = computeShift(minLat2, maxLat2);\n      latBase = (int) (minLat2 >>> latShift);\n      maxLatDelta = (int) (maxLat2 >>> latShift) - latBase + 1;\n      assert maxLatDelta > 0;\n    }\n    {\n      long minLon2 = (long) minLon - Integer.MIN_VALUE;\n      long maxLon2 = (long) maxLon - Integer.MIN_VALUE;\n      if (boundingBox.crossesDateline()) {\n        maxLon2 += 1L << 32; // wrap\n      }\n      lonShift = computeShift(minLon2, maxLon2);\n      lonBase = (int) (minLon2 >>> lonShift);\n      maxLonDelta = (int) (maxLon2 >>> lonShift) - lonBase + 1;\n      assert maxLonDelta > 0;\n    }\n\n    final byte[] relations = new byte[maxLatDelta * maxLonDelta];\n    for (int i = 0; i < maxLatDelta; ++i) {\n      for (int j = 0; j < maxLonDelta; ++j) {\n        final int boxMinLat = ((latBase + i) << latShift) + Integer.MIN_VALUE;\n        final int boxMinLon = ((lonBase + j) << lonShift) + Integer.MIN_VALUE;\n        final int boxMaxLat = boxMinLat + (1 << latShift) - 1;\n        final int boxMaxLon = boxMinLon + (1 << lonShift) - 1;\n\n        relations[i * maxLonDelta + j] = (byte) boxToRelation.apply(new Rectangle(\n            decodeLatitude(boxMinLat), decodeLatitude(boxMaxLat),\n            decodeLongitude(boxMinLon), decodeLongitude(boxMaxLon))).ordinal();\n      }\n    }\n\n    return new Grid(\n        latShift, lonShift,\n        latBase, lonBase,\n        maxLatDelta, maxLonDelta,\n        relations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}