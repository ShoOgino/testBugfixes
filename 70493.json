{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int).mjava","commits":[{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int).mjava","pathOld":"/dev/null","sourceNew":"  public HeapPointWriter(int size, int packedBytesLength) {\n    this.docIDs = new int[size];\n    this.block = new byte[packedBytesLength * size];\n    this.size = size;\n    this.packedBytesLength = packedBytesLength;\n    this.scratch = new byte[packedBytesLength];\n    offlinePointValue = new HeapPointReader.HeapPointValue(block, packedBytesLength);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9748213264006ee8a9c92037134821ffe991a31","date":1551346866,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int).mjava","sourceNew":"  public HeapPointWriter(int size, int packedBytesLength) {\n    this.docIDs = new int[size];\n    this.block = new byte[packedBytesLength * size];\n    this.size = size;\n    this.packedBytesLength = packedBytesLength;\n    this.scratch = new byte[packedBytesLength];\n    if (size > 0) {\n      offlinePointValue = new HeapPointReader.HeapPointValue(block, packedBytesLength);\n    } else {\n      //no values\n      offlinePointValue =  new HeapPointReader.HeapPointValue(block, 0);\n    }\n  }\n\n","sourceOld":"  public HeapPointWriter(int size, int packedBytesLength) {\n    this.docIDs = new int[size];\n    this.block = new byte[packedBytesLength * size];\n    this.size = size;\n    this.packedBytesLength = packedBytesLength;\n    this.scratch = new byte[packedBytesLength];\n    offlinePointValue = new HeapPointReader.HeapPointValue(block, packedBytesLength);\n  }\n\n","bugFix":null,"bugIntro":["537608940e64412ad5ecbc22df70b1553cdeb44f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"537608940e64412ad5ecbc22df70b1553cdeb44f","date":1551433447,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int).mjava","sourceNew":"  public HeapPointWriter(int size, int packedBytesLength) {\n    this.docIDs = new int[size];\n    this.block = new byte[packedBytesLength * size];\n    this.size = size;\n    this.packedBytesLength = packedBytesLength;\n    this.scratch = new byte[packedBytesLength];\n    if (size > 0) {\n      pointValue = new HeapPointReader.HeapPointValue(block, packedBytesLength);\n    } else {\n      //no values\n      pointValue =  null;\n    }\n  }\n\n","sourceOld":"  public HeapPointWriter(int size, int packedBytesLength) {\n    this.docIDs = new int[size];\n    this.block = new byte[packedBytesLength * size];\n    this.size = size;\n    this.packedBytesLength = packedBytesLength;\n    this.scratch = new byte[packedBytesLength];\n    if (size > 0) {\n      offlinePointValue = new HeapPointReader.HeapPointValue(block, packedBytesLength);\n    } else {\n      //no values\n      offlinePointValue =  new HeapPointReader.HeapPointValue(block, 0);\n    }\n  }\n\n","bugFix":["e9748213264006ee8a9c92037134821ffe991a31"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int).mjava","sourceNew":"  public HeapPointWriter(int size, int packedBytesLength) {\n    this.packedBytesDocIDLength = packedBytesLength + Integer.BYTES;\n    this.packedBytesLength = packedBytesLength;\n    this.block = new byte[packedBytesDocIDLength * size];\n    this.size = size;\n    this.scratch = new byte[packedBytesDocIDLength];\n    if (size > 0) {\n      pointValue = new HeapPointReader.HeapPointValue(block, packedBytesLength);\n    } else {\n      //no values\n      pointValue =  null;\n    }\n  }\n\n","sourceOld":"  public HeapPointWriter(int size, int packedBytesLength) {\n    this.docIDs = new int[size];\n    this.block = new byte[packedBytesLength * size];\n    this.size = size;\n    this.packedBytesLength = packedBytesLength;\n    this.scratch = new byte[packedBytesLength];\n    if (size > 0) {\n      pointValue = new HeapPointReader.HeapPointValue(block, packedBytesLength);\n    } else {\n      //no values\n      pointValue =  null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int).mjava","sourceNew":null,"sourceOld":"  public HeapPointWriter(int size, int packedBytesLength) {\n    this.packedBytesDocIDLength = packedBytesLength + Integer.BYTES;\n    this.packedBytesLength = packedBytesLength;\n    this.block = new byte[packedBytesDocIDLength * size];\n    this.size = size;\n    this.scratch = new byte[packedBytesDocIDLength];\n    if (size > 0) {\n      pointValue = new HeapPointReader.HeapPointValue(block, packedBytesLength);\n    } else {\n      //no values\n      pointValue =  null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["537608940e64412ad5ecbc22df70b1553cdeb44f"],"537608940e64412ad5ecbc22df70b1553cdeb44f":["e9748213264006ee8a9c92037134821ffe991a31"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"e9748213264006ee8a9c92037134821ffe991a31":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"537608940e64412ad5ecbc22df70b1553cdeb44f":["c7f06758793500ca773d0df1037290e6e404fb33"],"e9748213264006ee8a9c92037134821ffe991a31":["537608940e64412ad5ecbc22df70b1553cdeb44f"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["e9748213264006ee8a9c92037134821ffe991a31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}