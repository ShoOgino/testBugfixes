{"path":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f3a6662cfe349d2b0d5f96e310f593cd99a9f1","date":1484944029,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = null; // TODO: LUCENE-7649, re-consider optimization that broke SOLR-10013\n        // final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          assert false : \"imposible code -- or: someone re-enabled singleton optinization w/o reading the whole method\";\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"282ad4e3e1e9d262fb2ead86cbf6db4c793edbca","date":1485164346,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = null; // TODO: LUCENE-7649, re-consider optimization that broke SOLR-10013\n        // final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          assert false : \"imposible code -- or: someone re-enabled singleton optinization w/o reading the whole method\";\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedNumericDocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedNumericDocValues values = getValues(context.reader(), field);\n        if (values == null) {\n          return null;\n        }\n        final NumericDocValues singleton = DocValues.unwrapSingleton(values);\n        final TwoPhaseIterator iterator;\n        if (singleton != null) {\n          iterator = new TwoPhaseIterator(singleton) {\n            @Override\n            public boolean matches() throws IOException {\n              final long value = singleton.longValue();\n              return value >= lowerValue && value <= upperValue;\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        } else {\n          iterator = new TwoPhaseIterator(values) {\n            @Override\n            public boolean matches() throws IOException {\n              for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n                final long value = values.nextValue();\n                if (value < lowerValue) {\n                  continue;\n                }\n                // Values are sorted, so the first value that is >= lowerValue is our best candidate\n                return value <= upperValue;\n              }\n              return false; // all values were < lowerValue\n            }\n\n            @Override\n            public float matchCost() {\n              return 2; // 2 comparisons\n            }\n          };\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["282ad4e3e1e9d262fb2ead86cbf6db4c793edbca"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["282ad4e3e1e9d262fb2ead86cbf6db4c793edbca","706a7a3396c030cc66dda92a0492eb492131c4c0"],"282ad4e3e1e9d262fb2ead86cbf6db4c793edbca":["19f3a6662cfe349d2b0d5f96e310f593cd99a9f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a412a7808b2815566cb17117ebe6638112b9a31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","282ad4e3e1e9d262fb2ead86cbf6db4c793edbca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"19f3a6662cfe349d2b0d5f96e310f593cd99a9f1":["5a412a7808b2815566cb17117ebe6638112b9a31"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"282ad4e3e1e9d262fb2ead86cbf6db4c793edbca":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a412a7808b2815566cb17117ebe6638112b9a31","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"5a412a7808b2815566cb17117ebe6638112b9a31":["19f3a6662cfe349d2b0d5f96e310f593cd99a9f1"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"19f3a6662cfe349d2b0d5f96e310f593cd99a9f1":["282ad4e3e1e9d262fb2ead86cbf6db4c793edbca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}