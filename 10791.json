{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedAlphabetically(BytesRef,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedAlphabetically(BytesRef,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedAlphabetically(BytesRef,int).mjava","sourceNew":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not\n   * constant</b>. This is a workaround: in general, use constant weights for\n   * alphabetically sorted result.\n   */\n  private List<Completion> lookupSortedAlphabetically(BytesRef key, int num)\n      throws IOException {\n    // Greedily get num results from each weight branch.\n    List<Completion> res = lookupSortedByWeight(key, num, true);\n\n    // Sort and trim.\n    Collections.sort(res);\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not\n   * constant</b>. This is a workaround: in general, use constant weights for\n   * alphabetically sorted result.\n   */\n  private List<Completion> lookupSortedAlphabetically(BytesRef key, int num)\n      throws IOException {\n    // Greedily get num results from each weight branch.\n    List<Completion> res = lookupSortedByWeight(key, num, true);\n\n    // Sort and trim.\n    Collections.sort(res);\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}