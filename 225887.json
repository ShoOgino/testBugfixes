{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.shutdown();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.shutdown();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.shutdown();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.shutdown();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    PostingsEnum positions = termsEnum.postings(null, null, PostingsEnum.FLAG_ALL);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    PostingsEnum positions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    PostingsEnum positions = termsEnum.postings(null, null, PostingsEnum.FLAG_ALL);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    PostingsEnum positions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    PostingsEnum positions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    PostingsEnum positions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    PostingsEnum positions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator();\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    PostingsEnum positions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    PostingsEnum positions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator();\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    PostingsEnum positions = termsEnum.postings(null, PostingsEnum.ALL);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", \"abcd   \");\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = DirectoryReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator();\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    PostingsEnum positions = termsEnum.postings(null, null, PostingsEnum.ALL);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["322360ac5185a8446d3e0b530b2068bef67cd3d5","c83d6c4335f31cae14f625a222bc842f20073dcd"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","a56958d7f71a28824f20031ffbb2e13502a0274e"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}