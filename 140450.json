{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#points(int,PlanetModel,Constraints).mjava","commits":[{"id":"f215583134d6d66410e3c48b32282e3eb9d5fcde","date":1505141283,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#points(int,PlanetModel,Constraints).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Method that returns a random list of generated GeoPoints under given constraints. If it cannot\n   * find a point it will add a point that might not comply with the constraints.\n   *\n   * @param count The number of points\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated List of GeoPoints.\n   */\n  private List<GeoPoint> points(int count, PlanetModel planetModel, Constraints constraints){\n    List<GeoPoint> geoPoints = new ArrayList<>(count);\n    for(int i= 0; i< count; i++) {\n      GeoPoint point = randomGeoPoint(planetModel, constraints);\n      if (point == null){\n        point = randomGeoPoint(planetModel, new Constraints());\n      }\n      geoPoints.add(point);\n    }\n    return  geoPoints;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1fe6c223f93a8e9b72644987025e2057fdd99a76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#points(int,PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#points(int,PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random list of generated GeoPoints under given constraints. If it cannot\n   * find a point it will add a point that might not comply with the constraints.\n   *\n   * @param count The number of points\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated List of GeoPoints.\n   */\n  private List<GeoPoint> points(int count, PlanetModel planetModel, Constraints constraints){\n    List<GeoPoint> geoPoints = new ArrayList<>(count);\n    for(int i= 0; i< count; i++) {\n      GeoPoint point = randomGeoPoint(planetModel, constraints);\n      if (point == null){\n        point = randomGeoPoint(planetModel, new Constraints());\n      }\n      geoPoints.add(point);\n    }\n    return  geoPoints;\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random list of generated GeoPoints under given constraints. If it cannot\n   * find a point it will add a point that might not comply with the constraints.\n   *\n   * @param count The number of points\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated List of GeoPoints.\n   */\n  private List<GeoPoint> points(int count, PlanetModel planetModel, Constraints constraints){\n    List<GeoPoint> geoPoints = new ArrayList<>(count);\n    for(int i= 0; i< count; i++) {\n      GeoPoint point = randomGeoPoint(planetModel, constraints);\n      if (point == null){\n        point = randomGeoPoint(planetModel, new Constraints());\n      }\n      geoPoints.add(point);\n    }\n    return  geoPoints;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fe6c223f93a8e9b72644987025e2057fdd99a76","date":1511522755,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#points(int,PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#points(int,PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random list of generated GeoPoints under given constraints. The\n   * number of points returned might be lower than the requested.\n   *\n   * @param count The number of points\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated List of GeoPoints.\n   */\n  private List<GeoPoint> points(int count, PlanetModel planetModel, Constraints constraints){\n    List<GeoPoint> geoPoints = new ArrayList<>(count);\n    for(int i= 0; i< count; i++) {\n      GeoPoint point = randomGeoPoint(planetModel, constraints);\n      if (point != null){\n        geoPoints.add(point);\n      }\n    }\n    return  geoPoints;\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random list of generated GeoPoints under given constraints. If it cannot\n   * find a point it will add a point that might not comply with the constraints.\n   *\n   * @param count The number of points\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated List of GeoPoints.\n   */\n  private List<GeoPoint> points(int count, PlanetModel planetModel, Constraints constraints){\n    List<GeoPoint> geoPoints = new ArrayList<>(count);\n    for(int i= 0; i< count; i++) {\n      GeoPoint point = randomGeoPoint(planetModel, constraints);\n      if (point == null){\n        point = randomGeoPoint(planetModel, new Constraints());\n      }\n      geoPoints.add(point);\n    }\n    return  geoPoints;\n  }\n\n","bugFix":["f215583134d6d66410e3c48b32282e3eb9d5fcde"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1fe6c223f93a8e9b72644987025e2057fdd99a76":["f215583134d6d66410e3c48b32282e3eb9d5fcde"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1fe6c223f93a8e9b72644987025e2057fdd99a76"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"1fe6c223f93a8e9b72644987025e2057fdd99a76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["685bd38810c206c93e9058f3c2cfa9827c086c27","1fe6c223f93a8e9b72644987025e2057fdd99a76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}