{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(long).mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(long).mjava","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        //System.out.println(\"BTR.seek by ord ord=\" + ord);\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        assert ord < numTerms;\n\n        // TODO: if ord is in same terms block and\n        // after current ord, we should avoid this seek just\n        // like we do in the seek(BytesRef) case\n        in.seek(indexEnum.seek(ord));\n        boolean result = nextBlock();\n\n        // Block must exist since ord < numTerms:\n        assert result;\n\n        indexIsCurrent = true;\n        didIndexNext = false;\n        blocksSinceSeek = 0;\n        seekPending = false;\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n        term.copyBytes(indexEnum.term());\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = _next();\n          assert term != null;\n          left--;\n          assert indexIsCurrent;\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(long ord) throws IOException {\n        //System.out.println(\"BTR.seek by ord ord=\" + ord);\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        assert ord < numTerms;\n\n        // TODO: if ord is in same terms block and\n        // after current ord, we should avoid this seek just\n        // like we do in the seek(BytesRef) case\n        in.seek(indexEnum.seek(ord));\n        boolean result = nextBlock();\n\n        // Block must exist since ord < numTerms:\n        assert result;\n\n        indexIsCurrent = true;\n        didIndexNext = false;\n        blocksSinceSeek = 0;\n        seekPending = false;\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n        term.copyBytes(indexEnum.term());\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = _next();\n          assert term != null;\n          left--;\n          assert indexIsCurrent;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(long).mjava","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        //System.out.println(\"BTR.seek by ord ord=\" + ord);\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        assert ord < numTerms;\n\n        // TODO: if ord is in same terms block and\n        // after current ord, we should avoid this seek just\n        // like we do in the seek(BytesRef) case\n        in.seek(indexEnum.seek(ord));\n        boolean result = nextBlock();\n\n        // Block must exist since ord < numTerms:\n        assert result;\n\n        indexIsCurrent = true;\n        didIndexNext = false;\n        seekPending = false;\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n        term.copyBytes(indexEnum.term());\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = _next();\n          assert term != null;\n          left--;\n          assert indexIsCurrent;\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(long ord) throws IOException {\n        //System.out.println(\"BTR.seek by ord ord=\" + ord);\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        assert ord < numTerms;\n\n        // TODO: if ord is in same terms block and\n        // after current ord, we should avoid this seek just\n        // like we do in the seek(BytesRef) case\n        in.seek(indexEnum.seek(ord));\n        boolean result = nextBlock();\n\n        // Block must exist since ord < numTerms:\n        assert result;\n\n        indexIsCurrent = true;\n        didIndexNext = false;\n        blocksSinceSeek = 0;\n        seekPending = false;\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n        term.copyBytes(indexEnum.term());\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = _next();\n          assert term != null;\n          left--;\n          assert indexIsCurrent;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(long).mjava","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        //System.out.println(\"BTR.seek by ord ord=\" + ord);\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        assert ord < numTerms;\n\n        // TODO: if ord is in same terms block and\n        // after current ord, we should avoid this seek just\n        // like we do in the seek(BytesRef) case\n        in.seek(indexEnum.seek(ord));\n        boolean result = nextBlock();\n\n        // Block must exist since ord < numTerms:\n        assert result;\n\n        indexIsCurrent = true;\n        didIndexNext = false;\n        seekPending = false;\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n        term.copyBytes(indexEnum.term());\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = _next();\n          assert term != null;\n          left--;\n          assert indexIsCurrent;\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(long ord) throws IOException {\n        //System.out.println(\"BTR.seek by ord ord=\" + ord);\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        assert ord < numTerms;\n\n        // TODO: if ord is in same terms block and\n        // after current ord, we should avoid this seek just\n        // like we do in the seek(BytesRef) case\n        in.seek(indexEnum.seek(ord));\n        boolean result = nextBlock();\n\n        // Block must exist since ord < numTerms:\n        assert result;\n\n        indexIsCurrent = true;\n        didIndexNext = false;\n        blocksSinceSeek = 0;\n        seekPending = false;\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n        term.copyBytes(indexEnum.term());\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = _next();\n          assert term != null;\n          left--;\n          assert indexIsCurrent;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a45bec74b98f6fc05f52770cfb425739e6563960":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}