{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Strait forward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Strait forward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Strait forward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Strait forward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Strait forward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Strait forward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Strait forward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}