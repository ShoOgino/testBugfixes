{"path":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","commits":[{"id":"e5974da97d735dd78f13f46406caf64c9448e4f4","date":1343143368,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","pathOld":"/dev/null","sourceNew":"  private SPIClassIterator(Class<S> clazz, ClassLoader loader) {\n    if (loader == null)\n      throw new IllegalArgumentException(\"You must provide a ClassLoader.\");\n    this.clazz = clazz;\n    this.loader = loader;\n    try {\n      this.profilesEnum = loader.getResources(META_INF_SERVICES + clazz.getName());\n    } catch (IOException ioe) {\n      throw new ServiceConfigurationError(\"Error loading SPI classes.\", ioe);\n    }\n    this.linesIterator = Collections.<String>emptySet().iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08c0e58a967bc50a4ec3acd7bed28cf64ae668d1","date":1343144986,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","sourceNew":"  private SPIClassIterator(Class<S> clazz, ClassLoader loader) {\n    if (loader == null)\n      throw new IllegalArgumentException(\"You must provide a ClassLoader.\");\n    this.clazz = clazz;\n    this.loader = loader;\n    try {\n      this.profilesEnum = loader.getResources(META_INF_SERVICES + clazz.getName());\n    } catch (IOException ioe) {\n      throw new ServiceConfigurationError(\"Error loading SPI profiles for type \" + clazz.getName() + \" from classpath\", ioe);\n    }\n    this.linesIterator = Collections.<String>emptySet().iterator();\n  }\n\n","sourceOld":"  private SPIClassIterator(Class<S> clazz, ClassLoader loader) {\n    if (loader == null)\n      throw new IllegalArgumentException(\"You must provide a ClassLoader.\");\n    this.clazz = clazz;\n    this.loader = loader;\n    try {\n      this.profilesEnum = loader.getResources(META_INF_SERVICES + clazz.getName());\n    } catch (IOException ioe) {\n      throw new ServiceConfigurationError(\"Error loading SPI classes.\", ioe);\n    }\n    this.linesIterator = Collections.<String>emptySet().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","pathOld":"/dev/null","sourceNew":"  private SPIClassIterator(Class<S> clazz, ClassLoader loader) {\n    if (loader == null)\n      throw new IllegalArgumentException(\"You must provide a ClassLoader.\");\n    this.clazz = clazz;\n    this.loader = loader;\n    try {\n      this.profilesEnum = loader.getResources(META_INF_SERVICES + clazz.getName());\n    } catch (IOException ioe) {\n      throw new ServiceConfigurationError(\"Error loading SPI profiles for type \" + clazz.getName() + \" from classpath\", ioe);\n    }\n    this.linesIterator = Collections.<String>emptySet().iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","pathOld":"/dev/null","sourceNew":"  private SPIClassIterator(Class<S> clazz, ClassLoader loader) {\n    if (loader == null)\n      throw new IllegalArgumentException(\"You must provide a ClassLoader.\");\n    this.clazz = clazz;\n    this.loader = loader;\n    try {\n      this.profilesEnum = loader.getResources(META_INF_SERVICES + clazz.getName());\n    } catch (IOException ioe) {\n      throw new ServiceConfigurationError(\"Error loading SPI profiles for type \" + clazz.getName() + \" from classpath\", ioe);\n    }\n    this.linesIterator = Collections.<String>emptySet().iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","pathOld":"/dev/null","sourceNew":"  private SPIClassIterator(Class<S> clazz, ClassLoader loader) {\n    if (loader == null)\n      throw new IllegalArgumentException(\"You must provide a ClassLoader.\");\n    this.clazz = clazz;\n    this.loader = loader;\n    try {\n      this.profilesEnum = loader.getResources(META_INF_SERVICES + clazz.getName());\n    } catch (IOException ioe) {\n      throw new ServiceConfigurationError(\"Error loading SPI profiles for type \" + clazz.getName() + \" from classpath\", ioe);\n    }\n    this.linesIterator = Collections.<String>emptySet().iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d89a429c822ccbd96c4c675d51fdd79633a62f73","date":1363169433,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","sourceNew":"  private SPIClassIterator(Class<S> clazz, ClassLoader loader) {\n    this.clazz = clazz;\n    try {\n      final String fullName = META_INF_SERVICES + clazz.getName();\n      this.profilesEnum = (loader == null) ? ClassLoader.getSystemResources(fullName) : loader.getResources(fullName);\n    } catch (IOException ioe) {\n      throw new ServiceConfigurationError(\"Error loading SPI profiles for type \" + clazz.getName() + \" from classpath\", ioe);\n    }\n    this.loader = (loader == null) ? ClassLoader.getSystemClassLoader() : loader;\n    this.linesIterator = Collections.<String>emptySet().iterator();\n  }\n\n","sourceOld":"  private SPIClassIterator(Class<S> clazz, ClassLoader loader) {\n    if (loader == null)\n      throw new IllegalArgumentException(\"You must provide a ClassLoader.\");\n    this.clazz = clazz;\n    this.loader = loader;\n    try {\n      this.profilesEnum = loader.getResources(META_INF_SERVICES + clazz.getName());\n    } catch (IOException ioe) {\n      throw new ServiceConfigurationError(\"Error loading SPI profiles for type \" + clazz.getName() + \" from classpath\", ioe);\n    }\n    this.linesIterator = Collections.<String>emptySet().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efd7fea401304261e24e90e24fecaf6a091aa23d","date":1449320129,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","sourceNew":"  private SPIClassIterator(Class<S> clazz, ClassLoader loader) {\n    this.clazz = Objects.requireNonNull(clazz, \"clazz\");\n    this.loader = Objects.requireNonNull(loader, \"loader\");\n    try {\n      final String fullName = META_INF_SERVICES + clazz.getName();\n      this.profilesEnum = loader.getResources(fullName);\n    } catch (IOException ioe) {\n      throw new ServiceConfigurationError(\"Error loading SPI profiles for type \" + clazz.getName() + \" from classpath\", ioe);\n    }\n    this.linesIterator = Collections.<String>emptySet().iterator();\n  }\n\n","sourceOld":"  private SPIClassIterator(Class<S> clazz, ClassLoader loader) {\n    this.clazz = clazz;\n    try {\n      final String fullName = META_INF_SERVICES + clazz.getName();\n      this.profilesEnum = (loader == null) ? ClassLoader.getSystemResources(fullName) : loader.getResources(fullName);\n    } catch (IOException ioe) {\n      throw new ServiceConfigurationError(\"Error loading SPI profiles for type \" + clazz.getName() + \" from classpath\", ioe);\n    }\n    this.loader = (loader == null) ? ClassLoader.getSystemClassLoader() : loader;\n    this.linesIterator = Collections.<String>emptySet().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32694fa3bbb984d3054955e48d946708e16110ff","date":1585155816,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#SPIClassIterator(Class[S],ClassLoader).mjava","sourceNew":null,"sourceOld":"  private SPIClassIterator(Class<S> clazz, ClassLoader loader) {\n    this.clazz = Objects.requireNonNull(clazz, \"clazz\");\n    this.loader = Objects.requireNonNull(loader, \"loader\");\n    try {\n      final String fullName = META_INF_SERVICES + clazz.getName();\n      this.profilesEnum = loader.getResources(fullName);\n    } catch (IOException ioe) {\n      throw new ServiceConfigurationError(\"Error loading SPI profiles for type \" + clazz.getName() + \" from classpath\", ioe);\n    }\n    this.linesIterator = Collections.<String>emptySet().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"efd7fea401304261e24e90e24fecaf6a091aa23d":["d89a429c822ccbd96c4c675d51fdd79633a62f73"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"32694fa3bbb984d3054955e48d946708e16110ff":["efd7fea401304261e24e90e24fecaf6a091aa23d"],"d89a429c822ccbd96c4c675d51fdd79633a62f73":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"08c0e58a967bc50a4ec3acd7bed28cf64ae668d1":["e5974da97d735dd78f13f46406caf64c9448e4f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"e5974da97d735dd78f13f46406caf64c9448e4f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08c0e58a967bc50a4ec3acd7bed28cf64ae668d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["32694fa3bbb984d3054955e48d946708e16110ff"]},"commit2Childs":{"efd7fea401304261e24e90e24fecaf6a091aa23d":["32694fa3bbb984d3054955e48d946708e16110ff"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d89a429c822ccbd96c4c675d51fdd79633a62f73":["efd7fea401304261e24e90e24fecaf6a091aa23d"],"32694fa3bbb984d3054955e48d946708e16110ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08c0e58a967bc50a4ec3acd7bed28cf64ae668d1":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","e5974da97d735dd78f13f46406caf64c9448e4f4","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"e5974da97d735dd78f13f46406caf64c9448e4f4":["08c0e58a967bc50a4ec3acd7bed28cf64ae668d1"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","d89a429c822ccbd96c4c675d51fdd79633a62f73","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}