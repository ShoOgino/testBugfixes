{"path":"solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider#testAuthenticate().mjava","commits":[{"id":"ccfb40e1834cac1619556a0becf198bb7bad5d63","date":1438887805,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider#testAuthenticate().mjava","pathOld":"/dev/null","sourceNew":"  public void testAuthenticate(){\n    Sha256AuthenticationProvider zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(Collections.emptyMap());\n\n    String pwd = \"My#$Password\";\n    String user = \"noble\";\n    Map latestConf = new LinkedHashMap<>();\n    Map<String, Object> params = Collections.singletonMap(user, pwd);\n    Map<String, Object> result = zkAuthenticationProvider.edit(latestConf,\n        Collections.singletonList(new CommandOperation(\"set-user\",params )));\n    zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(result);\n\n    assertTrue(zkAuthenticationProvider.authenticate(user, pwd));\n    assertFalse(zkAuthenticationProvider.authenticate(user, \"WrongPassword\"));\n    assertFalse(zkAuthenticationProvider.authenticate(\"unknownuser\", \"WrongPassword\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3635776bfb39e459843cfe0a78c7f3f88602f8ea","date":1450428038,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider#testAuthenticate().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider#testAuthenticate().mjava","sourceNew":"  public void testAuthenticate(){\n    Sha256AuthenticationProvider zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(Collections.emptyMap());\n\n    String pwd = \"My#$Password\";\n    String user = \"noble\";\n    Map latestConf = new LinkedHashMap<>();\n    Map<String, Object> params = singletonMap(user, pwd);\n    Map<String, Object> result = zkAuthenticationProvider.edit(latestConf,\n        Collections.singletonList(new CommandOperation(\"set-user\",params )));\n    zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(result);\n\n    assertTrue(zkAuthenticationProvider.authenticate(user, pwd));\n    assertFalse(zkAuthenticationProvider.authenticate(user, \"WrongPassword\"));\n    assertFalse(zkAuthenticationProvider.authenticate(\"unknownuser\", \"WrongPassword\"));\n\n  }\n\n","sourceOld":"  public void testAuthenticate(){\n    Sha256AuthenticationProvider zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(Collections.emptyMap());\n\n    String pwd = \"My#$Password\";\n    String user = \"noble\";\n    Map latestConf = new LinkedHashMap<>();\n    Map<String, Object> params = Collections.singletonMap(user, pwd);\n    Map<String, Object> result = zkAuthenticationProvider.edit(latestConf,\n        Collections.singletonList(new CommandOperation(\"set-user\",params )));\n    zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(result);\n\n    assertTrue(zkAuthenticationProvider.authenticate(user, pwd));\n    assertFalse(zkAuthenticationProvider.authenticate(user, \"WrongPassword\"));\n    assertFalse(zkAuthenticationProvider.authenticate(\"unknownuser\", \"WrongPassword\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd","date":1567056470,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider#testAuthenticate().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider#testAuthenticate().mjava","sourceNew":"  public void testAuthenticate(){\n    Sha256AuthenticationProvider zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(createConfigMap(\"ignore\", \"me\"));\n\n    String pwd = \"Friendly\";\n    String user = \"marcus\";\n    Map latestConf = createConfigMap(user, pwd);\n    Map<String, Object> params = singletonMap(user, pwd);\n    Map<String, Object> result = zkAuthenticationProvider.edit(latestConf,\n        Collections.singletonList(new CommandOperation(\"set-user\",params )));\n    zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(result);\n\n    assertTrue(zkAuthenticationProvider.authenticate(user, pwd));\n    assertFalse(zkAuthenticationProvider.authenticate(user, \"WrongPassword\"));\n    assertFalse(zkAuthenticationProvider.authenticate(\"unknownuser\", \"WrongPassword\"));\n\n  }\n\n","sourceOld":"  public void testAuthenticate(){\n    Sha256AuthenticationProvider zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(Collections.emptyMap());\n\n    String pwd = \"My#$Password\";\n    String user = \"noble\";\n    Map latestConf = new LinkedHashMap<>();\n    Map<String, Object> params = singletonMap(user, pwd);\n    Map<String, Object> result = zkAuthenticationProvider.edit(latestConf,\n        Collections.singletonList(new CommandOperation(\"set-user\",params )));\n    zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(result);\n\n    assertTrue(zkAuthenticationProvider.authenticate(user, pwd));\n    assertFalse(zkAuthenticationProvider.authenticate(user, \"WrongPassword\"));\n    assertFalse(zkAuthenticationProvider.authenticate(\"unknownuser\", \"WrongPassword\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider#testAuthenticate().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestSha256AuthenticationProvider#testAuthenticate().mjava","sourceNew":"  public void testAuthenticate(){\n    Sha256AuthenticationProvider zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(createConfigMap(\"ignore\", \"me\"));\n\n    String pwd = \"Friendly\";\n    String user = \"marcus\";\n    @SuppressWarnings({\"rawtypes\"})\n    Map latestConf = createConfigMap(user, pwd);\n    Map<String, Object> params = singletonMap(user, pwd);\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> result = zkAuthenticationProvider.edit(latestConf,\n        Collections.singletonList(new CommandOperation(\"set-user\",params )));\n    zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(result);\n\n    assertTrue(zkAuthenticationProvider.authenticate(user, pwd));\n    assertFalse(zkAuthenticationProvider.authenticate(user, \"WrongPassword\"));\n    assertFalse(zkAuthenticationProvider.authenticate(\"unknownuser\", \"WrongPassword\"));\n\n  }\n\n","sourceOld":"  public void testAuthenticate(){\n    Sha256AuthenticationProvider zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(createConfigMap(\"ignore\", \"me\"));\n\n    String pwd = \"Friendly\";\n    String user = \"marcus\";\n    Map latestConf = createConfigMap(user, pwd);\n    Map<String, Object> params = singletonMap(user, pwd);\n    Map<String, Object> result = zkAuthenticationProvider.edit(latestConf,\n        Collections.singletonList(new CommandOperation(\"set-user\",params )));\n    zkAuthenticationProvider = new Sha256AuthenticationProvider();\n    zkAuthenticationProvider.init(result);\n\n    assertTrue(zkAuthenticationProvider.authenticate(user, pwd));\n    assertFalse(zkAuthenticationProvider.authenticate(user, \"WrongPassword\"));\n    assertFalse(zkAuthenticationProvider.authenticate(\"unknownuser\", \"WrongPassword\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd":["3635776bfb39e459843cfe0a78c7f3f88602f8ea"],"3635776bfb39e459843cfe0a78c7f3f88602f8ea":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd"]},"commit2Childs":{"5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd":["e98520789adb1d5ad05afb4956eca0944a929688"],"3635776bfb39e459843cfe0a78c7f3f88602f8ea":["5580de1ca6cf6a8ac7b40d0008b458bb1319d7fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["3635776bfb39e459843cfe0a78c7f3f88602f8ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}