{"path":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"      @Override\n      public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n            // We pre-cached during rewrite so all terms\n            // better be here...\n            assert subStats != null;\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          if (docFreq >= 0 && nodeDocFreq >= 0) {\n            docFreq += nodeDocFreq;\n          } else {\n            docFreq = -1;\n          }\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          if (totalTermFreq >= 0 && nodeTotalTermFreq >= 0) {\n            totalTermFreq += nodeTotalTermFreq;\n          } else {\n            totalTermFreq = -1;\n          }\n        }\n\n        return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n\n","sourceOld":"      @Override\n      public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n            // We pre-cached during rewrite so all terms\n            // better be here...\n            assert subStats != null;\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          if (docFreq >= 0 && nodeDocFreq >= 0) {\n            docFreq += nodeDocFreq;\n          } else {\n            docFreq = -1;\n          }\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          if (totalTermFreq >= 0 && nodeTotalTermFreq >= 0) {\n            totalTermFreq += nodeTotalTermFreq;\n          } else {\n            totalTermFreq = -1;\n          }\n        }\n\n        return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"      @Override\n      public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          if (docFreq >= 0 && nodeDocFreq >= 0) {\n            docFreq += nodeDocFreq;\n          } else {\n            docFreq = -1;\n          }\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          if (totalTermFreq >= 0 && nodeTotalTermFreq >= 0) {\n            totalTermFreq += nodeTotalTermFreq;\n          } else {\n            totalTermFreq = -1;\n          }\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","sourceOld":"      @Override\n      public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n            // We pre-cached during rewrite so all terms\n            // better be here...\n            assert subStats != null;\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          if (docFreq >= 0 && nodeDocFreq >= 0) {\n            docFreq += nodeDocFreq;\n          } else {\n            docFreq = -1;\n          }\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          if (totalTermFreq >= 0 && nodeTotalTermFreq >= 0) {\n            totalTermFreq += nodeTotalTermFreq;\n          } else {\n            totalTermFreq = -1;\n          }\n        }\n\n        return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n\n","bugFix":["226aae72c0326f4299c16280195bade4530de537"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"      @Override\n      public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          docFreq += nodeDocFreq;\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          totalTermFreq += nodeTotalTermFreq;\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","sourceOld":"      @Override\n      public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          if (docFreq >= 0 && nodeDocFreq >= 0) {\n            docFreq += nodeDocFreq;\n          } else {\n            docFreq = -1;\n          }\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          if (totalTermFreq >= 0 && nodeTotalTermFreq >= 0) {\n            totalTermFreq += nodeTotalTermFreq;\n          } else {\n            totalTermFreq = -1;\n          }\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"      @Override\n      public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          docFreq += nodeDocFreq;\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          totalTermFreq += nodeTotalTermFreq;\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","sourceOld":"      @Override\n      public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          if (docFreq >= 0 && nodeDocFreq >= 0) {\n            docFreq += nodeDocFreq;\n          } else {\n            docFreq = -1;\n          }\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          if (totalTermFreq >= 0 && nodeTotalTermFreq >= 0) {\n            totalTermFreq += nodeTotalTermFreq;\n          } else {\n            totalTermFreq = -1;\n          }\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermStates).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"      @Override\n      public TermStatistics termStatistics(Term term, TermStates context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          docFreq += nodeDocFreq;\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          totalTermFreq += nodeTotalTermFreq;\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","sourceOld":"      @Override\n      public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          docFreq += nodeDocFreq;\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          totalTermFreq += nodeTotalTermFreq;\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":null,"sourceOld":"      @Override\n      public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          docFreq += nodeDocFreq;\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          totalTermFreq += nodeTotalTermFreq;\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","a6e9f769521480a623f897c0d59089b919fa4239"],"086ffe31d8fba0110227db122974163709ecc1b4":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"a6e9f769521480a623f897c0d59089b919fa4239":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c","086ffe31d8fba0110227db122974163709ecc1b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}