{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String,String).mjava","commits":[{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public List<ReplicaInfo> simGetReplicaInfos(String collection, String shard) {\n    List<ReplicaInfo> replicas = colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n        .computeIfAbsent(shard, s -> new ArrayList<>());\n    if (replicas == null) {\n      return Collections.emptyList();\n    } else {\n      // make a defensive copy to avoid ConcurrentModificationException\n      return Arrays.asList(replicas.toArray(new ReplicaInfo[replicas.size()]));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetReplicaInfos(String,String).mjava","sourceNew":"  public List<ReplicaInfo> simGetReplicaInfos(String collection, String shard) {\n    List<ReplicaInfo> replicas = colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n        .computeIfAbsent(shard, s -> new ArrayList<>());\n    if (replicas == null) {\n      return Collections.emptyList();\n    } else {\n      // make a defensive copy to avoid ConcurrentModificationException\n      return Arrays.asList(replicas.toArray(new ReplicaInfo[replicas.size()]));\n    }\n  }\n\n","sourceOld":"  public List<ReplicaInfo> simGetReplicaInfos(String collection, String shard) {\n    List<ReplicaInfo> replicas = colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n        .computeIfAbsent(shard, s -> new ArrayList<>());\n    if (replicas == null) {\n      return Collections.emptyList();\n    } else {\n      // make a defensive copy to avoid ConcurrentModificationException\n      return Arrays.asList(replicas.toArray(new ReplicaInfo[replicas.size()]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}