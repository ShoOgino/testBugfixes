{"path":"src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#isNewFragment().mjava","commits":[{"id":"c20f931a6f10b153366015604398a5eb7a4d17fa","date":1249615266,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#isNewFragment().mjava","pathOld":"src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#isNewFragment(Token).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  public boolean isNewFragment()\n  {\n    boolean isNewFrag = false;\n    int minFragLen = (int)((1.0f - slop)*targetFragChars);\n    int endOffset = offsetAtt.endOffset();\n    \n    // ** determin isNewFrag\n    if(posIncAtt.getPositionIncrement() > incrementGapThreshold) {\n      // large position gaps always imply new fragments\n      isNewFrag = true;\n\n    } else if(endOffset - currentOffset < minFragLen) {\n      // we're not in our range of flexibility\n      isNewFrag = false;\n\n    } else if(targetOffset > 0) {\n      // we've already decided on a target\n      isNewFrag = endOffset > targetOffset;\n\n    } else {\n      // we might be able to do something\n      int minOffset = currentOffset + minFragLen;\n      int maxOffset = (int)(currentOffset + (1.0f + slop)*targetFragChars);\n      int hotIndex;\n\n      // look for a close hotspot\n      hotIndex = Arrays.binarySearch(hotspots, endOffset);\n      if(hotIndex < 0) hotIndex = -hotIndex;\n      if(hotIndex >= hotspots.length) {\n        // no more hotspots in this input stream\n        targetOffset = currentOffset + targetFragChars;\n\n      } else if(hotspots[hotIndex] > maxOffset) {\n        // no hotspots within slop\n        targetOffset = currentOffset + targetFragChars;\n\n      } else {\n        // try to find hotspot in slop\n        int goal = hotspots[hotIndex];\n        while(goal < minOffset && hotIndex < hotspots.length) {\n          hotIndex++;\n          goal = hotspots[hotIndex];\n        }        \n        targetOffset = goal <= maxOffset ? goal : currentOffset + targetFragChars;\n      }\n\n      isNewFrag = endOffset > targetOffset;\n    }      \n      \n    // ** operate on isNewFrag\n    if(isNewFrag) {\n        currentNumFrags++;\n        currentOffset = endOffset;\n        targetOffset = -1;\n    }\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  public boolean isNewFragment(Token token)\n  {\n    boolean isNewFrag = false;\n    int minFragLen = (int)((1.0f - slop)*targetFragChars);\n\n    // ** determin isNewFrag\n    if(token.getPositionIncrement() > incrementGapThreshold) {\n      // large position gaps always imply new fragments\n      isNewFrag = true;\n\n    } else if(token.endOffset() - currentOffset < minFragLen) {\n      // we're not in our range of flexibility\n      isNewFrag = false;\n\n    } else if(targetOffset > 0) {\n      // we've already decided on a target\n      isNewFrag = token.endOffset() > targetOffset;\n\n    } else {\n      // we might be able to do something\n      int minOffset = currentOffset + minFragLen;\n      int maxOffset = (int)(currentOffset + (1.0f + slop)*targetFragChars);\n      int hotIndex;\n\n      // look for a close hotspot\n      hotIndex = Arrays.binarySearch(hotspots, token.endOffset());\n      if(hotIndex < 0) hotIndex = -hotIndex;\n      if(hotIndex >= hotspots.length) {\n        // no more hotspots in this input stream\n        targetOffset = currentOffset + targetFragChars;\n\n      } else if(hotspots[hotIndex] > maxOffset) {\n        // no hotspots within slop\n        targetOffset = currentOffset + targetFragChars;\n\n      } else {\n        // try to find hotspot in slop\n        int goal = hotspots[hotIndex];\n        while(goal < minOffset && hotIndex < hotspots.length) {\n          hotIndex++;\n          goal = hotspots[hotIndex];\n        }        \n        targetOffset = goal <= maxOffset ? goal : currentOffset + targetFragChars;\n      }\n\n      isNewFrag = token.endOffset() > targetOffset;\n    }      \n      \n    // ** operate on isNewFrag\n    if(isNewFrag) {\n        currentNumFrags++;\n        currentOffset = token.endOffset();\n        targetOffset = -1;\n    }\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#isNewFragment().mjava","pathOld":"src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#isNewFragment().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  public boolean isNewFragment()\n  {\n    boolean isNewFrag = false;\n    int minFragLen = (int)((1.0f - slop)*targetFragChars);\n    int endOffset = offsetAtt.endOffset();\n    \n    // ** determin isNewFrag\n    if(posIncAtt.getPositionIncrement() > incrementGapThreshold) {\n      // large position gaps always imply new fragments\n      isNewFrag = true;\n\n    } else if(endOffset - currentOffset < minFragLen) {\n      // we're not in our range of flexibility\n      isNewFrag = false;\n\n    } else if(targetOffset > 0) {\n      // we've already decided on a target\n      isNewFrag = endOffset > targetOffset;\n\n    } else {\n      // we might be able to do something\n      int minOffset = currentOffset + minFragLen;\n      int maxOffset = (int)(currentOffset + (1.0f + slop)*targetFragChars);\n      int hotIndex;\n\n      // look for a close hotspot\n      hotIndex = Arrays.binarySearch(hotspots, endOffset);\n      if(hotIndex < 0) hotIndex = -hotIndex;\n      if(hotIndex >= hotspots.length) {\n        // no more hotspots in this input stream\n        targetOffset = currentOffset + targetFragChars;\n\n      } else if(hotspots[hotIndex] > maxOffset) {\n        // no hotspots within slop\n        targetOffset = currentOffset + targetFragChars;\n\n      } else {\n        // try to find hotspot in slop\n        int goal = hotspots[hotIndex];\n        while(goal < minOffset && hotIndex < hotspots.length) {\n          hotIndex++;\n          goal = hotspots[hotIndex];\n        }        \n        targetOffset = goal <= maxOffset ? goal : currentOffset + targetFragChars;\n      }\n\n      isNewFrag = endOffset > targetOffset;\n    }      \n      \n    // ** operate on isNewFrag\n    if(isNewFrag) {\n        currentNumFrags++;\n        currentOffset = endOffset;\n        targetOffset = -1;\n    }\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  public boolean isNewFragment()\n  {\n    boolean isNewFrag = false;\n    int minFragLen = (int)((1.0f - slop)*targetFragChars);\n    int endOffset = offsetAtt.endOffset();\n    \n    // ** determin isNewFrag\n    if(posIncAtt.getPositionIncrement() > incrementGapThreshold) {\n      // large position gaps always imply new fragments\n      isNewFrag = true;\n\n    } else if(endOffset - currentOffset < minFragLen) {\n      // we're not in our range of flexibility\n      isNewFrag = false;\n\n    } else if(targetOffset > 0) {\n      // we've already decided on a target\n      isNewFrag = endOffset > targetOffset;\n\n    } else {\n      // we might be able to do something\n      int minOffset = currentOffset + minFragLen;\n      int maxOffset = (int)(currentOffset + (1.0f + slop)*targetFragChars);\n      int hotIndex;\n\n      // look for a close hotspot\n      hotIndex = Arrays.binarySearch(hotspots, endOffset);\n      if(hotIndex < 0) hotIndex = -hotIndex;\n      if(hotIndex >= hotspots.length) {\n        // no more hotspots in this input stream\n        targetOffset = currentOffset + targetFragChars;\n\n      } else if(hotspots[hotIndex] > maxOffset) {\n        // no hotspots within slop\n        targetOffset = currentOffset + targetFragChars;\n\n      } else {\n        // try to find hotspot in slop\n        int goal = hotspots[hotIndex];\n        while(goal < minOffset && hotIndex < hotspots.length) {\n          hotIndex++;\n          goal = hotspots[hotIndex];\n        }        \n        targetOffset = goal <= maxOffset ? goal : currentOffset + targetFragChars;\n      }\n\n      isNewFrag = endOffset > targetOffset;\n    }      \n      \n    // ** operate on isNewFrag\n    if(isNewFrag) {\n        currentNumFrags++;\n        currentOffset = endOffset;\n        targetOffset = -1;\n    }\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c20f931a6f10b153366015604398a5eb7a4d17fa":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c20f931a6f10b153366015604398a5eb7a4d17fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c20f931a6f10b153366015604398a5eb7a4d17fa":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c20f931a6f10b153366015604398a5eb7a4d17fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}