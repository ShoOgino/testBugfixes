{"path":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer.InfiniteMaxScoreWrapperQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer.InfiniteMaxScoreWrapperQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new FilterWeight(query.createWeight(searcher, scoreMode, boost)) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Scorer scorer = super.scorer(context);\n          if (scorer == null) {\n            return null;\n          } else {\n            return new InfiniteMaxScoreWrapperScorer(scorer);\n          }\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier supplier = super.scorerSupplier(context);\n          if (supplier == null) {\n            return null;\n          } else {\n            return new ScorerSupplier() {\n              \n              @Override\n              public Scorer get(long leadCost) throws IOException {\n                return new InfiniteMaxScoreWrapperScorer(supplier.get(leadCost));\n              }\n              \n              @Override\n              public long cost() {\n                return supplier.cost();\n              }\n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer.InfiniteMaxScoreWrapperQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new FilterWeight(query.createWeight(searcher, scoreMode, boost)) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Scorer scorer = super.scorer(context);\n          if (scorer == null) {\n            return null;\n          } else {\n            return new InfiniteMaxScoreWrapperScorer(scorer);\n          }\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier supplier = super.scorerSupplier(context);\n          if (supplier == null) {\n            return null;\n          } else {\n            return new ScorerSupplier() {\n              \n              @Override\n              public Scorer get(long leadCost) throws IOException {\n                return new InfiniteMaxScoreWrapperScorer(supplier.get(leadCost));\n              }\n              \n              @Override\n              public long cost() {\n                return supplier.cost();\n              }\n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3","date":1548397276,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer.InfiniteMaxScoreWrapperQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer.InfiniteMaxScoreWrapperQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new FilterWeight(query.createWeight(searcher, scoreMode, boost)) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Scorer scorer = super.scorer(context);\n          if (scorer == null) {\n            return null;\n          } else {\n            return new InfiniteMaxScoreWrapperScorer(scorer, maxRange);\n          }\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier supplier = super.scorerSupplier(context);\n          if (supplier == null) {\n            return null;\n          } else {\n            return new ScorerSupplier() {\n              \n              @Override\n              public Scorer get(long leadCost) throws IOException {\n                return new InfiniteMaxScoreWrapperScorer(supplier.get(leadCost), maxRange);\n              }\n              \n              @Override\n              public long cost() {\n                return supplier.cost();\n              }\n            };\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new FilterWeight(query.createWeight(searcher, scoreMode, boost)) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Scorer scorer = super.scorer(context);\n          if (scorer == null) {\n            return null;\n          } else {\n            return new InfiniteMaxScoreWrapperScorer(scorer);\n          }\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier supplier = super.scorerSupplier(context);\n          if (supplier == null) {\n            return null;\n          } else {\n            return new ScorerSupplier() {\n              \n              @Override\n              public Scorer get(long leadCost) throws IOException {\n                return new InfiniteMaxScoreWrapperScorer(supplier.get(leadCost));\n              }\n              \n              @Override\n              public long cost() {\n                return supplier.cost();\n              }\n            };\n          }\n        }\n      };\n    }\n\n","bugFix":["9fc47cb7b4346802411bb432f501ed0673d7119e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}