{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter.JmxListener#registerMBean(Object,ObjectName).mjava","commits":[{"id":"122c889ac8944e19f984ba4306b02a8742e914a7","date":1502707353,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter.JmxListener#registerMBean(Object,ObjectName).mjava","pathOld":"/dev/null","sourceNew":"    private void registerMBean(Object mBean, ObjectName objectName) throws InstanceAlreadyExistsException, JMException {\n      // remove previous bean if exists\n      if (mBeanServer.isRegistered(objectName)) {\n        if (LOG.isDebugEnabled()) {\n          Set<ObjectInstance> objects = mBeanServer.queryMBeans(objectName, null);\n          LOG.debug(\"## removing existing \" + objects.size() + \" bean(s) for \" + objectName.getCanonicalName() + \", current tag=\" + tag + \":\");\n          for (ObjectInstance inst : objects) {\n            LOG.debug(\"## - tag=\" + mBeanServer.getAttribute(inst.getObjectName(), INSTANCE_TAG));\n          }\n        }\n        mBeanServer.unregisterMBean(objectName);\n      }\n      ObjectInstance objectInstance = mBeanServer.registerMBean(mBean, objectName);\n      if (objectInstance != null) {\n        // the websphere mbeanserver rewrites the objectname to include\n        // cell, node & server info\n        // make sure we capture the new objectName for unregistration\n        registered.put(objectName, objectInstance.getObjectName());\n      } else {\n        registered.put(objectName, objectName);\n      }\n      LOG.debug(\"## registered \" + objectInstance.getObjectName().getCanonicalName() + \", tag=\" + tag);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter.JmxListener#registerMBean(Object,ObjectName).mjava","pathOld":"/dev/null","sourceNew":"    private void registerMBean(Object mBean, ObjectName objectName) throws InstanceAlreadyExistsException, JMException {\n      // remove previous bean if exists\n      if (mBeanServer.isRegistered(objectName)) {\n        if (LOG.isDebugEnabled()) {\n          Set<ObjectInstance> objects = mBeanServer.queryMBeans(objectName, null);\n          LOG.debug(\"## removing existing \" + objects.size() + \" bean(s) for \" + objectName.getCanonicalName() + \", current tag=\" + tag + \":\");\n          for (ObjectInstance inst : objects) {\n            LOG.debug(\"## - tag=\" + mBeanServer.getAttribute(inst.getObjectName(), INSTANCE_TAG));\n          }\n        }\n        mBeanServer.unregisterMBean(objectName);\n      }\n      ObjectInstance objectInstance = mBeanServer.registerMBean(mBean, objectName);\n      if (objectInstance != null) {\n        // the websphere mbeanserver rewrites the objectname to include\n        // cell, node & server info\n        // make sure we capture the new objectName for unregistration\n        registered.put(objectName, objectInstance.getObjectName());\n      } else {\n        registered.put(objectName, objectName);\n      }\n      LOG.debug(\"## registered \" + objectInstance.getObjectName().getCanonicalName() + \", tag=\" + tag);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter.JmxListener#registerMBean(Object,ObjectName).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter.JmxListener#registerMBean(Object,ObjectName).mjava","sourceNew":"    private void registerMBean(Object mBean, ObjectName objectName) throws InstanceAlreadyExistsException, JMException {\n      // remove previous bean if exists\n      if (mBeanServer.isRegistered(objectName)) {\n        if (log.isDebugEnabled()) {\n          Set<ObjectInstance> objects = mBeanServer.queryMBeans(objectName, null);\n          log.debug(\"## removing existing \" + objects.size() + \" bean(s) for \" + objectName.getCanonicalName() + \", current tag=\" + tag + \":\");\n          for (ObjectInstance inst : objects) {\n            log.debug(\"## - tag=\" + mBeanServer.getAttribute(inst.getObjectName(), INSTANCE_TAG));\n          }\n        }\n        mBeanServer.unregisterMBean(objectName);\n      }\n      ObjectInstance objectInstance = mBeanServer.registerMBean(mBean, objectName);\n      if (objectInstance != null) {\n        // the websphere mbeanserver rewrites the objectname to include\n        // cell, node & server info\n        // make sure we capture the new objectName for unregistration\n        registered.put(objectName, objectInstance.getObjectName());\n      } else {\n        registered.put(objectName, objectName);\n      }\n      log.debug(\"## registered \" + objectInstance.getObjectName().getCanonicalName() + \", tag=\" + tag);\n    }\n\n","sourceOld":"    private void registerMBean(Object mBean, ObjectName objectName) throws InstanceAlreadyExistsException, JMException {\n      // remove previous bean if exists\n      if (mBeanServer.isRegistered(objectName)) {\n        if (LOG.isDebugEnabled()) {\n          Set<ObjectInstance> objects = mBeanServer.queryMBeans(objectName, null);\n          LOG.debug(\"## removing existing \" + objects.size() + \" bean(s) for \" + objectName.getCanonicalName() + \", current tag=\" + tag + \":\");\n          for (ObjectInstance inst : objects) {\n            LOG.debug(\"## - tag=\" + mBeanServer.getAttribute(inst.getObjectName(), INSTANCE_TAG));\n          }\n        }\n        mBeanServer.unregisterMBean(objectName);\n      }\n      ObjectInstance objectInstance = mBeanServer.registerMBean(mBean, objectName);\n      if (objectInstance != null) {\n        // the websphere mbeanserver rewrites the objectname to include\n        // cell, node & server info\n        // make sure we capture the new objectName for unregistration\n        registered.put(objectName, objectInstance.getObjectName());\n      } else {\n        registered.put(objectName, objectName);\n      }\n      LOG.debug(\"## registered \" + objectInstance.getObjectName().getCanonicalName() + \", tag=\" + tag);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter.JmxListener#registerMBean(Object,ObjectName).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter.JmxListener#registerMBean(Object,ObjectName).mjava","sourceNew":"    private void registerMBean(Object mBean, ObjectName objectName) throws InstanceAlreadyExistsException, JMException {\n      // remove previous bean if exists\n      if (mBeanServer.isRegistered(objectName)) {\n        if (log.isDebugEnabled()) {\n          Set<ObjectInstance> objects = mBeanServer.queryMBeans(objectName, null);\n          if (log.isDebugEnabled()) {\n            log.debug(\"## removing existing {} bean(s) for {}, current tag={}:\", objects.size(), objectName.getCanonicalName(), tag);\n          }\n          for (ObjectInstance inst : objects) {\n            if (log.isDebugEnabled()) {\n              log.debug(\"## - tag={}{}\", mBeanServer.getAttribute(inst.getObjectName(), INSTANCE_TAG));\n            }\n          }\n        }\n        mBeanServer.unregisterMBean(objectName);\n      }\n      ObjectInstance objectInstance = mBeanServer.registerMBean(mBean, objectName);\n      if (objectInstance != null) {\n        // the websphere mbeanserver rewrites the objectname to include\n        // cell, node & server info\n        // make sure we capture the new objectName for unregistration\n        registered.put(objectName, objectInstance.getObjectName());\n      } else {\n        registered.put(objectName, objectName);\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"## registered {}, tag={}\", objectInstance.getObjectName().getCanonicalName(), tag);\n      }\n    }\n\n","sourceOld":"    private void registerMBean(Object mBean, ObjectName objectName) throws InstanceAlreadyExistsException, JMException {\n      // remove previous bean if exists\n      if (mBeanServer.isRegistered(objectName)) {\n        if (log.isDebugEnabled()) {\n          Set<ObjectInstance> objects = mBeanServer.queryMBeans(objectName, null);\n          log.debug(\"## removing existing \" + objects.size() + \" bean(s) for \" + objectName.getCanonicalName() + \", current tag=\" + tag + \":\");\n          for (ObjectInstance inst : objects) {\n            log.debug(\"## - tag=\" + mBeanServer.getAttribute(inst.getObjectName(), INSTANCE_TAG));\n          }\n        }\n        mBeanServer.unregisterMBean(objectName);\n      }\n      ObjectInstance objectInstance = mBeanServer.registerMBean(mBean, objectName);\n      if (objectInstance != null) {\n        // the websphere mbeanserver rewrites the objectname to include\n        // cell, node & server info\n        // make sure we capture the new objectName for unregistration\n        registered.put(objectName, objectInstance.getObjectName());\n      } else {\n        registered.put(objectName, objectName);\n      }\n      log.debug(\"## registered \" + objectInstance.getObjectName().getCanonicalName() + \", tag=\" + tag);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","122c889ac8944e19f984ba4306b02a8742e914a7"],"122c889ac8944e19f984ba4306b02a8742e914a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["122c889ac8944e19f984ba4306b02a8742e914a7"]},"commit2Childs":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","122c889ac8944e19f984ba4306b02a8742e914a7"],"122c889ac8944e19f984ba4306b02a8742e914a7":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9df8125ba9193a2e2e285ed92157810b1952a244"]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}