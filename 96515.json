{"path":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","pathOld":"solr/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","sourceNew":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicField(proto);\n    return proto;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicField(proto);\n    return proto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","pathOld":"solr/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","sourceNew":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicField(proto);\n    return proto;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicField(proto);\n    return proto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","pathOld":"solr/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","sourceNew":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicField(proto);\n    return proto;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicField(proto);\n    return proto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","sourceNew":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicFields(proto);\n    return proto;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicField(proto);\n    return proto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","sourceNew":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicFields(proto);\n    return proto;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicFields(proto);\n    return proto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a7bf782535cdb8bcd80741225832314d5c2380c","date":1489776915,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType,FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","sourceNew":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param subType   The {@link FieldType} of the prototype.\n   * @param polyField   The poly {@link FieldType}.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType subType, FieldType polyField) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + subType.typeName;\n    Map<String, String> props = new HashMap<>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    // if polyField enables dv, add them to the subtypes\n    if (polyField.hasProperty(DOC_VALUES)) {\n      props.put(\"docValues\", \"true\");\n    }\n    int p = SchemaField.calcProps(name, subType, props);\n    SchemaField proto = SchemaField.create(name,\n        subType, p, null);\n    schema.registerDynamicFields(proto);\n    return proto;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicFields(proto);\n    return proto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"378c6150f20ef79f184ab9cd89a056771fc918c7","date":1490280011,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType,FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","sourceNew":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param subType   The {@link FieldType} of the prototype.\n   * @param polyField   The poly {@link FieldType}.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType subType, FieldType polyField) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + subType.typeName;\n    Map<String, String> props = new HashMap<>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    // if polyField enables dv, add them to the subtypes\n    if (polyField.hasProperty(DOC_VALUES)) {\n      props.put(\"docValues\", \"true\");\n    }\n    int p = SchemaField.calcProps(name, subType, props);\n    SchemaField proto = SchemaField.create(name,\n        subType, p, null);\n    schema.registerDynamicFields(proto);\n    return proto;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    props.put(\"multiValued\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicFields(proto);\n    return proto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a7bf782535cdb8bcd80741225832314d5c2380c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"378c6150f20ef79f184ab9cd89a056771fc918c7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a7bf782535cdb8bcd80741225832314d5c2380c"]},"commit2Childs":{"9a7bf782535cdb8bcd80741225832314d5c2380c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9a7bf782535cdb8bcd80741225832314d5c2380c","378c6150f20ef79f184ab9cd89a056771fc918c7"],"378c6150f20ef79f184ab9cd89a056771fc918c7":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["378c6150f20ef79f184ab9cd89a056771fc918c7","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}