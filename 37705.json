{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","commits":[{"id":"9a7edeee192980cdc45735957606fc0dbf22d437","date":1459455891,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n\n    List<Map<String,List<String>>> allVisited = new ArrayList();\n    Map visited = new HashMap();\n    visited.put(this.fromNode, null);\n\n    allVisited.add(visited);\n    int depth = 0;\n    Map<String, List<String>> nextVisited = null;\n    List<Edge> targets = new ArrayList();\n    ExecutorService threadPool = null;\n\n    try {\n\n      threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(threads, new SolrjNamedThreadFactory(\"ShortestPathStream\"));\n\n      //Breadth first search\n      TRAVERSE:\n      while (targets.size() == 0 && depth < maxDepth) {\n        Set<String> nodes = visited.keySet();\n        Iterator<String> it = nodes.iterator();\n        nextVisited = new HashMap();\n        int batchCount = 0;\n        List<String> queryNodes = new ArrayList();\n        List<Future> futures = new ArrayList();\n        JOIN:\n        //Queue up all the batches\n        while (it.hasNext()) {\n          String node = it.next();\n          queryNodes.add(node);\n          ++batchCount;\n          if (batchCount == joinBatchSize || !it.hasNext()) {\n            try {\n              JoinRunner joinRunner = new JoinRunner(queryNodes);\n              Future<List<Edge>> future = threadPool.submit(joinRunner);\n              futures.add(future);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            batchCount = 0;\n            queryNodes = new ArrayList();\n          }\n        }\n\n        try {\n          //Process the batches as they become available\n          OUTER:\n          for (Future<List<Edge>> future : futures) {\n            List<Edge> edges = future.get();\n            INNER:\n            for (Edge edge : edges) {\n              if (toNode.equals(edge.to)) {\n                targets.add(edge);\n                if(nextVisited.containsKey(edge.to)) {\n                  List<String> parents = nextVisited.get(edge.to);\n                  parents.add(edge.from);\n                } else {\n                  List<String> parents = new ArrayList();\n                  parents.add(edge.from);\n                  nextVisited.put(edge.to, parents);\n                }\n              } else {\n                if (!cycle(edge.to, allVisited)) {\n                  if(nextVisited.containsKey(edge.to)) {\n                    List<String> parents = nextVisited.get(edge.to);\n                    parents.add(edge.from);\n                  } else {\n                    List<String> parents = new ArrayList();\n                    parents.add(edge.from);\n                    nextVisited.put(edge.to, parents);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        allVisited.add(nextVisited);\n        visited = nextVisited;\n        ++depth;\n      }\n    } finally {\n      threadPool.shutdown();\n    }\n\n    Set<String> finalPaths = new HashSet();\n    if(targets.size() > 0) {\n      for(Edge edge : targets) {\n        List<LinkedList> paths = new ArrayList();\n        LinkedList<String> path = new LinkedList();\n        path.addFirst(edge.to);\n        paths.add(path);\n        //Walk back up the tree a collect the parent nodes.\n        INNER:\n        for (int i = allVisited.size() - 1; i >= 0; --i) {\n          Map<String, List<String>> v = allVisited.get(i);\n          Iterator<LinkedList> it = paths.iterator();\n          List newPaths = new ArrayList();\n          while(it.hasNext()) {\n            LinkedList p = it.next();\n            List<String> parents = v.get(p.peekFirst());\n            if (parents != null) {\n              for(String parent : parents) {\n                LinkedList newPath = new LinkedList();\n                newPath.addAll(p);\n                newPath.addFirst(parent);\n                newPaths.add(newPath);\n              }\n              paths = newPaths;\n            }\n          }\n        }\n\n        for(LinkedList p : paths) {\n          String s = p.toString();\n          if (!finalPaths.contains(s)){\n            Tuple shortestPath = new Tuple(new HashMap());\n            shortestPath.put(\"path\", p);\n            shortestPaths.add(shortestPath);\n            finalPaths.add(s);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","sourceNew":"  public void open() throws IOException {\n\n    List<Map<String,List<String>>> allVisited = new ArrayList();\n    Map visited = new HashMap();\n    visited.put(this.fromNode, null);\n\n    allVisited.add(visited);\n    int depth = 0;\n    Map<String, List<String>> nextVisited = null;\n    List<Edge> targets = new ArrayList();\n    ExecutorService threadPool = null;\n\n    try {\n\n      threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(threads, new SolrjNamedThreadFactory(\"ShortestPathStream\"));\n\n      //Breadth first search\n      TRAVERSE:\n      while (targets.size() == 0 && depth < maxDepth) {\n        Set<String> nodes = visited.keySet();\n        Iterator<String> it = nodes.iterator();\n        nextVisited = new HashMap();\n        int batchCount = 0;\n        List<String> queryNodes = new ArrayList();\n        List<Future> futures = new ArrayList();\n        JOIN:\n        //Queue up all the batches\n        while (it.hasNext()) {\n          String node = it.next();\n          queryNodes.add(node);\n          ++batchCount;\n          if (batchCount == joinBatchSize || !it.hasNext()) {\n            try {\n              JoinRunner joinRunner = new JoinRunner(queryNodes);\n              Future<List<Edge>> future = threadPool.submit(joinRunner);\n              futures.add(future);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            batchCount = 0;\n            queryNodes = new ArrayList();\n          }\n        }\n\n        try {\n          //Process the batches as they become available\n          OUTER:\n          for (Future<List<Edge>> future : futures) {\n            List<Edge> edges = future.get();\n            INNER:\n            for (Edge edge : edges) {\n              if (toNode.equals(edge.to)) {\n                targets.add(edge);\n                if(nextVisited.containsKey(edge.to)) {\n                  List<String> parents = nextVisited.get(edge.to);\n                  parents.add(edge.from);\n                } else {\n                  List<String> parents = new ArrayList();\n                  parents.add(edge.from);\n                  nextVisited.put(edge.to, parents);\n                }\n              } else {\n                if (!cycle(edge.to, allVisited)) {\n                  if(nextVisited.containsKey(edge.to)) {\n                    List<String> parents = nextVisited.get(edge.to);\n                    parents.add(edge.from);\n                  } else {\n                    List<String> parents = new ArrayList();\n                    parents.add(edge.from);\n                    nextVisited.put(edge.to, parents);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        allVisited.add(nextVisited);\n        visited = nextVisited;\n        ++depth;\n      }\n    } finally {\n      threadPool.shutdown();\n    }\n\n    Set<String> finalPaths = new HashSet();\n    if(targets.size() > 0) {\n      for(Edge edge : targets) {\n        List<LinkedList> paths = new ArrayList();\n        LinkedList<String> path = new LinkedList();\n        path.addFirst(edge.to);\n        paths.add(path);\n        //Walk back up the tree a collect the parent nodes.\n        INNER:\n        for (int i = allVisited.size() - 1; i >= 0; --i) {\n          Map<String, List<String>> v = allVisited.get(i);\n          Iterator<LinkedList> it = paths.iterator();\n          List newPaths = new ArrayList();\n          while(it.hasNext()) {\n            LinkedList p = it.next();\n            List<String> parents = v.get(p.peekFirst());\n            if (parents != null) {\n              for(String parent : parents) {\n                LinkedList newPath = new LinkedList(p);\n                newPath.addFirst(parent);\n                newPaths.add(newPath);\n              }\n              paths = newPaths;\n            }\n          }\n        }\n\n        for(LinkedList p : paths) {\n          String s = p.toString();\n          if (!finalPaths.contains(s)){\n            Tuple shortestPath = new Tuple(new HashMap());\n            shortestPath.put(\"path\", p);\n            shortestPaths.add(shortestPath);\n            finalPaths.add(s);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n\n    List<Map<String,List<String>>> allVisited = new ArrayList();\n    Map visited = new HashMap();\n    visited.put(this.fromNode, null);\n\n    allVisited.add(visited);\n    int depth = 0;\n    Map<String, List<String>> nextVisited = null;\n    List<Edge> targets = new ArrayList();\n    ExecutorService threadPool = null;\n\n    try {\n\n      threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(threads, new SolrjNamedThreadFactory(\"ShortestPathStream\"));\n\n      //Breadth first search\n      TRAVERSE:\n      while (targets.size() == 0 && depth < maxDepth) {\n        Set<String> nodes = visited.keySet();\n        Iterator<String> it = nodes.iterator();\n        nextVisited = new HashMap();\n        int batchCount = 0;\n        List<String> queryNodes = new ArrayList();\n        List<Future> futures = new ArrayList();\n        JOIN:\n        //Queue up all the batches\n        while (it.hasNext()) {\n          String node = it.next();\n          queryNodes.add(node);\n          ++batchCount;\n          if (batchCount == joinBatchSize || !it.hasNext()) {\n            try {\n              JoinRunner joinRunner = new JoinRunner(queryNodes);\n              Future<List<Edge>> future = threadPool.submit(joinRunner);\n              futures.add(future);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            batchCount = 0;\n            queryNodes = new ArrayList();\n          }\n        }\n\n        try {\n          //Process the batches as they become available\n          OUTER:\n          for (Future<List<Edge>> future : futures) {\n            List<Edge> edges = future.get();\n            INNER:\n            for (Edge edge : edges) {\n              if (toNode.equals(edge.to)) {\n                targets.add(edge);\n                if(nextVisited.containsKey(edge.to)) {\n                  List<String> parents = nextVisited.get(edge.to);\n                  parents.add(edge.from);\n                } else {\n                  List<String> parents = new ArrayList();\n                  parents.add(edge.from);\n                  nextVisited.put(edge.to, parents);\n                }\n              } else {\n                if (!cycle(edge.to, allVisited)) {\n                  if(nextVisited.containsKey(edge.to)) {\n                    List<String> parents = nextVisited.get(edge.to);\n                    parents.add(edge.from);\n                  } else {\n                    List<String> parents = new ArrayList();\n                    parents.add(edge.from);\n                    nextVisited.put(edge.to, parents);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        allVisited.add(nextVisited);\n        visited = nextVisited;\n        ++depth;\n      }\n    } finally {\n      threadPool.shutdown();\n    }\n\n    Set<String> finalPaths = new HashSet();\n    if(targets.size() > 0) {\n      for(Edge edge : targets) {\n        List<LinkedList> paths = new ArrayList();\n        LinkedList<String> path = new LinkedList();\n        path.addFirst(edge.to);\n        paths.add(path);\n        //Walk back up the tree a collect the parent nodes.\n        INNER:\n        for (int i = allVisited.size() - 1; i >= 0; --i) {\n          Map<String, List<String>> v = allVisited.get(i);\n          Iterator<LinkedList> it = paths.iterator();\n          List newPaths = new ArrayList();\n          while(it.hasNext()) {\n            LinkedList p = it.next();\n            List<String> parents = v.get(p.peekFirst());\n            if (parents != null) {\n              for(String parent : parents) {\n                LinkedList newPath = new LinkedList();\n                newPath.addAll(p);\n                newPath.addFirst(parent);\n                newPaths.add(newPath);\n              }\n              paths = newPaths;\n            }\n          }\n        }\n\n        for(LinkedList p : paths) {\n          String s = p.toString();\n          if (!finalPaths.contains(s)){\n            Tuple shortestPath = new Tuple(new HashMap());\n            shortestPath.put(\"path\", p);\n            shortestPaths.add(shortestPath);\n            finalPaths.add(s);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","sourceNew":"  public void open() throws IOException {\n\n    List<Map<String,List<String>>> allVisited = new ArrayList();\n    Map visited = new HashMap();\n    visited.put(this.fromNode, null);\n\n    allVisited.add(visited);\n    int depth = 0;\n    Map<String, List<String>> nextVisited = null;\n    List<Edge> targets = new ArrayList();\n    ExecutorService threadPool = null;\n\n    try {\n\n      threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(threads, new SolrjNamedThreadFactory(\"ShortestPathStream\"));\n\n      //Breadth first search\n      TRAVERSE:\n      while (targets.size() == 0 && depth < maxDepth) {\n        Set<String> nodes = visited.keySet();\n        Iterator<String> it = nodes.iterator();\n        nextVisited = new HashMap();\n        int batchCount = 0;\n        List<String> queryNodes = new ArrayList();\n        List<Future> futures = new ArrayList();\n        JOIN:\n        //Queue up all the batches\n        while (it.hasNext()) {\n          String node = it.next();\n          queryNodes.add(node);\n          ++batchCount;\n          if (batchCount == joinBatchSize || !it.hasNext()) {\n            try {\n              JoinRunner joinRunner = new JoinRunner(queryNodes);\n              Future<List<Edge>> future = threadPool.submit(joinRunner);\n              futures.add(future);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            batchCount = 0;\n            queryNodes = new ArrayList();\n          }\n        }\n\n        try {\n          //Process the batches as they become available\n          OUTER:\n          for (Future<List<Edge>> future : futures) {\n            List<Edge> edges = future.get();\n            INNER:\n            for (Edge edge : edges) {\n              if (toNode.equals(edge.to)) {\n                targets.add(edge);\n                if(nextVisited.containsKey(edge.to)) {\n                  List<String> parents = nextVisited.get(edge.to);\n                  parents.add(edge.from);\n                } else {\n                  List<String> parents = new ArrayList();\n                  parents.add(edge.from);\n                  nextVisited.put(edge.to, parents);\n                }\n              } else {\n                if (!cycle(edge.to, allVisited)) {\n                  if(nextVisited.containsKey(edge.to)) {\n                    List<String> parents = nextVisited.get(edge.to);\n                    parents.add(edge.from);\n                  } else {\n                    List<String> parents = new ArrayList();\n                    parents.add(edge.from);\n                    nextVisited.put(edge.to, parents);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        allVisited.add(nextVisited);\n        visited = nextVisited;\n        ++depth;\n      }\n    } finally {\n      threadPool.shutdown();\n    }\n\n    Set<String> finalPaths = new HashSet();\n    if(targets.size() > 0) {\n      for(Edge edge : targets) {\n        List<LinkedList> paths = new ArrayList();\n        LinkedList<String> path = new LinkedList();\n        path.addFirst(edge.to);\n        paths.add(path);\n        //Walk back up the tree a collect the parent nodes.\n        INNER:\n        for (int i = allVisited.size() - 1; i >= 0; --i) {\n          Map<String, List<String>> v = allVisited.get(i);\n          Iterator<LinkedList> it = paths.iterator();\n          List newPaths = new ArrayList();\n          while(it.hasNext()) {\n            LinkedList p = it.next();\n            List<String> parents = v.get(p.peekFirst());\n            if (parents != null) {\n              for(String parent : parents) {\n                LinkedList newPath = new LinkedList(p);\n                newPath.addFirst(parent);\n                newPaths.add(newPath);\n              }\n              paths = newPaths;\n            }\n          }\n        }\n\n        for(LinkedList p : paths) {\n          String s = p.toString();\n          if (!finalPaths.contains(s)){\n            Tuple shortestPath = new Tuple(new HashMap());\n            shortestPath.put(\"path\", p);\n            shortestPaths.add(shortestPath);\n            finalPaths.add(s);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n\n    List<Map<String,List<String>>> allVisited = new ArrayList();\n    Map visited = new HashMap();\n    visited.put(this.fromNode, null);\n\n    allVisited.add(visited);\n    int depth = 0;\n    Map<String, List<String>> nextVisited = null;\n    List<Edge> targets = new ArrayList();\n    ExecutorService threadPool = null;\n\n    try {\n\n      threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(threads, new SolrjNamedThreadFactory(\"ShortestPathStream\"));\n\n      //Breadth first search\n      TRAVERSE:\n      while (targets.size() == 0 && depth < maxDepth) {\n        Set<String> nodes = visited.keySet();\n        Iterator<String> it = nodes.iterator();\n        nextVisited = new HashMap();\n        int batchCount = 0;\n        List<String> queryNodes = new ArrayList();\n        List<Future> futures = new ArrayList();\n        JOIN:\n        //Queue up all the batches\n        while (it.hasNext()) {\n          String node = it.next();\n          queryNodes.add(node);\n          ++batchCount;\n          if (batchCount == joinBatchSize || !it.hasNext()) {\n            try {\n              JoinRunner joinRunner = new JoinRunner(queryNodes);\n              Future<List<Edge>> future = threadPool.submit(joinRunner);\n              futures.add(future);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            batchCount = 0;\n            queryNodes = new ArrayList();\n          }\n        }\n\n        try {\n          //Process the batches as they become available\n          OUTER:\n          for (Future<List<Edge>> future : futures) {\n            List<Edge> edges = future.get();\n            INNER:\n            for (Edge edge : edges) {\n              if (toNode.equals(edge.to)) {\n                targets.add(edge);\n                if(nextVisited.containsKey(edge.to)) {\n                  List<String> parents = nextVisited.get(edge.to);\n                  parents.add(edge.from);\n                } else {\n                  List<String> parents = new ArrayList();\n                  parents.add(edge.from);\n                  nextVisited.put(edge.to, parents);\n                }\n              } else {\n                if (!cycle(edge.to, allVisited)) {\n                  if(nextVisited.containsKey(edge.to)) {\n                    List<String> parents = nextVisited.get(edge.to);\n                    parents.add(edge.from);\n                  } else {\n                    List<String> parents = new ArrayList();\n                    parents.add(edge.from);\n                    nextVisited.put(edge.to, parents);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        allVisited.add(nextVisited);\n        visited = nextVisited;\n        ++depth;\n      }\n    } finally {\n      threadPool.shutdown();\n    }\n\n    Set<String> finalPaths = new HashSet();\n    if(targets.size() > 0) {\n      for(Edge edge : targets) {\n        List<LinkedList> paths = new ArrayList();\n        LinkedList<String> path = new LinkedList();\n        path.addFirst(edge.to);\n        paths.add(path);\n        //Walk back up the tree a collect the parent nodes.\n        INNER:\n        for (int i = allVisited.size() - 1; i >= 0; --i) {\n          Map<String, List<String>> v = allVisited.get(i);\n          Iterator<LinkedList> it = paths.iterator();\n          List newPaths = new ArrayList();\n          while(it.hasNext()) {\n            LinkedList p = it.next();\n            List<String> parents = v.get(p.peekFirst());\n            if (parents != null) {\n              for(String parent : parents) {\n                LinkedList newPath = new LinkedList();\n                newPath.addAll(p);\n                newPath.addFirst(parent);\n                newPaths.add(newPath);\n              }\n              paths = newPaths;\n            }\n          }\n        }\n\n        for(LinkedList p : paths) {\n          String s = p.toString();\n          if (!finalPaths.contains(s)){\n            Tuple shortestPath = new Tuple(new HashMap());\n            shortestPath.put(\"path\", p);\n            shortestPaths.add(shortestPath);\n            finalPaths.add(s);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","sourceNew":"  public void open() throws IOException {\n\n    List<Map<String,List<String>>> allVisited = new ArrayList();\n    Map visited = new HashMap();\n    visited.put(this.fromNode, null);\n\n    allVisited.add(visited);\n    int depth = 0;\n    Map<String, List<String>> nextVisited = null;\n    List<Edge> targets = new ArrayList();\n    ExecutorService threadPool = null;\n\n    try {\n\n      threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(threads, new SolrNamedThreadFactory(\"ShortestPathStream\"));\n\n      //Breadth first search\n      TRAVERSE:\n      while (targets.size() == 0 && depth < maxDepth) {\n        Set<String> nodes = visited.keySet();\n        Iterator<String> it = nodes.iterator();\n        nextVisited = new HashMap();\n        int batchCount = 0;\n        List<String> queryNodes = new ArrayList();\n        List<Future> futures = new ArrayList();\n        JOIN:\n        //Queue up all the batches\n        while (it.hasNext()) {\n          String node = it.next();\n          queryNodes.add(node);\n          ++batchCount;\n          if (batchCount == joinBatchSize || !it.hasNext()) {\n            try {\n              JoinRunner joinRunner = new JoinRunner(queryNodes);\n              Future<List<Edge>> future = threadPool.submit(joinRunner);\n              futures.add(future);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            batchCount = 0;\n            queryNodes = new ArrayList();\n          }\n        }\n\n        try {\n          //Process the batches as they become available\n          OUTER:\n          for (Future<List<Edge>> future : futures) {\n            List<Edge> edges = future.get();\n            INNER:\n            for (Edge edge : edges) {\n              if (toNode.equals(edge.to)) {\n                targets.add(edge);\n                if(nextVisited.containsKey(edge.to)) {\n                  List<String> parents = nextVisited.get(edge.to);\n                  parents.add(edge.from);\n                } else {\n                  List<String> parents = new ArrayList();\n                  parents.add(edge.from);\n                  nextVisited.put(edge.to, parents);\n                }\n              } else {\n                if (!cycle(edge.to, allVisited)) {\n                  if(nextVisited.containsKey(edge.to)) {\n                    List<String> parents = nextVisited.get(edge.to);\n                    parents.add(edge.from);\n                  } else {\n                    List<String> parents = new ArrayList();\n                    parents.add(edge.from);\n                    nextVisited.put(edge.to, parents);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        allVisited.add(nextVisited);\n        visited = nextVisited;\n        ++depth;\n      }\n    } finally {\n      threadPool.shutdown();\n    }\n\n    Set<String> finalPaths = new HashSet();\n    if(targets.size() > 0) {\n      for(Edge edge : targets) {\n        List<LinkedList> paths = new ArrayList();\n        LinkedList<String> path = new LinkedList();\n        path.addFirst(edge.to);\n        paths.add(path);\n        //Walk back up the tree a collect the parent nodes.\n        INNER:\n        for (int i = allVisited.size() - 1; i >= 0; --i) {\n          Map<String, List<String>> v = allVisited.get(i);\n          Iterator<LinkedList> it = paths.iterator();\n          List newPaths = new ArrayList();\n          while(it.hasNext()) {\n            LinkedList p = it.next();\n            List<String> parents = v.get(p.peekFirst());\n            if (parents != null) {\n              for(String parent : parents) {\n                LinkedList newPath = new LinkedList(p);\n                newPath.addFirst(parent);\n                newPaths.add(newPath);\n              }\n              paths = newPaths;\n            }\n          }\n        }\n\n        for(LinkedList p : paths) {\n          String s = p.toString();\n          if (!finalPaths.contains(s)){\n            Tuple shortestPath = new Tuple(new HashMap());\n            shortestPath.put(\"path\", p);\n            shortestPaths.add(shortestPath);\n            finalPaths.add(s);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n\n    List<Map<String,List<String>>> allVisited = new ArrayList();\n    Map visited = new HashMap();\n    visited.put(this.fromNode, null);\n\n    allVisited.add(visited);\n    int depth = 0;\n    Map<String, List<String>> nextVisited = null;\n    List<Edge> targets = new ArrayList();\n    ExecutorService threadPool = null;\n\n    try {\n\n      threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(threads, new SolrjNamedThreadFactory(\"ShortestPathStream\"));\n\n      //Breadth first search\n      TRAVERSE:\n      while (targets.size() == 0 && depth < maxDepth) {\n        Set<String> nodes = visited.keySet();\n        Iterator<String> it = nodes.iterator();\n        nextVisited = new HashMap();\n        int batchCount = 0;\n        List<String> queryNodes = new ArrayList();\n        List<Future> futures = new ArrayList();\n        JOIN:\n        //Queue up all the batches\n        while (it.hasNext()) {\n          String node = it.next();\n          queryNodes.add(node);\n          ++batchCount;\n          if (batchCount == joinBatchSize || !it.hasNext()) {\n            try {\n              JoinRunner joinRunner = new JoinRunner(queryNodes);\n              Future<List<Edge>> future = threadPool.submit(joinRunner);\n              futures.add(future);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            batchCount = 0;\n            queryNodes = new ArrayList();\n          }\n        }\n\n        try {\n          //Process the batches as they become available\n          OUTER:\n          for (Future<List<Edge>> future : futures) {\n            List<Edge> edges = future.get();\n            INNER:\n            for (Edge edge : edges) {\n              if (toNode.equals(edge.to)) {\n                targets.add(edge);\n                if(nextVisited.containsKey(edge.to)) {\n                  List<String> parents = nextVisited.get(edge.to);\n                  parents.add(edge.from);\n                } else {\n                  List<String> parents = new ArrayList();\n                  parents.add(edge.from);\n                  nextVisited.put(edge.to, parents);\n                }\n              } else {\n                if (!cycle(edge.to, allVisited)) {\n                  if(nextVisited.containsKey(edge.to)) {\n                    List<String> parents = nextVisited.get(edge.to);\n                    parents.add(edge.from);\n                  } else {\n                    List<String> parents = new ArrayList();\n                    parents.add(edge.from);\n                    nextVisited.put(edge.to, parents);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        allVisited.add(nextVisited);\n        visited = nextVisited;\n        ++depth;\n      }\n    } finally {\n      threadPool.shutdown();\n    }\n\n    Set<String> finalPaths = new HashSet();\n    if(targets.size() > 0) {\n      for(Edge edge : targets) {\n        List<LinkedList> paths = new ArrayList();\n        LinkedList<String> path = new LinkedList();\n        path.addFirst(edge.to);\n        paths.add(path);\n        //Walk back up the tree a collect the parent nodes.\n        INNER:\n        for (int i = allVisited.size() - 1; i >= 0; --i) {\n          Map<String, List<String>> v = allVisited.get(i);\n          Iterator<LinkedList> it = paths.iterator();\n          List newPaths = new ArrayList();\n          while(it.hasNext()) {\n            LinkedList p = it.next();\n            List<String> parents = v.get(p.peekFirst());\n            if (parents != null) {\n              for(String parent : parents) {\n                LinkedList newPath = new LinkedList(p);\n                newPath.addFirst(parent);\n                newPaths.add(newPath);\n              }\n              paths = newPaths;\n            }\n          }\n        }\n\n        for(LinkedList p : paths) {\n          String s = p.toString();\n          if (!finalPaths.contains(s)){\n            Tuple shortestPath = new Tuple(new HashMap());\n            shortestPath.put(\"path\", p);\n            shortestPaths.add(shortestPath);\n            finalPaths.add(s);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","sourceNew":"  public void open() throws IOException {\n\n    List<Map<String,List<String>>> allVisited = new ArrayList();\n    Map visited = new HashMap();\n    visited.put(this.fromNode, null);\n\n    allVisited.add(visited);\n    int depth = 0;\n    Map<String, List<String>> nextVisited = null;\n    List<Edge> targets = new ArrayList();\n    ExecutorService threadPool = null;\n\n    try {\n\n      threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(threads, new SolrNamedThreadFactory(\"ShortestPathStream\"));\n\n      //Breadth first search\n      TRAVERSE:\n      while (targets.size() == 0 && depth < maxDepth) {\n        Set<String> nodes = visited.keySet();\n        Iterator<String> it = nodes.iterator();\n        nextVisited = new HashMap();\n        int batchCount = 0;\n        List<String> queryNodes = new ArrayList();\n        List<Future> futures = new ArrayList();\n        JOIN:\n        //Queue up all the batches\n        while (it.hasNext()) {\n          String node = it.next();\n          queryNodes.add(node);\n          ++batchCount;\n          if (batchCount == joinBatchSize || !it.hasNext()) {\n            try {\n              JoinRunner joinRunner = new JoinRunner(queryNodes);\n              Future<List<Edge>> future = threadPool.submit(joinRunner);\n              futures.add(future);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            batchCount = 0;\n            queryNodes = new ArrayList();\n          }\n        }\n\n        try {\n          //Process the batches as they become available\n          OUTER:\n          for (Future<List<Edge>> future : futures) {\n            List<Edge> edges = future.get();\n            INNER:\n            for (Edge edge : edges) {\n              if (toNode.equals(edge.to)) {\n                targets.add(edge);\n                if(nextVisited.containsKey(edge.to)) {\n                  List<String> parents = nextVisited.get(edge.to);\n                  parents.add(edge.from);\n                } else {\n                  List<String> parents = new ArrayList();\n                  parents.add(edge.from);\n                  nextVisited.put(edge.to, parents);\n                }\n              } else {\n                if (!cycle(edge.to, allVisited)) {\n                  if(nextVisited.containsKey(edge.to)) {\n                    List<String> parents = nextVisited.get(edge.to);\n                    parents.add(edge.from);\n                  } else {\n                    List<String> parents = new ArrayList();\n                    parents.add(edge.from);\n                    nextVisited.put(edge.to, parents);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        allVisited.add(nextVisited);\n        visited = nextVisited;\n        ++depth;\n      }\n    } finally {\n      threadPool.shutdown();\n    }\n\n    Set<String> finalPaths = new HashSet();\n    if(targets.size() > 0) {\n      for(Edge edge : targets) {\n        List<LinkedList> paths = new ArrayList();\n        LinkedList<String> path = new LinkedList();\n        path.addFirst(edge.to);\n        paths.add(path);\n        //Walk back up the tree a collect the parent nodes.\n        INNER:\n        for (int i = allVisited.size() - 1; i >= 0; --i) {\n          Map<String, List<String>> v = allVisited.get(i);\n          Iterator<LinkedList> it = paths.iterator();\n          List newPaths = new ArrayList();\n          while(it.hasNext()) {\n            LinkedList p = it.next();\n            List<String> parents = v.get(p.peekFirst());\n            if (parents != null) {\n              for(String parent : parents) {\n                LinkedList newPath = new LinkedList(p);\n                newPath.addFirst(parent);\n                newPaths.add(newPath);\n              }\n              paths = newPaths;\n            }\n          }\n        }\n\n        for(LinkedList p : paths) {\n          String s = p.toString();\n          if (!finalPaths.contains(s)){\n            Tuple shortestPath = new Tuple(\"path\", p);\n            shortestPaths.add(shortestPath);\n            finalPaths.add(s);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n\n    List<Map<String,List<String>>> allVisited = new ArrayList();\n    Map visited = new HashMap();\n    visited.put(this.fromNode, null);\n\n    allVisited.add(visited);\n    int depth = 0;\n    Map<String, List<String>> nextVisited = null;\n    List<Edge> targets = new ArrayList();\n    ExecutorService threadPool = null;\n\n    try {\n\n      threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(threads, new SolrNamedThreadFactory(\"ShortestPathStream\"));\n\n      //Breadth first search\n      TRAVERSE:\n      while (targets.size() == 0 && depth < maxDepth) {\n        Set<String> nodes = visited.keySet();\n        Iterator<String> it = nodes.iterator();\n        nextVisited = new HashMap();\n        int batchCount = 0;\n        List<String> queryNodes = new ArrayList();\n        List<Future> futures = new ArrayList();\n        JOIN:\n        //Queue up all the batches\n        while (it.hasNext()) {\n          String node = it.next();\n          queryNodes.add(node);\n          ++batchCount;\n          if (batchCount == joinBatchSize || !it.hasNext()) {\n            try {\n              JoinRunner joinRunner = new JoinRunner(queryNodes);\n              Future<List<Edge>> future = threadPool.submit(joinRunner);\n              futures.add(future);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            batchCount = 0;\n            queryNodes = new ArrayList();\n          }\n        }\n\n        try {\n          //Process the batches as they become available\n          OUTER:\n          for (Future<List<Edge>> future : futures) {\n            List<Edge> edges = future.get();\n            INNER:\n            for (Edge edge : edges) {\n              if (toNode.equals(edge.to)) {\n                targets.add(edge);\n                if(nextVisited.containsKey(edge.to)) {\n                  List<String> parents = nextVisited.get(edge.to);\n                  parents.add(edge.from);\n                } else {\n                  List<String> parents = new ArrayList();\n                  parents.add(edge.from);\n                  nextVisited.put(edge.to, parents);\n                }\n              } else {\n                if (!cycle(edge.to, allVisited)) {\n                  if(nextVisited.containsKey(edge.to)) {\n                    List<String> parents = nextVisited.get(edge.to);\n                    parents.add(edge.from);\n                  } else {\n                    List<String> parents = new ArrayList();\n                    parents.add(edge.from);\n                    nextVisited.put(edge.to, parents);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        allVisited.add(nextVisited);\n        visited = nextVisited;\n        ++depth;\n      }\n    } finally {\n      threadPool.shutdown();\n    }\n\n    Set<String> finalPaths = new HashSet();\n    if(targets.size() > 0) {\n      for(Edge edge : targets) {\n        List<LinkedList> paths = new ArrayList();\n        LinkedList<String> path = new LinkedList();\n        path.addFirst(edge.to);\n        paths.add(path);\n        //Walk back up the tree a collect the parent nodes.\n        INNER:\n        for (int i = allVisited.size() - 1; i >= 0; --i) {\n          Map<String, List<String>> v = allVisited.get(i);\n          Iterator<LinkedList> it = paths.iterator();\n          List newPaths = new ArrayList();\n          while(it.hasNext()) {\n            LinkedList p = it.next();\n            List<String> parents = v.get(p.peekFirst());\n            if (parents != null) {\n              for(String parent : parents) {\n                LinkedList newPath = new LinkedList(p);\n                newPath.addFirst(parent);\n                newPaths.add(newPath);\n              }\n              paths = newPaths;\n            }\n          }\n        }\n\n        for(LinkedList p : paths) {\n          String s = p.toString();\n          if (!finalPaths.contains(s)){\n            Tuple shortestPath = new Tuple(new HashMap());\n            shortestPath.put(\"path\", p);\n            shortestPaths.add(shortestPath);\n            finalPaths.add(s);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#open().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void open() throws IOException {\n\n    List<Map<String,List<String>>> allVisited = new ArrayList<>();\n    Map visited = new HashMap();\n    visited.put(this.fromNode, null);\n\n    allVisited.add(visited);\n    int depth = 0;\n    Map<String, List<String>> nextVisited = null;\n    List<Edge> targets = new ArrayList<>();\n    ExecutorService threadPool = null;\n\n    try {\n\n      threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(threads, new SolrNamedThreadFactory(\"ShortestPathStream\"));\n\n      //Breadth first search\n      TRAVERSE:\n      while (targets.size() == 0 && depth < maxDepth) {\n        Set<String> nodes = visited.keySet();\n        Iterator<String> it = nodes.iterator();\n        nextVisited = new HashMap();\n        int batchCount = 0;\n        List<String> queryNodes = new ArrayList<>();\n        List<Future> futures = new ArrayList<>();\n        JOIN:\n        //Queue up all the batches\n        while (it.hasNext()) {\n          String node = it.next();\n          queryNodes.add(node);\n          ++batchCount;\n          if (batchCount == joinBatchSize || !it.hasNext()) {\n            try {\n              JoinRunner joinRunner = new JoinRunner(queryNodes);\n              Future<List<Edge>> future = threadPool.submit(joinRunner);\n              futures.add(future);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            batchCount = 0;\n            queryNodes = new ArrayList();\n          }\n        }\n\n        try {\n          //Process the batches as they become available\n          OUTER:\n          for (Future<List<Edge>> future : futures) {\n            List<Edge> edges = future.get();\n            INNER:\n            for (Edge edge : edges) {\n              if (toNode.equals(edge.to)) {\n                targets.add(edge);\n                if(nextVisited.containsKey(edge.to)) {\n                  List<String> parents = nextVisited.get(edge.to);\n                  parents.add(edge.from);\n                } else {\n                  List<String> parents = new ArrayList<>();\n                  parents.add(edge.from);\n                  nextVisited.put(edge.to, parents);\n                }\n              } else {\n                if (!cycle(edge.to, allVisited)) {\n                  if(nextVisited.containsKey(edge.to)) {\n                    List<String> parents = nextVisited.get(edge.to);\n                    parents.add(edge.from);\n                  } else {\n                    List<String> parents = new ArrayList<>();\n                    parents.add(edge.from);\n                    nextVisited.put(edge.to, parents);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        allVisited.add(nextVisited);\n        visited = nextVisited;\n        ++depth;\n      }\n    } finally {\n      threadPool.shutdown();\n    }\n\n    Set<String> finalPaths = new HashSet();\n    if(targets.size() > 0) {\n      for(Edge edge : targets) {\n        List<LinkedList> paths = new ArrayList<>();\n        LinkedList<String> path = new LinkedList();\n        path.addFirst(edge.to);\n        paths.add(path);\n        //Walk back up the tree a collect the parent nodes.\n        INNER:\n        for (int i = allVisited.size() - 1; i >= 0; --i) {\n          Map<String, List<String>> v = allVisited.get(i);\n          Iterator<LinkedList> it = paths.iterator();\n          List newPaths = new ArrayList();\n          while(it.hasNext()) {\n            LinkedList p = it.next();\n            List<String> parents = v.get(p.peekFirst());\n            if (parents != null) {\n              for(String parent : parents) {\n                LinkedList newPath = new LinkedList(p);\n                newPath.addFirst(parent);\n                newPaths.add(newPath);\n              }\n              paths = newPaths;\n            }\n          }\n        }\n\n        for(LinkedList p : paths) {\n          String s = p.toString();\n          if (!finalPaths.contains(s)){\n            Tuple shortestPath = new Tuple(\"path\", p);\n            shortestPaths.add(shortestPath);\n            finalPaths.add(s);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n\n    List<Map<String,List<String>>> allVisited = new ArrayList();\n    Map visited = new HashMap();\n    visited.put(this.fromNode, null);\n\n    allVisited.add(visited);\n    int depth = 0;\n    Map<String, List<String>> nextVisited = null;\n    List<Edge> targets = new ArrayList();\n    ExecutorService threadPool = null;\n\n    try {\n\n      threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(threads, new SolrNamedThreadFactory(\"ShortestPathStream\"));\n\n      //Breadth first search\n      TRAVERSE:\n      while (targets.size() == 0 && depth < maxDepth) {\n        Set<String> nodes = visited.keySet();\n        Iterator<String> it = nodes.iterator();\n        nextVisited = new HashMap();\n        int batchCount = 0;\n        List<String> queryNodes = new ArrayList();\n        List<Future> futures = new ArrayList();\n        JOIN:\n        //Queue up all the batches\n        while (it.hasNext()) {\n          String node = it.next();\n          queryNodes.add(node);\n          ++batchCount;\n          if (batchCount == joinBatchSize || !it.hasNext()) {\n            try {\n              JoinRunner joinRunner = new JoinRunner(queryNodes);\n              Future<List<Edge>> future = threadPool.submit(joinRunner);\n              futures.add(future);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n            batchCount = 0;\n            queryNodes = new ArrayList();\n          }\n        }\n\n        try {\n          //Process the batches as they become available\n          OUTER:\n          for (Future<List<Edge>> future : futures) {\n            List<Edge> edges = future.get();\n            INNER:\n            for (Edge edge : edges) {\n              if (toNode.equals(edge.to)) {\n                targets.add(edge);\n                if(nextVisited.containsKey(edge.to)) {\n                  List<String> parents = nextVisited.get(edge.to);\n                  parents.add(edge.from);\n                } else {\n                  List<String> parents = new ArrayList();\n                  parents.add(edge.from);\n                  nextVisited.put(edge.to, parents);\n                }\n              } else {\n                if (!cycle(edge.to, allVisited)) {\n                  if(nextVisited.containsKey(edge.to)) {\n                    List<String> parents = nextVisited.get(edge.to);\n                    parents.add(edge.from);\n                  } else {\n                    List<String> parents = new ArrayList();\n                    parents.add(edge.from);\n                    nextVisited.put(edge.to, parents);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        allVisited.add(nextVisited);\n        visited = nextVisited;\n        ++depth;\n      }\n    } finally {\n      threadPool.shutdown();\n    }\n\n    Set<String> finalPaths = new HashSet();\n    if(targets.size() > 0) {\n      for(Edge edge : targets) {\n        List<LinkedList> paths = new ArrayList();\n        LinkedList<String> path = new LinkedList();\n        path.addFirst(edge.to);\n        paths.add(path);\n        //Walk back up the tree a collect the parent nodes.\n        INNER:\n        for (int i = allVisited.size() - 1; i >= 0; --i) {\n          Map<String, List<String>> v = allVisited.get(i);\n          Iterator<LinkedList> it = paths.iterator();\n          List newPaths = new ArrayList();\n          while(it.hasNext()) {\n            LinkedList p = it.next();\n            List<String> parents = v.get(p.peekFirst());\n            if (parents != null) {\n              for(String parent : parents) {\n                LinkedList newPath = new LinkedList(p);\n                newPath.addFirst(parent);\n                newPaths.add(newPath);\n              }\n              paths = newPaths;\n            }\n          }\n        }\n\n        for(LinkedList p : paths) {\n          String s = p.toString();\n          if (!finalPaths.contains(s)){\n            Tuple shortestPath = new Tuple(\"path\", p);\n            shortestPaths.add(shortestPath);\n            finalPaths.add(s);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["9a7edeee192980cdc45735957606fc0dbf22d437"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["804a8d5358fe7b7563b85ee7838714d720b89272"],"9a7edeee192980cdc45735957606fc0dbf22d437":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"804a8d5358fe7b7563b85ee7838714d720b89272":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9a7edeee192980cdc45735957606fc0dbf22d437","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["fb03700c9690d16b15fb4f56f6ec36b128fd894e","b0b597c65628ca9e73913a07e81691f8229bae35"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a7edeee192980cdc45735957606fc0dbf22d437":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a7edeee192980cdc45735957606fc0dbf22d437"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}