{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","commits":[{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      updateLock.lock();\n      try {\n        // this watcher is automatically cleared when fired\n        if (lastWatcher == this) {\n          lastWatcher = null;\n        }\n        // Do no updates in this thread, just signal state back to client threads.\n        isDirty = true;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        notEmpty.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6321195fe07e4a4627b4f36c48221de10cb6c26e","6321195fe07e4a4627b4f36c48221de10cb6c26e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4240d54e1e9886aff46e198b55314039ba37397","date":1455910430,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        // this watcher is automatically cleared when fired\n        if (lastWatcher == this) {\n          lastWatcher = null;\n        }\n        // Do no updates in this thread, just signal state back to client threads.\n        isDirty = true;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        notEmpty.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      updateLock.lock();\n      try {\n        // this watcher is automatically cleared when fired\n        if (lastWatcher == this) {\n          lastWatcher = null;\n        }\n        // Do no updates in this thread, just signal state back to client threads.\n        isDirty = true;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        notEmpty.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7fd147f6ec145b926803480f62aa12e2aad258e","date":1465448343,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        // this watcher is automatically cleared when fired\n        if (lastWatcher == this) {\n          lastWatcher = null;\n        }\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        // this watcher is automatically cleared when fired\n        if (lastWatcher == this) {\n          lastWatcher = null;\n        }\n        // Do no updates in this thread, just signal state back to client threads.\n        isDirty = true;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        notEmpty.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77c9633f72998c3815ffe21baa5f16d6e50f1e4a","date":1465453043,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        // this watcher is automatically cleared when fired\n        if (lastWatcher == this) {\n          lastWatcher = null;\n        }\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        // this watcher is automatically cleared when fired\n        if (lastWatcher == this) {\n          lastWatcher = null;\n        }\n        // Do no updates in this thread, just signal state back to client threads.\n        isDirty = true;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        notEmpty.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        // this watcher is automatically cleared when fired\n        if (lastWatcher == this) {\n          lastWatcher = null;\n        }\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        // this watcher is automatically cleared when fired\n        if (lastWatcher == this) {\n          lastWatcher = null;\n        }\n        // Do no updates in this thread, just signal state back to client threads.\n        isDirty = true;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        notEmpty.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6321195fe07e4a4627b4f36c48221de10cb6c26e","date":1492541055,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        isDirty = true;\n        watcherCount--;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        // this watcher is automatically cleared when fired\n        if (lastWatcher == this) {\n          lastWatcher = null;\n        }\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        isDirty = true;\n        watcherCount--;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        // this watcher is automatically cleared when fired\n        if (lastWatcher == this) {\n          lastWatcher = null;\n        }\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue.ChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        isDirty = true;\n        watcherCount--;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        isDirty = true;\n        watcherCount--;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue.ChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        isDirty = true;\n        watcherCount--;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        isDirty = true;\n        watcherCount--;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue.ChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        isDirty = true;\n        watcherCount--;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        isDirty = true;\n        watcherCount--;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue.ChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue.ChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        isDirty = true;\n        watcherCount--;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher; except for Expired\n      if (Event.EventType.None.equals(event.getType()) && !Event.KeeperState.Expired.equals(event.getState())) {\n        return;\n      }\n      updateLock.lock();\n      try {\n        isDirty = true;\n        watcherCount--;\n        // optimistically signal any waiters that the queue may not be empty now, so they can wake up and retry\n        changed.signalAll();\n      } finally {\n        updateLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"c4240d54e1e9886aff46e198b55314039ba37397":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["c4240d54e1e9886aff46e198b55314039ba37397","f7fd147f6ec145b926803480f62aa12e2aad258e"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c4240d54e1e9886aff46e198b55314039ba37397","77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["c4240d54e1e9886aff46e198b55314039ba37397"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6321195fe07e4a4627b4f36c48221de10cb6c26e"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"6321195fe07e4a4627b4f36c48221de10cb6c26e":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"c4240d54e1e9886aff46e198b55314039ba37397":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f7fd147f6ec145b926803480f62aa12e2aad258e"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6321195fe07e4a4627b4f36c48221de10cb6c26e"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f7fd147f6ec145b926803480f62aa12e2aad258e":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["c4240d54e1e9886aff46e198b55314039ba37397"],"6321195fe07e4a4627b4f36c48221de10cb6c26e":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}