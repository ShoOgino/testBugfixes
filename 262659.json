{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registryNames(String...).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registryNames(String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return set of existing registry names that match a regex pattern\n   * @param patterns regex patterns. NOTE: users need to make sure that patterns that\n   *                 don't start with a wildcard use the full registry name starting with\n   *                 {@link #REGISTRY_NAME_PREFIX}\n   * @return set of existing registry names where at least one pattern matched.\n   */\n  public Set<String> registryNames(String... patterns) throws PatternSyntaxException {\n    if (patterns == null || patterns.length == 0) {\n      return registryNames();\n    }\n    List<Pattern> compiled = new ArrayList<>();\n    for (String pattern : patterns) {\n      compiled.add(Pattern.compile(pattern));\n    }\n    return registryNames((Pattern[])compiled.toArray(new Pattern[compiled.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registryNames(String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registryNames(String...).mjava","sourceNew":"  /**\n   * Return set of existing registry names that match a regex pattern\n   *\n   * @param patterns regex patterns. NOTE: users need to make sure that patterns that\n   *                 don't start with a wildcard use the full registry name starting with\n   *                 {@link #REGISTRY_NAME_PREFIX}\n   * @return set of existing registry names where at least one pattern matched.\n   */\n  public Set<String> registryNames(String... patterns) throws PatternSyntaxException {\n    if (patterns == null || patterns.length == 0) {\n      return registryNames();\n    }\n    List<Pattern> compiled = new ArrayList<>();\n    for (String pattern : patterns) {\n      compiled.add(Pattern.compile(pattern));\n    }\n    return registryNames((Pattern[]) compiled.toArray(new Pattern[compiled.size()]));\n  }\n\n","sourceOld":"  /**\n   * Return set of existing registry names that match a regex pattern\n   * @param patterns regex patterns. NOTE: users need to make sure that patterns that\n   *                 don't start with a wildcard use the full registry name starting with\n   *                 {@link #REGISTRY_NAME_PREFIX}\n   * @return set of existing registry names where at least one pattern matched.\n   */\n  public Set<String> registryNames(String... patterns) throws PatternSyntaxException {\n    if (patterns == null || patterns.length == 0) {\n      return registryNames();\n    }\n    List<Pattern> compiled = new ArrayList<>();\n    for (String pattern : patterns) {\n      compiled.add(Pattern.compile(pattern));\n    }\n    return registryNames((Pattern[])compiled.toArray(new Pattern[compiled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registryNames(String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registryNames(String...).mjava","sourceNew":"  /**\n   * Return set of existing registry names that match a regex pattern\n   *\n   * @param patterns regex patterns. NOTE: users need to make sure that patterns that\n   *                 don't start with a wildcard use the full registry name starting with\n   *                 {@link #REGISTRY_NAME_PREFIX}\n   * @return set of existing registry names where at least one pattern matched.\n   */\n  public Set<String> registryNames(String... patterns) throws PatternSyntaxException {\n    if (patterns == null || patterns.length == 0) {\n      return registryNames();\n    }\n    List<Pattern> compiled = new ArrayList<>();\n    for (String pattern : patterns) {\n      compiled.add(Pattern.compile(pattern));\n    }\n    return registryNames(compiled.toArray(new Pattern[compiled.size()]));\n  }\n\n","sourceOld":"  /**\n   * Return set of existing registry names that match a regex pattern\n   *\n   * @param patterns regex patterns. NOTE: users need to make sure that patterns that\n   *                 don't start with a wildcard use the full registry name starting with\n   *                 {@link #REGISTRY_NAME_PREFIX}\n   * @return set of existing registry names where at least one pattern matched.\n   */\n  public Set<String> registryNames(String... patterns) throws PatternSyntaxException {\n    if (patterns == null || patterns.length == 0) {\n      return registryNames();\n    }\n    List<Pattern> compiled = new ArrayList<>();\n    for (String pattern : patterns) {\n      compiled.add(Pattern.compile(pattern));\n    }\n    return registryNames((Pattern[]) compiled.toArray(new Pattern[compiled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}