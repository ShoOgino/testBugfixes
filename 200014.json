{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTermVectors().mjava","sourceNew":"  @Test\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, docFreqs))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, docFreqs))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, docFreqs))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, docFreqs))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31","date":1540236013,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","sourceNew":"  @Test\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, docFreqs))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, docFreqs))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, docFreqs))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, docFreqs))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","sourceNew":"  @Test\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, \\\"docFreqs\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, \\\"docFreqs\\\"))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, docFreqs))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, docFreqs))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","sourceNew":"  @Test\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, \\\"docFreqs\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, \\\"docFreqs\\\"))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, docFreqs))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, docFreqs))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","sourceNew":"  @Test\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, \\\"docFreqs\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, \\\"docFreqs\\\"))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, docFreqs))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, docFreqs))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, docFreqs))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTermVectors().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, \\\"docFreqs\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, \\\"docFreqs\\\"))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","sourceOld":"  @Test\n  public void testTermVectors() throws Exception {\n    // Test termVectors with only documents and default termVector settings\n    String cexpr = \"let(echo=true,\" +\n                       \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                                     \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                                     \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                                     \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n                   \"    b=termVectors(a, minDocFreq=0, maxDocFreq=1),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b),\" +\n        \"               e=getAttribute(b, \\\"docFreqs\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    List<Number> termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 2.7100443424662948, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 5);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(4).doubleValue(), 0.0, 0.0);\n\n    List<String> rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    List<String> columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 5);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"jim\");\n    assertEquals(columnLabels.get(3), \"steve\");\n    assertEquals(columnLabels.get(4), \"world\");\n\n    Map<String, Number> docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 5);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"jim\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minTermLength. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n                 \"a=select(list(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n                               \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n                               \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n                               \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n            \"    b=termVectors(a, minTermLength=4, minDocFreq=0, maxDocFreq=1),\" +\n            \"    c=getRowLabels(b),\" +\n            \"    d=getColumnLabels(b),\" +\n            \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n\n    //Test exclude. This should drop off the term jim\n\n    cexpr = \"let(echo=true,\" +\n        \"        a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"                      tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"                      tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"                      tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"        b=termVectors(a, exclude=jim, minDocFreq=0, maxDocFreq=1),\" +\n        \"        c=getRowLabels(b),\" +\n        \"        d=getColumnLabels(b),\" +\n        \"        e=getAttribute(b, \\\"docFreqs\\\"))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 1.916290731874155, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 4);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(termVector.get(1).doubleValue(), 1.916290731874155, 0.0);\n    assertEquals(termVector.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(termVector.get(3).doubleValue(), 0.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 4);\n    assertEquals(columnLabels.get(0), \"hello\");\n    assertEquals(columnLabels.get(1), \"jack\");\n    assertEquals(columnLabels.get(2), \"steve\");\n    assertEquals(columnLabels.get(3), \"world\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 4);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n    assertEquals(docFreqs.get(\"jack\").intValue(), 1);\n    assertEquals(docFreqs.get(\"steve\").intValue(), 1);\n    assertEquals(docFreqs.get(\"world\").intValue(), 1);\n\n    //Test minDocFreq attribute at .5. This should eliminate all but the term hello\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, minDocFreq=.5, maxDocFreq=1),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n\n    assertEquals(termVectors.size(), 4);\n    termVector = termVectors.get(0);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(1);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(2);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    termVector = termVectors.get(3);\n    assertEquals(termVector.size(), 1);\n    assertEquals(termVector.get(0).doubleValue(), 1.0, 0.0);\n\n    rowLabels  = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.size(), 4);\n    assertEquals(rowLabels.get(0), \"1\");\n    assertEquals(rowLabels.get(1), \"2\");\n    assertEquals(rowLabels.get(2), \"3\");\n    assertEquals(rowLabels.get(3), \"4\");\n\n    columnLabels  = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.size(), 1);\n    assertEquals(columnLabels.get(0), \"hello\");\n\n    docFreqs  = (Map<String, Number>)tuples.get(0).get(\"e\");\n\n    assertEquals(docFreqs.size(), 1);\n    assertEquals(docFreqs.get(\"hello\").intValue(), 4);\n\n    //Test maxDocFreq attribute at 0. This should eliminate all terms\n\n    cexpr = \"let(echo=true,\" +\n        \"a=select(plist(tuple(id=\\\"1\\\", text=\\\"hello world\\\"), \" +\n        \"tuple(id=\\\"2\\\", text=\\\"hello steve\\\"), \" +\n        \"tuple(id=\\\"3\\\", text=\\\"hello jim jim\\\"), \" +\n        \"tuple(id=\\\"4\\\", text=\\\"hello jack\\\")), id, analyze(text, test_t) as terms),\" +\n        \"    b=termVectors(a, maxDocFreq=0),\" +\n        \"    c=getRowLabels(b),\" +\n        \"    d=getColumnLabels(b),\" +\n        \"    e=getAttribute(b, \\\"docFreqs\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    termVectors  = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(termVectors.size(), 4);\n    assertEquals(termVectors.get(0).size(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"],"f8061ddd97f3352007d927dae445884a6f3d857b":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["9ba1b632c041956c93c41aa1143d16a567014891","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}