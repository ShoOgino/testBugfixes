{"path":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","sourceNew":"  public IndexableField getField(FieldInfo fieldInfo) {  \n    Integer num = fields.get(fieldInfo.number);\n    if (num == null) {\n      num = 0;\n    } else {\n      num++;\n    }\n    fields.put(fieldInfo.number, num);\n\n    return new LazyField(fieldInfo.name, num);\n  }\n\n","sourceOld":"  public IndexableField getField(FieldInfo fieldInfo) {  \n    Integer num = fields.get(fieldInfo.number);\n    if (num == null) {\n      num = 0;\n    } else {\n      num++;\n    }\n    fields.put(fieldInfo.number, num);\n\n    return new LazyField(fieldInfo.name, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","sourceNew":"  public StorableField getField(FieldInfo fieldInfo) {  \n    Integer num = fields.get(fieldInfo.number);\n    if (num == null) {\n      num = 0;\n    } else {\n      num++;\n    }\n    fields.put(fieldInfo.number, num);\n\n    return new LazyField(fieldInfo.name, num);\n  }\n\n","sourceOld":"  public IndexableField getField(FieldInfo fieldInfo) {  \n    Integer num = fields.get(fieldInfo.number);\n    if (num == null) {\n      num = 0;\n    } else {\n      num++;\n    }\n    fields.put(fieldInfo.number, num);\n\n    return new LazyField(fieldInfo.name, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","sourceNew":"  public StorableField getField(FieldInfo fieldInfo) {  \n    Integer num = fields.get(fieldInfo.number);\n    if (num == null) {\n      num = 0;\n    } else {\n      num++;\n    }\n    fields.put(fieldInfo.number, num);\n\n    return new LazyField(fieldInfo.name, num);\n  }\n\n","sourceOld":"  public IndexableField getField(FieldInfo fieldInfo) {  \n    Integer num = fields.get(fieldInfo.number);\n    if (num == null) {\n      num = 0;\n    } else {\n      num++;\n    }\n    fields.put(fieldInfo.number, num);\n\n    return new LazyField(fieldInfo.name, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39899cd24f88f2d580857d57be8aebc1f467f5c6","date":1363793635,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","sourceNew":"  /**\n   * Creates a StorableField whose value will be lazy loaded if and \n   * when it is used. \n   * <p>\n   * <b>NOTE:</b> This method must be called once for each value of the field \n   * name specified in sequence that the values exist.  This method may not be \n   * used to generate multiple, lazy, StorableField instances refering to \n   * the same underlying StorableField instance.\n   * </p>\n   * <p>\n   * The lazy loading of field values from all instances of StorableField \n   * objects returned by this method are all backed by a single StoredDocument \n   * per LazyDocument instance.\n   * </p>\n   */\n  public StorableField getField(FieldInfo fieldInfo) {  \n\n    fieldNames.add(fieldInfo.name);\n    List<LazyField> values = fields.get(fieldInfo.number);\n    if (null == values) {\n      values = new ArrayList<LazyField>();\n      fields.put(fieldInfo.number, values);\n    } \n\n    LazyField value = new LazyField(fieldInfo.name, fieldInfo.number);\n    values.add(value);\n\n    synchronized (this) {\n      // edge case: if someone asks this LazyDoc for more LazyFields\n      // after other LazyFields from the same LazyDoc have been\n      // actuallized, we need to force the doc to be re-fetched\n      // so the new LazyFields are also populated.\n      doc = null;\n    }\n    return value;\n  }\n\n","sourceOld":"  public StorableField getField(FieldInfo fieldInfo) {  \n    Integer num = fields.get(fieldInfo.number);\n    if (num == null) {\n      num = 0;\n    } else {\n      num++;\n    }\n    fields.put(fieldInfo.number, num);\n\n    return new LazyField(fieldInfo.name, num);\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","sourceNew":"  /**\n   * Creates a StorableField whose value will be lazy loaded if and \n   * when it is used. \n   * <p>\n   * <b>NOTE:</b> This method must be called once for each value of the field \n   * name specified in sequence that the values exist.  This method may not be \n   * used to generate multiple, lazy, StorableField instances refering to \n   * the same underlying StorableField instance.\n   * </p>\n   * <p>\n   * The lazy loading of field values from all instances of StorableField \n   * objects returned by this method are all backed by a single StoredDocument \n   * per LazyDocument instance.\n   * </p>\n   */\n  public StorableField getField(FieldInfo fieldInfo) {  \n\n    fieldNames.add(fieldInfo.name);\n    List<LazyField> values = fields.get(fieldInfo.number);\n    if (null == values) {\n      values = new ArrayList<>();\n      fields.put(fieldInfo.number, values);\n    } \n\n    LazyField value = new LazyField(fieldInfo.name, fieldInfo.number);\n    values.add(value);\n\n    synchronized (this) {\n      // edge case: if someone asks this LazyDoc for more LazyFields\n      // after other LazyFields from the same LazyDoc have been\n      // actuallized, we need to force the doc to be re-fetched\n      // so the new LazyFields are also populated.\n      doc = null;\n    }\n    return value;\n  }\n\n","sourceOld":"  /**\n   * Creates a StorableField whose value will be lazy loaded if and \n   * when it is used. \n   * <p>\n   * <b>NOTE:</b> This method must be called once for each value of the field \n   * name specified in sequence that the values exist.  This method may not be \n   * used to generate multiple, lazy, StorableField instances refering to \n   * the same underlying StorableField instance.\n   * </p>\n   * <p>\n   * The lazy loading of field values from all instances of StorableField \n   * objects returned by this method are all backed by a single StoredDocument \n   * per LazyDocument instance.\n   * </p>\n   */\n  public StorableField getField(FieldInfo fieldInfo) {  \n\n    fieldNames.add(fieldInfo.name);\n    List<LazyField> values = fields.get(fieldInfo.number);\n    if (null == values) {\n      values = new ArrayList<LazyField>();\n      fields.put(fieldInfo.number, values);\n    } \n\n    LazyField value = new LazyField(fieldInfo.name, fieldInfo.number);\n    values.add(value);\n\n    synchronized (this) {\n      // edge case: if someone asks this LazyDoc for more LazyFields\n      // after other LazyFields from the same LazyDoc have been\n      // actuallized, we need to force the doc to be re-fetched\n      // so the new LazyFields are also populated.\n      doc = null;\n    }\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","sourceNew":"  /**\n   * Creates a StorableField whose value will be lazy loaded if and \n   * when it is used. \n   * <p>\n   * <b>NOTE:</b> This method must be called once for each value of the field \n   * name specified in sequence that the values exist.  This method may not be \n   * used to generate multiple, lazy, StorableField instances refering to \n   * the same underlying StorableField instance.\n   * </p>\n   * <p>\n   * The lazy loading of field values from all instances of StorableField \n   * objects returned by this method are all backed by a single StoredDocument \n   * per LazyDocument instance.\n   * </p>\n   */\n  public IndexableField getField(FieldInfo fieldInfo) {  \n\n    fieldNames.add(fieldInfo.name);\n    List<LazyField> values = fields.get(fieldInfo.number);\n    if (null == values) {\n      values = new ArrayList<>();\n      fields.put(fieldInfo.number, values);\n    } \n\n    LazyField value = new LazyField(fieldInfo.name, fieldInfo.number);\n    values.add(value);\n\n    synchronized (this) {\n      // edge case: if someone asks this LazyDoc for more LazyFields\n      // after other LazyFields from the same LazyDoc have been\n      // actuallized, we need to force the doc to be re-fetched\n      // so the new LazyFields are also populated.\n      doc = null;\n    }\n    return value;\n  }\n\n","sourceOld":"  /**\n   * Creates a StorableField whose value will be lazy loaded if and \n   * when it is used. \n   * <p>\n   * <b>NOTE:</b> This method must be called once for each value of the field \n   * name specified in sequence that the values exist.  This method may not be \n   * used to generate multiple, lazy, StorableField instances refering to \n   * the same underlying StorableField instance.\n   * </p>\n   * <p>\n   * The lazy loading of field values from all instances of StorableField \n   * objects returned by this method are all backed by a single StoredDocument \n   * per LazyDocument instance.\n   * </p>\n   */\n  public StorableField getField(FieldInfo fieldInfo) {  \n\n    fieldNames.add(fieldInfo.name);\n    List<LazyField> values = fields.get(fieldInfo.number);\n    if (null == values) {\n      values = new ArrayList<>();\n      fields.put(fieldInfo.number, values);\n    } \n\n    LazyField value = new LazyField(fieldInfo.name, fieldInfo.number);\n    values.add(value);\n\n    synchronized (this) {\n      // edge case: if someone asks this LazyDoc for more LazyFields\n      // after other LazyFields from the same LazyDoc have been\n      // actuallized, we need to force the doc to be re-fetched\n      // so the new LazyFields are also populated.\n      doc = null;\n    }\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/document/LazyDocument#getField(FieldInfo).mjava","sourceNew":"  /**\n   * Creates a StorableField whose value will be lazy loaded if and \n   * when it is used. \n   * <p>\n   * <b>NOTE:</b> This method must be called once for each value of the field \n   * name specified in sequence that the values exist.  This method may not be \n   * used to generate multiple, lazy, StorableField instances referring to \n   * the same underlying StorableField instance.\n   * </p>\n   * <p>\n   * The lazy loading of field values from all instances of StorableField \n   * objects returned by this method are all backed by a single StoredDocument \n   * per LazyDocument instance.\n   * </p>\n   */\n  public IndexableField getField(FieldInfo fieldInfo) {  \n\n    fieldNames.add(fieldInfo.name);\n    List<LazyField> values = fields.get(fieldInfo.number);\n    if (null == values) {\n      values = new ArrayList<>();\n      fields.put(fieldInfo.number, values);\n    } \n\n    LazyField value = new LazyField(fieldInfo.name, fieldInfo.number);\n    values.add(value);\n\n    synchronized (this) {\n      // edge case: if someone asks this LazyDoc for more LazyFields\n      // after other LazyFields from the same LazyDoc have been\n      // actuallized, we need to force the doc to be re-fetched\n      // so the new LazyFields are also populated.\n      doc = null;\n    }\n    return value;\n  }\n\n","sourceOld":"  /**\n   * Creates a StorableField whose value will be lazy loaded if and \n   * when it is used. \n   * <p>\n   * <b>NOTE:</b> This method must be called once for each value of the field \n   * name specified in sequence that the values exist.  This method may not be \n   * used to generate multiple, lazy, StorableField instances refering to \n   * the same underlying StorableField instance.\n   * </p>\n   * <p>\n   * The lazy loading of field values from all instances of StorableField \n   * objects returned by this method are all backed by a single StoredDocument \n   * per LazyDocument instance.\n   * </p>\n   */\n  public IndexableField getField(FieldInfo fieldInfo) {  \n\n    fieldNames.add(fieldInfo.name);\n    List<LazyField> values = fields.get(fieldInfo.number);\n    if (null == values) {\n      values = new ArrayList<>();\n      fields.put(fieldInfo.number, values);\n    } \n\n    LazyField value = new LazyField(fieldInfo.name, fieldInfo.number);\n    values.add(value);\n\n    synchronized (this) {\n      // edge case: if someone asks this LazyDoc for more LazyFields\n      // after other LazyFields from the same LazyDoc have been\n      // actuallized, we need to force the doc to be re-fetched\n      // so the new LazyFields are also populated.\n      doc = null;\n    }\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["39899cd24f88f2d580857d57be8aebc1f467f5c6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"39899cd24f88f2d580857d57be8aebc1f467f5c6":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"1d028314cced5858683a1bb4741423d0f934257b":["39899cd24f88f2d580857d57be8aebc1f467f5c6"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39899cd24f88f2d580857d57be8aebc1f467f5c6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}