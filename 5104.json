{"path":"solr/core/src/java/org/apache/solr/search/QueryResultKey#unorderedCompare(List[Query],List[Query]).mjava","commits":[{"id":"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f","date":1389311746,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#unorderedCompare(List[Query],List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#isEqual(List[Query],List[Query]).mjava","sourceNew":"  /** \n   * compares the two lists of queries in an unordered manner such that this method \n   * returns true if the 2 lists are the same size, and contain the same elements.\n   *\n   * This method should only be used if the lists come from QueryResultKeys which have \n   * already been found to have equal hashCodes, since the unordered comparison aspects \n   * of the logic are not cheap.\n   * \n   * @return true if the lists of equivilent other then the ordering\n   */\n  private static boolean unorderedCompare(List<Query> fqList1, List<Query> fqList2) {\n    // Do fast version first, expecting that filters are usually in the same order\n    //\n    // Fall back to unordered compare logic on the first non-equal elements.\n    // The slower unorderedCompare should pretty much never be called if filter \n    // lists are generally ordered consistently\n    if (fqList1 == fqList2) return true;  // takes care of identity and null cases\n    if (fqList1 == null || fqList2 == null) return false;\n    int sz = fqList1.size();\n    if (sz != fqList2.size()) return false;\n\n    for (int i = 0; i < sz; i++) {\n      if (!fqList1.get(i).equals(fqList2.get(i))) {\n        return unorderedCompare(fqList1, fqList2, i);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  // Do fast version, expecting that filters are ordered and only\n  // fall back to unordered compare on the first non-equal elements.\n  // This will only be called if the hash code of the entire key already\n  // matched, so the slower unorderedCompare should pretty much never\n  // be called if filter lists are generally ordered.\n  private static boolean isEqual(List<Query> fqList1, List<Query> fqList2) {\n    if (fqList1 == fqList2) return true;  // takes care of identity and null cases\n    if (fqList1 == null || fqList2 == null) return false;\n    int sz = fqList1.size();\n    if (sz != fqList2.size()) return false;\n    for (int i = 0; i < sz; i++) {\n      if (!fqList1.get(i).equals(fqList2.get(i))) {\n        return unorderedCompare(fqList1, fqList2, i);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz KrasiÅ„ski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#unorderedCompare(List[Query],List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#unorderedCompare(List[Query],List[Query]).mjava","sourceNew":"  /** \n   * compares the two lists of queries in an unordered manner such that this method \n   * returns true if the 2 lists are the same size, and contain the same elements.\n   *\n   * This method should only be used if the lists come from QueryResultKeys which have \n   * already been found to have equal hashCodes, since the unordered comparison aspects \n   * of the logic are not cheap.\n   * \n   * @return true if the lists of equivalent other then the ordering\n   */\n  private static boolean unorderedCompare(List<Query> fqList1, List<Query> fqList2) {\n    // Do fast version first, expecting that filters are usually in the same order\n    //\n    // Fall back to unordered compare logic on the first non-equal elements.\n    // The slower unorderedCompare should pretty much never be called if filter \n    // lists are generally ordered consistently\n    if (fqList1 == fqList2) return true;  // takes care of identity and null cases\n    if (fqList1 == null || fqList2 == null) return false;\n    int sz = fqList1.size();\n    if (sz != fqList2.size()) return false;\n\n    for (int i = 0; i < sz; i++) {\n      if (!fqList1.get(i).equals(fqList2.get(i))) {\n        return unorderedCompare(fqList1, fqList2, i);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** \n   * compares the two lists of queries in an unordered manner such that this method \n   * returns true if the 2 lists are the same size, and contain the same elements.\n   *\n   * This method should only be used if the lists come from QueryResultKeys which have \n   * already been found to have equal hashCodes, since the unordered comparison aspects \n   * of the logic are not cheap.\n   * \n   * @return true if the lists of equivilent other then the ordering\n   */\n  private static boolean unorderedCompare(List<Query> fqList1, List<Query> fqList2) {\n    // Do fast version first, expecting that filters are usually in the same order\n    //\n    // Fall back to unordered compare logic on the first non-equal elements.\n    // The slower unorderedCompare should pretty much never be called if filter \n    // lists are generally ordered consistently\n    if (fqList1 == fqList2) return true;  // takes care of identity and null cases\n    if (fqList1 == null || fqList2 == null) return false;\n    int sz = fqList1.size();\n    if (sz != fqList2.size()) return false;\n\n    for (int i = 0; i < sz; i++) {\n      if (!fqList1.get(i).equals(fqList2.get(i))) {\n        return unorderedCompare(fqList1, fqList2, i);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#unorderedCompare(List[Query],List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#unorderedCompare(List[Query],List[Query]).mjava","sourceNew":"  /** \n   * compares the two lists of queries in an unordered manner such that this method \n   * returns true if the 2 lists are the same size, and contain the same elements.\n   *\n   * This method should only be used if the lists come from QueryResultKeys which have \n   * already been found to have equal hashCodes, since the unordered comparison aspects \n   * of the logic are not cheap.\n   * \n   * @return true if the lists of equivalent other then the ordering\n   */\n  private static boolean unorderedCompare(List<Query> fqList1, List<Query> fqList2) {\n    // Do fast version first, expecting that filters are usually in the same order\n    //\n    // Fall back to unordered compare logic on the first non-equal elements.\n    // The slower unorderedCompare should pretty much never be called if filter \n    // lists are generally ordered consistently\n    if (fqList1 == fqList2) return true;  // takes care of identity and null cases\n    if (fqList1 == null || fqList2 == null) return false;\n    int sz = fqList1.size();\n    if (sz != fqList2.size()) return false;\n\n    for (int i = 0; i < sz; i++) {\n      if (!fqList1.get(i).equals(fqList2.get(i))) {\n        return unorderedCompare(fqList1, fqList2, i);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** \n   * compares the two lists of queries in an unordered manner such that this method \n   * returns true if the 2 lists are the same size, and contain the same elements.\n   *\n   * This method should only be used if the lists come from QueryResultKeys which have \n   * already been found to have equal hashCodes, since the unordered comparison aspects \n   * of the logic are not cheap.\n   * \n   * @return true if the lists of equivilent other then the ordering\n   */\n  private static boolean unorderedCompare(List<Query> fqList1, List<Query> fqList2) {\n    // Do fast version first, expecting that filters are usually in the same order\n    //\n    // Fall back to unordered compare logic on the first non-equal elements.\n    // The slower unorderedCompare should pretty much never be called if filter \n    // lists are generally ordered consistently\n    if (fqList1 == fqList2) return true;  // takes care of identity and null cases\n    if (fqList1 == null || fqList2 == null) return false;\n    int sz = fqList1.size();\n    if (sz != fqList2.size()) return false;\n\n    for (int i = 0; i < sz; i++) {\n      if (!fqList1.get(i).equals(fqList2.get(i))) {\n        return unorderedCompare(fqList1, fqList2, i);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#unorderedCompare(List[Query],List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#unorderedCompare(List[Query],List[Query]).mjava","sourceNew":"  /** \n   * compares the two lists of queries in an unordered manner such that this method \n   * returns true if the 2 lists are the same size, and contain the same elements.\n   *\n   * This method should only be used if the lists come from QueryResultKeys which have \n   * already been found to have equal hashCodes, since the unordered comparison aspects \n   * of the logic are not cheap.\n   * \n   * @return true if the lists of equivalent other then the ordering\n   */\n  private static boolean unorderedCompare(List<Query> fqList1, List<Query> fqList2) {\n    // Do fast version first, expecting that filters are usually in the same order\n    //\n    // Fall back to unordered compare logic on the first non-equal elements.\n    // The slower unorderedCompare should pretty much never be called if filter \n    // lists are generally ordered consistently\n    if (fqList1 == fqList2) return true;  // takes care of identity and null cases\n    if (fqList1 == null || fqList2 == null) return false;\n    int sz = fqList1.size();\n    if (sz != fqList2.size()) return false;\n\n    for (int i = 0; i < sz; i++) {\n      if (!fqList1.get(i).equals(fqList2.get(i))) {\n        return unorderedCompare(fqList1, fqList2, i);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** \n   * compares the two lists of queries in an unordered manner such that this method \n   * returns true if the 2 lists are the same size, and contain the same elements.\n   *\n   * This method should only be used if the lists come from QueryResultKeys which have \n   * already been found to have equal hashCodes, since the unordered comparison aspects \n   * of the logic are not cheap.\n   * \n   * @return true if the lists of equivilent other then the ordering\n   */\n  private static boolean unorderedCompare(List<Query> fqList1, List<Query> fqList2) {\n    // Do fast version first, expecting that filters are usually in the same order\n    //\n    // Fall back to unordered compare logic on the first non-equal elements.\n    // The slower unorderedCompare should pretty much never be called if filter \n    // lists are generally ordered consistently\n    if (fqList1 == fqList2) return true;  // takes care of identity and null cases\n    if (fqList1 == null || fqList2 == null) return false;\n    int sz = fqList1.size();\n    if (sz != fqList2.size()) return false;\n\n    for (int i = 0; i < sz; i++) {\n      if (!fqList1.get(i).equals(fqList2.get(i))) {\n        return unorderedCompare(fqList1, fqList2, i);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}