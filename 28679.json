{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","commits":[{"id":"8eaedf240fab95c428d5f496a274256d2053ad37","date":1412122376,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void exorciseIndex(Status result) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7523916a1350712e1ae710affd4e88ccd7c431d","date":1412161942,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   */\n  public void exorciseIndex(Status result) throws IOException {\n    ensureOpen();\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void exorciseIndex(Status result) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   */\n  public void exorciseIndex(Status result) throws IOException {\n    ensureOpen();\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   */\n  public void exorciseIndex(Status result) throws IOException {\n    ensureOpen();\n    if (result.partial) {\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    }\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   */\n  public void exorciseIndex(Status result) throws IOException {\n    ensureOpen();\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   */\n  public void exorciseIndex(Status result) throws IOException {\n    ensureOpen();\n    if (result.partial) {\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    }\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   */\n  public void exorciseIndex(Status result) throws IOException {\n    ensureOpen();\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   */\n  public void exorciseIndex(Status result) throws IOException {\n    ensureOpen();\n    if (result.partial) {\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    }\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   */\n  public void exorciseIndex(Status result) throws IOException {\n    ensureOpen();\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7523916a1350712e1ae710affd4e88ccd7c431d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["f7523916a1350712e1ae710affd4e88ccd7c431d"],"f7523916a1350712e1ae710affd4e88ccd7c431d":["8eaedf240fab95c428d5f496a274256d2053ad37"],"8eaedf240fab95c428d5f496a274256d2053ad37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7523916a1350712e1ae710affd4e88ccd7c431d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7523916a1350712e1ae710affd4e88ccd7c431d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8eaedf240fab95c428d5f496a274256d2053ad37","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f7523916a1350712e1ae710affd4e88ccd7c431d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","d9a47902d6207303f5ed3e7aaca62ca33433af66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8eaedf240fab95c428d5f496a274256d2053ad37":["f7523916a1350712e1ae710affd4e88ccd7c431d"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}