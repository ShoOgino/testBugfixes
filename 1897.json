{"path":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76c5c188431927c412f7c71546c5cfcccdc327f8","date":1333289294,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45fa1757f5581a10e9c63294cf292a14c92d23b1","date":1430234127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","bugFix":["1ccffc7ac75591780f9b7d53e22b8bea58eb4166"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    checkEqual(q,q);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    checkUnequal(q, whacky);\n    \n    // null test\n    assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    assertFalse(q.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    checkEqual(q,q);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n\n      @Override\n      public boolean equals(Object o) {\n        return o == this;\n      }\n\n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n\n    };\n    checkUnequal(q, whacky);\n\n    // null test\n    assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    checkEqual(q,q);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    checkUnequal(q, whacky);\n    \n    // null test\n    assertFalse(q.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    checkEqual(q,q);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n\n      @Override\n      public boolean equals(Object o) {\n        return o == this;\n      }\n\n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n\n    };\n    checkUnequal(q, whacky);\n\n    // null test\n    assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    checkEqual(q,q);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    checkUnequal(q, whacky);\n    \n    // null test\n    assertFalse(q.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    checkEqual(q,q);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n\n      @Override\n      public void visit(QueryVisitor visitor) { }\n\n      @Override\n      public boolean equals(Object o) {\n        return o == this;\n      }\n\n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n\n    };\n    checkUnequal(q, whacky);\n\n    // null test\n    assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    checkEqual(q,q);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n\n      @Override\n      public boolean equals(Object o) {\n        return o == this;\n      }\n\n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n\n    };\n    checkUnequal(q, whacky);\n\n    // null test\n    assertFalse(q.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76c5c188431927c412f7c71546c5cfcccdc327f8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["45fa1757f5581a10e9c63294cf292a14c92d23b1"],"45fa1757f5581a10e9c63294cf292a14c92d23b1":["76c5c188431927c412f7c71546c5cfcccdc327f8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"76c5c188431927c412f7c71546c5cfcccdc327f8":["45fa1757f5581a10e9c63294cf292a14c92d23b1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76c5c188431927c412f7c71546c5cfcccdc327f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"45fa1757f5581a10e9c63294cf292a14c92d23b1":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}