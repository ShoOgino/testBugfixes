{"path":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMoveLargestLast().mjava","commits":[{"id":"24686226124dab7a26bcb1ed0653aa7fa4a18c9e","date":1489713728,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMoveLargestLast().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoveLargestLast() {\n    SolrInputDocument inDoc = new SolrInputDocument();\n    String TEXT_FLD = \"text\"; // not stored.  It won't be moved.  This value is the longest, however.\n    inDoc.addField(TEXT_FLD,\n        \"NOT STORED|\" + RandomStrings.randomAsciiOfLength(random(), 4 * DocumentBuilder.MIN_LENGTH_TO_MOVE_LAST));\n\n    String CAT_FLD = \"cat\"; // stored, multiValued\n    inDoc.addField(CAT_FLD,\n        \"STORED V1|\");\n    //  pretty long value\n    inDoc.addField(CAT_FLD,\n        \"STORED V2|\" + RandomStrings.randomAsciiOfLength(random(), 2 * DocumentBuilder.MIN_LENGTH_TO_MOVE_LAST));\n    inDoc.addField(CAT_FLD,\n        \"STORED V3|\" + RandomStrings.randomAsciiOfLength(random(), DocumentBuilder.MIN_LENGTH_TO_MOVE_LAST));\n\n    String SUBJECT_FLD = \"subject\"; // stored.  This value is long, but not long enough.\n    inDoc.addField(SUBJECT_FLD,\n        \"2ndplace|\" + RandomStrings.randomAsciiOfLength(random(), DocumentBuilder.MIN_LENGTH_TO_MOVE_LAST));\n\n    Document outDoc = DocumentBuilder.toDocument(inDoc, h.getCore().getLatestSchema());\n\n    // filter outDoc by stored fields; convert to list.\n    List<IndexableField> storedFields = StreamSupport.stream(outDoc.spliterator(), false)\n        .filter(f -> f.fieldType().stored()).collect(Collectors.toList());\n    // clip to last 3.  We expect these to be for CAT_FLD\n    storedFields = storedFields.subList(storedFields.size() - 3, storedFields.size());\n\n    Iterator<IndexableField> fieldIterator = storedFields.iterator();\n    IndexableField field;\n\n    // Test that we retained the particular value ordering, even though though the 2nd of three was longest\n\n    assertTrue(fieldIterator.hasNext());\n    field = fieldIterator.next();\n    assertEquals(CAT_FLD, field.name());\n    assertTrue(field.stringValue().startsWith(\"STORED V1|\"));\n\n    assertTrue(fieldIterator.hasNext());\n    field = fieldIterator.next();\n    assertEquals(CAT_FLD, field.name());\n    assertTrue(field.stringValue().startsWith(\"STORED V2|\"));\n\n    assertTrue(fieldIterator.hasNext());\n    field = fieldIterator.next();\n    assertEquals(CAT_FLD, field.name());\n    assertTrue(field.stringValue().startsWith(\"STORED V3|\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4359f613ec1bd44a86b91e052b90aadb3804b51","date":1490280010,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMoveLargestLast().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoveLargestLast() {\n    SolrInputDocument inDoc = new SolrInputDocument();\n    String TEXT_FLD = \"text\"; // not stored.  It won't be moved.  This value is the longest, however.\n    inDoc.addField(TEXT_FLD,\n        \"NOT STORED|\" + RandomStrings.randomAsciiOfLength(random(), 4 * DocumentBuilder.MIN_LENGTH_TO_MOVE_LAST));\n\n    String CAT_FLD = \"cat\"; // stored, multiValued\n    inDoc.addField(CAT_FLD,\n        \"STORED V1|\");\n    //  pretty long value\n    inDoc.addField(CAT_FLD,\n        \"STORED V2|\" + RandomStrings.randomAsciiOfLength(random(), 2 * DocumentBuilder.MIN_LENGTH_TO_MOVE_LAST));\n    inDoc.addField(CAT_FLD,\n        \"STORED V3|\" + RandomStrings.randomAsciiOfLength(random(), DocumentBuilder.MIN_LENGTH_TO_MOVE_LAST));\n\n    String SUBJECT_FLD = \"subject\"; // stored.  This value is long, but not long enough.\n    inDoc.addField(SUBJECT_FLD,\n        \"2ndplace|\" + RandomStrings.randomAsciiOfLength(random(), DocumentBuilder.MIN_LENGTH_TO_MOVE_LAST));\n\n    Document outDoc = DocumentBuilder.toDocument(inDoc, h.getCore().getLatestSchema());\n\n    // filter outDoc by stored fields; convert to list.\n    List<IndexableField> storedFields = StreamSupport.stream(outDoc.spliterator(), false)\n        .filter(f -> f.fieldType().stored()).collect(Collectors.toList());\n    // clip to last 3.  We expect these to be for CAT_FLD\n    storedFields = storedFields.subList(storedFields.size() - 3, storedFields.size());\n\n    Iterator<IndexableField> fieldIterator = storedFields.iterator();\n    IndexableField field;\n\n    // Test that we retained the particular value ordering, even though though the 2nd of three was longest\n\n    assertTrue(fieldIterator.hasNext());\n    field = fieldIterator.next();\n    assertEquals(CAT_FLD, field.name());\n    assertTrue(field.stringValue().startsWith(\"STORED V1|\"));\n\n    assertTrue(fieldIterator.hasNext());\n    field = fieldIterator.next();\n    assertEquals(CAT_FLD, field.name());\n    assertTrue(field.stringValue().startsWith(\"STORED V2|\"));\n\n    assertTrue(fieldIterator.hasNext());\n    field = fieldIterator.next();\n    assertEquals(CAT_FLD, field.name());\n    assertTrue(field.stringValue().startsWith(\"STORED V3|\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4359f613ec1bd44a86b91e052b90aadb3804b51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24686226124dab7a26bcb1ed0653aa7fa4a18c9e"],"24686226124dab7a26bcb1ed0653aa7fa4a18c9e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4359f613ec1bd44a86b91e052b90aadb3804b51","24686226124dab7a26bcb1ed0653aa7fa4a18c9e"],"c4359f613ec1bd44a86b91e052b90aadb3804b51":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"24686226124dab7a26bcb1ed0653aa7fa4a18c9e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c4359f613ec1bd44a86b91e052b90aadb3804b51","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}