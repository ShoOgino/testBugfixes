{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#doDecode(byte[][],long,JavaBinCodec.StringCache).mjava","commits":[{"id":"2d29e71be37a0f12cb2e7a55eac52341af2e5f18","date":1428955161,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#doDecode(byte[][],long,JavaBinCodec.StringCache).mjava","pathOld":"/dev/null","sourceNew":"  public static int doDecode(byte[][] buffers, long iter, JavaBinCodec.StringCache stringCache) throws IOException {\n    int ret = 0;\n    int bufnum = -1;\n    byte[] tmp = new byte[8192];\n\n    InputStream empty = new InputStream() {\n      @Override\n      public int read() throws IOException {\n        return -1;\n      }\n    };\n\n    while (--iter >= 0) {\n      if (++bufnum >= buffers.length) bufnum = 0;\n      byte[] buf = buffers[bufnum];\n      JavaBinCodec javabin = new JavaBinCodec(null, stringCache);\n      FastInputStream in = new FastInputStream(empty, buf, 0, buf.length);\n      Object o = javabin.unmarshal( in );\n      if (o instanceof SolrDocument) {\n        ret += ((SolrDocument) o).size();\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c4a0fd70c7b102c0dcc58e54802670eb4ee728","date":1428956153,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#doDecode(byte[][],long,JavaBinCodec.StringCache).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#doDecode(byte[][],long,JavaBinCodec.StringCache).mjava","sourceNew":"  public static int doDecode(byte[][] buffers, long iter, JavaBinCodec.StringCache stringCache) throws IOException {\n    int ret = 0;\n    int bufnum = -1;\n\n    InputStream empty = new InputStream() {\n      @Override\n      public int read() throws IOException {\n        return -1;\n      }\n    };\n\n    while (--iter >= 0) {\n      if (++bufnum >= buffers.length) bufnum = 0;\n      byte[] buf = buffers[bufnum];\n      JavaBinCodec javabin = new JavaBinCodec(null, stringCache);\n      FastInputStream in = new FastInputStream(empty, buf, 0, buf.length);\n      Object o = javabin.unmarshal( in );\n      if (o instanceof SolrDocument) {\n        ret += ((SolrDocument) o).size();\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  public static int doDecode(byte[][] buffers, long iter, JavaBinCodec.StringCache stringCache) throws IOException {\n    int ret = 0;\n    int bufnum = -1;\n    byte[] tmp = new byte[8192];\n\n    InputStream empty = new InputStream() {\n      @Override\n      public int read() throws IOException {\n        return -1;\n      }\n    };\n\n    while (--iter >= 0) {\n      if (++bufnum >= buffers.length) bufnum = 0;\n      byte[] buf = buffers[bufnum];\n      JavaBinCodec javabin = new JavaBinCodec(null, stringCache);\n      FastInputStream in = new FastInputStream(empty, buf, 0, buf.length);\n      Object o = javabin.unmarshal( in );\n      if (o instanceof SolrDocument) {\n        ret += ((SolrDocument) o).size();\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#doDecode(byte[][],long,JavaBinCodec.StringCache).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#doDecode(byte[][],long,JavaBinCodec.StringCache).mjava","sourceNew":"  public static int doDecode(byte[][] buffers, long iter, JavaBinCodec.StringCache stringCache) throws IOException {\n    int ret = 0;\n    int bufnum = -1;\n\n    InputStream empty = new InputStream() {\n      @Override\n      public int read() throws IOException {\n        return -1;\n      }\n    };\n\n    while (--iter >= 0) {\n      if (++bufnum >= buffers.length) bufnum = 0;\n      byte[] buf = buffers[bufnum];\n      try (JavaBinCodec javabin = new JavaBinCodec(null, stringCache)) {\n        FastInputStream in = new FastInputStream(empty, buf, 0, buf.length);\n        Object o = javabin.unmarshal(in);\n        if (o instanceof SolrDocument) {\n          ret += ((SolrDocument) o).size();\n        }\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  public static int doDecode(byte[][] buffers, long iter, JavaBinCodec.StringCache stringCache) throws IOException {\n    int ret = 0;\n    int bufnum = -1;\n\n    InputStream empty = new InputStream() {\n      @Override\n      public int read() throws IOException {\n        return -1;\n      }\n    };\n\n    while (--iter >= 0) {\n      if (++bufnum >= buffers.length) bufnum = 0;\n      byte[] buf = buffers[bufnum];\n      JavaBinCodec javabin = new JavaBinCodec(null, stringCache);\n      FastInputStream in = new FastInputStream(empty, buf, 0, buf.length);\n      Object o = javabin.unmarshal( in );\n      if (o instanceof SolrDocument) {\n        ret += ((SolrDocument) o).size();\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#doDecode(byte[][],long,JavaBinCodec.StringCache).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#doDecode(byte[][],long,JavaBinCodec.StringCache).mjava","sourceNew":"  public static int doDecode(byte[][] buffers, long iter, JavaBinCodec.StringCache stringCache) throws IOException {\n    int ret = 0;\n    int bufnum = -1;\n\n    InputStream empty = new InputStream() {\n      @Override\n      public int read() throws IOException {\n        return -1;\n      }\n    };\n\n    while (--iter >= 0) {\n      if (++bufnum >= buffers.length) bufnum = 0;\n      byte[] buf = buffers[bufnum];\n      try (JavaBinCodec javabin = new JavaBinCodec(null, stringCache)) {\n        FastInputStream in = new FastInputStream(empty, buf, 0, buf.length);\n        Object o = javabin.unmarshal(in);\n        if (o instanceof SolrDocument) {\n          ret += ((SolrDocument) o).size();\n        }\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  public static int doDecode(byte[][] buffers, long iter, JavaBinCodec.StringCache stringCache) throws IOException {\n    int ret = 0;\n    int bufnum = -1;\n\n    InputStream empty = new InputStream() {\n      @Override\n      public int read() throws IOException {\n        return -1;\n      }\n    };\n\n    while (--iter >= 0) {\n      if (++bufnum >= buffers.length) bufnum = 0;\n      byte[] buf = buffers[bufnum];\n      JavaBinCodec javabin = new JavaBinCodec(null, stringCache);\n      FastInputStream in = new FastInputStream(empty, buf, 0, buf.length);\n      Object o = javabin.unmarshal( in );\n      if (o instanceof SolrDocument) {\n        ret += ((SolrDocument) o).size();\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#doDecode(byte[][],long,JavaBinCodec.StringCache).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#doDecode(byte[][],long,JavaBinCodec.StringCache).mjava","sourceNew":"  public static int doDecode(byte[][] buffers, long iter, JavaBinCodec.StringCache stringCache) throws IOException {\n    int ret = 0;\n    int bufnum = -1;\n\n    InputStream empty = new InputStream() {\n      @Override\n      public int read() throws IOException {\n        return -1;\n      }\n    };\n\n    while (--iter >= 0) {\n      if (++bufnum >= buffers.length) bufnum = 0;\n      byte[] buf = buffers[bufnum];\n      try (JavaBinCodec javabin = new JavaBinCodec(null, stringCache)) {\n        FastInputStream in = new FastInputStream(empty, buf, 0, buf.length);\n        Object o = javabin.unmarshal(in);\n        if (o instanceof SolrDocument) {\n          ret += ((SolrDocument) o).size();\n        }\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  public static int doDecode(byte[][] buffers, long iter, JavaBinCodec.StringCache stringCache) throws IOException {\n    int ret = 0;\n    int bufnum = -1;\n\n    InputStream empty = new InputStream() {\n      @Override\n      public int read() throws IOException {\n        return -1;\n      }\n    };\n\n    while (--iter >= 0) {\n      if (++bufnum >= buffers.length) bufnum = 0;\n      byte[] buf = buffers[bufnum];\n      JavaBinCodec javabin = new JavaBinCodec(null, stringCache);\n      FastInputStream in = new FastInputStream(empty, buf, 0, buf.length);\n      Object o = javabin.unmarshal( in );\n      if (o instanceof SolrDocument) {\n        ret += ((SolrDocument) o).size();\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["93c4a0fd70c7b102c0dcc58e54802670eb4ee728"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d29e71be37a0f12cb2e7a55eac52341af2e5f18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93c4a0fd70c7b102c0dcc58e54802670eb4ee728":["2d29e71be37a0f12cb2e7a55eac52341af2e5f18"],"28288370235ed02234a64753cdbf0c6ec096304a":["93c4a0fd70c7b102c0dcc58e54802670eb4ee728","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["93c4a0fd70c7b102c0dcc58e54802670eb4ee728","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d29e71be37a0f12cb2e7a55eac52341af2e5f18"],"2d29e71be37a0f12cb2e7a55eac52341af2e5f18":["93c4a0fd70c7b102c0dcc58e54802670eb4ee728"],"93c4a0fd70c7b102c0dcc58e54802670eb4ee728":["97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}