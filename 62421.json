{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader.PulsingDocsAndPositionsEnum#reset(Bits,PulsingTermState).mjava","commits":[{"id":"4f8633b56150a205774ee3e2adf1452a81b0d904","date":1376926002,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader.PulsingDocsAndPositionsEnum#reset(Bits,PulsingTermState).mjava","pathOld":"/dev/null","sourceNew":"    public PulsingDocsAndPositionsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      assert termState.postingsSize != -1;\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      this.liveDocs = liveDocs;\n      payloadLength = 0;\n      posPending = 0;\n      docID = -1;\n      accum = 0;\n      cost = termState.docFreq;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      //System.out.println(\"PR d&p reset storesPayloads=\" + storePayloads + \" bytes=\" + bytes.length + \" this=\" + this);\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader.PulsingDocsAndPositionsEnum#reset(Bits,PulsingTermState).mjava","sourceNew":null,"sourceOld":"    public PulsingDocsAndPositionsEnum reset(Bits liveDocs, PulsingTermState termState) {\n      assert termState.postingsSize != -1;\n      if (postingsBytes == null) {\n        postingsBytes = new byte[termState.postingsSize];\n      } else if (postingsBytes.length < termState.postingsSize) {\n        postingsBytes = ArrayUtil.grow(postingsBytes, termState.postingsSize);\n      }\n      System.arraycopy(termState.postings, 0, postingsBytes, 0, termState.postingsSize);\n      postings.reset(postingsBytes, 0, termState.postingsSize);\n      this.liveDocs = liveDocs;\n      payloadLength = 0;\n      posPending = 0;\n      docID = -1;\n      accum = 0;\n      cost = termState.docFreq;\n      startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n      offsetLength = 0;\n      //System.out.println(\"PR d&p reset storesPayloads=\" + storePayloads + \" bytes=\" + bytes.length + \" this=\" + this);\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["4f8633b56150a205774ee3e2adf1452a81b0d904"],"4f8633b56150a205774ee3e2adf1452a81b0d904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f8633b56150a205774ee3e2adf1452a81b0d904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"4f8633b56150a205774ee3e2adf1452a81b0d904":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}