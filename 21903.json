{"path":"src/java/org/apache/lucene/index/DocumentsWriterThreadState#comparePostings(Posting,Posting).mjava","commits":[{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriterThreadState#comparePostings(Posting,Posting).mjava","pathOld":"/dev/null","sourceNew":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0.\n   */\n  int comparePostings(Posting p1, Posting p2) {\n    if (p1 == p2)\n      return 0;\n    final char[] text1 = charPool.buffers[p1.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos1 = p1.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n    final char[] text2 = charPool.buffers[p2.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos2 = p2.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n    while(true) {\n      final char c1 = text1[pos1++];\n      final char c2 = text2[pos2++];\n      if (c1 < c2)\n        if (0xffff == c2)\n          return 1;\n        else\n          return -1;\n      else if (c2 < c1)\n        if (0xffff == c1)\n          return -1;\n        else\n          return 1;\n      else if (0xffff == c1)\n        return 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriterThreadState#comparePostings(Posting,Posting).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriterThreadState#comparePostings(Posting,Posting).mjava","sourceNew":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0.\n   */\n  int comparePostings(Posting p1, Posting p2) {\n    if (p1 == p2)\n      return 0;\n    final char[] text1 = charPool.buffers[p1.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos1 = p1.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n    final char[] text2 = charPool.buffers[p2.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos2 = p2.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    assert text1 != text2 || pos1 != pos2;\n\n    while(true) {\n      final char c1 = text1[pos1++];\n      final char c2 = text2[pos2++];\n      if (c1 != c2) {\n        if (0xffff == c2)\n          return 1;\n        else if (0xffff == c1)\n          return -1;\n        else\n          return c1-c2;\n      } else\n        // This method should never compare equal postings\n        // unless p1==p2\n        assert c1 != 0xffff;\n    }\n  }\n\n","sourceOld":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0.\n   */\n  int comparePostings(Posting p1, Posting p2) {\n    if (p1 == p2)\n      return 0;\n    final char[] text1 = charPool.buffers[p1.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos1 = p1.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n    final char[] text2 = charPool.buffers[p2.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos2 = p2.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n    while(true) {\n      final char c1 = text1[pos1++];\n      final char c2 = text2[pos2++];\n      if (c1 < c2)\n        if (0xffff == c2)\n          return 1;\n        else\n          return -1;\n      else if (c2 < c1)\n        if (0xffff == c1)\n          return -1;\n        else\n          return 1;\n      else if (0xffff == c1)\n        return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHashPerField#comparePostings(RawPostingList,RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriterThreadState#comparePostings(Posting,Posting).mjava","sourceNew":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0. */\n  int comparePostings(RawPostingList p1, RawPostingList p2) {\n\n    if (p1 == p2)\n      return 0;\n\n    final char[] text1 = charPool.buffers[p1.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos1 = p1.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n    final char[] text2 = charPool.buffers[p2.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos2 = p2.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    assert text1 != text2 || pos1 != pos2;\n\n    while(true) {\n      final char c1 = text1[pos1++];\n      final char c2 = text2[pos2++];\n      if (c1 != c2) {\n        if (0xffff == c2)\n          return 1;\n        else if (0xffff == c1)\n          return -1;\n        else\n          return c1-c2;\n      } else\n        // This method should never compare equal postings\n        // unless p1==p2\n        assert c1 != 0xffff;\n    }\n  }\n\n","sourceOld":"  /** Compares term text for two Posting instance and\n   *  returns -1 if p1 < p2; 1 if p1 > p2; else 0.\n   */\n  int comparePostings(Posting p1, Posting p2) {\n    if (p1 == p2)\n      return 0;\n    final char[] text1 = charPool.buffers[p1.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos1 = p1.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n    final char[] text2 = charPool.buffers[p2.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    int pos2 = p2.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    assert text1 != text2 || pos1 != pos2;\n\n    while(true) {\n      final char c1 = text1[pos1++];\n      final char c2 = text2[pos2++];\n      if (c1 != c2) {\n        if (0xffff == c2)\n          return 1;\n        else if (0xffff == c1)\n          return -1;\n        else\n          return c1-c2;\n      } else\n        // This method should never compare equal postings\n        // unless p1==p2\n        assert c1 != 0xffff;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["5a0af3a442be522899177e5e11384a45a6784a3f"],"5a0af3a442be522899177e5e11384a45a6784a3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5350389bf83287111f7760b9e3db3af8e3648474":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a0af3a442be522899177e5e11384a45a6784a3f"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["5350389bf83287111f7760b9e3db3af8e3648474"],"5a0af3a442be522899177e5e11384a45a6784a3f":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"5350389bf83287111f7760b9e3db3af8e3648474":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}