{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7122487a9ac7e9116008d689af936b0c7972164b","date":1358202569,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        boolean sawMerge = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"merge\".equals(trace[i])) {\n            sawMerge = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose && !sawMerge) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        boolean sawMerge = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"merge\".equals(trace[i])) {\n            sawMerge = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose && !sawMerge) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca9b5fe9aab4276416f967a3f028ac739ad36c8b","date":1359316184,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        boolean sawMerge = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            sawMerge = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose && !sawMerge) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        boolean sawMerge = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"merge\".equals(trace[i])) {\n            sawMerge = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose && !sawMerge) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51a48c1e1fa174bcecc998cd30a9dac77c0cbf62","date":1359316240,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        boolean sawMerge = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            sawMerge = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose && !sawMerge) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        boolean sawMerge = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"merge\".equals(trace[i])) {\n            sawMerge = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose && !sawMerge) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","date":1370803313,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        boolean sawMerge = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (sawAbortOrFlushDoc && sawMerge && sawClose) {\n            break;\n          }\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            sawMerge = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose && !sawMerge) {\n          if (onlyOnce) {\n            doFail = false;\n          }\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        boolean sawMerge = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            sawMerge = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose && !sawMerge) {\n          if (onlyOnce)\n            doFail = false;\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":["2a186ae8733084223c22044e935e4ef848a143d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        if (callStackContainsAnyOf(\"abort\", \"finishDocument\") && false == callStackContainsAnyOf(\"merge\", \"close\")) {\n          if (onlyOnce) {\n            doFail = false;\n          }\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        boolean sawMerge = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (sawAbortOrFlushDoc && sawMerge && sawClose) {\n            break;\n          }\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            sawMerge = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose && !sawMerge) {\n          if (onlyOnce) {\n            doFail = false;\n          }\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        if (callStackContainsAnyOf(\"abort\", \"finishDocument\") && false == callStackContainsAnyOf(\"merge\", \"close\")) {\n          if (onlyOnce) {\n            doFail = false;\n          }\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      // Since we throw exc during abort, eg when IW is\n      // attempting to delete files, we will leave\n      // leftovers: \n      dir.setAssertNoUnrefencedFilesOnClose(false);\n\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAbortOrFlushDoc = false;\n        boolean sawClose = false;\n        boolean sawMerge = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (sawAbortOrFlushDoc && sawMerge && sawClose) {\n            break;\n          }\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"finishDocument\".equals(trace[i].getMethodName())) {\n            sawAbortOrFlushDoc = true;\n          }\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            sawMerge = true;\n          }\n          if (\"close\".equals(trace[i].getMethodName())) {\n            sawClose = true;\n          }\n        }\n        if (sawAbortOrFlushDoc && !sawClose && !sawMerge) {\n          if (onlyOnce) {\n            doFail = false;\n          }\n          //System.out.println(Thread.currentThread().getName() + \": now fail\");\n          //new Throwable().printStackTrace(System.out);\n          throw new IOException(\"now failing on purpose\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51a48c1e1fa174bcecc998cd30a9dac77c0cbf62":["7122487a9ac7e9116008d689af936b0c7972164b"],"ca9b5fe9aab4276416f967a3f028ac739ad36c8b":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["51a48c1e1fa174bcecc998cd30a9dac77c0cbf62"],"9eae2a56dc810a17cf807d831f720dec931a03de":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["9eae2a56dc810a17cf807d831f720dec931a03de","7122487a9ac7e9116008d689af936b0c7972164b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7122487a9ac7e9116008d689af936b0c7972164b":["9eae2a56dc810a17cf807d831f720dec931a03de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2916966cc9815e973c01452a0d76c98c5e0d0926":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2916966cc9815e973c01452a0d76c98c5e0d0926"]},"commit2Childs":{"51a48c1e1fa174bcecc998cd30a9dac77c0cbf62":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"ca9b5fe9aab4276416f967a3f028ac739ad36c8b":[],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["2916966cc9815e973c01452a0d76c98c5e0d0926","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["ca9b5fe9aab4276416f967a3f028ac739ad36c8b"],"9eae2a56dc810a17cf807d831f720dec931a03de":["c4015cd39dff8d4dec562d909f9766debac53aa6","7122487a9ac7e9116008d689af936b0c7972164b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9eae2a56dc810a17cf807d831f720dec931a03de"],"7122487a9ac7e9116008d689af936b0c7972164b":["51a48c1e1fa174bcecc998cd30a9dac77c0cbf62","c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca9b5fe9aab4276416f967a3f028ac739ad36c8b","94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}