{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testMultipleWatchers().mjava","commits":[{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testMultipleWatchers().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultipleWatchers() throws InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Register the core with ZkStateReader\n    zkStateReader.registerCore(collectionName);\n\n    // Subsequent watchers won't be triggered when adding\n    final Watcher watcher1 = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher1);\n    watcher1.waitForTrigger(); // this might still get triggered because of registerCore\n    final Watcher watcher2 = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher2);\n    assertEquals(0, watcher2.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Make sure a value change triggers both watchers\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(1, watcher2.waitForTrigger());\n\n    // The watchers should be triggered when after the core is unregistered\n    zkStateReader.unregisterCore(collectionName);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    assertEquals(1, watcher1.waitForTrigger());\n\n    // The watcher should be triggered after another watcher is removed\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher2);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value3\");\n    assertEquals(1, watcher1.waitForTrigger());\n\n    // The last watcher shouldn't be triggered after removed, even if the core is registered\n    zkStateReader.registerCore(collectionName);\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher1);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value4\");\n    assertEquals(0, watcher1.waitForTrigger(TEST_NIGHTLY?2000:200));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd2416e0666fe28e88bf4c6db287f44aa41518b8","date":1564790537,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testMultipleWatchers().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testMultipleWatchers().mjava","sourceNew":"  @Test\n  public void testMultipleWatchers() throws InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Register the core with ZkStateReader\n    zkStateReader.registerCore(collectionName);\n\n    // Subsequent watchers won't be triggered when adding\n    final Watcher watcher1 = new Watcher(\"Watcher1\", random().nextBoolean());\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher1);\n    watcher1.waitForTrigger(); // this might still get triggered because of registerCore\n    final Watcher watcher2 = new Watcher(\"Watcher2\", random().nextBoolean());\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher2);\n    assertEquals(0, watcher2.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Make sure a value change triggers both watchers\n    log.info(\"setting value1\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(1, watcher2.waitForTrigger());\n    assertEquals(\"value1\", watcher1.getProps().get(\"property\"));\n    assertEquals(\"value1\", watcher2.getProps().get(\"property\"));\n\n    // The watchers should be triggered when after the core is unregistered\n    zkStateReader.unregisterCore(collectionName);\n    log.info(\"setting value2\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(1, watcher2.waitForTrigger());\n    assertEquals(\"value2\", watcher1.getProps().get(\"property\"));\n    assertEquals(\"value2\", watcher2.getProps().get(\"property\"));\n\n    // The watcher should be triggered after another watcher is removed\n    log.info(\"removing watcher2\");\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher2);\n    log.info(\"setting value3\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value3\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(\"value3\", watcher1.getProps().get(\"property\"));\n\n    // The last watcher shouldn't be triggered after removed, even if the core is registered\n    zkStateReader.registerCore(collectionName);\n    log.info(\"removing watcher1\");\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher1);\n    log.info(\"setting value4\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value4\");\n    assertEquals(0, watcher1.waitForTrigger(TEST_NIGHTLY?2000:200));\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleWatchers() throws InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Register the core with ZkStateReader\n    zkStateReader.registerCore(collectionName);\n\n    // Subsequent watchers won't be triggered when adding\n    final Watcher watcher1 = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher1);\n    watcher1.waitForTrigger(); // this might still get triggered because of registerCore\n    final Watcher watcher2 = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher2);\n    assertEquals(0, watcher2.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Make sure a value change triggers both watchers\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(1, watcher2.waitForTrigger());\n\n    // The watchers should be triggered when after the core is unregistered\n    zkStateReader.unregisterCore(collectionName);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    assertEquals(1, watcher1.waitForTrigger());\n\n    // The watcher should be triggered after another watcher is removed\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher2);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value3\");\n    assertEquals(1, watcher1.waitForTrigger());\n\n    // The last watcher shouldn't be triggered after removed, even if the core is registered\n    zkStateReader.registerCore(collectionName);\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher1);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value4\");\n    assertEquals(0, watcher1.waitForTrigger(TEST_NIGHTLY?2000:200));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testMultipleWatchers().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testMultipleWatchers().mjava","sourceNew":"  @Test\n  public void testMultipleWatchers() throws InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Register the core with ZkStateReader\n    zkStateReader.registerCore(collectionName);\n\n    // Subsequent watchers won't be triggered when adding\n    final Watcher watcher1 = new Watcher(\"Watcher1\", random().nextBoolean());\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher1);\n    watcher1.waitForTrigger(); // this might still get triggered because of registerCore\n    final Watcher watcher2 = new Watcher(\"Watcher2\", random().nextBoolean());\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher2);\n    assertEquals(0, watcher2.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Make sure a value change triggers both watchers\n    log.info(\"setting value1\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(1, watcher2.waitForTrigger());\n    assertEquals(\"value1\", watcher1.getProps().get(\"property\"));\n    assertEquals(\"value1\", watcher2.getProps().get(\"property\"));\n\n    // The watchers should be triggered when after the core is unregistered\n    zkStateReader.unregisterCore(collectionName);\n    log.info(\"setting value2\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(1, watcher2.waitForTrigger());\n    assertEquals(\"value2\", watcher1.getProps().get(\"property\"));\n    assertEquals(\"value2\", watcher2.getProps().get(\"property\"));\n\n    // The watcher should be triggered after another watcher is removed\n    log.info(\"removing watcher2\");\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher2);\n    log.info(\"setting value3\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value3\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(\"value3\", watcher1.getProps().get(\"property\"));\n\n    // The last watcher shouldn't be triggered after removed, even if the core is registered\n    zkStateReader.registerCore(collectionName);\n    log.info(\"removing watcher1\");\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher1);\n    log.info(\"setting value4\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value4\");\n    assertEquals(0, watcher1.waitForTrigger(TEST_NIGHTLY?2000:200));\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleWatchers() throws InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Register the core with ZkStateReader\n    zkStateReader.registerCore(collectionName);\n\n    // Subsequent watchers won't be triggered when adding\n    final Watcher watcher1 = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher1);\n    watcher1.waitForTrigger(); // this might still get triggered because of registerCore\n    final Watcher watcher2 = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher2);\n    assertEquals(0, watcher2.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Make sure a value change triggers both watchers\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(1, watcher2.waitForTrigger());\n\n    // The watchers should be triggered when after the core is unregistered\n    zkStateReader.unregisterCore(collectionName);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    assertEquals(1, watcher1.waitForTrigger());\n\n    // The watcher should be triggered after another watcher is removed\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher2);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value3\");\n    assertEquals(1, watcher1.waitForTrigger());\n\n    // The last watcher shouldn't be triggered after removed, even if the core is registered\n    zkStateReader.registerCore(collectionName);\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher1);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value4\");\n    assertEquals(0, watcher1.waitForTrigger(TEST_NIGHTLY?2000:200));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testMultipleWatchers().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#testMultipleWatchers().mjava","sourceNew":"  @Test\n  public void testMultipleWatchers() throws InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Register the core with ZkStateReader\n    zkStateReader.registerCore(collectionName);\n\n    // Subsequent watchers won't be triggered when adding\n    final Watcher watcher1 = new Watcher(\"Watcher1\", random().nextBoolean());\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher1);\n    watcher1.waitForTrigger(); // this might still get triggered because of registerCore\n    final Watcher watcher2 = new Watcher(\"Watcher2\", random().nextBoolean());\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher2);\n    assertEquals(0, watcher2.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Make sure a value change triggers both watchers\n    log.info(\"setting value1\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(1, watcher2.waitForTrigger());\n    assertEquals(\"value1\", watcher1.getProps().get(\"property\"));\n    assertEquals(\"value1\", watcher2.getProps().get(\"property\"));\n\n    // The watchers should be triggered when after the core is unregistered\n    zkStateReader.unregisterCore(collectionName);\n    log.info(\"setting value2\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(1, watcher2.waitForTrigger());\n    assertEquals(\"value2\", watcher1.getProps().get(\"property\"));\n    assertEquals(\"value2\", watcher2.getProps().get(\"property\"));\n\n    // The watcher should be triggered after another watcher is removed\n    log.info(\"removing watcher2\");\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher2);\n    log.info(\"setting value3\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value3\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(\"value3\", watcher1.getProps().get(\"property\"));\n\n    // The last watcher shouldn't be triggered after removed, even if the core is registered\n    zkStateReader.registerCore(collectionName);\n    log.info(\"removing watcher1\");\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher1);\n    log.info(\"setting value4\");\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value4\");\n    assertEquals(0, watcher1.waitForTrigger(TEST_NIGHTLY?2000:200));\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleWatchers() throws InterruptedException, IOException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    CollectionProperties collectionProps = new CollectionProperties(zkClient());\n\n    // Register the core with ZkStateReader\n    zkStateReader.registerCore(collectionName);\n\n    // Subsequent watchers won't be triggered when adding\n    final Watcher watcher1 = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher1);\n    watcher1.waitForTrigger(); // this might still get triggered because of registerCore\n    final Watcher watcher2 = new Watcher();\n    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher2);\n    assertEquals(0, watcher2.waitForTrigger(TEST_NIGHTLY?2000:200));\n\n    // Make sure a value change triggers both watchers\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value1\");\n    assertEquals(1, watcher1.waitForTrigger());\n    assertEquals(1, watcher2.waitForTrigger());\n\n    // The watchers should be triggered when after the core is unregistered\n    zkStateReader.unregisterCore(collectionName);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value2\");\n    assertEquals(1, watcher1.waitForTrigger());\n\n    // The watcher should be triggered after another watcher is removed\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher2);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value3\");\n    assertEquals(1, watcher1.waitForTrigger());\n\n    // The last watcher shouldn't be triggered after removed, even if the core is registered\n    zkStateReader.registerCore(collectionName);\n    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher1);\n    collectionProps.setCollectionProperty(collectionName, \"property\", \"value4\");\n    assertEquals(0, watcher1.waitForTrigger(TEST_NIGHTLY?2000:200));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd2416e0666fe28e88bf4c6db287f44aa41518b8":["de3459a54b4c8751d9ef19b035577e2418064be7"],"de3459a54b4c8751d9ef19b035577e2418064be7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["de3459a54b4c8751d9ef19b035577e2418064be7","cd2416e0666fe28e88bf4c6db287f44aa41518b8"],"f8061ddd97f3352007d927dae445884a6f3d857b":["de3459a54b4c8751d9ef19b035577e2418064be7","cd2416e0666fe28e88bf4c6db287f44aa41518b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd2416e0666fe28e88bf4c6db287f44aa41518b8"]},"commit2Childs":{"cd2416e0666fe28e88bf4c6db287f44aa41518b8":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de3459a54b4c8751d9ef19b035577e2418064be7":["cd2416e0666fe28e88bf4c6db287f44aa41518b8","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de3459a54b4c8751d9ef19b035577e2418064be7"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}