{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.BaseTermsEnum#refillStats().mjava","commits":[{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.BaseTermsEnum#refillStats().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.BaseTermsEnum#refillStats().mjava","sourceNew":"      /** Load current stats shard */\n      final void refillStats() throws IOException {\n        final int offset = statsBlockOrd * numSkipInfo;\n        final int statsFP = (int)skipInfo[offset];\n        statsReader.setPosition(statsFP);\n        for (int i = 0; i < INTERVAL && !statsReader.eof(); i++) {\n          int code = statsReader.readVInt();\n          if (hasFreqs()) {\n            docFreq[i] = (code >>> 1);\n            if ((code & 1) == 1) {\n              totalTermFreq[i] = docFreq[i];\n            } else {\n              totalTermFreq[i] = docFreq[i] + statsReader.readVLong();\n            }\n          } else {\n            docFreq[i] = code;\n          }\n        }\n      }\n\n","sourceOld":"      /** Load current stats shard */\n      final void refillStats() throws IOException {\n        final int offset = statsBlockOrd * numSkipInfo;\n        final int statsFP = (int)skipInfo[offset];\n        statsReader.setPosition(statsFP);\n        for (int i = 0; i < INTERVAL && !statsReader.eof(); i++) {\n          int code = statsReader.readVInt();\n          if (hasFreqs()) {\n            docFreq[i] = (code >>> 1);\n            if ((code & 1) == 1) {\n              totalTermFreq[i] = docFreq[i];\n            } else {\n              totalTermFreq[i] = docFreq[i] + statsReader.readVLong();\n            }\n          } else {\n            docFreq[i] = code;\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.TermsReader.BaseTermsEnum#refillStats().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader.TermsReader.BaseTermsEnum#refillStats().mjava","sourceNew":"      /** Load current stats shard */\n      final void refillStats() throws IOException {\n        final int offset = statsBlockOrd * numSkipInfo;\n        final int statsFP = (int)skipInfo[offset];\n        statsReader.setPosition(statsFP);\n        for (int i = 0; i < INTERVAL && !statsReader.eof(); i++) {\n          int code = statsReader.readVInt();\n          if (hasFreqs()) {\n            docFreq[i] = (code >>> 1);\n            if ((code & 1) == 1) {\n              totalTermFreq[i] = docFreq[i];\n            } else {\n              totalTermFreq[i] = docFreq[i] + statsReader.readVLong();\n            }\n          } else {\n            docFreq[i] = code;\n          }\n        }\n      }\n\n","sourceOld":"      /** Load current stats shard */\n      final void refillStats() throws IOException {\n        final int offset = statsBlockOrd * numSkipInfo;\n        final int statsFP = (int)skipInfo[offset];\n        statsReader.setPosition(statsFP);\n        for (int i = 0; i < INTERVAL && !statsReader.eof(); i++) {\n          int code = statsReader.readVInt();\n          if (hasFreqs()) {\n            docFreq[i] = (code >>> 1);\n            if ((code & 1) == 1) {\n              totalTermFreq[i] = docFreq[i];\n            } else {\n              totalTermFreq[i] = docFreq[i] + statsReader.readVLong();\n            }\n          } else {\n            docFreq[i] = code;\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56df73d43b6fc340f5332322862382c7e30f4368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}