{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.setLength(length);\n          positions.readBytes(scratch.bytes(), 0, scratch.length());\n          writePosition(code >>> 1, scratch.get());\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes(), 0, payloadData.length());\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.setLength(length);\n          positions.readBytes(scratch.bytes(), 0, scratch.length());\n          writePosition(code >>> 1, scratch.get());\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes(), 0, payloadData.length());\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.setLength(length);\n          positions.readBytes(scratch.bytes(), 0, scratch.length());\n          writePosition(code >>> 1, scratch.get());\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes(), 0, payloadData.length());\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.setLength(length);\n          positions.readBytes(scratch.bytes(), 0, scratch.length());\n          writePosition(code >>> 1, scratch.get());\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes(), 0, payloadData.length());\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.setLength(length);\n          positions.readBytes(scratch.bytes(), 0, scratch.length());\n          writePosition(code >>> 1, scratch.get());\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes(), 0, payloadData.length());\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}