{"path":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#getSpanScore().mjava","commits":[{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#getSpanScore().mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingFunctionTermQuery.BoostingFunctionTermWeight.BoostingFunctionSpanScorer#getSpanScore().mjava","sourceNew":"      /**\n       * Returns the SpanScorer score only.\n       * <p/>\n       * Should not be overriden without good cause!\n       * \n       * @return the score for just the Span part w/o the payload\n       * @throws IOException\n       * \n       * @see #score()\n       */\n      protected float getSpanScore() throws IOException {\n        return super.score();\n      }\n\n","sourceOld":"      /**\n       * Returns the SpanScorer score only.\n       * <p/>\n       * Should not be overriden without good cause!\n       *\n       * @return the score for just the Span part w/o the payload\n       * @throws IOException\n       *\n       * @see #score()\n       */\n      protected float getSpanScore() throws IOException{\n        return super.score();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#getSpanScore().mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#getSpanScore().mjava","sourceNew":"      /**\n       * Returns the SpanScorer score only.\n       * <p/>\n       * Should not be overridden without good cause!\n       * \n       * @return the score for just the Span part w/o the payload\n       * @throws IOException\n       * \n       * @see #score()\n       */\n      protected float getSpanScore() throws IOException {\n        return super.score();\n      }\n\n","sourceOld":"      /**\n       * Returns the SpanScorer score only.\n       * <p/>\n       * Should not be overriden without good cause!\n       * \n       * @return the score for just the Span part w/o the payload\n       * @throws IOException\n       * \n       * @see #score()\n       */\n      protected float getSpanScore() throws IOException {\n        return super.score();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#getSpanScore().mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#getSpanScore().mjava","sourceNew":"      /**\n       * Returns the SpanScorer score only.\n       * <p/>\n       * Should not be overridden without good cause!\n       * \n       * @return the score for just the Span part w/o the payload\n       * @throws IOException\n       * \n       * @see #score()\n       */\n      protected float getSpanScore() throws IOException {\n        return super.score();\n      }\n\n","sourceOld":"      /**\n       * Returns the SpanScorer score only.\n       * <p/>\n       * Should not be overridden without good cause!\n       * \n       * @return the score for just the Span part w/o the payload\n       * @throws IOException\n       * \n       * @see #score()\n       */\n      protected float getSpanScore() throws IOException {\n        return super.score();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"]},"commit2Childs":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}