{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.PendingOutputs#add(char[],int,int).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.PendingOutputs#add(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void add(char[] output, int offset, int len) {\n      if (count == outputs.length) {\n        final CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(outputs, 0, next, 0, count);\n        outputs = next;\n      }\n      if (outputs[count] == null) {\n        outputs[count] = new CharsRef();\n      }\n      outputs[count].copy(output, offset, len);\n      count++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.PendingOutputs#add(char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.PendingOutputs#add(char[],int,int).mjava","sourceNew":"    public void add(char[] output, int offset, int len) {\n      if (count == outputs.length) {\n        final CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(outputs, 0, next, 0, count);\n        outputs = next;\n      }\n      if (outputs[count] == null) {\n        outputs[count] = new CharsRef();\n      }\n      outputs[count].copyChars(output, offset, len);\n      count++;\n    }\n\n","sourceOld":"    public void add(char[] output, int offset, int len) {\n      if (count == outputs.length) {\n        final CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(outputs, 0, next, 0, count);\n        outputs = next;\n      }\n      if (outputs[count] == null) {\n        outputs[count] = new CharsRef();\n      }\n      outputs[count].copy(output, offset, len);\n      count++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"865b7d0f8430a08d385370b6b87a89a737aa6145","date":1325953575,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.PendingOutputs#add(char[],int,int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.PendingOutputs#add(char[],int,int).mjava","sourceNew":"    public void add(char[] output, int offset, int len, int endOffset) {\n      if (count == outputs.length) {\n        final CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(outputs, 0, next, 0, count);\n        outputs = next;\n      }\n      if (count == endOffsets.length) {\n        final int[] next = new int[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_INT)];\n        System.arraycopy(endOffsets, 0, next, 0, count);\n        endOffsets = next;\n      }\n      if (outputs[count] == null) {\n        outputs[count] = new CharsRef();\n      }\n      outputs[count].copyChars(output, offset, len);\n      // endOffset can be -1, in which case we should simply\n      // use the endOffset of the input token, or X >= 0, in\n      // which case we use X as the endOffset for this output\n      endOffsets[count] = endOffset;\n      count++;\n    }\n\n","sourceOld":"    public void add(char[] output, int offset, int len) {\n      if (count == outputs.length) {\n        final CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(outputs, 0, next, 0, count);\n        outputs = next;\n      }\n      if (outputs[count] == null) {\n        outputs[count] = new CharsRef();\n      }\n      outputs[count].copyChars(output, offset, len);\n      count++;\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"865b7d0f8430a08d385370b6b87a89a737aa6145":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6e919043fa85ee891123768dd655a98edbbf63c":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["865b7d0f8430a08d385370b6b87a89a737aa6145"]},"commit2Childs":{"865b7d0f8430a08d385370b6b87a89a737aa6145":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["e6e919043fa85ee891123768dd655a98edbbf63c"],"e6e919043fa85ee891123768dd655a98edbbf63c":["865b7d0f8430a08d385370b6b87a89a737aa6145"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}