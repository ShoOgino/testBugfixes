{"path":"lucene/core/src/test/org/apache/lucene/index/TestIsCurrent#testDeleteByTermIsCurrent().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIsCurrent#testDeleteByTermIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIsCurrent#testDeleteByTermIsCurrent().mjava","sourceNew":"  /**\n   * Failing testcase showing the trouble\n   * \n   * @throws IOException\n   */\n  @Test\n  public void testDeleteByTermIsCurrent() throws IOException {\n\n    // get reader\n    DirectoryReader reader = writer.getReader();\n\n    // assert index has a document and reader is up2date \n    assertEquals(\"One document should be in the index\", 1, writer.numDocs());\n    assertTrue(\"One document added, reader should be current\", reader.isCurrent());\n\n    // remove document\n    Term idTerm = new Term(\"UUID\", \"1\");\n    writer.deleteDocuments(idTerm);\n    writer.commit();\n\n    // assert document has been deleted (index changed), reader is stale\n    assertEquals(\"Document should be removed\", 0, writer.numDocs());\n    assertFalse(\"Reader should be stale\", reader.isCurrent());\n\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Failing testcase showing the trouble\n   * \n   * @throws IOException\n   */\n  @Test\n  public void testDeleteByTermIsCurrent() throws IOException {\n\n    // get reader\n    DirectoryReader reader = writer.getReader();\n\n    // assert index has a document and reader is up2date \n    assertEquals(\"One document should be in the index\", 1, writer.numDocs());\n    assertTrue(\"One document added, reader should be current\", reader.isCurrent());\n\n    // remove document\n    Term idTerm = new Term(\"UUID\", \"1\");\n    writer.deleteDocuments(idTerm);\n    writer.commit();\n\n    // assert document has been deleted (index changed), reader is stale\n    assertEquals(\"Document should be removed\", 0, writer.numDocs());\n    assertFalse(\"Reader should be stale\", reader.isCurrent());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIsCurrent#testDeleteByTermIsCurrent().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIsCurrent#testDeleteByTermIsCurrent().mjava","sourceNew":"  /**\n   * Failing testcase showing the trouble\n   */\n  @Test\n  public void testDeleteByTermIsCurrent() throws IOException {\n\n    // get reader\n    DirectoryReader reader = writer.getReader();\n\n    // assert index has a document and reader is up2date \n    assertEquals(\"One document should be in the index\", 1, writer.numDocs());\n    assertTrue(\"One document added, reader should be current\", reader.isCurrent());\n\n    // remove document\n    Term idTerm = new Term(\"UUID\", \"1\");\n    writer.deleteDocuments(idTerm);\n    writer.commit();\n\n    // assert document has been deleted (index changed), reader is stale\n    assertEquals(\"Document should be removed\", 0, writer.numDocs());\n    assertFalse(\"Reader should be stale\", reader.isCurrent());\n\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Failing testcase showing the trouble\n   * \n   * @throws IOException\n   */\n  @Test\n  public void testDeleteByTermIsCurrent() throws IOException {\n\n    // get reader\n    DirectoryReader reader = writer.getReader();\n\n    // assert index has a document and reader is up2date \n    assertEquals(\"One document should be in the index\", 1, writer.numDocs());\n    assertTrue(\"One document added, reader should be current\", reader.isCurrent());\n\n    // remove document\n    Term idTerm = new Term(\"UUID\", \"1\");\n    writer.deleteDocuments(idTerm);\n    writer.commit();\n\n    // assert document has been deleted (index changed), reader is stale\n    assertEquals(\"Document should be removed\", 0, writer.numDocs());\n    assertFalse(\"Reader should be stale\", reader.isCurrent());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIsCurrent#testDeleteByTermIsCurrent().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIsCurrent#testDeleteByTermIsCurrent().mjava","sourceNew":"  /**\n   * Failing testcase showing the trouble\n   */\n  @Test\n  public void testDeleteByTermIsCurrent() throws IOException {\n\n    // get reader\n    DirectoryReader reader = writer.getReader();\n\n    // assert index has a document and reader is up2date \n    assertEquals(\"One document should be in the index\", 1, writer.getDocStats().numDocs);\n    assertTrue(\"One document added, reader should be current\", reader.isCurrent());\n\n    // remove document\n    Term idTerm = new Term(\"UUID\", \"1\");\n    writer.deleteDocuments(idTerm);\n    writer.commit();\n\n    // assert document has been deleted (index changed), reader is stale\n    assertEquals(\"Document should be removed\", 0, writer.getDocStats().numDocs);\n    assertFalse(\"Reader should be stale\", reader.isCurrent());\n\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Failing testcase showing the trouble\n   */\n  @Test\n  public void testDeleteByTermIsCurrent() throws IOException {\n\n    // get reader\n    DirectoryReader reader = writer.getReader();\n\n    // assert index has a document and reader is up2date \n    assertEquals(\"One document should be in the index\", 1, writer.numDocs());\n    assertTrue(\"One document added, reader should be current\", reader.isCurrent());\n\n    // remove document\n    Term idTerm = new Term(\"UUID\", \"1\");\n    writer.deleteDocuments(idTerm);\n    writer.commit();\n\n    // assert document has been deleted (index changed), reader is stale\n    assertEquals(\"Document should be removed\", 0, writer.numDocs());\n    assertFalse(\"Reader should be stale\", reader.isCurrent());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}