{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","sourceNew":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","sourceNew":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","sourceOld":"  /**\n   * Get Test Queries.  The InputStream is closed.\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n\n    List<SpatialTestQuery> results = new ArrayList<>();\n\n    BufferedReader bufInput = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line;\n      for (int lineNumber = 1; (line = bufInput.readLine()) != null; lineNumber++) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = lineNumber;\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          results.add(test);\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    } finally {\n      bufInput.close();\n    }\n    return results.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}