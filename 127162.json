{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Writer#merge(SingleSubMergeState).mjava","commits":[{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Writer#merge(SingleSubMergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(SingleSubMergeState).mjava","sourceNew":"  @Override\n  protected void merge(SingleSubMergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  protected void merge(SingleSubMergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Writer#merge(SingleSubMergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(SingleSubMergeState).mjava","sourceNew":"  @Override\n  protected void merge(SingleSubMergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  protected void merge(SingleSubMergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/Writer#merge(SingleSubMergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Writer#merge(SingleSubMergeState).mjava","sourceNew":"  @Override\n  protected void merge(SingleSubMergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  protected void merge(SingleSubMergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}