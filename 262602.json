{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#sendRequests(String,String).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#sendRequests(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Send out shard requests to each shard in the given collection.\n   * \n   * @param collection that is being queried\n   * @param zkHost of the solr cloud hosting the collection\n   * @throws IOException if an exception occurs while picking shards or sending requests\n   */\n  public void sendRequests(String collection, String zkHost) throws IOException {\n    this.replicaUrls = new ArrayList<>();\n    this.cloudSolrClient = new Builder()\n        .withZkHost(zkHost)\n        .build();\n    try {\n      this.cloudSolrClient.connect();\n      pickShards(collection);\n      streamFromShards();\n    } finally {\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#sendRequests(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Send out shard requests to each shard in the given collection.\n   * \n   * @param collection that is being queried\n   * @param zkHost of the solr cloud hosting the collection\n   * @throws IOException if an exception occurs while picking shards or sending requests\n   */\n  public void sendRequests(String collection, String zkHost) throws IOException {\n    this.replicaUrls = new ArrayList<>();\n    this.cloudSolrClient = new Builder()\n        .withZkHost(zkHost)\n        .build();\n    try {\n      this.cloudSolrClient.connect();\n      pickShards(collection);\n      streamFromShards();\n    } finally {\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#sendRequests(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Send out shard requests to each shard in the given collection.\n   * \n   * @param collection that is being queried\n   * @param zkHost of the solr cloud hosting the collection\n   * @throws IOException if an exception occurs while picking shards or sending requests\n   */\n  public void sendRequests(String collection, String zkHost) throws IOException {\n    this.replicaUrls = new ArrayList<>();\n    this.cloudSolrClient = new Builder()\n        .withZkHost(zkHost)\n        .build();\n    try {\n      this.cloudSolrClient.connect();\n      pickShards(collection);\n      streamFromShards();\n    } finally {\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#sendRequests(String,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#sendRequests(String,String).mjava","sourceNew":"  /**\n   * Send out shard requests to each shard in the given collection.\n   * \n   * @param collection that is being queried\n   * @param zkHost of the solr cloud hosting the collection\n   * @throws IOException if an exception occurs while picking shards or sending requests\n   */\n  public void sendRequests(String collection, String zkHost) throws IOException {\n    this.replicaUrls = new ArrayList<>();\n    this.cloudSolrClient = new Builder(Collections.singletonList(zkHost), Optional.empty()).build();\n    try {\n      this.cloudSolrClient.connect();\n      pickShards(collection);\n      streamFromShards();\n    } finally {\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Send out shard requests to each shard in the given collection.\n   * \n   * @param collection that is being queried\n   * @param zkHost of the solr cloud hosting the collection\n   * @throws IOException if an exception occurs while picking shards or sending requests\n   */\n  public void sendRequests(String collection, String zkHost) throws IOException {\n    this.replicaUrls = new ArrayList<>();\n    this.cloudSolrClient = new Builder()\n        .withZkHost(zkHost)\n        .build();\n    try {\n      this.cloudSolrClient.connect();\n      pickShards(collection);\n      streamFromShards();\n    } finally {\n      cloudSolrClient.close();\n    }\n  }\n\n","bugFix":["c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#sendRequests(String,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#sendRequests(String,String).mjava","sourceNew":"  /**\n   * Send out shard requests to each shard in the given collection.\n   *\n   * @param collection that is being queried\n   * @param zkHost of the solr cloud hosting the collection\n   * @throws IOException if an exception occurs while picking shards or sending requests\n   */\n  public void sendRequests(String collection, String zkHost) throws IOException {\n    this.replicaUrls = new ArrayList<>();\n    this.cloudSolrClient = new Builder(Collections.singletonList(zkHost), Optional.empty()).build();\n    try {\n      this.cloudSolrClient.connect();\n      pickShards(collection);\n      streamFromShards();\n    } finally {\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Send out shard requests to each shard in the given collection.\n   * \n   * @param collection that is being queried\n   * @param zkHost of the solr cloud hosting the collection\n   * @throws IOException if an exception occurs while picking shards or sending requests\n   */\n  public void sendRequests(String collection, String zkHost) throws IOException {\n    this.replicaUrls = new ArrayList<>();\n    this.cloudSolrClient = new Builder(Collections.singletonList(zkHost), Optional.empty()).build();\n    try {\n      this.cloudSolrClient.connect();\n      pickShards(collection);\n      streamFromShards();\n    } finally {\n      cloudSolrClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#sendRequests(String,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#sendRequests(String,String).mjava","sourceNew":"  /**\n   * Send out shard requests to each shard in the given collection.\n   *\n   * @param collection that is being queried\n   * @param zkHost of the solr cloud hosting the collection\n   * @throws IOException if an exception occurs while picking shards or sending requests\n   */\n  public void sendRequests(String collection, String zkHost) throws IOException {\n    this.replicaUrls = new ArrayList<>();\n    this.cloudSolrClient = new Builder(Collections.singletonList(zkHost), Optional.empty()).build();\n    try {\n      this.cloudSolrClient.connect();\n      pickShards(collection);\n      streamFromShards();\n    } finally {\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Send out shard requests to each shard in the given collection.\n   * \n   * @param collection that is being queried\n   * @param zkHost of the solr cloud hosting the collection\n   * @throws IOException if an exception occurs while picking shards or sending requests\n   */\n  public void sendRequests(String collection, String zkHost) throws IOException {\n    this.replicaUrls = new ArrayList<>();\n    this.cloudSolrClient = new Builder(Collections.singletonList(zkHost), Optional.empty()).build();\n    try {\n      this.cloudSolrClient.connect();\n      pickShards(collection);\n      streamFromShards();\n    } finally {\n      cloudSolrClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","30c8e5574b55d57947e989443dfde611646530ee"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}