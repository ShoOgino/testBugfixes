{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#toString(StringBuilder,int).mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#toString(StringBuilder,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/LongRangeCounter.LongRangeNode#toString(StringBuilder,int).mjava","sourceNew":"    void toString(StringBuilder sb, int depth) {\n      indent(sb, depth);\n      if (left == null) {\n        assert right == null;\n        sb.append(\"leaf: \" + start + \" to \" + end);\n      } else {\n        sb.append(\"node: \" + start + \" to \" + end);\n      }\n      if (outputs != null) {\n        sb.append(\" outputs=\");\n        sb.append(outputs);\n      }\n      sb.append('\\n');\n\n      if (left != null) {\n        assert right != null;\n        left.toString(sb, depth+1);\n        right.toString(sb, depth+1);\n      }\n    }\n\n","sourceOld":"    void toString(StringBuilder sb, int depth) {\n      indent(sb, depth);\n      if (left == null) {\n        assert right == null;\n        sb.append(\"leaf: \" + start + \" to \" + end);\n      } else {\n        sb.append(\"node: \" + start + \" to \" + end);\n      }\n      if (outputs != null) {\n        sb.append(\" outputs=\");\n        sb.append(outputs);\n      }\n      sb.append('\\n');\n\n      if (left != null) {\n        assert right != null;\n        left.toString(sb, depth+1);\n        right.toString(sb, depth+1);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#toString(StringBuilder,int).mjava","pathOld":"/dev/null","sourceNew":"    void toString(StringBuilder sb, int depth) {\n      indent(sb, depth);\n      if (left == null) {\n        assert right == null;\n        sb.append(\"leaf: \" + start + \" to \" + end);\n      } else {\n        sb.append(\"node: \" + start + \" to \" + end);\n      }\n      if (outputs != null) {\n        sb.append(\" outputs=\");\n        sb.append(outputs);\n      }\n      sb.append('\\n');\n\n      if (left != null) {\n        assert right != null;\n        left.toString(sb, depth+1);\n        right.toString(sb, depth+1);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#toString(StringBuilder,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#toString(StringBuilder,int).mjava","sourceNew":"    void toString(StringBuilder sb, int depth) {\n      indent(sb, depth);\n      if (left == null) {\n        assert right == null;\n        sb.append(\"leaf: \").append(start).append(\" to \").append(end);\n      } else {\n        sb.append(\"node: \").append(start).append(\" to \").append(end);\n      }\n      if (outputs != null) {\n        sb.append(\" outputs=\");\n        sb.append(outputs);\n      }\n      sb.append('\\n');\n\n      if (left != null) {\n        assert right != null;\n        left.toString(sb, depth+1);\n        right.toString(sb, depth+1);\n      }\n    }\n\n","sourceOld":"    void toString(StringBuilder sb, int depth) {\n      indent(sb, depth);\n      if (left == null) {\n        assert right == null;\n        sb.append(\"leaf: \" + start + \" to \" + end);\n      } else {\n        sb.append(\"node: \" + start + \" to \" + end);\n      }\n      if (outputs != null) {\n        sb.append(\" outputs=\");\n        sb.append(outputs);\n      }\n      sb.append('\\n');\n\n      if (left != null) {\n        assert right != null;\n        left.toString(sb, depth+1);\n        right.toString(sb, depth+1);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ffe681f212e5073c69955b4ad22946794c84940":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"]},"commit2Childs":{"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["2ffe681f212e5073c69955b4ad22946794c84940"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}