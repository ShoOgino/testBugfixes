{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  @Override\n  public Object clone() {\n    final SegmentInfo si = new SegmentInfo(name, docCount, dir, isCompoundFile, codec,\n        fieldInfos == null ? null : (FieldInfos) fieldInfos.clone());\n    si.docStoreOffset = docStoreOffset;\n    si.docStoreSegment = docStoreSegment;\n    si.docStoreIsCompoundFile = docStoreIsCompoundFile;\n    si.delGen = delGen;\n    si.delCount = delCount;\n    si.diagnostics = new HashMap<String, String>(diagnostics);\n    if (normGen != null) {\n      si.normGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        si.normGen.put(entry.getKey(), entry.getValue());\n      }\n    }\n    si.version = version;\n    si.hasProx = hasProx;\n    si.hasVectors = hasVectors;\n    return si;\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    final SegmentInfo si = new SegmentInfo(name, docCount, dir, isCompoundFile, codec,\n        fieldInfos == null ? null : (FieldInfos) fieldInfos.clone());\n    si.docStoreOffset = docStoreOffset;\n    si.docStoreSegment = docStoreSegment;\n    si.docStoreIsCompoundFile = docStoreIsCompoundFile;\n    si.delGen = delGen;\n    si.delCount = delCount;\n    si.diagnostics = new HashMap<String, String>(diagnostics);\n    if (normGen != null) {\n      si.normGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        si.normGen.put(entry.getKey(), entry.getValue());\n      }\n    }\n    si.version = version;\n    si.hasProx = hasProx;\n    si.hasVectors = hasVectors;\n    return si;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5bf508bfc98425280b4bb708ab724f718705c9d","date":1332973345,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  @Override\n  public SegmentInfo clone() {\n    final SegmentInfo si = new SegmentInfo(name, docCount, dir, isCompoundFile, codec,\n        fieldInfos == null ? null : (FieldInfos) fieldInfos.clone());\n    si.docStoreOffset = docStoreOffset;\n    si.docStoreSegment = docStoreSegment;\n    si.docStoreIsCompoundFile = docStoreIsCompoundFile;\n    si.delGen = delGen;\n    si.delCount = delCount;\n    si.diagnostics = new HashMap<String, String>(diagnostics);\n    if (normGen != null) {\n      si.normGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        si.normGen.put(entry.getKey(), entry.getValue());\n      }\n    }\n    si.version = version;\n    si.hasProx = hasProx;\n    si.hasVectors = hasVectors;\n    return si;\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    final SegmentInfo si = new SegmentInfo(name, docCount, dir, isCompoundFile, codec,\n        fieldInfos == null ? null : (FieldInfos) fieldInfos.clone());\n    si.docStoreOffset = docStoreOffset;\n    si.docStoreSegment = docStoreSegment;\n    si.docStoreIsCompoundFile = docStoreIsCompoundFile;\n    si.delGen = delGen;\n    si.delCount = delCount;\n    si.diagnostics = new HashMap<String, String>(diagnostics);\n    if (normGen != null) {\n      si.normGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        si.normGen.put(entry.getKey(), entry.getValue());\n      }\n    }\n    si.version = version;\n    si.hasProx = hasProx;\n    si.hasVectors = hasVectors;\n    return si;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  @Override\n  public SegmentInfo clone() {\n    final SegmentInfo si = new SegmentInfo(name, docCount, dir, isCompoundFile, codec,\n        fieldInfos == null ? null : fieldInfos.clone());\n    si.docStoreOffset = docStoreOffset;\n    si.docStoreSegment = docStoreSegment;\n    si.docStoreIsCompoundFile = docStoreIsCompoundFile;\n    si.delGen = delGen;\n    si.delCount = delCount;\n    si.diagnostics = new HashMap<String, String>(diagnostics);\n    if (normGen != null) {\n      si.normGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        si.normGen.put(entry.getKey(), entry.getValue());\n      }\n    }\n    si.version = version;\n    si.hasProx = hasProx;\n    si.hasVectors = hasVectors;\n    return si;\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo clone() {\n    final SegmentInfo si = new SegmentInfo(name, docCount, dir, isCompoundFile, codec,\n        fieldInfos == null ? null : (FieldInfos) fieldInfos.clone());\n    si.docStoreOffset = docStoreOffset;\n    si.docStoreSegment = docStoreSegment;\n    si.docStoreIsCompoundFile = docStoreIsCompoundFile;\n    si.delGen = delGen;\n    si.delCount = delCount;\n    si.diagnostics = new HashMap<String, String>(diagnostics);\n    if (normGen != null) {\n      si.normGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        si.normGen.put(entry.getKey(), entry.getValue());\n      }\n    }\n    si.version = version;\n    si.hasProx = hasProx;\n    si.hasVectors = hasVectors;\n    return si;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n                           docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                           delCount, hasProx, codec, new HashMap<String,String>(diagnostics),\n                           hasVectors, hasDocValues, hasNorms, hasFreq);\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo clone() {\n    final SegmentInfo si = new SegmentInfo(name, docCount, dir, isCompoundFile, codec,\n        fieldInfos == null ? null : fieldInfos.clone());\n    si.docStoreOffset = docStoreOffset;\n    si.docStoreSegment = docStoreSegment;\n    si.docStoreIsCompoundFile = docStoreIsCompoundFile;\n    si.delGen = delGen;\n    si.delCount = delCount;\n    si.diagnostics = new HashMap<String, String>(diagnostics);\n    if (normGen != null) {\n      si.normGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        si.normGen.put(entry.getKey(), entry.getValue());\n      }\n    }\n    si.version = version;\n    si.hasProx = hasProx;\n    si.hasVectors = hasVectors;\n    return si;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc834f3412d287003cc04691da380b69ab983239","date":1337276089,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n                           docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                           delCount, hasProx, codec, new HashMap<String,String>(diagnostics),\n                           hasVectors);\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n                           docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                           delCount, hasProx, codec, new HashMap<String,String>(diagnostics),\n                           hasVectors, hasDocValues, hasNorms, hasFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8b14bc4241c302311422d5c6f7627f8febb86e","date":1337291675,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n                           docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                           delCount, hasProx, codec, new HashMap<String,String>(diagnostics));\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n                           docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                           delCount, hasProx, codec, new HashMap<String,String>(diagnostics),\n                           hasVectors);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc97c61094c5498702b29cc2e8309beac50c23dc","date":1337293692,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n                           docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                           delCount, codec, new HashMap<String,String>(diagnostics));\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n                           docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                           delCount, hasProx, codec, new HashMap<String,String>(diagnostics));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  // nocommit this is dangerous... because we lose the codec's customzied class...\n  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    SegmentInfo newInfo = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                          docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                                          delCount, codec, new HashMap<String,String>(diagnostics));\n    newInfo.setDelGen(delGen);\n    return newInfo;\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n                           docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                           delCount, codec, new HashMap<String,String>(diagnostics));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b512a6470fbb93c320e0cc8519ec0fe94efa13e","date":1337522360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    SegmentInfo newInfo = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                          docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                                          delCount, codec, new HashMap<String,String>(diagnostics));\n    newInfo.setDelGen(delGen);\n    return newInfo;\n  }\n\n","sourceOld":"  // nocommit this is dangerous... because we lose the codec's customzied class...\n  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    SegmentInfo newInfo = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                          docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                                          delCount, codec, new HashMap<String,String>(diagnostics));\n    newInfo.setDelGen(delGen);\n    return newInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    \n\n    SegmentInfo newInfo = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                          docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                                          delCount, codec, new HashMap<String,String>(diagnostics));\n    final Set<String> clonedFiles;\n    if (setFiles != null) {\n      clonedFiles = new HashSet<String>(setFiles);\n    } else {\n      clonedFiles = null;\n    }\n    newInfo.setFiles(clonedFiles);\n\n    newInfo.setDelGen(delGen);\n    return newInfo;\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    SegmentInfo newInfo = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                          docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                                          delCount, codec, new HashMap<String,String>(diagnostics));\n    newInfo.setDelGen(delGen);\n    return newInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a46feaa8775cb79964b568371b8eedaef5f576b","date":1337620767,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    SegmentInfo newInfo = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                          docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                                          delCount, codec, new HashMap<String,String>(diagnostics));\n    final Set<String> clonedFiles;\n    if (setFiles != null) {\n      clonedFiles = new HashSet<String>(setFiles);\n    } else {\n      clonedFiles = null;\n    }\n    newInfo.setFiles(clonedFiles);\n\n    newInfo.setDelGen(delGen);\n    return newInfo;\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    \n\n    SegmentInfo newInfo = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                          docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                                          delCount, codec, new HashMap<String,String>(diagnostics));\n    final Set<String> clonedFiles;\n    if (setFiles != null) {\n      clonedFiles = new HashSet<String>(setFiles);\n    } else {\n      clonedFiles = null;\n    }\n    newInfo.setFiles(clonedFiles);\n\n    newInfo.setDelGen(delGen);\n    return newInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":"  // nocommit nuke?\n  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    SegmentInfo newInfo = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                          docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                                          codec, new HashMap<String,String>(diagnostics));\n    final Set<String> clonedFiles;\n    if (setFiles != null) {\n      clonedFiles = new HashSet<String>(setFiles);\n    } else {\n      clonedFiles = null;\n    }\n    newInfo.setFiles(clonedFiles);\n    return newInfo;\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    SegmentInfo newInfo = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                          docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                                          delCount, codec, new HashMap<String,String>(diagnostics));\n    final Set<String> clonedFiles;\n    if (setFiles != null) {\n      clonedFiles = new HashSet<String>(setFiles);\n    } else {\n      clonedFiles = null;\n    }\n    newInfo.setFiles(clonedFiles);\n\n    newInfo.setDelGen(delGen);\n    return newInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b3fa44349e6083cfd46d292cae60c49b5fd607","date":1337711443,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":null,"sourceOld":"  // nocommit nuke?\n  @Override\n  public SegmentInfo clone() {\n    final HashMap<Integer,Long> clonedNormGen;\n    if (normGen != null) {\n      clonedNormGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        clonedNormGen.put(entry.getKey(), entry.getValue());\n      }\n    } else {\n      clonedNormGen = null;\n    }\n\n    SegmentInfo newInfo = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                          docStoreSegment, docStoreIsCompoundFile, clonedNormGen, isCompoundFile,\n                                          codec, new HashMap<String,String>(diagnostics));\n    final Set<String> clonedFiles;\n    if (setFiles != null) {\n      clonedFiles = new HashSet<String>(setFiles);\n    } else {\n      clonedFiles = null;\n    }\n    newInfo.setFiles(clonedFiles);\n    return newInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#clone().mjava","sourceNew":null,"sourceOld":"  @Override\n  public SegmentInfo clone() {\n    final SegmentInfo si = new SegmentInfo(name, docCount, dir, isCompoundFile, codec,\n        fieldInfos == null ? null : fieldInfos.clone());\n    si.docStoreOffset = docStoreOffset;\n    si.docStoreSegment = docStoreSegment;\n    si.docStoreIsCompoundFile = docStoreIsCompoundFile;\n    si.delGen = delGen;\n    si.delCount = delCount;\n    si.diagnostics = new HashMap<String, String>(diagnostics);\n    if (normGen != null) {\n      si.normGen = new HashMap<Integer, Long>();\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        si.normGen.put(entry.getKey(), entry.getValue());\n      }\n    }\n    si.version = version;\n    si.hasProx = hasProx;\n    si.hasVectors = hasVectors;\n    return si;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["fc834f3412d287003cc04691da380b69ab983239"],"14b3fa44349e6083cfd46d292cae60c49b5fd607":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"9a46feaa8775cb79964b568371b8eedaef5f576b":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["9a46feaa8775cb79964b568371b8eedaef5f576b"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"dc97c61094c5498702b29cc2e8309beac50c23dc":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"fc834f3412d287003cc04691da380b69ab983239":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["4b512a6470fbb93c320e0cc8519ec0fe94efa13e"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["399d5903979ca52514d2bc7e3a362e1c45885c94","14b3fa44349e6083cfd46d292cae60c49b5fd607"],"4356000e349e38c9fb48034695b7c309abd54557":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"4b512a6470fbb93c320e0cc8519ec0fe94efa13e":["4356000e349e38c9fb48034695b7c309abd54557"]},"commit2Childs":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"14b3fa44349e6083cfd46d292cae60c49b5fd607":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"9a46feaa8775cb79964b568371b8eedaef5f576b":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["14b3fa44349e6083cfd46d292cae60c49b5fd607"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"dc97c61094c5498702b29cc2e8309beac50c23dc":["4356000e349e38c9fb48034695b7c309abd54557"],"fc834f3412d287003cc04691da380b69ab983239":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["9a46feaa8775cb79964b568371b8eedaef5f576b"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["fc834f3412d287003cc04691da380b69ab983239"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4356000e349e38c9fb48034695b7c309abd54557":["4b512a6470fbb93c320e0cc8519ec0fe94efa13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4b512a6470fbb93c320e0cc8519ec0fe94efa13e":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}