{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighterWithStopWordsStraddlingFragmentBoundaries().mjava","commits":[{"id":"ad8eba81f9fc6f997ecfc7c81d02f69af185e444","date":1451426453,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighterWithStopWordsStraddlingFragmentBoundaries().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-2229\n  public void testSimpleSpanHighlighterWithStopWordsStraddlingFragmentBoundaries() throws Exception {\n    doSearching(new PhraseQuery(FIELD_NAME, \"all\", \"tokens\"));\n\n    int maxNumFragmentsRequired = 1;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    assertEquals(\"Must have one hit\", 1, hits.totalHits);\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 36));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n      assertTrue(\"Fragment must be less than 60 characters long\", result.length() < 60);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighterWithStopWordsStraddlingFragmentBoundaries().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighterWithStopWordsStraddlingFragmentBoundaries().mjava","sourceNew":"  // LUCENE-2229\n  public void testSimpleSpanHighlighterWithStopWordsStraddlingFragmentBoundaries() throws Exception {\n    doSearching(new PhraseQuery(FIELD_NAME, \"all\", \"tokens\"));\n\n    int maxNumFragmentsRequired = 1;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    assertEquals(\"Must have one hit\", 1, hits.totalHits.value);\n    for (int i = 0; i < hits.totalHits.value; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 36));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n      assertTrue(\"Fragment must be less than 60 characters long\", result.length() < 60);\n    }\n  }\n\n","sourceOld":"  // LUCENE-2229\n  public void testSimpleSpanHighlighterWithStopWordsStraddlingFragmentBoundaries() throws Exception {\n    doSearching(new PhraseQuery(FIELD_NAME, \"all\", \"tokens\"));\n\n    int maxNumFragmentsRequired = 1;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    assertEquals(\"Must have one hit\", 1, hits.totalHits);\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer, 36));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired, \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n\n      assertTrue(\"Fragment must be less than 60 characters long\", result.length() < 60);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad8eba81f9fc6f997ecfc7c81d02f69af185e444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["ad8eba81f9fc6f997ecfc7c81d02f69af185e444"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad8eba81f9fc6f997ecfc7c81d02f69af185e444"],"ad8eba81f9fc6f997ecfc7c81d02f69af185e444":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}