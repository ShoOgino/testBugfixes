{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#resolveCollectionListOrAlias(String).mjava","commits":[{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#resolveCollectionListOrAlias(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Resolves the parameter as a potential comma delimited list of collections, and resolves aliases too.\n   * One level of aliases pointing to another alias is supported.\n   * De-duplicates and retains the order.\n   * {@link #getCollectionsList()}\n   */\n  protected List<String> resolveCollectionListOrAlias(String collectionStr) {\n    if (collectionStr == null) {\n      return Collections.emptyList();\n    }\n    LinkedHashSet<String> resultList = new LinkedHashSet<>();\n    Aliases aliases = getAliases();\n    List<String> inputCollections = StrUtils.splitSmart(collectionStr, \",\", true);\n    for (String inputCollection : inputCollections) {\n      List<String> resolvedCollections = aliases.resolveAliases(inputCollection);\n      resultList.addAll(resolvedCollections);\n    }\n    return new ArrayList<>(resultList);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"813335f324f8bd40ae4d83d8391674b42b536cc0","date":1555591986,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#resolveCollectionListOrAlias(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#resolveCollectionListOrAlias(String).mjava","sourceNew":"  /**\n   * Resolves the parameter as a potential comma delimited list of collections, and resolves aliases too.\n   * One level of aliases pointing to another alias is supported.\n   * De-duplicates and retains the order.\n   * {@link #getCollectionsList()}\n   */\n  protected List<String> resolveCollectionListOrAlias(String collectionStr) {\n    if (collectionStr == null || collectionStr.trim().isEmpty()) {\n      return Collections.emptyList();\n    }\n    List<String> result = null;\n    LinkedHashSet<String> uniqueList = null;\n    Aliases aliases = getAliases();\n    List<String> inputCollections = StrUtils.splitSmart(collectionStr, \",\", true);\n    if (inputCollections.size() > 1) {\n      uniqueList = new LinkedHashSet<>();\n    }\n    for (String inputCollection : inputCollections) {\n      List<String> resolvedCollections = aliases.resolveAliases(inputCollection);\n      if (uniqueList != null) {\n        uniqueList.addAll(resolvedCollections);\n      } else {\n        result = resolvedCollections;\n      }\n    }\n    if (uniqueList != null) {\n      return new ArrayList<>(uniqueList);\n    } else {\n      return result;\n    }\n  }\n\n","sourceOld":"  /**\n   * Resolves the parameter as a potential comma delimited list of collections, and resolves aliases too.\n   * One level of aliases pointing to another alias is supported.\n   * De-duplicates and retains the order.\n   * {@link #getCollectionsList()}\n   */\n  protected List<String> resolveCollectionListOrAlias(String collectionStr) {\n    if (collectionStr == null) {\n      return Collections.emptyList();\n    }\n    LinkedHashSet<String> resultList = new LinkedHashSet<>();\n    Aliases aliases = getAliases();\n    List<String> inputCollections = StrUtils.splitSmart(collectionStr, \",\", true);\n    for (String inputCollection : inputCollections) {\n      List<String> resolvedCollections = aliases.resolveAliases(inputCollection);\n      resultList.addAll(resolvedCollections);\n    }\n    return new ArrayList<>(resultList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"813335f324f8bd40ae4d83d8391674b42b536cc0":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["813335f324f8bd40ae4d83d8391674b42b536cc0"]},"commit2Childs":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"813335f324f8bd40ae4d83d8391674b42b536cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}