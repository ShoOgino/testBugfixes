{"path":"src/java/org/apache/lucene/util/OpenBitSet#hashCode().mjava","commits":[{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  public int hashCode() {\n      long h = 0x98761234;  // something non-zero for length==0\n      for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 31); // rotate left\n    }\n    return (int)((h>>32) ^ h);  // fold leftmost bits into right\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e66528b51ae0effe8b39a938253561a98d967c69"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0f5ed60bd049416078c0c8e1ef4215c423a82b7","date":1220024024,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#hashCode().mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#hashCode().mjava","sourceNew":"  public int hashCode() {\n      long h = 0x98761234;  // something non-zero for length==0\n      for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    return (int)((h>>32) ^ h);  // fold leftmost bits into right\n  }\n\n","sourceOld":"  public int hashCode() {\n      long h = 0x98761234;  // something non-zero for length==0\n      for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 31); // rotate left\n    }\n    return (int)((h>>32) ^ h);  // fold leftmost bits into right\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#hashCode().mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n      long h = 0x98761234;  // something non-zero for length==0\n      for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    return (int)((h>>32) ^ h);  // fold leftmost bits into right\n  }\n\n","sourceOld":"  public int hashCode() {\n      long h = 0x98761234;  // something non-zero for length==0\n      for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    return (int)((h>>32) ^ h);  // fold leftmost bits into right\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66528b51ae0effe8b39a938253561a98d967c69","date":1263679982,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#hashCode().mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    // Start with a zero hash and use a mix that results in zero if the input is zero.\n    // This effectively truncates trailing zeros without an explicit check.\n    long h = 0;\n    for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int)((h>>32) ^ h) + 0x98761234;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n      long h = 0x98761234;  // something non-zero for length==0\n      for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    return (int)((h>>32) ^ h);  // fold leftmost bits into right\n  }\n\n","bugFix":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#hashCode().mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    // Start with a zero hash and use a mix that results in zero if the input is zero.\n    // This effectively truncates trailing zeros without an explicit check.\n    long h = 0;\n    for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int)((h>>32) ^ h) + 0x98761234;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    // Start with a zero hash and use a mix that results in zero if the input is zero.\n    // This effectively truncates trailing zeros without an explicit check.\n    long h = 0;\n    for (int i = bits.length; --i>=0;) {\n      h ^= bits[i];\n      h = (h << 1) | (h >>> 63); // rotate left\n    }\n    // fold leftmost bits into right and add a constant to prevent\n    // empty sets from returning 0, which is too common.\n    return (int)((h>>32) ^ h) + 0x98761234;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0f5ed60bd049416078c0c8e1ef4215c423a82b7":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"8a9e385641d717e641408d8fbbc62be8fc766357":["a0f5ed60bd049416078c0c8e1ef4215c423a82b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e66528b51ae0effe8b39a938253561a98d967c69"],"e66528b51ae0effe8b39a938253561a98d967c69":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"a0f5ed60bd049416078c0c8e1ef4215c423a82b7":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["e66528b51ae0effe8b39a938253561a98d967c69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0f5ed60bd049416078c0c8e1ef4215c423a82b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e66528b51ae0effe8b39a938253561a98d967c69":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}