{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,long,IndexInput).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,long,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25433c5cacacb7a2055d62d4d36b0daf210e0a10","date":1315747522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,long,IndexInput).mjava","sourceNew":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.docCount = docCount;\n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      }\n    }\n\n","sourceOld":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}