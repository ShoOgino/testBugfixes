{"path":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8281d815c10235e2dab9ded85615ebe920dd3c22","date":1243323879,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc29674855884c7ea8ac29eeb09a0276a16f334f","date":1247637346,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n      //corresponding to the support for dynamicFields\n      else if (type == Map.class || type == HashMap.class) {\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if(field != null){\n          if(field.getGenericType() instanceof ParameterizedType){\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if(types != null && types.length == 2 && types[0] == String.class){\n              //the key should always be String\n              //Raw and primitive types\n              if(types[1] instanceof Class){\n                //the value could be multivalued then it is a List ,Collection,ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              }\n              //Of all the Parameterized types, only List is supported\n              else if(types[1] instanceof ParameterizedType){\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              }\n              //Array types\n              else if(types[1] instanceof GenericArrayType){\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              }\n              //Throw an Exception if types are not known\n              else{\n                throw new RuntimeException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#storeType().mjava","sourceNew":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n      //corresponding to the support for dynamicFields\n      else if (type == Map.class || type == HashMap.class) {\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if(field != null){\n          if(field.getGenericType() instanceof ParameterizedType){\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if(types != null && types.length == 2 && types[0] == String.class){\n              //the key should always be String\n              //Raw and primitive types\n              if(types[1] instanceof Class){\n                //the value could be multivalued then it is a List ,Collection,ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              }\n              //Of all the Parameterized types, only List is supported\n              else if(types[1] instanceof ParameterizedType){\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              }\n              //Array types\n              else if(types[1] instanceof GenericArrayType){\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              }\n              //Throw an Exception if types are not known\n              else{\n                throw new RuntimeException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void storeType() {\n      if (field != null) {\n        type = field.getType();\n      } else {\n        Class[] params = setter.getParameterTypes();\n        if (params.length != 1)\n          throw new RuntimeException(\"Invalid setter method. Must have one and only one parameter\");\n        type = params[0];\n      }\n      if(type == Collection.class || type == List.class || type == ArrayList.class) {\n        type = Object.class;\n        isList = true;\n        /*ParameterizedType parameterizedType = null;\n        if(field !=null){\n          if( field.getGenericType() instanceof ParameterizedType){\n            parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types != null && types.length > 0) type = (Class) types[0];\n          }\n        }*/\n      } else if(type == byte[].class){\n        //no op\n      }else if (type.isArray()) {\n        isArray = true;\n        type = type.getComponentType();\n      }\n      //corresponding to the support for dynamicFields\n      else if (type == Map.class || type == HashMap.class) {\n        isContainedInMap = true;\n        //assigned a default type\n        type = Object.class;\n        if(field != null){\n          if(field.getGenericType() instanceof ParameterizedType){\n            //check what are the generic values\n            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if(types != null && types.length == 2 && types[0] == String.class){\n              //the key should always be String\n              //Raw and primitive types\n              if(types[1] instanceof Class){\n                //the value could be multivalued then it is a List ,Collection,ArrayList\n                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }else{\n                  //else assume it is a primitive and put in the source type itself\n                  type = (Class) types[1];\n                }\n              }\n              //Of all the Parameterized types, only List is supported\n              else if(types[1] instanceof ParameterizedType){\n                Type rawType = ((ParameterizedType)types[1]).getRawType();\n                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){\n                  type = Object.class;\n                  isList = true;\n                }\n              }\n              //Array types\n              else if(types[1] instanceof GenericArrayType){\n                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();\n                isArray = true;\n              }\n              //Throw an Exception if types are not known\n              else{\n                throw new RuntimeException(\"Allowed type for values of mapping a dynamicField are : \" +\n                    \"Object, Object[] and List\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8281d815c10235e2dab9ded85615ebe920dd3c22":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"ad94625fb8d088209f46650c8097196fec67f00c":["cc29674855884c7ea8ac29eeb09a0276a16f334f"],"cc29674855884c7ea8ac29eeb09a0276a16f334f":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8281d815c10235e2dab9ded85615ebe920dd3c22":["cc29674855884c7ea8ac29eeb09a0276a16f334f"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cc29674855884c7ea8ac29eeb09a0276a16f334f":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}