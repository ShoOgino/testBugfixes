{"path":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedOptimize#testSingleNonOptimizedSegment().mjava","commits":[{"id":"8723a3379c08ae0b4ba0cf4f246306f86ad8362d","date":1287582680,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedOptimize#testSingleNonOptimizedSegment().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleNonOptimizedSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    \n    writer.close();\n  \n    // delete the last document, so that the last segment is optimized.\n    IndexReader r = IndexReader.open(dir, false);\n    r.deleteDocument(r.numDocs() - 1);\n    r.close();\n    \n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.optimize();\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(3, sis.size());\n    assertFalse(sis.info(2).hasDeletions());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedOptimize#testSingleNonOptimizedSegment().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleNonOptimizedSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    \n    writer.close();\n  \n    // delete the last document, so that the last segment is optimized.\n    IndexReader r = IndexReader.open(dir, false);\n    r.deleteDocument(r.numDocs() - 1);\n    r.close();\n    \n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.optimize();\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(3, sis.size());\n    assertFalse(sis.info(2).hasDeletions());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c60818c639aa9dceabd6640d1e2fd7c80c8a11a4","date":1287840066,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedOptimize#testSingleNonOptimizedSegment().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedOptimize#testSingleNonOptimizedSegment().mjava","sourceNew":"  public void testSingleNonOptimizedSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    \n    writer.close();\n  \n    // delete the last document, so that the last segment is optimized.\n    IndexReader r = IndexReader.open(dir, false);\n    r.deleteDocument(r.numDocs() - 1);\n    r.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.optimize();\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(3, sis.size());\n    assertFalse(sis.info(2).hasDeletions());\n  }\n\n","sourceOld":"  public void testSingleNonOptimizedSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    \n    writer.close();\n  \n    // delete the last document, so that the last segment is optimized.\n    IndexReader r = IndexReader.open(dir, false);\n    r.deleteDocument(r.numDocs() - 1);\n    r.close();\n    \n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.optimize();\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(3, sis.size());\n    assertFalse(sis.info(2).hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedOptimize#testSingleNonOptimizedSegment().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedOptimize#testSingleNonOptimizedSegment().mjava","sourceNew":"  public void testSingleNonOptimizedSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    \n    writer.close();\n  \n    // delete the last document, so that the last segment is optimized.\n    IndexReader r = IndexReader.open(dir, false);\n    r.deleteDocument(r.numDocs() - 1);\n    r.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.optimize();\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(3, sis.size());\n    assertFalse(sis.info(2).hasDeletions());\n  }\n\n","sourceOld":"  public void testSingleNonOptimizedSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    \n    writer.close();\n  \n    // delete the last document, so that the last segment is optimized.\n    IndexReader r = IndexReader.open(dir, false);\n    r.deleteDocument(r.numDocs() - 1);\n    r.close();\n    \n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.optimize();\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(3, sis.size());\n    assertFalse(sis.info(2).hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedOptimize#testSingleNonOptimizedSegment().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleNonOptimizedSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n\n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    addDocs(writer, 3);\n    addDocs(writer, 5);\n    addDocs(writer, 3);\n\n    writer.close();\n\n    // delete the last document, so that the last segment is optimized.\n    IndexReader r = IndexReader.open(dir, false);\n    r.deleteDocument(r.numDocs() - 1);\n    r.close();\n\n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n\n    writer = new IndexWriter(dir, conf);\n    writer.optimize();\n    writer.close();\n\n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(3, sis.size());\n    assertFalse(sis.info(2).hasDeletions());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testSingleMergeableSegment().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedOptimize#testSingleNonOptimizedSegment().mjava","sourceNew":"  public void testSingleMergeableSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    \n    writer.close();\n  \n    // delete the last document, so that the last segment is merged.\n    IndexReader r = IndexReader.open(dir, false);\n    r.deleteDocument(r.numDocs() - 1);\n    r.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(3, sis.size());\n    assertFalse(sis.info(2).hasDeletions());\n  }\n\n","sourceOld":"  public void testSingleNonOptimizedSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    \n    writer.close();\n  \n    // delete the last document, so that the last segment is optimized.\n    IndexReader r = IndexReader.open(dir, false);\n    r.deleteDocument(r.numDocs() - 1);\n    r.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.optimize();\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(3, sis.size());\n    assertFalse(sis.info(2).hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c60818c639aa9dceabd6640d1e2fd7c80c8a11a4":["8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["8017ab6544f30f93b106e419e7298173bad77f69","c60818c639aa9dceabd6640d1e2fd7c80c8a11a4"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["c60818c639aa9dceabd6640d1e2fd7c80c8a11a4"],"8017ab6544f30f93b106e419e7298173bad77f69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c60818c639aa9dceabd6640d1e2fd7c80c8a11a4"],"8723a3379c08ae0b4ba0cf4f246306f86ad8362d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"]},"commit2Childs":{"c60818c639aa9dceabd6640d1e2fd7c80c8a11a4":["b12d3e81e0f95a4527b5703953c503f71120ffcc","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"8017ab6544f30f93b106e419e7298173bad77f69":["b12d3e81e0f95a4527b5703953c503f71120ffcc"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"8723a3379c08ae0b4ba0cf4f246306f86ad8362d":["c60818c639aa9dceabd6640d1e2fd7c80c8a11a4","8017ab6544f30f93b106e419e7298173bad77f69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}