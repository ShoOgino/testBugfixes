{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonFailureCase2().mjava","commits":[{"id":"f9369473490cca80a5b92824279ebc7df00dc255","date":1472162990,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonFailureCase2().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPolygonFailureCase2() {\n    /*\n   [junit4]   1>   shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n   [lat=1.079437865394857, lon=-1.720224083538152E-11([X=0.47111944719262044, Y=-8.104310192839264E-12, Z=0.8803759987367299])], \n   [lat=-1.5707963267948966, lon=0.017453291479645996([X=6.108601474971234E-17, Y=1.066260290095308E-18, Z=-0.997762292022105])], \n   [lat=0.017453291479645996, lon=2.4457272005608357E-47([X=1.0009653513901666, Y=2.448088186713865E-47, Z=0.01747191415779267])]], internalEdges={2}},\n   GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n   [lat=1.079437865394857, lon=-1.720224083538152E-11([X=0.47111944719262044, Y=-8.104310192839264E-12, Z=0.8803759987367299])], \n   [lat=0.017453291479645996, lon=2.4457272005608357E-47([X=1.0009653513901666, Y=2.448088186713865E-47, Z=0.01747191415779267])], \n   [lat=0.0884233366943164, lon=0.4323234231678824([X=0.9054355304510789, Y=0.4178006803188124, Z=0.08840463683725623])]], internalEdges={0}}]}\n    */\n    final List<GeoPoint> poly1List = new ArrayList<>();\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, 1.079437865394857, -1.720224083538152E-11));\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, -1.5707963267948966, 0.017453291479645996));\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, 0.017453291479645996, 2.4457272005608357E-47));\n    \n    final GeoConvexPolygon poly1 = new GeoConvexPolygon(PlanetModel.WGS84, poly1List);\n    \n    /*\n   [junit4]   1>       unquantized=[lat=-1.5316724989005415, lon=3.141592653589793([X=-0.03902652216795768, Y=4.779370545484258E-18, Z=-0.9970038705813589])]\n   [junit4]   1>       quantized=[X=-0.03902652216283731, Y=2.3309121299774915E-10, Z=-0.9970038706538652]\n    */\n    \n    final GeoPoint point = new GeoPoint(PlanetModel.WGS84, -1.5316724989005415, 3.141592653589793);\n\n    assertTrue(poly1.isWithin(point));\n    \n    final XYZBounds actualBounds1 = new XYZBounds();\n    poly1.getBounds(actualBounds1);\n    \n    final XYZSolid solid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84,\n      actualBounds1.getMinimumX(), actualBounds1.getMaximumX(),\n      actualBounds1.getMinimumY(), actualBounds1.getMaximumY(),\n      actualBounds1.getMinimumZ(), actualBounds1.getMaximumZ());\n\n    assertTrue(solid.isWithin(point));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonFailureCase2().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPolygonFailureCase2() {\n    /*\n   [junit4]   1>   shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n   [lat=1.079437865394857, lon=-1.720224083538152E-11([X=0.47111944719262044, Y=-8.104310192839264E-12, Z=0.8803759987367299])], \n   [lat=-1.5707963267948966, lon=0.017453291479645996([X=6.108601474971234E-17, Y=1.066260290095308E-18, Z=-0.997762292022105])], \n   [lat=0.017453291479645996, lon=2.4457272005608357E-47([X=1.0009653513901666, Y=2.448088186713865E-47, Z=0.01747191415779267])]], internalEdges={2}},\n   GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n   [lat=1.079437865394857, lon=-1.720224083538152E-11([X=0.47111944719262044, Y=-8.104310192839264E-12, Z=0.8803759987367299])], \n   [lat=0.017453291479645996, lon=2.4457272005608357E-47([X=1.0009653513901666, Y=2.448088186713865E-47, Z=0.01747191415779267])], \n   [lat=0.0884233366943164, lon=0.4323234231678824([X=0.9054355304510789, Y=0.4178006803188124, Z=0.08840463683725623])]], internalEdges={0}}]}\n    */\n    final List<GeoPoint> poly1List = new ArrayList<>();\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, 1.079437865394857, -1.720224083538152E-11));\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, -1.5707963267948966, 0.017453291479645996));\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, 0.017453291479645996, 2.4457272005608357E-47));\n    \n    final GeoConvexPolygon poly1 = new GeoConvexPolygon(PlanetModel.WGS84, poly1List);\n    \n    /*\n   [junit4]   1>       unquantized=[lat=-1.5316724989005415, lon=3.141592653589793([X=-0.03902652216795768, Y=4.779370545484258E-18, Z=-0.9970038705813589])]\n   [junit4]   1>       quantized=[X=-0.03902652216283731, Y=2.3309121299774915E-10, Z=-0.9970038706538652]\n    */\n    \n    final GeoPoint point = new GeoPoint(PlanetModel.WGS84, -1.5316724989005415, 3.141592653589793);\n\n    assertTrue(poly1.isWithin(point));\n    \n    final XYZBounds actualBounds1 = new XYZBounds();\n    poly1.getBounds(actualBounds1);\n    \n    final XYZSolid solid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84,\n      actualBounds1.getMinimumX(), actualBounds1.getMaximumX(),\n      actualBounds1.getMinimumY(), actualBounds1.getMaximumY(),\n      actualBounds1.getMinimumZ(), actualBounds1.getMaximumZ());\n\n    assertTrue(solid.isWithin(point));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44c3a4ebfa1a780298de8b00afc0722c16233080","date":1522505029,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonFailureCase2().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testPolygonFailureCase2().mjava","sourceNew":"  @Test\n  public void testPolygonFailureCase2() {\n    /*\n   [junit4]   1>   shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n   [lat=1.079437865394857, lon=-1.720224083538152E-11([X=0.47111944719262044, Y=-8.104310192839264E-12, Z=0.8803759987367299])], \n   [lat=-1.5707963267948966, lon=0.017453291479645996([X=6.108601474971234E-17, Y=1.066260290095308E-18, Z=-0.997762292022105])], \n   [lat=0.017453291479645996, lon=2.4457272005608357E-47([X=1.0009653513901666, Y=2.448088186713865E-47, Z=0.01747191415779267])]], internalEdges={2}},\n   GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n   [lat=1.079437865394857, lon=-1.720224083538152E-11([X=0.47111944719262044, Y=-8.104310192839264E-12, Z=0.8803759987367299])], \n   [lat=0.017453291479645996, lon=2.4457272005608357E-47([X=1.0009653513901666, Y=2.448088186713865E-47, Z=0.01747191415779267])], \n   [lat=0.0884233366943164, lon=0.4323234231678824([X=0.9054355304510789, Y=0.4178006803188124, Z=0.08840463683725623])]], internalEdges={0}}]}\n    */\n    final List<GeoPoint> poly1List = new ArrayList<>();\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, 1.079437865394857, -1.720224083538152E-11));\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, -1.5707963267948966, 0.017453291479645996));\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, 0.017453291479645996, 2.4457272005608357E-47));\n\n    final GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(poly1List);\n    \n    final GeoPolygon poly1 = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, pd);\n    \n    /*\n   [junit4]   1>       unquantized=[lat=-1.5316724989005415, lon=3.141592653589793([X=-0.03902652216795768, Y=4.779370545484258E-18, Z=-0.9970038705813589])]\n   [junit4]   1>       quantized=[X=-0.03902652216283731, Y=2.3309121299774915E-10, Z=-0.9970038706538652]\n    */\n    \n    final GeoPoint point = new GeoPoint(PlanetModel.WGS84, -1.5316724989005415, 3.141592653589793);\n\n    final XYZBounds actualBounds1 = new XYZBounds();\n    poly1.getBounds(actualBounds1);\n    \n    final XYZSolid solid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, actualBounds1);\n\n    assertTrue(poly1.isWithin(point)?solid.isWithin(point):true);\n  }\n\n","sourceOld":"  @Test\n  public void testPolygonFailureCase2() {\n    /*\n   [junit4]   1>   shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n   [lat=1.079437865394857, lon=-1.720224083538152E-11([X=0.47111944719262044, Y=-8.104310192839264E-12, Z=0.8803759987367299])], \n   [lat=-1.5707963267948966, lon=0.017453291479645996([X=6.108601474971234E-17, Y=1.066260290095308E-18, Z=-0.997762292022105])], \n   [lat=0.017453291479645996, lon=2.4457272005608357E-47([X=1.0009653513901666, Y=2.448088186713865E-47, Z=0.01747191415779267])]], internalEdges={2}},\n   GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[\n   [lat=1.079437865394857, lon=-1.720224083538152E-11([X=0.47111944719262044, Y=-8.104310192839264E-12, Z=0.8803759987367299])], \n   [lat=0.017453291479645996, lon=2.4457272005608357E-47([X=1.0009653513901666, Y=2.448088186713865E-47, Z=0.01747191415779267])], \n   [lat=0.0884233366943164, lon=0.4323234231678824([X=0.9054355304510789, Y=0.4178006803188124, Z=0.08840463683725623])]], internalEdges={0}}]}\n    */\n    final List<GeoPoint> poly1List = new ArrayList<>();\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, 1.079437865394857, -1.720224083538152E-11));\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, -1.5707963267948966, 0.017453291479645996));\n    poly1List.add(new GeoPoint(PlanetModel.WGS84, 0.017453291479645996, 2.4457272005608357E-47));\n    \n    final GeoConvexPolygon poly1 = new GeoConvexPolygon(PlanetModel.WGS84, poly1List);\n    \n    /*\n   [junit4]   1>       unquantized=[lat=-1.5316724989005415, lon=3.141592653589793([X=-0.03902652216795768, Y=4.779370545484258E-18, Z=-0.9970038705813589])]\n   [junit4]   1>       quantized=[X=-0.03902652216283731, Y=2.3309121299774915E-10, Z=-0.9970038706538652]\n    */\n    \n    final GeoPoint point = new GeoPoint(PlanetModel.WGS84, -1.5316724989005415, 3.141592653589793);\n\n    assertTrue(poly1.isWithin(point));\n    \n    final XYZBounds actualBounds1 = new XYZBounds();\n    poly1.getBounds(actualBounds1);\n    \n    final XYZSolid solid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84,\n      actualBounds1.getMinimumX(), actualBounds1.getMaximumX(),\n      actualBounds1.getMinimumY(), actualBounds1.getMaximumY(),\n      actualBounds1.getMinimumZ(), actualBounds1.getMaximumZ());\n\n    assertTrue(solid.isWithin(point));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44c3a4ebfa1a780298de8b00afc0722c16233080":["f9369473490cca80a5b92824279ebc7df00dc255"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9369473490cca80a5b92824279ebc7df00dc255":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9369473490cca80a5b92824279ebc7df00dc255"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44c3a4ebfa1a780298de8b00afc0722c16233080"]},"commit2Childs":{"44c3a4ebfa1a780298de8b00afc0722c16233080":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9369473490cca80a5b92824279ebc7df00dc255","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f9369473490cca80a5b92824279ebc7df00dc255":["44c3a4ebfa1a780298de8b00afc0722c16233080","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}