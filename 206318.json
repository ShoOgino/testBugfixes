{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","commits":[{"id":"18359c8e12d55f66c27cfe7babe86283f06a6aa5","date":1250426225,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"/dev/null","sourceNew":"  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map streamMap = (Map) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = (SavedStreams) streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map streamMap = (Map) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = (SavedStreams) streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(false, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(false, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map streamMap = (Map) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = (SavedStreams) streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map streamMap = (Map) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = (SavedStreams) streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                  streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map streamMap = (Map) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = (SavedStreams) streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(false, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(false, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map streamMap = (Map) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = (SavedStreams) streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                  streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map streamMap = (Map) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = (SavedStreams) streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                  streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                  streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map streamMap = (Map) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = (SavedStreams) streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet stopWords = (HashSet) stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                  streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                  streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de8f86ed4fa7f4b6970b25037bcca3d2732236b9","date":1260365552,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["ba1116b3450a9c1642c89445d131b37344055245"],"de8f86ed4fa7f4b6970b25037bcca3d2732236b9":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["de8f86ed4fa7f4b6970b25037bcca3d2732236b9"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["60cdc0e643184821eb066795a8791cd82559f46e"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["60cdc0e643184821eb066795a8791cd82559f46e"],"de8f86ed4fa7f4b6970b25037bcca3d2732236b9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["de8f86ed4fa7f4b6970b25037bcca3d2732236b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}