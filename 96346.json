{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String actionStr = req.getParams().get(CommonParams.ACTION);\n    if (actionStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'action' is a required param\");\n    }\n    Cmd cmd = Cmd.get(actionStr);\n    if (cmd == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'action' param '\" + actionStr + \"', supported actions: \" + Cmd.actions);\n    }\n    Object res = null;\n    switch (cmd) {\n      case LIST:\n        int rows = req.getParams().getInt(CommonParams.ROWS, SolrRrdBackendFactory.DEFAULT_MAX_DBS);\n        res = factory.list(rows);\n        break;\n      case GET:\n        String name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        String[] dsNames = req.getParams().getParams(\"ds\");\n        String formatStr = req.getParams().get(\"format\", Format.LIST.toString());\n        Format format = Format.get(formatStr);\n        if (format == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'format' param '\" + formatStr + \"', supported formats: \" + Format.formats);\n        }\n        if (!factory.exists(name)) {\n          rsp.add(\"error\", \"'\" + name + \"' doesn't exist\");\n        } else {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          res = new NamedList<>();\n          NamedList<Object> data = new NamedList<>();\n          data.add(\"data\", getDbData(db, dsNames, format, req.getParams()));\n          ((NamedList)res).add(name, data);\n          db.close();\n        }\n        break;\n      case STATUS:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (!factory.exists(name)) {\n          rsp.add(\"error\", \"'\" + name + \"' doesn't exist\");\n        } else {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          NamedList<Object> map = new NamedList<>();\n          NamedList<Object> status = new NamedList<>();\n          status.add(\"status\", getDbStatus(db));\n          map.add(name, status);\n          db.close();\n          res = map;\n        }\n        break;\n      case DELETE:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (name.equalsIgnoreCase(\"all\") || name.equals(\"*\")) {\n          factory.removeAll();\n        } else {\n          factory.remove(name);\n        }\n        rsp.add(\"success\", \"ok\");\n        break;\n    }\n    if (res != null) {\n      rsp.add(\"metrics\", res);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String actionStr = req.getParams().get(CommonParams.ACTION);\n    if (actionStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'action' is a required param\");\n    }\n    Cmd cmd = Cmd.get(actionStr);\n    if (cmd == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'action' param '\" + actionStr + \"', supported actions: \" + Cmd.actions);\n    }\n    final SimpleOrderedMap<Object> res = new SimpleOrderedMap<>();\n    rsp.add(\"metrics\", res);\n    switch (cmd) {\n      case LIST:\n        int rows = req.getParams().getInt(CommonParams.ROWS, SolrRrdBackendFactory.DEFAULT_MAX_DBS);\n        List<Pair<String, Long>> lst = factory.list(rows);\n        lst.forEach(p -> {\n          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();\n          // RrdDb always uses seconds - convert here for compatibility\n          data.add(\"lastModified\", TimeUnit.SECONDS.convert(p.second(), TimeUnit.MILLISECONDS));\n          data.add(\"node\", nodeName);\n          res.add(p.first(), data);\n        });\n        break;\n      case GET:\n        String name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        String[] dsNames = req.getParams().getParams(\"ds\");\n        String formatStr = req.getParams().get(\"format\", Format.LIST.toString());\n        Format format = Format.get(formatStr);\n        if (format == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'format' param '\" + formatStr + \"', supported formats: \" + Format.formats);\n        }\n        if (factory.exists(name)) {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();\n          data.add(\"data\", getDbData(db, dsNames, format, req.getParams()));\n          data.add(\"lastModified\", db.getLastUpdateTime());\n          data.add(\"node\", nodeName);\n          res.add(name, data);\n          db.close();\n        }\n        break;\n      case STATUS:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (factory.exists(name)) {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          SimpleOrderedMap<Object> status = new SimpleOrderedMap<>();\n          status.add(\"status\", getDbStatus(db));\n          status.add(\"node\", nodeName);\n          res.add(name, status);\n          db.close();\n        }\n        break;\n      case DELETE:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (name.equalsIgnoreCase(\"all\") || name.equals(\"*\")) {\n          factory.removeAll();\n        } else {\n          factory.remove(name);\n        }\n        rsp.add(\"success\", \"ok\");\n        break;\n    }\n    // when using in-memory DBs non-overseer node has no access to overseer DBs - in this case\n    // forward the request to Overseer leader if available\n    if (!factory.isPersistent()) {\n      String leader = getOverseerLeader();\n      if (leader != null && !amIOverseerLeader(leader)) {\n        // get & merge remote response\n        NamedList<Object> remoteRes = handleRemoteRequest(leader, req);\n        mergeRemoteRes(rsp, remoteRes);\n      }\n    }\n    SimpleOrderedMap<Object> apiState = new SimpleOrderedMap<>();\n    apiState.add(\"enableReplicas\", enableReplicas);\n    apiState.add(\"enableNodes\", enableNodes);\n    apiState.add(\"mode\", enable ? (factory.isPersistent() ? \"index\" : \"memory\") : \"inactive\");\n    if (!factory.isPersistent()) {\n      apiState.add(\"message\", \"WARNING: metrics history is not being persisted. Create .system collection to start persisting history.\");\n    }\n    rsp.add(\"state\", apiState);\n    rsp.getResponseHeader().add(\"zkConnected\", cloudManager != null);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String actionStr = req.getParams().get(CommonParams.ACTION);\n    if (actionStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'action' is a required param\");\n    }\n    Cmd cmd = Cmd.get(actionStr);\n    if (cmd == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'action' param '\" + actionStr + \"', supported actions: \" + Cmd.actions);\n    }\n    Object res = null;\n    switch (cmd) {\n      case LIST:\n        int rows = req.getParams().getInt(CommonParams.ROWS, SolrRrdBackendFactory.DEFAULT_MAX_DBS);\n        res = factory.list(rows);\n        break;\n      case GET:\n        String name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        String[] dsNames = req.getParams().getParams(\"ds\");\n        String formatStr = req.getParams().get(\"format\", Format.LIST.toString());\n        Format format = Format.get(formatStr);\n        if (format == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'format' param '\" + formatStr + \"', supported formats: \" + Format.formats);\n        }\n        if (!factory.exists(name)) {\n          rsp.add(\"error\", \"'\" + name + \"' doesn't exist\");\n        } else {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          res = new NamedList<>();\n          NamedList<Object> data = new NamedList<>();\n          data.add(\"data\", getDbData(db, dsNames, format, req.getParams()));\n          ((NamedList)res).add(name, data);\n          db.close();\n        }\n        break;\n      case STATUS:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (!factory.exists(name)) {\n          rsp.add(\"error\", \"'\" + name + \"' doesn't exist\");\n        } else {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          NamedList<Object> map = new NamedList<>();\n          NamedList<Object> status = new NamedList<>();\n          status.add(\"status\", getDbStatus(db));\n          map.add(name, status);\n          db.close();\n          res = map;\n        }\n        break;\n      case DELETE:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (name.equalsIgnoreCase(\"all\") || name.equals(\"*\")) {\n          factory.removeAll();\n        } else {\n          factory.remove(name);\n        }\n        rsp.add(\"success\", \"ok\");\n        break;\n    }\n    if (res != null) {\n      rsp.add(\"metrics\", res);\n    }\n  }\n\n","bugFix":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String actionStr = req.getParams().get(CommonParams.ACTION);\n    if (actionStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'action' is a required param\");\n    }\n    Cmd cmd = Cmd.get(actionStr);\n    if (cmd == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'action' param '\" + actionStr + \"', supported actions: \" + Cmd.actions);\n    }\n    final SimpleOrderedMap<Object> res = new SimpleOrderedMap<>();\n    rsp.add(\"metrics\", res);\n    switch (cmd) {\n      case LIST:\n        int rows = req.getParams().getInt(CommonParams.ROWS, SolrRrdBackendFactory.DEFAULT_MAX_DBS);\n        List<Pair<String, Long>> lst = factory.list(rows);\n        lst.forEach(p -> {\n          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();\n          // RrdDb always uses seconds - convert here for compatibility\n          data.add(\"lastModified\", TimeUnit.SECONDS.convert(p.second(), TimeUnit.MILLISECONDS));\n          data.add(\"node\", nodeName);\n          res.add(p.first(), data);\n        });\n        break;\n      case GET:\n        String name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        String[] dsNames = req.getParams().getParams(\"ds\");\n        String formatStr = req.getParams().get(\"format\", Format.LIST.toString());\n        Format format = Format.get(formatStr);\n        if (format == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'format' param '\" + formatStr + \"', supported formats: \" + Format.formats);\n        }\n        if (factory.exists(name)) {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();\n          data.add(\"data\", getDbData(db, dsNames, format, req.getParams()));\n          data.add(\"lastModified\", db.getLastUpdateTime());\n          data.add(\"node\", nodeName);\n          res.add(name, data);\n          db.close();\n        }\n        break;\n      case STATUS:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (factory.exists(name)) {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          SimpleOrderedMap<Object> status = new SimpleOrderedMap<>();\n          status.add(\"status\", getDbStatus(db));\n          status.add(\"node\", nodeName);\n          res.add(name, status);\n          db.close();\n        }\n        break;\n      case DELETE:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (name.equalsIgnoreCase(\"all\") || name.equals(\"*\")) {\n          factory.removeAll();\n        } else {\n          factory.remove(name);\n        }\n        rsp.add(\"success\", \"ok\");\n        break;\n    }\n    // when using in-memory DBs non-overseer node has no access to overseer DBs - in this case\n    // forward the request to Overseer leader if available\n    if (!factory.isPersistent()) {\n      String leader = getOverseerLeader();\n      if (leader != null && !amIOverseerLeader(leader)) {\n        // get & merge remote response\n        NamedList<Object> remoteRes = handleRemoteRequest(leader, req);\n        mergeRemoteRes(rsp, remoteRes);\n      }\n    }\n    SimpleOrderedMap<Object> apiState = new SimpleOrderedMap<>();\n    apiState.add(\"enableReplicas\", enableReplicas);\n    apiState.add(\"enableNodes\", enableNodes);\n    apiState.add(\"mode\", enable ? (factory.isPersistent() ? \"index\" : \"memory\") : \"inactive\");\n    if (!factory.isPersistent()) {\n      apiState.add(\"message\", \"WARNING: metrics history is not being persisted. Create .system collection to start persisting history.\");\n    }\n    rsp.add(\"state\", apiState);\n    rsp.getResponseHeader().add(\"zkConnected\", cloudManager != null);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String actionStr = req.getParams().get(CommonParams.ACTION);\n    if (actionStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'action' is a required param\");\n    }\n    Cmd cmd = Cmd.get(actionStr);\n    if (cmd == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'action' param '\" + actionStr + \"', supported actions: \" + Cmd.actions);\n    }\n    Object res = null;\n    switch (cmd) {\n      case LIST:\n        int rows = req.getParams().getInt(CommonParams.ROWS, SolrRrdBackendFactory.DEFAULT_MAX_DBS);\n        res = factory.list(rows);\n        break;\n      case GET:\n        String name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        String[] dsNames = req.getParams().getParams(\"ds\");\n        String formatStr = req.getParams().get(\"format\", Format.LIST.toString());\n        Format format = Format.get(formatStr);\n        if (format == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'format' param '\" + formatStr + \"', supported formats: \" + Format.formats);\n        }\n        if (!factory.exists(name)) {\n          rsp.add(\"error\", \"'\" + name + \"' doesn't exist\");\n        } else {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          res = new NamedList<>();\n          NamedList<Object> data = new NamedList<>();\n          data.add(\"data\", getDbData(db, dsNames, format, req.getParams()));\n          ((NamedList)res).add(name, data);\n          db.close();\n        }\n        break;\n      case STATUS:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (!factory.exists(name)) {\n          rsp.add(\"error\", \"'\" + name + \"' doesn't exist\");\n        } else {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          NamedList<Object> map = new NamedList<>();\n          NamedList<Object> status = new NamedList<>();\n          status.add(\"status\", getDbStatus(db));\n          map.add(name, status);\n          db.close();\n          res = map;\n        }\n        break;\n      case DELETE:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (name.equalsIgnoreCase(\"all\") || name.equals(\"*\")) {\n          factory.removeAll();\n        } else {\n          factory.remove(name);\n        }\n        rsp.add(\"success\", \"ok\");\n        break;\n    }\n    if (res != null) {\n      rsp.add(\"metrics\", res);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String actionStr = req.getParams().get(CommonParams.ACTION);\n    if (actionStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'action' is a required param\");\n    }\n    Cmd cmd = Cmd.get(actionStr);\n    if (cmd == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'action' param '\" + actionStr + \"', supported actions: \" + Cmd.actions);\n    }\n    final SimpleOrderedMap<Object> res = new SimpleOrderedMap<>();\n    rsp.add(\"metrics\", res);\n    switch (cmd) {\n      case LIST:\n        int rows = req.getParams().getInt(CommonParams.ROWS, SolrRrdBackendFactory.DEFAULT_MAX_DBS);\n        List<Pair<String, Long>> lst = factory.list(rows);\n        lst.forEach(p -> {\n          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();\n          // RrdDb always uses seconds - convert here for compatibility\n          data.add(\"lastModified\", TimeUnit.SECONDS.convert(p.second(), TimeUnit.MILLISECONDS));\n          data.add(\"node\", nodeName);\n          res.add(p.first(), data);\n        });\n        break;\n      case GET:\n        String name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        String[] dsNames = req.getParams().getParams(\"ds\");\n        String formatStr = req.getParams().get(\"format\", Format.LIST.toString());\n        Format format = Format.get(formatStr);\n        if (format == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'format' param '\" + formatStr + \"', supported formats: \" + Format.formats);\n        }\n        if (factory.exists(name)) {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();\n          data.add(\"data\", getDbData(db, dsNames, format, req.getParams()));\n          data.add(\"lastModified\", db.getLastUpdateTime());\n          data.add(\"node\", nodeName);\n          res.add(name, data);\n          db.close();\n        }\n        break;\n      case STATUS:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (factory.exists(name)) {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          SimpleOrderedMap<Object> status = new SimpleOrderedMap<>();\n          status.add(\"status\", getDbStatus(db));\n          status.add(\"node\", nodeName);\n          res.add(name, status);\n          db.close();\n        }\n        break;\n      case DELETE:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (name.equalsIgnoreCase(\"all\") || name.equals(\"*\")) {\n          factory.removeAll();\n        } else {\n          factory.remove(name);\n        }\n        rsp.add(\"success\", \"ok\");\n        break;\n    }\n    // when using in-memory DBs non-overseer node has no access to overseer DBs - in this case\n    // forward the request to Overseer leader if available\n    if (!factory.isPersistent()) {\n      String leader = getOverseerLeader();\n      if (leader != null && !amIOverseerLeader(leader)) {\n        // get & merge remote response\n        NamedList<Object> remoteRes = handleRemoteRequest(leader, req);\n        mergeRemoteRes(rsp, remoteRes);\n      }\n    }\n    SimpleOrderedMap<Object> apiState = new SimpleOrderedMap<>();\n    apiState.add(\"enableReplicas\", enableReplicas);\n    apiState.add(\"enableNodes\", enableNodes);\n    apiState.add(\"mode\", enable ? (factory.isPersistent() ? \"index\" : \"memory\") : \"inactive\");\n    if (!factory.isPersistent()) {\n      apiState.add(\"message\", \"WARNING: metrics history is not being persisted. Create .system collection to start persisting history.\");\n    }\n    rsp.add(\"state\", apiState);\n    rsp.getResponseHeader().add(\"zkConnected\", cloudManager != null);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String actionStr = req.getParams().get(CommonParams.ACTION);\n    if (actionStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'action' is a required param\");\n    }\n    Cmd cmd = Cmd.get(actionStr);\n    if (cmd == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'action' param '\" + actionStr + \"', supported actions: \" + Cmd.actions);\n    }\n    Object res = null;\n    switch (cmd) {\n      case LIST:\n        int rows = req.getParams().getInt(CommonParams.ROWS, SolrRrdBackendFactory.DEFAULT_MAX_DBS);\n        res = factory.list(rows);\n        break;\n      case GET:\n        String name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        String[] dsNames = req.getParams().getParams(\"ds\");\n        String formatStr = req.getParams().get(\"format\", Format.LIST.toString());\n        Format format = Format.get(formatStr);\n        if (format == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'format' param '\" + formatStr + \"', supported formats: \" + Format.formats);\n        }\n        if (!factory.exists(name)) {\n          rsp.add(\"error\", \"'\" + name + \"' doesn't exist\");\n        } else {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          res = new NamedList<>();\n          NamedList<Object> data = new NamedList<>();\n          data.add(\"data\", getDbData(db, dsNames, format, req.getParams()));\n          ((NamedList)res).add(name, data);\n          db.close();\n        }\n        break;\n      case STATUS:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (!factory.exists(name)) {\n          rsp.add(\"error\", \"'\" + name + \"' doesn't exist\");\n        } else {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          NamedList<Object> map = new NamedList<>();\n          NamedList<Object> status = new NamedList<>();\n          status.add(\"status\", getDbStatus(db));\n          map.add(name, status);\n          db.close();\n          res = map;\n        }\n        break;\n      case DELETE:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (name.equalsIgnoreCase(\"all\") || name.equals(\"*\")) {\n          factory.removeAll();\n        } else {\n          factory.remove(name);\n        }\n        rsp.add(\"success\", \"ok\");\n        break;\n    }\n    if (res != null) {\n      rsp.add(\"metrics\", res);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d29562959e4f9c21557f699a0d964bb0c98f8e","date":1556102028,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String actionStr = req.getParams().get(CommonParams.ACTION);\n    if (actionStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'action' is a required param\");\n    }\n    Cmd cmd = Cmd.get(actionStr);\n    if (cmd == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'action' param '\" + actionStr + \"', supported actions: \" + Cmd.actions);\n    }\n    final SimpleOrderedMap<Object> res = new SimpleOrderedMap<>();\n    rsp.add(\"metrics\", res);\n    switch (cmd) {\n      case LIST:\n        int rows = req.getParams().getInt(CommonParams.ROWS, SolrRrdBackendFactory.DEFAULT_MAX_DBS);\n        List<Pair<String, Long>> lst = factory.list(rows);\n        lst.forEach(p -> {\n          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();\n          // RrdDb always uses seconds - convert here for compatibility\n          data.add(\"lastModified\", TimeUnit.SECONDS.convert(p.second(), TimeUnit.MILLISECONDS));\n          data.add(\"node\", nodeName);\n          res.add(p.first(), data);\n        });\n        break;\n      case GET:\n        String name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        String[] dsNames = req.getParams().getParams(\"ds\");\n        String formatStr = req.getParams().get(\"format\", Format.LIST.toString());\n        Format format = Format.get(formatStr);\n        if (format == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'format' param '\" + formatStr + \"', supported formats: \" + Format.formats);\n        }\n        if (factory.exists(name)) {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();\n          data.add(\"data\", getDbData(db, dsNames, format, req.getParams()));\n          data.add(\"lastModified\", db.getLastUpdateTime());\n          data.add(\"node\", nodeName);\n          res.add(name, data);\n          db.close();\n        }\n        break;\n      case STATUS:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (factory.exists(name)) {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = RrdDb.getBuilder().setBackendFactory(factory).setReadOnly(true).setPath(new URI(URI_PREFIX + name)).build();\n          SimpleOrderedMap<Object> status = new SimpleOrderedMap<>();\n          status.add(\"status\", getDbStatus(db));\n          status.add(\"node\", nodeName);\n          res.add(name, status);\n          db.close();\n        }\n        break;\n      case DELETE:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (name.equalsIgnoreCase(\"all\") || name.equals(\"*\")) {\n          factory.removeAll();\n        } else {\n          factory.remove(name);\n        }\n        rsp.add(\"success\", \"ok\");\n        break;\n    }\n    // when using in-memory DBs non-overseer node has no access to overseer DBs - in this case\n    // forward the request to Overseer leader if available\n    if (!factory.isPersistent()) {\n      String leader = getOverseerLeader();\n      if (leader != null && !amIOverseerLeader(leader)) {\n        // get & merge remote response\n        NamedList<Object> remoteRes = handleRemoteRequest(leader, req);\n        mergeRemoteRes(rsp, remoteRes);\n      }\n    }\n    SimpleOrderedMap<Object> apiState = new SimpleOrderedMap<>();\n    apiState.add(\"enableReplicas\", enableReplicas);\n    apiState.add(\"enableNodes\", enableNodes);\n    apiState.add(\"mode\", enable ? (factory.isPersistent() ? \"index\" : \"memory\") : \"inactive\");\n    if (!factory.isPersistent()) {\n      apiState.add(\"message\", \"WARNING: metrics history is not being persisted. Create .system collection to start persisting history.\");\n    }\n    rsp.add(\"state\", apiState);\n    rsp.getResponseHeader().add(\"zkConnected\", cloudManager != null);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String actionStr = req.getParams().get(CommonParams.ACTION);\n    if (actionStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'action' is a required param\");\n    }\n    Cmd cmd = Cmd.get(actionStr);\n    if (cmd == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'action' param '\" + actionStr + \"', supported actions: \" + Cmd.actions);\n    }\n    final SimpleOrderedMap<Object> res = new SimpleOrderedMap<>();\n    rsp.add(\"metrics\", res);\n    switch (cmd) {\n      case LIST:\n        int rows = req.getParams().getInt(CommonParams.ROWS, SolrRrdBackendFactory.DEFAULT_MAX_DBS);\n        List<Pair<String, Long>> lst = factory.list(rows);\n        lst.forEach(p -> {\n          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();\n          // RrdDb always uses seconds - convert here for compatibility\n          data.add(\"lastModified\", TimeUnit.SECONDS.convert(p.second(), TimeUnit.MILLISECONDS));\n          data.add(\"node\", nodeName);\n          res.add(p.first(), data);\n        });\n        break;\n      case GET:\n        String name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        String[] dsNames = req.getParams().getParams(\"ds\");\n        String formatStr = req.getParams().get(\"format\", Format.LIST.toString());\n        Format format = Format.get(formatStr);\n        if (format == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown 'format' param '\" + formatStr + \"', supported formats: \" + Format.formats);\n        }\n        if (factory.exists(name)) {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          SimpleOrderedMap<Object> data = new SimpleOrderedMap<>();\n          data.add(\"data\", getDbData(db, dsNames, format, req.getParams()));\n          data.add(\"lastModified\", db.getLastUpdateTime());\n          data.add(\"node\", nodeName);\n          res.add(name, data);\n          db.close();\n        }\n        break;\n      case STATUS:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (factory.exists(name)) {\n          // get a throwaway copy (safe to close and discard)\n          RrdDb db = new RrdDb(URI_PREFIX + name, true, factory);\n          SimpleOrderedMap<Object> status = new SimpleOrderedMap<>();\n          status.add(\"status\", getDbStatus(db));\n          status.add(\"node\", nodeName);\n          res.add(name, status);\n          db.close();\n        }\n        break;\n      case DELETE:\n        name = req.getParams().get(CommonParams.NAME);\n        if (name == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'name' is a required param\");\n        }\n        if (name.equalsIgnoreCase(\"all\") || name.equals(\"*\")) {\n          factory.removeAll();\n        } else {\n          factory.remove(name);\n        }\n        rsp.add(\"success\", \"ok\");\n        break;\n    }\n    // when using in-memory DBs non-overseer node has no access to overseer DBs - in this case\n    // forward the request to Overseer leader if available\n    if (!factory.isPersistent()) {\n      String leader = getOverseerLeader();\n      if (leader != null && !amIOverseerLeader(leader)) {\n        // get & merge remote response\n        NamedList<Object> remoteRes = handleRemoteRequest(leader, req);\n        mergeRemoteRes(rsp, remoteRes);\n      }\n    }\n    SimpleOrderedMap<Object> apiState = new SimpleOrderedMap<>();\n    apiState.add(\"enableReplicas\", enableReplicas);\n    apiState.add(\"enableNodes\", enableNodes);\n    apiState.add(\"mode\", enable ? (factory.isPersistent() ? \"index\" : \"memory\") : \"inactive\");\n    if (!factory.isPersistent()) {\n      apiState.add(\"message\", \"WARNING: metrics history is not being persisted. Create .system collection to start persisting history.\");\n    }\n    rsp.add(\"state\", apiState);\n    rsp.getResponseHeader().add(\"zkConnected\", cloudManager != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"58d29562959e4f9c21557f699a0d964bb0c98f8e":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58d29562959e4f9c21557f699a0d964bb0c98f8e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"]},"commit2Childs":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","58d29562959e4f9c21557f699a0d964bb0c98f8e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"58d29562959e4f9c21557f699a0d964bb0c98f8e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}