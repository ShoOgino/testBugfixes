{"path":"lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","commits":[{"id":"fb8c6c8b35c7806f1ef4d37d52944b67158db2d1","date":1323375642,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = IndexReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexSearcher.close();\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = IndexReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexSearcher.close();\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","sourceNew":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = IndexReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","sourceOld":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = IndexReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexSearcher.close();\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","sourceNew":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = IndexReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","sourceOld":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = IndexReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexSearcher.close();\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrashCausesCorruptIndex#searchForFleas(int).mjava","sourceNew":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = IndexReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","sourceOld":"  /**\n   * Run an example search.\n   * \n   * @throws IOException\n   * @throws ParseException\n   */\n  private void searchForFleas(final int expectedTotalHits) throws IOException {\n    Directory realDirectory = newFSDirectory(path);\n    IndexReader indexReader = IndexReader.open(realDirectory);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    TopDocs topDocs = indexSearcher.search(new TermQuery(new Term(TEXT_FIELD, \"fleas\")), 10);\n    assertNotNull(topDocs);\n    assertEquals(expectedTotalHits, topDocs.totalHits);\n    indexReader.close();\n    realDirectory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb8c6c8b35c7806f1ef4d37d52944b67158db2d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["fb8c6c8b35c7806f1ef4d37d52944b67158db2d1"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb8c6c8b35c7806f1ef4d37d52944b67158db2d1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"fb8c6c8b35c7806f1ef4d37d52944b67158db2d1":["0e7c2454a6a8237bfd0e953f5b940838408c9055","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb8c6c8b35c7806f1ef4d37d52944b67158db2d1","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}