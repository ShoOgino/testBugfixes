{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#relateTriangle(double,double,double,double,double,double).mjava","commits":[{"id":"a5ee4d410ec4b99dc713f05e20a22e802b89a92f","date":1548973182,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#relateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#crossesTriangle(double,double,double,double,double,double).mjava","sourceNew":"    /** Returns true if the triangle crosses any edge in this edge subtree */\n    Relation relateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n      // compute bounding box of triangle\n      double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n      double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n\n      Relation r = Relation.CELL_OUTSIDE_QUERY;\n      if (minLat <= max) {\n        double dy = lat1;\n        double ey = lat2;\n        double dx = lon1;\n        double ex = lon2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minLat && ey < minLat) ||\n            (dy > maxLat && ey > maxLat) ||\n            (dx < minLon && ex < minLon) ||\n            (dx > maxLon && ex > maxLon);\n\n        if (outside == false) {\n          int insideEdges = 0;\n          // does triangle's first edge intersect polyline?\n          // ax, ay -> bx, by\n          if ((r = lineRelateLine(ax, ay, bx, by, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n\n          // does triangle's second edge intersect polyline?\n          // bx, by -> cx, cy\n          if ((r = lineRelateLine(bx, by, cx, cy, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n\n          // does triangle's third edge intersect polyline?\n          // cx, cy -> ax, ay\n          if ((r = lineRelateLine(cx, cy, ax, ay, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n          if (insideEdges == 3) {\n            return Relation.CELL_INSIDE_QUERY;\n          }\n        }\n\n        if (left != null) {\n          if ((r = left.relateTriangle(ax, ay, bx, by, cx, cy)) != Relation.CELL_OUTSIDE_QUERY) {\n            return r;\n          }\n        }\n\n        if (right != null && maxLat >= low) {\n          if ((r = right.relateTriangle(ax, ay, bx, by, cx, cy)) != Relation.CELL_OUTSIDE_QUERY) {\n            return r;\n          }\n        }\n      }\n      return r;\n    }\n\n","sourceOld":"    /** Returns true if the triangle crosses any edge in this edge subtree */\n    boolean crossesTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n      // compute bounding box of triangle\n      double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n      double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n\n      if (minLat <= max) {\n        double dy = lat1;\n        double ey = lat2;\n        double dx = lon1;\n        double ex = lon2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minLat && ey < minLat) ||\n            (dy > maxLat && ey > maxLat) ||\n            (dx < minLon && ex < minLon) ||\n            (dx > maxLon && ex > maxLon);\n\n        if (outside == false) {\n          // does triangle's first edge intersect polyline?\n          // ax, ay -> bx, by\n          if (lineCrossesLine(ax, ay, bx, by, dx, dy, ex, ey)) {\n            return true;\n          }\n\n          // does triangle's second edge intersect polyline?\n          // bx, by -> cx, cy\n          if (lineCrossesLine(bx, by, cx, cy, dx, dy, ex, ey)) {\n            return true;\n          }\n\n          // does triangle's third edge intersect polyline?\n          // cx, cy -> ax, ay\n          if (lineCrossesLine(cx, cy, ax, ay, dx, dy, ex, ey)) {\n            return true;\n          }\n        }\n\n        if (left != null) {\n          if (left.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n            return true;\n          }\n        }\n\n        if (right != null && maxLat >= low) {\n          if (right.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d2f6101a3e7eca8feaee5af6b97acbd588d363","date":1549016611,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#relateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#relateTriangle(double,double,double,double,double,double).mjava","sourceNew":"    /** Returns true if the triangle crosses any edge in this edge subtree */\n    Relation relateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n      // compute bounding box of triangle\n      double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n      double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n\n      Relation r = Relation.CELL_OUTSIDE_QUERY;\n      if (minLat <= max) {\n        double dy = lat1;\n        double ey = lat2;\n        double dx = lon1;\n        double ex = lon2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minLat && ey < minLat) ||\n            (dy > maxLat && ey > maxLat) ||\n            (dx < minLon && ex < minLon) ||\n            (dx > maxLon && ex > maxLon);\n\n        if (outside == false) {\n          int insideEdges = 0;\n          // does triangle's first edge intersect polyline?\n          // ax, ay -> bx, by\n          if ((r = lineRelateLine(ax, ay, bx, by, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n\n          // does triangle's second edge intersect polyline?\n          // bx, by -> cx, cy\n          if ((r = lineRelateLine(bx, by, cx, cy, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n\n          // does triangle's third edge intersect polyline?\n          // cx, cy -> ax, ay\n          if ((r = lineRelateLine(cx, cy, ax, ay, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n          if (insideEdges == 3) {\n            // fully inside, we can return\n            return Relation.CELL_INSIDE_QUERY;\n          } else {\n            //reset relation to not crossing\n            r =  Relation.CELL_OUTSIDE_QUERY;\n          }\n        }\n\n        if (left != null) {\n          if ((r = left.relateTriangle(ax, ay, bx, by, cx, cy)) != Relation.CELL_OUTSIDE_QUERY) {\n            return r;\n          }\n        }\n\n        if (right != null && maxLat >= low) {\n          if ((r = right.relateTriangle(ax, ay, bx, by, cx, cy)) != Relation.CELL_OUTSIDE_QUERY) {\n            return r;\n          }\n        }\n      }\n      return r;\n    }\n\n","sourceOld":"    /** Returns true if the triangle crosses any edge in this edge subtree */\n    Relation relateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n      // compute bounding box of triangle\n      double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n      double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n\n      Relation r = Relation.CELL_OUTSIDE_QUERY;\n      if (minLat <= max) {\n        double dy = lat1;\n        double ey = lat2;\n        double dx = lon1;\n        double ex = lon2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minLat && ey < minLat) ||\n            (dy > maxLat && ey > maxLat) ||\n            (dx < minLon && ex < minLon) ||\n            (dx > maxLon && ex > maxLon);\n\n        if (outside == false) {\n          int insideEdges = 0;\n          // does triangle's first edge intersect polyline?\n          // ax, ay -> bx, by\n          if ((r = lineRelateLine(ax, ay, bx, by, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n\n          // does triangle's second edge intersect polyline?\n          // bx, by -> cx, cy\n          if ((r = lineRelateLine(bx, by, cx, cy, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n\n          // does triangle's third edge intersect polyline?\n          // cx, cy -> ax, ay\n          if ((r = lineRelateLine(cx, cy, ax, ay, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n          if (insideEdges == 3) {\n            return Relation.CELL_INSIDE_QUERY;\n          }\n        }\n\n        if (left != null) {\n          if ((r = left.relateTriangle(ax, ay, bx, by, cx, cy)) != Relation.CELL_OUTSIDE_QUERY) {\n            return r;\n          }\n        }\n\n        if (right != null && maxLat >= low) {\n          if ((r = right.relateTriangle(ax, ay, bx, by, cx, cy)) != Relation.CELL_OUTSIDE_QUERY) {\n            return r;\n          }\n        }\n      }\n      return r;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dffcd36f1a87df1300807d9580eb05aa37726397","date":1552376454,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#crossesTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#relateTriangle(double,double,double,double,double,double).mjava","sourceNew":"    /** Returns true if the triangle crosses any edge in this edge subtree */\n    boolean crossesTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n      // compute bounding box of triangle\n      double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n      double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n\n      if (minLat <= max) {\n        double dy = lat1;\n        double ey = lat2;\n        double dx = lon1;\n        double ex = lon2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minLat && ey < minLat) ||\n            (dy > maxLat && ey > maxLat) ||\n            (dx < minLon && ex < minLon) ||\n            (dx > maxLon && ex > maxLon);\n\n        if (dateline == false && outside == false) {\n          // does triangle's first edge intersect polyline?\n          // ax, ay -> bx, by\n          if (lineCrossesLine(ax, ay, bx, by, dx, dy, ex, ey)) {\n            return true;\n          }\n\n          // does triangle's second edge intersect polyline?\n          // bx, by -> cx, cy\n          if (lineCrossesLine(bx, by, cx, cy, dx, dy, ex, ey)) {\n            return true;\n          }\n\n          // does triangle's third edge intersect polyline?\n          // cx, cy -> ax, ay\n          if (lineCrossesLine(cx, cy, ax, ay, dx, dy, ex, ey)) {\n            return true;\n          }\n        }\n\n        if (left != null) {\n          if (left.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n            return true;\n          }\n        }\n\n        if (right != null && maxLat >= low) {\n          if (right.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"    /** Returns true if the triangle crosses any edge in this edge subtree */\n    Relation relateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n      // compute bounding box of triangle\n      double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n      double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n\n      Relation r = Relation.CELL_OUTSIDE_QUERY;\n      if (minLat <= max) {\n        double dy = lat1;\n        double ey = lat2;\n        double dx = lon1;\n        double ex = lon2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minLat && ey < minLat) ||\n            (dy > maxLat && ey > maxLat) ||\n            (dx < minLon && ex < minLon) ||\n            (dx > maxLon && ex > maxLon);\n\n        if (outside == false) {\n          int insideEdges = 0;\n          // does triangle's first edge intersect polyline?\n          // ax, ay -> bx, by\n          if ((r = lineRelateLine(ax, ay, bx, by, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n\n          // does triangle's second edge intersect polyline?\n          // bx, by -> cx, cy\n          if ((r = lineRelateLine(bx, by, cx, cy, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n\n          // does triangle's third edge intersect polyline?\n          // cx, cy -> ax, ay\n          if ((r = lineRelateLine(cx, cy, ax, ay, dx, dy, ex, ey)) == Relation.CELL_CROSSES_QUERY) {\n            return r;\n          } else if (r == Relation.CELL_INSIDE_QUERY) {\n            ++insideEdges;\n          }\n          if (insideEdges == 3) {\n            // fully inside, we can return\n            return Relation.CELL_INSIDE_QUERY;\n          } else {\n            //reset relation to not crossing\n            r =  Relation.CELL_OUTSIDE_QUERY;\n          }\n        }\n\n        if (left != null) {\n          if ((r = left.relateTriangle(ax, ay, bx, by, cx, cy)) != Relation.CELL_OUTSIDE_QUERY) {\n            return r;\n          }\n        }\n\n        if (right != null && maxLat >= low) {\n          if ((r = right.relateTriangle(ax, ay, bx, by, cx, cy)) != Relation.CELL_OUTSIDE_QUERY) {\n            return r;\n          }\n        }\n      }\n      return r;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dffcd36f1a87df1300807d9580eb05aa37726397":["61d2f6101a3e7eca8feaee5af6b97acbd588d363"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61d2f6101a3e7eca8feaee5af6b97acbd588d363":["a5ee4d410ec4b99dc713f05e20a22e802b89a92f"],"a5ee4d410ec4b99dc713f05e20a22e802b89a92f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dffcd36f1a87df1300807d9580eb05aa37726397"]},"commit2Childs":{"dffcd36f1a87df1300807d9580eb05aa37726397":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5ee4d410ec4b99dc713f05e20a22e802b89a92f"],"61d2f6101a3e7eca8feaee5af6b97acbd588d363":["dffcd36f1a87df1300807d9580eb05aa37726397"],"a5ee4d410ec4b99dc713f05e20a22e802b89a92f":["61d2f6101a3e7eca8feaee5af6b97acbd588d363"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}