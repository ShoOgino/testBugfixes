{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","commits":[{"id":"d0af0c31a687dd847212ae59f661152896c76516","date":1380727430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<TermFreq> keys = shuffle(\n        new TermFreq(\"foo bar baz blah\", 50),\n        new TermFreq(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new TermFreqArrayIterator(keys));\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = _TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<TermFreqPayload> keys = shuffle(\n        new TermFreqPayload(\"foo bar baz blah\", 50),\n        new TermFreqPayload(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new TermFreqPayloadArrayIterator(keys));\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = _TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Iterable<TermFreq> keys = shuffle(\n        new TermFreq(\"foo bar baz blah\", 50),\n        new TermFreq(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new TermFreqArrayIterator(keys));\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = _TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = _TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Iterable<TermFreqPayload> keys = shuffle(\n        new TermFreqPayload(\"foo bar baz blah\", 50),\n        new TermFreqPayload(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new TermFreqPayloadArrayIterator(keys));\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = _TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = _TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = _TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = _TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"374870f2181bf8cd93a47df5d988855dfab6f7cd","date":1395589518,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = TestUtil.createTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = createTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = TestUtil.createTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = createTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = TestUtil.getTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      Path tmpDir = createTempDir(\"FreeTextSuggesterTest\");\n\n      Path path = tmpDir.resolve(\"suggester\");\n\n      OutputStream os = Files.newOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = Files.newInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      File tmpDir = createTempDir(\"FreeTextSuggesterTest\");\n      tmpDir.mkdir();\n\n      File path = new File(tmpDir, \"suggester\");\n\n      OutputStream os = new FileOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = new FileInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      Path tmpDir = createTempDir(\"FreeTextSuggesterTest\");\n\n      Path path = tmpDir.resolve(\"suggester\");\n\n      OutputStream os = Files.newOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = Files.newInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n    a.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      Path tmpDir = createTempDir(\"FreeTextSuggesterTest\");\n\n      Path path = tmpDir.resolve(\"suggester\");\n\n      OutputStream os = Files.newOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = Files.newInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      Path tmpDir = createTempDir(\"FreeTextSuggesterTest\");\n\n      Path path = tmpDir.resolve(\"suggester\");\n\n      OutputStream os = Files.newOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = Files.newInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n    a.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo bar baz blah\", 50),\n        new Input(\"boo foo bar foo bee\", 20)\n    );\n\n    Analyzer a = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(2, sug.getCount());\n\n    for(int i=0;i<2;i++) {\n\n      // Uses bigram model and unigram backoff:\n      assertEquals(\"foo bar/0.67 foo bee/0.33 baz/0.04 blah/0.04 boo/0.04\",\n                   toString(sug.lookup(\"foo b\", 10)));\n\n      // Uses only bigram model:\n      assertEquals(\"foo bar/0.67 foo bee/0.33\",\n                   toString(sug.lookup(\"foo \", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"foo/0.33\",\n                   toString(sug.lookup(\"foo\", 10)));\n\n      // Uses only unigram model:\n      assertEquals(\"bar/0.22 baz/0.11 bee/0.11 blah/0.11 boo/0.11\",\n                   toString(sug.lookup(\"b\", 10)));\n\n      // Try again after save/load:\n      Path tmpDir = createTempDir(\"FreeTextSuggesterTest\");\n\n      Path path = tmpDir.resolve(\"suggester\");\n\n      OutputStream os = Files.newOutputStream(path);\n      sug.store(os);\n      os.close();\n\n      InputStream is = Files.newInputStream(path);\n      sug = new FreeTextSuggester(a, a, 2, (byte) 0x20);\n      sug.load(is);\n      is.close();\n      assertEquals(2, sug.getCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["374870f2181bf8cd93a47df5d988855dfab6f7cd","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"d0d579490a72f2e6297eaa648940611234c57cf1":["374870f2181bf8cd93a47df5d988855dfab6f7cd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f4abec28b874149a7223e32cc7a01704c27790de","a56958d7f71a28824f20031ffbb2e13502a0274e"],"d0af0c31a687dd847212ae59f661152896c76516":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"374870f2181bf8cd93a47df5d988855dfab6f7cd":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["d0af0c31a687dd847212ae59f661152896c76516"]},"commit2Childs":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"6613659748fe4411a7dcf85266e55db1f95f7315":["374870f2181bf8cd93a47df5d988855dfab6f7cd"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["6613659748fe4411a7dcf85266e55db1f95f7315"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"d0af0c31a687dd847212ae59f661152896c76516":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0af0c31a687dd847212ae59f661152896c76516"],"374870f2181bf8cd93a47df5d988855dfab6f7cd":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}