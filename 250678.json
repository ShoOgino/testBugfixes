{"path":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getTagsForNodes(SolrCloudManager,List).mjava","commits":[{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getTagsForNodes(SolrCloudManager,List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getTagsForNodes(CoreContainer,List).mjava","sourceNew":"  /**\n   * This method uses the snitches and get the tags for all the nodes\n   */\n  private Map<String, Map<String, Object>> getTagsForNodes(final SolrCloudManager cloudManager, List snitchConf) {\n\n    Map<Class, SnitchInfoImpl> snitches = getSnitchInfos(cloudManager, snitchConf);\n    for (Class c : Snitch.WELL_KNOWN_SNITCHES) {\n      if (snitches.containsKey(c)) continue;// it is already specified explicitly , ignore\n      try {\n        snitches.put(c, new SnitchInfoImpl(Collections.EMPTY_MAP, (Snitch) c.newInstance(), cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error instantiating Snitch \" + c.getName());\n      }\n    }\n    for (String tagName : tagNames) {\n      //identify which snitch is going to provide values for a given tag\n      boolean foundProvider = false;\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (info.snitch.isKnownTag(tagName)) {\n          foundProvider = true;\n          info.myTags.add(tagName);\n          break;\n        }\n      }\n      if (!foundProvider)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown tag in rules \" + tagName);\n    }\n\n\n    for (String node : participatingLiveNodes) {\n      //now use the Snitch to get the tags\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (!info.myTags.isEmpty()) {\n          SnitchContext context = getSnitchCtx(node, info, cloudManager);\n          info.nodeVsContext.put(node, context);\n          try {\n            info.snitch.getTags(node, info.myTags, context);\n          } catch (Exception e) {\n            context.exception = e;\n          }\n        }\n      }\n    }\n\n    Map<String, Map<String, Object>> result = new HashMap<>();\n    for (SnitchInfoImpl info : snitches.values()) {\n      for (Map.Entry<String, SnitchContext> e : info.nodeVsContext.entrySet()) {\n        SnitchContext context = e.getValue();\n        String node = e.getKey();\n        if (context.exception != null) {\n          failedNodes.put(node, context);\n          participatingLiveNodes.remove(node);\n          log.warn(\"Not all tags were obtained from node \" + node, context.exception);\n          context.exception = new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not all tags were obtained from node \" + node);\n        } else {\n          Map<String, Object> tags = result.get(node);\n          if (tags == null) {\n            tags = new HashMap<>();\n            result.put(node, tags);\n          }\n          tags.putAll(context.getTags());\n        }\n      }\n    }\n\n    if (participatingLiveNodes.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not get all tags for any nodes\");\n\n    }\n    return result;\n\n  }\n\n","sourceOld":"  /**\n   * This method uses the snitches and get the tags for all the nodes\n   */\n  private Map<String, Map<String, Object>> getTagsForNodes(final CoreContainer cc, List snitchConf) {\n\n    Map<Class, SnitchInfoImpl> snitches = getSnitchInfos(cc, snitchConf);\n    for (Class c : Snitch.WELL_KNOWN_SNITCHES) {\n      if (snitches.containsKey(c)) continue;// it is already specified explicitly , ignore\n      try {\n        snitches.put(c, new SnitchInfoImpl(Collections.EMPTY_MAP, (Snitch) c.newInstance(), cc));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error instantiating Snitch \" + c.getName());\n      }\n    }\n    for (String tagName : tagNames) {\n      //identify which snitch is going to provide values for a given tag\n      boolean foundProvider = false;\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (info.snitch.isKnownTag(tagName)) {\n          foundProvider = true;\n          info.myTags.add(tagName);\n          break;\n        }\n      }\n      if (!foundProvider)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown tag in rules \" + tagName);\n    }\n\n\n    for (String node : participatingLiveNodes) {\n      //now use the Snitch to get the tags\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (!info.myTags.isEmpty()) {\n          SnitchContext context = getSnitchCtx(node, info, cc);\n          info.nodeVsContext.put(node, context);\n          try {\n            info.snitch.getTags(node, info.myTags, context);\n          } catch (Exception e) {\n            context.exception = e;\n          }\n        }\n      }\n    }\n\n    Map<String, Map<String, Object>> result = new HashMap<>();\n    for (SnitchInfoImpl info : snitches.values()) {\n      for (Map.Entry<String, SnitchContext> e : info.nodeVsContext.entrySet()) {\n        SnitchContext context = e.getValue();\n        String node = e.getKey();\n        if (context.exception != null) {\n          failedNodes.put(node, context);\n          participatingLiveNodes.remove(node);\n          log.warn(\"Not all tags were obtained from node \" + node, context.exception);\n          context.exception = new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not all tags were obtained from node \" + node);\n        } else {\n          Map<String, Object> tags = result.get(node);\n          if (tags == null) {\n            tags = new HashMap<>();\n            result.put(node, tags);\n          }\n          tags.putAll(context.getTags());\n        }\n      }\n    }\n\n    if (participatingLiveNodes.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not get all tags for any nodes\");\n\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getTagsForNodes(SolrCloudManager,List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getTagsForNodes(SolrCloudManager,List).mjava","sourceNew":"  /**\n   * This method uses the snitches and get the tags for all the nodes\n   */\n  private Map<String, Map<String, Object>> getTagsForNodes(final SolrCloudManager cloudManager, List snitchConf) {\n\n    Map<Class, SnitchInfoImpl> snitches = getSnitchInfos(cloudManager, snitchConf);\n    for (Class c : Snitch.WELL_KNOWN_SNITCHES) {\n      if (snitches.containsKey(c)) continue;// it is already specified explicitly , ignore\n      try {\n        snitches.put(c, new SnitchInfoImpl(Collections.EMPTY_MAP, (Snitch) c.getConstructor().newInstance(), cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error instantiating Snitch \" + c.getName());\n      }\n    }\n    for (String tagName : tagNames) {\n      //identify which snitch is going to provide values for a given tag\n      boolean foundProvider = false;\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (info.snitch.isKnownTag(tagName)) {\n          foundProvider = true;\n          info.myTags.add(tagName);\n          break;\n        }\n      }\n      if (!foundProvider)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown tag in rules \" + tagName);\n    }\n\n\n    for (String node : participatingLiveNodes) {\n      //now use the Snitch to get the tags\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (!info.myTags.isEmpty()) {\n          SnitchContext context = getSnitchCtx(node, info, cloudManager);\n          info.nodeVsContext.put(node, context);\n          try {\n            info.snitch.getTags(node, info.myTags, context);\n          } catch (Exception e) {\n            context.exception = e;\n          }\n        }\n      }\n    }\n\n    Map<String, Map<String, Object>> result = new HashMap<>();\n    for (SnitchInfoImpl info : snitches.values()) {\n      for (Map.Entry<String, SnitchContext> e : info.nodeVsContext.entrySet()) {\n        SnitchContext context = e.getValue();\n        String node = e.getKey();\n        if (context.exception != null) {\n          failedNodes.put(node, context);\n          participatingLiveNodes.remove(node);\n          log.warn(\"Not all tags were obtained from node \" + node, context.exception);\n          context.exception = new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not all tags were obtained from node \" + node);\n        } else {\n          Map<String, Object> tags = result.get(node);\n          if (tags == null) {\n            tags = new HashMap<>();\n            result.put(node, tags);\n          }\n          tags.putAll(context.getTags());\n        }\n      }\n    }\n\n    if (participatingLiveNodes.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not get all tags for any nodes\");\n\n    }\n    return result;\n\n  }\n\n","sourceOld":"  /**\n   * This method uses the snitches and get the tags for all the nodes\n   */\n  private Map<String, Map<String, Object>> getTagsForNodes(final SolrCloudManager cloudManager, List snitchConf) {\n\n    Map<Class, SnitchInfoImpl> snitches = getSnitchInfos(cloudManager, snitchConf);\n    for (Class c : Snitch.WELL_KNOWN_SNITCHES) {\n      if (snitches.containsKey(c)) continue;// it is already specified explicitly , ignore\n      try {\n        snitches.put(c, new SnitchInfoImpl(Collections.EMPTY_MAP, (Snitch) c.newInstance(), cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error instantiating Snitch \" + c.getName());\n      }\n    }\n    for (String tagName : tagNames) {\n      //identify which snitch is going to provide values for a given tag\n      boolean foundProvider = false;\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (info.snitch.isKnownTag(tagName)) {\n          foundProvider = true;\n          info.myTags.add(tagName);\n          break;\n        }\n      }\n      if (!foundProvider)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown tag in rules \" + tagName);\n    }\n\n\n    for (String node : participatingLiveNodes) {\n      //now use the Snitch to get the tags\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (!info.myTags.isEmpty()) {\n          SnitchContext context = getSnitchCtx(node, info, cloudManager);\n          info.nodeVsContext.put(node, context);\n          try {\n            info.snitch.getTags(node, info.myTags, context);\n          } catch (Exception e) {\n            context.exception = e;\n          }\n        }\n      }\n    }\n\n    Map<String, Map<String, Object>> result = new HashMap<>();\n    for (SnitchInfoImpl info : snitches.values()) {\n      for (Map.Entry<String, SnitchContext> e : info.nodeVsContext.entrySet()) {\n        SnitchContext context = e.getValue();\n        String node = e.getKey();\n        if (context.exception != null) {\n          failedNodes.put(node, context);\n          participatingLiveNodes.remove(node);\n          log.warn(\"Not all tags were obtained from node \" + node, context.exception);\n          context.exception = new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not all tags were obtained from node \" + node);\n        } else {\n          Map<String, Object> tags = result.get(node);\n          if (tags == null) {\n            tags = new HashMap<>();\n            result.put(node, tags);\n          }\n          tags.putAll(context.getTags());\n        }\n      }\n    }\n\n    if (participatingLiveNodes.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not get all tags for any nodes\");\n\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getTagsForNodes(SolrCloudManager,List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getTagsForNodes(SolrCloudManager,List).mjava","sourceNew":"  /**\n   * This method uses the snitches and get the tags for all the nodes\n   */\n  private Map<String, Map<String, Object>> getTagsForNodes(final SolrCloudManager cloudManager, List snitchConf) {\n\n    Map<Class, SnitchInfoImpl> snitches = getSnitchInfos(cloudManager, snitchConf);\n    for (Class c : Snitch.WELL_KNOWN_SNITCHES) {\n      if (snitches.containsKey(c)) continue;// it is already specified explicitly , ignore\n      try {\n        snitches.put(c, new SnitchInfoImpl(Collections.EMPTY_MAP, (Snitch) c.getConstructor().newInstance(), cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error instantiating Snitch \" + c.getName());\n      }\n    }\n    for (String tagName : tagNames) {\n      //identify which snitch is going to provide values for a given tag\n      boolean foundProvider = false;\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (info.snitch.isKnownTag(tagName)) {\n          foundProvider = true;\n          info.myTags.add(tagName);\n          break;\n        }\n      }\n      if (!foundProvider)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown tag in rules \" + tagName);\n    }\n\n\n    for (String node : participatingLiveNodes) {\n      //now use the Snitch to get the tags\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (!info.myTags.isEmpty()) {\n          SnitchContext context = getSnitchCtx(node, info, cloudManager);\n          info.nodeVsContext.put(node, context);\n          try {\n            info.snitch.getTags(node, info.myTags, context);\n          } catch (Exception e) {\n            context.exception = e;\n          }\n        }\n      }\n    }\n\n    Map<String, Map<String, Object>> result = new HashMap<>();\n    for (SnitchInfoImpl info : snitches.values()) {\n      for (Map.Entry<String, SnitchContext> e : info.nodeVsContext.entrySet()) {\n        SnitchContext context = e.getValue();\n        String node = e.getKey();\n        if (context.exception != null) {\n          failedNodes.put(node, context);\n          participatingLiveNodes.remove(node);\n          log.warn(\"Not all tags were obtained from node {}\", node, context.exception);\n          context.exception = new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not all tags were obtained from node \" + node);\n        } else {\n          Map<String, Object> tags = result.get(node);\n          if (tags == null) {\n            tags = new HashMap<>();\n            result.put(node, tags);\n          }\n          tags.putAll(context.getTags());\n        }\n      }\n    }\n\n    if (participatingLiveNodes.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not get all tags for any nodes\");\n\n    }\n    return result;\n\n  }\n\n","sourceOld":"  /**\n   * This method uses the snitches and get the tags for all the nodes\n   */\n  private Map<String, Map<String, Object>> getTagsForNodes(final SolrCloudManager cloudManager, List snitchConf) {\n\n    Map<Class, SnitchInfoImpl> snitches = getSnitchInfos(cloudManager, snitchConf);\n    for (Class c : Snitch.WELL_KNOWN_SNITCHES) {\n      if (snitches.containsKey(c)) continue;// it is already specified explicitly , ignore\n      try {\n        snitches.put(c, new SnitchInfoImpl(Collections.EMPTY_MAP, (Snitch) c.getConstructor().newInstance(), cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error instantiating Snitch \" + c.getName());\n      }\n    }\n    for (String tagName : tagNames) {\n      //identify which snitch is going to provide values for a given tag\n      boolean foundProvider = false;\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (info.snitch.isKnownTag(tagName)) {\n          foundProvider = true;\n          info.myTags.add(tagName);\n          break;\n        }\n      }\n      if (!foundProvider)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown tag in rules \" + tagName);\n    }\n\n\n    for (String node : participatingLiveNodes) {\n      //now use the Snitch to get the tags\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (!info.myTags.isEmpty()) {\n          SnitchContext context = getSnitchCtx(node, info, cloudManager);\n          info.nodeVsContext.put(node, context);\n          try {\n            info.snitch.getTags(node, info.myTags, context);\n          } catch (Exception e) {\n            context.exception = e;\n          }\n        }\n      }\n    }\n\n    Map<String, Map<String, Object>> result = new HashMap<>();\n    for (SnitchInfoImpl info : snitches.values()) {\n      for (Map.Entry<String, SnitchContext> e : info.nodeVsContext.entrySet()) {\n        SnitchContext context = e.getValue();\n        String node = e.getKey();\n        if (context.exception != null) {\n          failedNodes.put(node, context);\n          participatingLiveNodes.remove(node);\n          log.warn(\"Not all tags were obtained from node \" + node, context.exception);\n          context.exception = new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not all tags were obtained from node \" + node);\n        } else {\n          Map<String, Object> tags = result.get(node);\n          if (tags == null) {\n            tags = new HashMap<>();\n            result.put(node, tags);\n          }\n          tags.putAll(context.getTags());\n        }\n      }\n    }\n\n    if (participatingLiveNodes.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not get all tags for any nodes\");\n\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getTagsForNodes(SolrCloudManager,List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getTagsForNodes(SolrCloudManager,List).mjava","sourceNew":"  /**\n   * This method uses the snitches and get the tags for all the nodes\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private Map<String, Map<String, Object>> getTagsForNodes(final SolrCloudManager cloudManager, @SuppressWarnings({\"rawtypes\"})List snitchConf) {\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map<Class, SnitchInfoImpl> snitches = getSnitchInfos(cloudManager, snitchConf);\n    for (@SuppressWarnings({\"rawtypes\"})Class c : Snitch.WELL_KNOWN_SNITCHES) {\n      if (snitches.containsKey(c)) continue;// it is already specified explicitly , ignore\n      try {\n        snitches.put(c, new SnitchInfoImpl(Collections.EMPTY_MAP, (Snitch) c.getConstructor().newInstance(), cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error instantiating Snitch \" + c.getName());\n      }\n    }\n    for (String tagName : tagNames) {\n      //identify which snitch is going to provide values for a given tag\n      boolean foundProvider = false;\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (info.snitch.isKnownTag(tagName)) {\n          foundProvider = true;\n          info.myTags.add(tagName);\n          break;\n        }\n      }\n      if (!foundProvider)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown tag in rules \" + tagName);\n    }\n\n\n    for (String node : participatingLiveNodes) {\n      //now use the Snitch to get the tags\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (!info.myTags.isEmpty()) {\n          SnitchContext context = getSnitchCtx(node, info, cloudManager);\n          info.nodeVsContext.put(node, context);\n          try {\n            info.snitch.getTags(node, info.myTags, context);\n          } catch (Exception e) {\n            context.exception = e;\n          }\n        }\n      }\n    }\n\n    Map<String, Map<String, Object>> result = new HashMap<>();\n    for (SnitchInfoImpl info : snitches.values()) {\n      for (Map.Entry<String, SnitchContext> e : info.nodeVsContext.entrySet()) {\n        SnitchContext context = e.getValue();\n        String node = e.getKey();\n        if (context.exception != null) {\n          failedNodes.put(node, context);\n          participatingLiveNodes.remove(node);\n          log.warn(\"Not all tags were obtained from node {}\", node, context.exception);\n          context.exception = new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not all tags were obtained from node \" + node);\n        } else {\n          Map<String, Object> tags = result.get(node);\n          if (tags == null) {\n            tags = new HashMap<>();\n            result.put(node, tags);\n          }\n          tags.putAll(context.getTags());\n        }\n      }\n    }\n\n    if (participatingLiveNodes.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not get all tags for any nodes\");\n\n    }\n    return result;\n\n  }\n\n","sourceOld":"  /**\n   * This method uses the snitches and get the tags for all the nodes\n   */\n  private Map<String, Map<String, Object>> getTagsForNodes(final SolrCloudManager cloudManager, List snitchConf) {\n\n    Map<Class, SnitchInfoImpl> snitches = getSnitchInfos(cloudManager, snitchConf);\n    for (Class c : Snitch.WELL_KNOWN_SNITCHES) {\n      if (snitches.containsKey(c)) continue;// it is already specified explicitly , ignore\n      try {\n        snitches.put(c, new SnitchInfoImpl(Collections.EMPTY_MAP, (Snitch) c.getConstructor().newInstance(), cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error instantiating Snitch \" + c.getName());\n      }\n    }\n    for (String tagName : tagNames) {\n      //identify which snitch is going to provide values for a given tag\n      boolean foundProvider = false;\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (info.snitch.isKnownTag(tagName)) {\n          foundProvider = true;\n          info.myTags.add(tagName);\n          break;\n        }\n      }\n      if (!foundProvider)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown tag in rules \" + tagName);\n    }\n\n\n    for (String node : participatingLiveNodes) {\n      //now use the Snitch to get the tags\n      for (SnitchInfoImpl info : snitches.values()) {\n        if (!info.myTags.isEmpty()) {\n          SnitchContext context = getSnitchCtx(node, info, cloudManager);\n          info.nodeVsContext.put(node, context);\n          try {\n            info.snitch.getTags(node, info.myTags, context);\n          } catch (Exception e) {\n            context.exception = e;\n          }\n        }\n      }\n    }\n\n    Map<String, Map<String, Object>> result = new HashMap<>();\n    for (SnitchInfoImpl info : snitches.values()) {\n      for (Map.Entry<String, SnitchContext> e : info.nodeVsContext.entrySet()) {\n        SnitchContext context = e.getValue();\n        String node = e.getKey();\n        if (context.exception != null) {\n          failedNodes.put(node, context);\n          participatingLiveNodes.remove(node);\n          log.warn(\"Not all tags were obtained from node {}\", node, context.exception);\n          context.exception = new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not all tags were obtained from node \" + node);\n        } else {\n          Map<String, Object> tags = result.get(node);\n          if (tags == null) {\n            tags = new HashMap<>();\n            result.put(node, tags);\n          }\n          tags.putAll(context.getTags());\n        }\n      }\n    }\n\n    if (participatingLiveNodes.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not get all tags for any nodes\");\n\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4abf821a41a2fdca2a1dea148999931d22e20529":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"4abf821a41a2fdca2a1dea148999931d22e20529":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["4abf821a41a2fdca2a1dea148999931d22e20529"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}