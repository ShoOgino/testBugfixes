{"path":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the time the index in this directory was last modified. */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(\"segments\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6","date":1069355441,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","sourceNew":"  /** \n   * Returns the time the index in the named directory was last modified. \n   * \n   * <p>Synchronization of IndexReader and IndexWriter instances is \n   * no longer done via time stamps of the segments file since the time resolution \n   * depends on the hardware platform. Instead, a version number is maintained\n   * within the segments file, which is incremented everytime when the index is\n   * changed.</p>\n   * \n   * @deprecated  Replaced by {@link #getCurrentVersion(Directory)}\n   * */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(\"segments\");\n  }\n\n","sourceOld":"  /** Returns the time the index in this directory was last modified. */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(\"segments\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd6eb8b1d71f36e7d134adc278a3d27c2559414c","date":1118080332,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","sourceNew":"  /** \n   * Returns the time the index in the named directory was last modified. \n   * \n   * <p>Synchronization of IndexReader and IndexWriter instances is \n   * no longer done via time stamps of the segments file since the time resolution \n   * depends on the hardware platform. Instead, a version number is maintained\n   * within the segments file, which is incremented everytime when the index is\n   * changed.</p>\n   * \n   * @deprecated  Replaced by {@link #getCurrentVersion(Directory)}\n   * */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(Constants.INDEX_SEGMENTS_FILENAME);\n  }\n\n","sourceOld":"  /** \n   * Returns the time the index in the named directory was last modified. \n   * \n   * <p>Synchronization of IndexReader and IndexWriter instances is \n   * no longer done via time stamps of the segments file since the time resolution \n   * depends on the hardware platform. Instead, a version number is maintained\n   * within the segments file, which is incremented everytime when the index is\n   * changed.</p>\n   * \n   * @deprecated  Replaced by {@link #getCurrentVersion(Directory)}\n   * */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(\"segments\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0060868dbe170ecf61556c5f4a6e9dfb800d5dbe","date":1118175686,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","sourceNew":"  /** \n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(Constants.INDEX_SEGMENTS_FILENAME);\n  }\n\n","sourceOld":"  /** \n   * Returns the time the index in the named directory was last modified. \n   * \n   * <p>Synchronization of IndexReader and IndexWriter instances is \n   * no longer done via time stamps of the segments file since the time resolution \n   * depends on the hardware platform. Instead, a version number is maintained\n   * within the segments file, which is incremented everytime when the index is\n   * changed.</p>\n   * \n   * @deprecated  Replaced by {@link #getCurrentVersion(Directory)}\n   * */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(Constants.INDEX_SEGMENTS_FILENAME);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24157515079eea65faeec4e1dbb01fea58444c8e","date":1118343636,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","sourceNew":"  /** \n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(IndexFileNames.SEGMENTS);\n  }\n\n","sourceOld":"  /** \n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(Constants.INDEX_SEGMENTS_FILENAME);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","sourceNew":"  /**\n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(IndexFileNames.SEGMENTS);\n  }\n\n","sourceOld":"  /** \n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(IndexFileNames.SEGMENTS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","sourceNew":"  /**\n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   */\n  public static long lastModified(final Directory directory2) throws IOException {\n    return ((Long) new SegmentInfos.FindSegmentsFile(directory2) {\n        public Object doBody(String segmentFileName) throws IOException {\n          return new Long(directory2.fileModified(segmentFileName));\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   */\n  public static long lastModified(Directory directory) throws IOException {\n    return directory.fileModified(IndexFileNames.SEGMENTS);\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","sourceNew":"  /**\n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long lastModified(final Directory directory2) throws CorruptIndexException, IOException {\n    return ((Long) new SegmentInfos.FindSegmentsFile(directory2) {\n        public Object doBody(String segmentFileName) throws IOException {\n          return new Long(directory2.fileModified(segmentFileName));\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   */\n  public static long lastModified(final Directory directory2) throws IOException {\n    return ((Long) new SegmentInfos.FindSegmentsFile(directory2) {\n        public Object doBody(String segmentFileName) throws IOException {\n          return new Long(directory2.fileModified(segmentFileName));\n        }\n      }.run()).longValue();\n  }\n\n","bugFix":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","sourceNew":"  /**\n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long lastModified(final Directory directory2) throws CorruptIndexException, IOException {\n    return ((Long) new SegmentInfos.FindSegmentsFile(directory2) {\n        public Object doBody(String segmentFileName) throws IOException {\n          return Long.valueOf(directory2.fileModified(segmentFileName));\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long lastModified(final Directory directory2) throws CorruptIndexException, IOException {\n    return ((Long) new SegmentInfos.FindSegmentsFile(directory2) {\n        public Object doBody(String segmentFileName) throws IOException {\n          return new Long(directory2.fileModified(segmentFileName));\n        }\n      }.run()).longValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","sourceNew":"  /**\n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long lastModified(final Directory directory2) throws CorruptIndexException, IOException {\n    return ((Long) new SegmentInfos.FindSegmentsFile(directory2) {\n        @Override\n        public Object doBody(String segmentFileName) throws IOException {\n          return Long.valueOf(directory2.fileModified(segmentFileName));\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long lastModified(final Directory directory2) throws CorruptIndexException, IOException {\n    return ((Long) new SegmentInfos.FindSegmentsFile(directory2) {\n        public Object doBody(String segmentFileName) throws IOException {\n          return Long.valueOf(directory2.fileModified(segmentFileName));\n        }\n      }.run()).longValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#lastModified(Directory).mjava","sourceNew":"  /**\n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long lastModified(final Directory directory2) throws CorruptIndexException, IOException {\n    return ((Long) new SegmentInfos.FindSegmentsFile(directory2) {\n        @Override\n        public Object doBody(String segmentFileName) throws IOException {\n          return Long.valueOf(directory2.fileModified(segmentFileName));\n        }\n      }.run()).longValue();\n  }\n\n","sourceOld":"  /**\n   * Returns the time the index in the named directory was last modified. \n   * Do not use this to check whether the reader is still up-to-date, use\n   * {@link #isCurrent()} instead. \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long lastModified(final Directory directory2) throws CorruptIndexException, IOException {\n    return ((Long) new SegmentInfos.FindSegmentsFile(directory2) {\n        @Override\n        public Object doBody(String segmentFileName) throws IOException {\n          return Long.valueOf(directory2.fileModified(segmentFileName));\n        }\n      }.run()).longValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["1b54a9bc667895a2095a886184bf69a3179e63df"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24157515079eea65faeec4e1dbb01fea58444c8e":["0060868dbe170ecf61556c5f4a6e9dfb800d5dbe"],"1b54a9bc667895a2095a886184bf69a3179e63df":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"8a9e385641d717e641408d8fbbc62be8fc766357":["6bcde5e3f23911110baa101ed062b544162825b5"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["24157515079eea65faeec4e1dbb01fea58444c8e"],"0060868dbe170ecf61556c5f4a6e9dfb800d5dbe":["fd6eb8b1d71f36e7d134adc278a3d27c2559414c"],"fd6eb8b1d71f36e7d134adc278a3d27c2559414c":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["8a9e385641d717e641408d8fbbc62be8fc766357"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"24157515079eea65faeec4e1dbb01fea58444c8e":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"1b54a9bc667895a2095a886184bf69a3179e63df":["6bcde5e3f23911110baa101ed062b544162825b5"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"0060868dbe170ecf61556c5f4a6e9dfb800d5dbe":["24157515079eea65faeec4e1dbb01fea58444c8e"],"fd6eb8b1d71f36e7d134adc278a3d27c2559414c":["0060868dbe170ecf61556c5f4a6e9dfb800d5dbe"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["1b54a9bc667895a2095a886184bf69a3179e63df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["fd6eb8b1d71f36e7d134adc278a3d27c2559414c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}