{"path":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","sourceNew":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","sourceNew":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","sourceNew":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f37a8cb4c5565e5233860fe796624f5ec2459f","date":1311372234,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","sourceNew":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // test that offset works when not caching main query\n    assertJQ(req(\"q\",\"{!cache=false}*:*\", \"start\",\"2\", \"rows\",\"1\", \"sort\",\"val_i asc\", \"fl\",\"val_i\")\n        ,\"/response/docs==[{'val_i':3}]\"\n    );\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21019b166be355081c8620e9a1af315e143a7ad6","date":1311515044,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","sourceNew":"  public void testCaching() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // test that offset works when not caching main query\n    assertJQ(req(\"q\",\"{!cache=false}*:*\", \"start\",\"2\", \"rows\",\"1\", \"sort\",\"val_i asc\", \"fl\",\"val_i\")\n        ,\"/response/docs==[{'val_i':3}]\"\n    );\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // test that offset works when not caching main query\n    assertJQ(req(\"q\",\"{!cache=false}*:*\", \"start\",\"2\", \"rows\",\"1\", \"sort\",\"val_i asc\", \"fl\",\"val_i\")\n        ,\"/response/docs==[{'val_i':3}]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","sourceNew":"    public void testCaching() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // test that offset works when not caching main query\n    assertJQ(req(\"q\",\"{!cache=false}*:*\", \"start\",\"2\", \"rows\",\"1\", \"sort\",\"val_i asc\", \"fl\",\"val_i\")\n        ,\"/response/docs==[{'val_i':3}]\"\n    );\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // test that offset works when not caching main query\n    assertJQ(req(\"q\",\"{!cache=false}*:*\", \"start\",\"2\", \"rows\",\"1\", \"sort\",\"val_i asc\", \"fl\",\"val_i\")\n        ,\"/response/docs==[{'val_i':3}]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","sourceNew":"    public void testCaching() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // test that offset works when not caching main query\n    assertJQ(req(\"q\",\"{!cache=false}*:*\", \"start\",\"2\", \"rows\",\"1\", \"sort\",\"val_i asc\", \"fl\",\"val_i\")\n        ,\"/response/docs==[{'val_i':3}]\"\n    );\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // test that offset works when not caching main query\n    assertJQ(req(\"q\",\"{!cache=false}*:*\", \"start\",\"2\", \"rows\",\"1\", \"sort\",\"val_i asc\", \"fl\",\"val_i\")\n        ,\"/response/docs==[{'val_i':3}]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d563502961e163558c0a9029518f43f6f7c6911","date":1510681529,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","sourceNew":"    public void testCaching() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    // default cost uses post filtering (for frange)\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default, even w/explicit low/high costs\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4 cost=0}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4 cost=999}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // no caching and explicitly low cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false cost=0}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    // default cost uses post filtering (for frange)\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default, even w/explicit low/high costs\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7 cost=0}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7 cost=999}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // no caching and explicitly low cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false cost=0}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // test that offset works when not caching main query\n    assertJQ(req(\"q\",\"{!cache=false}*:*\", \"start\",\"2\", \"rows\",\"1\", \"sort\",\"val_i asc\", \"fl\",\"val_i\")\n        ,\"/response/docs==[{'val_i':3}]\"\n    );\n\n  }\n\n","sourceOld":"    public void testCaching() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // test that offset works when not caching main query\n    assertJQ(req(\"q\",\"{!cache=false}*:*\", \"start\",\"2\", \"rows\",\"1\", \"sort\",\"val_i asc\", \"fl\",\"val_i\")\n        ,\"/response/docs==[{'val_i':3}]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21019b166be355081c8620e9a1af315e143a7ad6":["42f37a8cb4c5565e5233860fe796624f5ec2459f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["21019b166be355081c8620e9a1af315e143a7ad6","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"42f37a8cb4c5565e5233860fe796624f5ec2459f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["21019b166be355081c8620e9a1af315e143a7ad6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d563502961e163558c0a9029518f43f6f7c6911"],"6d563502961e163558c0a9029518f43f6f7c6911":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"]},"commit2Childs":{"21019b166be355081c8620e9a1af315e143a7ad6":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["42f37a8cb4c5565e5233860fe796624f5ec2459f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"42f37a8cb4c5565e5233860fe796624f5ec2459f":["21019b166be355081c8620e9a1af315e143a7ad6"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","6d563502961e163558c0a9029518f43f6f7c6911"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6d563502961e163558c0a9029518f43f6f7c6911":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}