{"path":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","commits":[{"id":"c11e1d33f2ba742976268153f6edd2d29710cf69","date":1347851822,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //never actually need the score but lets test\n    String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    String circleStr = \"Circle(\" + ptStr.replaceAll(\" \", \"\") + \" d=\" + distDEG + \")\";\n    String shapeStr;\n    if (exact) {\n      shapeStr = circleStr;\n    } else {//bbox\n      //the GEO is an assumption\n      SpatialContext ctx = SpatialContext.GEO;\n      shapeStr = ctx.toString( ctx.readShape(circleStr).getBoundingBox() );\n    }\n\n    //FYI default distErrPct=0.025 works with the tests in this file\n    assertQ(req(\n          \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n            + \"}Intersects(\" + shapeStr + \")\"),\n        tests);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac","date":1357162023,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Solr 4 syntax\n    {\n      //never actually need the score but lets test\n      String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      String circleStr = \"Circle(\" + ptStr.replaceAll(\" \", \"\") + \" d=\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        shapeStr = ctx.toString( ctx.readShape(circleStr).getBoundingBox() );\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using the Solr 3 syntax\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \"}\"),\n          tests);\n    }\n\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //never actually need the score but lets test\n    String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    String circleStr = \"Circle(\" + ptStr.replaceAll(\" \", \"\") + \" d=\" + distDEG + \")\";\n    String shapeStr;\n    if (exact) {\n      shapeStr = circleStr;\n    } else {//bbox\n      //the GEO is an assumption\n      SpatialContext ctx = SpatialContext.GEO;\n      shapeStr = ctx.toString( ctx.readShape(circleStr).getBoundingBox() );\n    }\n\n    //FYI default distErrPct=0.025 works with the tests in this file\n    assertQ(req(\n          \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n            + \"}Intersects(\" + shapeStr + \")\"),\n        tests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Solr 4 syntax\n    {\n      //never actually need the score but lets test\n      String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      String circleStr = \"Circle(\" + ptStr.replaceAll(\" \", \"\") + \" d=\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        shapeStr = ctx.toString( ctx.readShape(circleStr).getBoundingBox() );\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using the Solr 3 syntax\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \"}\"),\n          tests);\n    }\n\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //never actually need the score but lets test\n    String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    String circleStr = \"Circle(\" + ptStr.replaceAll(\" \", \"\") + \" d=\" + distDEG + \")\";\n    String shapeStr;\n    if (exact) {\n      shapeStr = circleStr;\n    } else {//bbox\n      //the GEO is an assumption\n      SpatialContext ctx = SpatialContext.GEO;\n      shapeStr = ctx.toString( ctx.readShape(circleStr).getBoundingBox() );\n    }\n\n    //FYI default distErrPct=0.025 works with the tests in this file\n    assertQ(req(\n          \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n            + \"}Intersects(\" + shapeStr + \")\"),\n        tests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, int count, int ... docIds) throws ParseException {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \"}\"),\n          tests);\n    }\n\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Solr 4 syntax\n    {\n      //never actually need the score but lets test\n      String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      String circleStr = \"Circle(\" + ptStr.replaceAll(\" \", \"\") + \" d=\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        shapeStr = ctx.toString( ctx.readShape(circleStr).getBoundingBox() );\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using the Solr 3 syntax\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \"}\"),\n          tests);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17727014530f6432ae28e319a0242b6030d3f18a","date":1416941348,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \"}\"),\n          tests);\n    }\n\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, int count, int ... docIds) throws ParseException {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \"}\"),\n          tests);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"167133992e7b384ce97f83ddb1dd2ddd09daf7aa","date":1420315776,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, double sphereRadius, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \" sphere_radius=\" + sphereRadius + \"}\"),\n          tests);\n    }\n\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String ptStr, double distKM, int count, int ... docIds) throws ParseException {\n    if (exact && fieldName.equalsIgnoreCase(\"bbox\")) {\n      return; // bbox field only supports rectangular query\n    }\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    //test for presence of required ids first\n    int i = 0;\n    if (docIds != null && docIds.length > 0) {\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/*[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n    //check total length last; maybe response includes ids it shouldn't.  Nicer to check this last instead of first so\n    // that there may be a more specific detailed id to investigate.\n    tests[i++] = \"*[count(//doc)=\" + count + \"]\";\n\n    //Test using the Lucene spatial syntax\n    {\n      //never actually need the score but lets test\n      String score = new String[]{null, \"none\",\"distance\",\"recipDistance\"}[random().nextInt(4)];\n\n      double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n      Point point = SpatialUtils.parsePoint(ptStr, SpatialContext.GEO);\n      String circleStr = \"BUFFER(POINT(\" + point.getX()+\" \"+point.getY()+\"),\" + distDEG + \")\";\n      String shapeStr;\n      if (exact) {\n        shapeStr = circleStr;\n      } else {//bbox\n        //the GEO is an assumption\n        SpatialContext ctx = SpatialContext.GEO;\n        Rectangle bbox = ctx.readShapeFromWkt(circleStr).getBoundingBox();\n        shapeStr = \"ENVELOPE(\" + bbox.getMinX() + \", \" + bbox.getMaxX() +\n            \", \" + bbox.getMaxY() + \", \" + bbox.getMinY() + \")\";\n      }\n\n      //FYI default distErrPct=0.025 works with the tests in this file\n      assertQ(req(\n            \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n            \"fq\", \"{!field f=\" + fieldName + (score==null?\"\":\" score=\"+score)\n              + \"}Intersects(\" + shapeStr + \")\"),\n          tests);\n    }\n    //Test using geofilt\n    {\n      assertQ(req(\n          \"fl\", \"id\", \"q\", \"*:*\", \"rows\", \"1000\",\n          \"fq\", \"{!\" + (exact ? \"geofilt\" : \"bbox\") + \" sfield=\" + fieldName + \" pt='\" + ptStr + \"' d=\" + distKM + \"}\"),\n          tests);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c11e1d33f2ba742976268153f6edd2d29710cf69","6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac"],"17727014530f6432ae28e319a0242b6030d3f18a":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["17727014530f6432ae28e319a0242b6030d3f18a"],"6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"17727014530f6432ae28e319a0242b6030d3f18a":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["17727014530f6432ae28e319a0242b6030d3f18a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}