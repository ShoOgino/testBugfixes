{"path":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getHeader(int,int,int,int,int).mjava","commits":[{"id":"824ab25acd22f2eca198755bafab3cb8b7878493","date":1341276186,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getHeader(int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** The 4 byte header (32 bits) contains (from lsb to msb):\n   *\n   * - 8 bits for uncompressed int num - 1 (use up to 7 bits i.e 128 actually)\n   *\n   * - 8 bits for exception num - 1 (when no exceptions, this is undefined)\n   *\n   * - 8 bits for the index of the first exception + 1 (when no exception, this is 0)\n   *\n   * - 5 bits for num of frame bits - 1\n   * - 2 bits for the exception code: 00: byte, 01: short, 10: int\n   * - 1 bit unused\n   *\n   */\n  static int getHeader(int numInts, int numBits, int excNum, int excFirstPos, int excBytes) {\n    return  (numInts-1)\n          | (((excNum-1) & MASK[8]) << 8)\n          | ((excFirstPos+1) << 16)\n          | ((numBits-1) << 24)\n          | ((excBytes/2) << 29);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5373bc7574123da55ae25e216b6d768ccb1dcd91","date":1342013351,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getHeader(int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getHeader(int,int,int,int,int).mjava","sourceNew":"  /** \n   * Generate the 4 byte header, which contains (from lsb to msb):\n   *\n   * 8 bits for uncompressed int num - 1 (use up to 7 bits i.e 128 actually)\n   *\n   * 8 bits for exception num - 1 (when no exceptions, this is undefined)\n   *\n   * 8 bits for the index of the first exception + 1 (when no exception, this is 0)\n   *\n   * 5 bits for num of frame bits - 1\n   * 2 bits for the exception code: 00: byte, 01: short, 10: int\n   * 1 bit unused\n   *\n   */\n  static int getHeader(int numInts, int numBits, int excNum, int excFirstPos, int excBytes) {\n    return  (numInts-1)\n          | (((excNum-1) & MASK[8]) << 8)\n          | ((excFirstPos+1) << 16)\n          | ((numBits-1) << 24)\n          | ((excBytes/2) << 29);\n  }\n\n","sourceOld":"  /** The 4 byte header (32 bits) contains (from lsb to msb):\n   *\n   * - 8 bits for uncompressed int num - 1 (use up to 7 bits i.e 128 actually)\n   *\n   * - 8 bits for exception num - 1 (when no exceptions, this is undefined)\n   *\n   * - 8 bits for the index of the first exception + 1 (when no exception, this is 0)\n   *\n   * - 5 bits for num of frame bits - 1\n   * - 2 bits for the exception code: 00: byte, 01: short, 10: int\n   * - 1 bit unused\n   *\n   */\n  static int getHeader(int numInts, int numBits, int excNum, int excFirstPos, int excBytes) {\n    return  (numInts-1)\n          | (((excNum-1) & MASK[8]) << 8)\n          | ((excFirstPos+1) << 16)\n          | ((numBits-1) << 24)\n          | ((excBytes/2) << 29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b","date":1342134079,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getHeader(int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getHeader(int,int,int,int,int).mjava","sourceNew":"  /** \n   * Generate the 4 byte header, which contains (from lsb to msb):\n   *\n   * 8 bits for uncompressed int num - 1 (use up to 7 bits i.e 128 actually)\n   *\n   * 8 bits for exception num - 1 (when no exceptions, this is undefined)\n   *\n   * 8 bits for the index of the first exception + 1 (when no exception, this is 0)\n   *\n   * 6 bits for num of frame bits\n   * 2 bits for the exception code: 00: byte, 01: short, 10: int\n   *\n   */\n  // TODO: exception num should never be equal with uncompressed int num!!!\n  // first exception ranges from -1 ~ 255\n  // the problem is that we don't need first exception to be -1 ...\n  // it is ok to range from 0~255, and judge exception for exception num (0~255)\n  // uncompressed int num: (1~256)\n  static int getHeader(int numInts, int numBits, int excNum, int excFirstPos, int excBytes) {\n    return  (numInts-1)\n          | (((excNum-1) & MASK[8]) << 8)\n          | ((excFirstPos+1) << 16)\n          | ((numBits) << 24)\n          | ((excBytes/2) << 30);\n  }\n\n","sourceOld":"  /** \n   * Generate the 4 byte header, which contains (from lsb to msb):\n   *\n   * 8 bits for uncompressed int num - 1 (use up to 7 bits i.e 128 actually)\n   *\n   * 8 bits for exception num - 1 (when no exceptions, this is undefined)\n   *\n   * 8 bits for the index of the first exception + 1 (when no exception, this is 0)\n   *\n   * 5 bits for num of frame bits - 1\n   * 2 bits for the exception code: 00: byte, 01: short, 10: int\n   * 1 bit unused\n   *\n   */\n  static int getHeader(int numInts, int numBits, int excNum, int excFirstPos, int excBytes) {\n    return  (numInts-1)\n          | (((excNum-1) & MASK[8]) << 8)\n          | ((excFirstPos+1) << 16)\n          | ((numBits-1) << 24)\n          | ((excBytes/2) << 29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","date":1342443326,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getHeader(int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getHeader(int,int,int,int,int).mjava","sourceNew":"  /** \n   * Generate the 4 byte header which contains (from lsb to msb):\n   *\n   * 8 bits for encoded block int size (excluding header, this limits DEFAULT_BLOCK_SIZE <= 2^(8-1))\n   *\n   * 8 bits for exception num - 1 (when no exceptions, this is undefined)\n   *\n   * 8 bits for the index of the first exception + 1 (when no exception, this is 0)\n   *\n   * 6 bits for num of frame bits (when 0, values in this block are all the same)\n   * 2 bits for the exception code: 00: byte, 01: short, 10: int\n   *\n   */\n  static int getHeader(int encodedSize, int numBits, int excNum, int excFirstPos, int excBytes) {\n    return  (encodedSize)\n          | (((excNum-1) & MASK[8]) << 8)\n          | ((excFirstPos+1) << 16)\n          | ((numBits) << 24)\n          | ((excBytes/2) << 30);\n  }\n\n","sourceOld":"  /** \n   * Generate the 4 byte header, which contains (from lsb to msb):\n   *\n   * 8 bits for uncompressed int num - 1 (use up to 7 bits i.e 128 actually)\n   *\n   * 8 bits for exception num - 1 (when no exceptions, this is undefined)\n   *\n   * 8 bits for the index of the first exception + 1 (when no exception, this is 0)\n   *\n   * 6 bits for num of frame bits\n   * 2 bits for the exception code: 00: byte, 01: short, 10: int\n   *\n   */\n  // TODO: exception num should never be equal with uncompressed int num!!!\n  // first exception ranges from -1 ~ 255\n  // the problem is that we don't need first exception to be -1 ...\n  // it is ok to range from 0~255, and judge exception for exception num (0~255)\n  // uncompressed int num: (1~256)\n  static int getHeader(int numInts, int numBits, int excNum, int excFirstPos, int excBytes) {\n    return  (numInts-1)\n          | (((excNum-1) & MASK[8]) << 8)\n          | ((excFirstPos+1) << 16)\n          | ((numBits) << 24)\n          | ((excBytes/2) << 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#getHeader(int,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  /** \n   * Generate the 4 byte header which contains (from lsb to msb):\n   *\n   * 8 bits for encoded block int size (excluding header, this limits DEFAULT_BLOCK_SIZE <= 2^(8-1))\n   *\n   * 8 bits for exception num - 1 (when no exceptions, this is undefined)\n   *\n   * 8 bits for the index of the first exception + 1 (when no exception, this is 0)\n   *\n   * 6 bits for num of frame bits (when 0, values in this block are all the same)\n   * 2 bits for the exception code: 00: byte, 01: short, 10: int\n   *\n   */\n  static int getHeader(int encodedSize, int numBits, int excNum, int excFirstPos, int excBytes) {\n    return  (encodedSize)\n          | (((excNum-1) & MASK[8]) << 8)\n          | ((excFirstPos+1) << 16)\n          | ((numBits) << 24)\n          | ((excBytes/2) << 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"824ab25acd22f2eca198755bafab3cb8b7878493":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["824ab25acd22f2eca198755bafab3cb8b7878493"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["48d40647dc87c7b55ffe4d9dca73f63a3cebc58b"],"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"824ab25acd22f2eca198755bafab3cb8b7878493":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":[],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["48d40647dc87c7b55ffe4d9dca73f63a3cebc58b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["824ab25acd22f2eca198755bafab3cb8b7878493","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}