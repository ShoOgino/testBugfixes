{"path":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","commits":[{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testSumScoreAggregator().mjava","sourceNew":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    SimpleFacetsCollector fc = new SimpleFacetsCollector(true);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Store.NO));\n      }\n      facetFields.addFields(doc, Collections.singletonList(new FacetLabel(\"a\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new SumScoreFacetRequest(new FacetLabel(\"a\"), 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    float value = (float) res.get(0).getFacetResultNode().value;\n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, (int) value);\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","sourceNew":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    SimpleFacetsCollector fc = new SimpleFacetsCollector(true);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["ae75def1e2525383b6e1397ed97c44387da9941c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae75def1e2525383b6e1397ed97c44387da9941c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ae75def1e2525383b6e1397ed97c44387da9941c"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"ae75def1e2525383b6e1397ed97c44387da9941c":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}