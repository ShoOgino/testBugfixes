{"path":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest#claimMatch().mjava","commits":[{"id":"bb3e075eaa5788b2762ec235bf72b069cefe3f50","date":1548244981,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest#claimMatch().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void claimMatch() {\n    // all custom claims match regex\n    Map<String, String> shouldMatch = new HashMap<>();\n    shouldMatch.put(\"claim1\", \"foo\");\n    shouldMatch.put(\"claim2\", \"foo|bar\");\n    shouldMatch.put(\"claim3\", \"f\\\\w{2}$\");\n    testConfig.put(\"claimsMatch\", shouldMatch);\n    plugin.init(testConfig);\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n\n    // Required claim does not exist\n    shouldMatch.clear();\n    shouldMatch.put(\"claim9\", \"NA\");\n    plugin.init(testConfig);\n    resp = plugin.authenticate(testHeader);\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.CLAIM_MISMATCH, resp.getAuthCode());\n\n    // Required claim does not match regex\n    shouldMatch.clear();\n    shouldMatch.put(\"claim1\", \"NA\");\n    resp = plugin.authenticate(testHeader);\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.CLAIM_MISMATCH, resp.getAuthCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest#claimMatch().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void claimMatch() {\n    // all custom claims match regex\n    Map<String, String> shouldMatch = new HashMap<>();\n    shouldMatch.put(\"claim1\", \"foo\");\n    shouldMatch.put(\"claim2\", \"foo|bar\");\n    shouldMatch.put(\"claim3\", \"f\\\\w{2}$\");\n    testConfig.put(\"claimsMatch\", shouldMatch);\n    plugin.init(testConfig);\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n\n    // Required claim does not exist\n    shouldMatch.clear();\n    shouldMatch.put(\"claim9\", \"NA\");\n    plugin.init(testConfig);\n    resp = plugin.authenticate(testHeader);\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.CLAIM_MISMATCH, resp.getAuthCode());\n\n    // Required claim does not match regex\n    shouldMatch.clear();\n    shouldMatch.put(\"claim1\", \"NA\");\n    resp = plugin.authenticate(testHeader);\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.CLAIM_MISMATCH, resp.getAuthCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb3e075eaa5788b2762ec235bf72b069cefe3f50"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb3e075eaa5788b2762ec235bf72b069cefe3f50","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}