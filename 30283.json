{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#boxCorners(LatLng,double,double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#boxCorners(LatLng,double,double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#boxCorners(LatLng,double,double).mjava","sourceNew":"  private static LatLng boxCorners(LatLng center, double d, double brngdeg) {\n    double a = center.getLat();\n    double b = center.getLng();\n    double R = 3963.0; // radius of earth in miles\n    double brng = (Math.PI*brngdeg/180);\n    double lat1 = (Math.PI*a/180);\n    double lon1 = (Math.PI*b/180);\n\n    // Haversine formula\n    double lat2 = Math.asin( Math.sin(lat1)*Math.cos(d/R) +\n                             Math.cos(lat1)*Math.sin(d/R)*Math.cos(brng) );\n    double lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(d/R)*Math.cos(lat1),\n                                    Math.cos(d/R)-Math.sin(lat1)*Math.sin(lat2));\n\n    lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;\n\n    // normalize long first\n    LatLng ll = normLng(lat2,lon2);\n\n    // normalize lat - could flip poles\n    ll = normLat(ll.getLat(),ll.getLng());\n\n    return ll;\n}\n\n","sourceOld":"  private static LatLng boxCorners(LatLng center, double d, double brngdeg) {\n    double a = center.getLat();\n    double b = center.getLng();\n    double R = 3963.0; // radius of earth in miles\n    double brng = (Math.PI*brngdeg/180);\n    double lat1 = (Math.PI*a/180);\n    double lon1 = (Math.PI*b/180);\n\n    // Haversine formula\n    double lat2 = Math.asin( Math.sin(lat1)*Math.cos(d/R) +\n                             Math.cos(lat1)*Math.sin(d/R)*Math.cos(brng) );\n    double lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(d/R)*Math.cos(lat1),\n                                    Math.cos(d/R)-Math.sin(lat1)*Math.sin(lat2));\n\n    lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;\n\n    // normalize long first\n    LatLng ll = normLng(lat2,lon2);\n\n    // normalize lat - could flip poles\n    ll = normLat(ll.getLat(),ll.getLng());\n\n    return ll;\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#boxCorners(LatLng,double,double).mjava","sourceNew":null,"sourceOld":"  private static LatLng boxCorners(LatLng center, double d, double brngdeg) {\n    double a = center.getLat();\n    double b = center.getLng();\n    double R = 3963.0; // radius of earth in miles\n    double brng = (Math.PI*brngdeg/180);\n    double lat1 = (Math.PI*a/180);\n    double lon1 = (Math.PI*b/180);\n\n    // Haversine formula\n    double lat2 = Math.asin( Math.sin(lat1)*Math.cos(d/R) +\n                             Math.cos(lat1)*Math.sin(d/R)*Math.cos(brng) );\n    double lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(d/R)*Math.cos(lat1),\n                                    Math.cos(d/R)-Math.sin(lat1)*Math.sin(lat2));\n\n    lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;\n\n    // normalize long first\n    LatLng ll = normLng(lat2,lon2);\n\n    // normalize lat - could flip poles\n    ll = normLat(ll.getLat(),ll.getLng());\n\n    return ll;\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#boxCorners(LatLng,double,double).mjava","sourceNew":null,"sourceOld":"  private static LatLng boxCorners(LatLng center, double d, double brngdeg) {\n    double a = center.getLat();\n    double b = center.getLng();\n    double R = 3963.0; // radius of earth in miles\n    double brng = (Math.PI*brngdeg/180);\n    double lat1 = (Math.PI*a/180);\n    double lon1 = (Math.PI*b/180);\n\n    // Haversine formula\n    double lat2 = Math.asin( Math.sin(lat1)*Math.cos(d/R) +\n                             Math.cos(lat1)*Math.sin(d/R)*Math.cos(brng) );\n    double lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(d/R)*Math.cos(lat1),\n                                    Math.cos(d/R)-Math.sin(lat1)*Math.sin(lat2));\n\n    lat2 = (lat2*180)/Math.PI;\n    lon2 = (lon2*180)/Math.PI;\n\n    // normalize long first\n    LatLng ll = normLng(lat2,lon2);\n\n    // normalize lat - could flip poles\n    ll = normLat(ll.getLat(),ll.getLng());\n\n    return ll;\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e47768b261c28e7e6032060e8331475c81057953":["9454a6510e2db155fb01faa5c049b06ece95fab9","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}