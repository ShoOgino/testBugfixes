{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.IntersectEnum#copyTerm().mjava","commits":[{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.IntersectEnum#copyTerm().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum#copyTerm().mjava","sourceNew":"      private void copyTerm() {\n        //System.out.println(\"      copyTerm cur.prefix=\" + currentFrame.prefix + \" cur.suffix=\" + currentFrame.suffix + \" first=\" + (char) currentFrame.suffixBytes[currentFrame.startBytePos]);\n        final int len = currentFrame.prefix + currentFrame.suffix;\n        if (term.bytes.length < len) {\n          term.bytes = ArrayUtil.grow(term.bytes, len);\n        }\n        System.arraycopy(currentFrame.suffixBytes, currentFrame.startBytePos, term.bytes, currentFrame.prefix, currentFrame.suffix);\n        term.length = len;\n      }\n\n","sourceOld":"      private void copyTerm() {\n        //System.out.println(\"      copyTerm cur.prefix=\" + currentFrame.prefix + \" cur.suffix=\" + currentFrame.suffix + \" first=\" + (char) currentFrame.suffixBytes[currentFrame.startBytePos]);\n        final int len = currentFrame.prefix + currentFrame.suffix;\n        if (term.bytes.length < len) {\n          term.bytes = ArrayUtil.grow(term.bytes, len);\n        }\n        System.arraycopy(currentFrame.suffixBytes, currentFrame.startBytePos, term.bytes, currentFrame.prefix, currentFrame.suffix);\n        term.length = len;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.IntersectEnum#copyTerm().mjava","sourceNew":null,"sourceOld":"      private void copyTerm() {\n        //System.out.println(\"      copyTerm cur.prefix=\" + currentFrame.prefix + \" cur.suffix=\" + currentFrame.suffix + \" first=\" + (char) currentFrame.suffixBytes[currentFrame.startBytePos]);\n        final int len = currentFrame.prefix + currentFrame.suffix;\n        if (term.bytes.length < len) {\n          term.bytes = ArrayUtil.grow(term.bytes, len);\n        }\n        System.arraycopy(currentFrame.suffixBytes, currentFrame.startBytePos, term.bytes, currentFrame.prefix, currentFrame.suffix);\n        term.length = len;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}