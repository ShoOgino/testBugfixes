{"path":"src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","commits":[{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","pathOld":"/dev/null","sourceNew":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    System.out.println(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","pathOld":"src/test/org/apache/solr/request/TestWriterPerf#doPerf(String,SolrQueryRequest,int,int).mjava","sourceNew":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    System.out.println(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","sourceOld":"  void doPerf(String writerName, SolrQueryRequest req, int encIter, int decIter) throws Exception {\n    SolrQueryResponse rsp = getResponse(req);\n    QueryResponseWriter w = h.getCore().getQueryResponseWriter(writerName);\n\n\n    ByteArrayOutputStream out=null;\n\n    System.gc();\n    long start = System.currentTimeMillis();\n    for (int i=0; i<encIter; i++) {\n    if (w instanceof BinaryQueryResponseWriter) {\n      BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) w;\n      out = new ByteArrayOutputStream();\n      binWriter.write(out, req, rsp);\n      out.close();\n    } else {\n      out = new ByteArrayOutputStream();\n      // to be fair, from my previous tests, much of the performance will be sucked up\n      // by java's UTF-8 encoding/decoding, not the actual writing\n      Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n      w.write(writer, req, rsp);\n      writer.close();\n    }\n    }\n\n    long encodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    byte[] arr = out.toByteArray();\n\n    start = System.currentTimeMillis();\n    writerName = writerName.intern();\n    for (int i=0; i<decIter; i++) {\n      ResponseParser rp = null;\n      if (writerName == \"xml\") {\n        rp = new XMLResponseParser();\n      } else if (writerName == \"javabin\") {\n        rp = new BinaryResponseParser();\n      } else {\n        break;\n      }\n      ByteArrayInputStream in = new ByteArrayInputStream(arr);\n      rp.processResponse(in, \"UTF-8\");      \n    }\n\n    long decodeTime = Math.max(System.currentTimeMillis() - start, 1);\n\n    System.out.println(\"writer \"+writerName+\", size=\"+out.size()+\", encodeRate=\"+(encodeTime==1 ? \"N/A\":  \"\"+(encIter*1000L/encodeTime)) + \", decodeRate=\"+(decodeTime==1 ? \"N/A\":  \"\"+(decIter*1000L/decodeTime)) );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0acfe5ceed804451d76c8f887855b3d060e132":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["da0acfe5ceed804451d76c8f887855b3d060e132"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da0acfe5ceed804451d76c8f887855b3d060e132":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["da0acfe5ceed804451d76c8f887855b3d060e132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}