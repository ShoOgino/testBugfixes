{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","commits":[{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ManagedIndexSchema deleteCopyFields(Map<String,Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      // clone data structures before modifying them\n      newSchema.copyFieldsMap = cloneCopyFieldsMap(copyFieldsMap);\n      newSchema.copyFieldTargetCounts\n          = (Map<SchemaField,Integer>)((HashMap<SchemaField,Integer>)copyFieldTargetCounts).clone();\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      for (Map.Entry<String,Collection<String>> entry : copyFields.entrySet()) {\n        // Key is the source, values are the destinations\n        for (String destination : entry.getValue()) {\n          newSchema.deleteCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ManagedIndexSchema deleteCopyFields(Map<String,Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      // clone data structures before modifying them\n      newSchema.copyFieldsMap = cloneCopyFieldsMap(copyFieldsMap);\n      newSchema.copyFieldTargetCounts\n          = (Map<SchemaField,Integer>)((HashMap<SchemaField,Integer>)copyFieldTargetCounts).clone();\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      for (Map.Entry<String,Collection<String>> entry : copyFields.entrySet()) {\n        // Key is the source, values are the destinations\n        for (String destination : entry.getValue()) {\n          newSchema.deleteCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d62f72d1c60d2be239222de52d5e7b516da5f6f","date":1428554550,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema deleteCopyFields(Map<String,Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      // clone data structures before modifying them\n      newSchema.copyFieldsMap = cloneCopyFieldsMap(copyFieldsMap);\n      newSchema.copyFieldTargetCounts\n          = (Map<SchemaField,Integer>)((HashMap<SchemaField,Integer>)copyFieldTargetCounts).clone();\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      for (Map.Entry<String,Collection<String>> entry : copyFields.entrySet()) {\n        // Key is the source, values are the destinations\n        for (String destination : entry.getValue()) {\n          newSchema.deleteCopyField(entry.getKey(), destination);\n        }\n      }\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema deleteCopyFields(Map<String,Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      // clone data structures before modifying them\n      newSchema.copyFieldsMap = cloneCopyFieldsMap(copyFieldsMap);\n      newSchema.copyFieldTargetCounts\n          = (Map<SchemaField,Integer>)((HashMap<SchemaField,Integer>)copyFieldTargetCounts).clone();\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      for (Map.Entry<String,Collection<String>> entry : copyFields.entrySet()) {\n        // Key is the source, values are the destinations\n        for (String destination : entry.getValue()) {\n          newSchema.deleteCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public ManagedIndexSchema deleteCopyFields(Map<String,Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      // clone data structures before modifying them\n      newSchema.copyFieldsMap = cloneCopyFieldsMap(copyFieldsMap);\n      newSchema.copyFieldTargetCounts\n          = (Map<SchemaField,Integer>)((HashMap<SchemaField,Integer>)copyFieldTargetCounts).clone();\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      for (Map.Entry<String,Collection<String>> entry : copyFields.entrySet()) {\n        // Key is the source, values are the destinations\n        for (String destination : entry.getValue()) {\n          newSchema.deleteCopyField(entry.getKey(), destination);\n        }\n      }\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema deleteCopyFields(Map<String,Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      // clone data structures before modifying them\n      newSchema.copyFieldsMap = cloneCopyFieldsMap(copyFieldsMap);\n      newSchema.copyFieldTargetCounts\n          = (Map<SchemaField,Integer>)((HashMap<SchemaField,Integer>)copyFieldTargetCounts).clone();\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      for (Map.Entry<String,Collection<String>> entry : copyFields.entrySet()) {\n        // Key is the source, values are the destinations\n        for (String destination : entry.getValue()) {\n          newSchema.deleteCopyField(entry.getKey(), destination);\n        }\n      }\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eeeea2295d6355a29e259130a5c48ace73022d7c"],"9d62f72d1c60d2be239222de52d5e7b516da5f6f":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9d62f72d1c60d2be239222de52d5e7b516da5f6f":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}