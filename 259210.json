{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#nextBlockMatchingPrefix().mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#nextBlockMatchingPrefix().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find the next block that appears to contain terms that could match the automata.\n   * The prefix is the primary clue.  Returns true if at one, or false for no more (EOF).\n   */\n  protected boolean nextBlockMatchingPrefix() throws IOException {\n    if (beyondCommonPrefix) {\n      return false; // EOF\n    }\n\n    IndexDictionary.Browser browser = getOrCreateDictionaryBrowser();\n\n    do {\n\n      // Get next block key (becomes in effect the current blockKey)\n      BytesRef blockKey = browser.nextKey();\n      if (blockKey == null) {\n        return false; // EOF\n      }\n\n      blockPrefixLen = browser.getBlockPrefixLen();\n      blockPrefixRunAutomatonState = runAutomatonForState(blockKey.bytes, blockKey.offset, blockPrefixLen, 0);\n\n      // We may have passed commonPrefix  (a short-circuit optimization).\n      if (isBeyondCommonPrefix(blockKey)) {\n        return false; // EOF\n      }\n\n      if (blockPrefixRunAutomatonState >= 0) {\n        break; // a match\n      }\n\n      //\n      // This block doesn't match.\n      //\n\n      seekTerm = null; // we're moving on to another block, and seekTerm is before it.\n\n      // Should we simply get the next key (linear mode) or try to seek?\n      if (nextStringCalculator.isLinearState(blockKey)) {\n        continue;\n      }\n\n      // Maybe the next block's key matches?  We have to check this before calling nextStringCalculator.\n      BytesRef peekKey = browser.peekKey();\n      if (peekKey == null) {\n        return false; // EOF\n      }\n      if (runAutomatonForState(peekKey.bytes, peekKey.offset, peekKey.length, 0) >= 0) {\n        continue; // yay; it matched.  Continue to actually advance to it.  This is rare?\n      }\n\n      // Seek to a block by calculating the next term to match the automata *following* peekKey.\n      this.seekTerm = nextStringCalculator.nextSeekTerm(browser.peekKey());\n      if (seekTerm == null) {\n        return false; // EOF\n      }\n      browser.seekBlock(seekTerm);\n      //continue\n\n    } while (true); // while not a match\n\n    // A match!\n\n    //NOTE: we could determine if this automata has a prefix for this specific block (longer than the commonPrefix).\n    //  If we see it, we could set it as the seekTerm and we could also exit the block early if we get past this prefix\n    //  and runAutomatonFromPrefix would start from this prefix.  Smiley tried but benchmarks were not favorable to it.\n\n    initializeHeader(null, browser.getBlockFilePointer());\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23fcccd57316410c404dd37307a496ab850efa9c","date":1582897939,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#nextBlockMatchingPrefix().mjava","sourceNew":null,"sourceOld":"  /**\n   * Find the next block that appears to contain terms that could match the automata.\n   * The prefix is the primary clue.  Returns true if at one, or false for no more (EOF).\n   */\n  protected boolean nextBlockMatchingPrefix() throws IOException {\n    if (beyondCommonPrefix) {\n      return false; // EOF\n    }\n\n    IndexDictionary.Browser browser = getOrCreateDictionaryBrowser();\n\n    do {\n\n      // Get next block key (becomes in effect the current blockKey)\n      BytesRef blockKey = browser.nextKey();\n      if (blockKey == null) {\n        return false; // EOF\n      }\n\n      blockPrefixLen = browser.getBlockPrefixLen();\n      blockPrefixRunAutomatonState = runAutomatonForState(blockKey.bytes, blockKey.offset, blockPrefixLen, 0);\n\n      // We may have passed commonPrefix  (a short-circuit optimization).\n      if (isBeyondCommonPrefix(blockKey)) {\n        return false; // EOF\n      }\n\n      if (blockPrefixRunAutomatonState >= 0) {\n        break; // a match\n      }\n\n      //\n      // This block doesn't match.\n      //\n\n      seekTerm = null; // we're moving on to another block, and seekTerm is before it.\n\n      // Should we simply get the next key (linear mode) or try to seek?\n      if (nextStringCalculator.isLinearState(blockKey)) {\n        continue;\n      }\n\n      // Maybe the next block's key matches?  We have to check this before calling nextStringCalculator.\n      BytesRef peekKey = browser.peekKey();\n      if (peekKey == null) {\n        return false; // EOF\n      }\n      if (runAutomatonForState(peekKey.bytes, peekKey.offset, peekKey.length, 0) >= 0) {\n        continue; // yay; it matched.  Continue to actually advance to it.  This is rare?\n      }\n\n      // Seek to a block by calculating the next term to match the automata *following* peekKey.\n      this.seekTerm = nextStringCalculator.nextSeekTerm(browser.peekKey());\n      if (seekTerm == null) {\n        return false; // EOF\n      }\n      browser.seekBlock(seekTerm);\n      //continue\n\n    } while (true); // while not a match\n\n    // A match!\n\n    //NOTE: we could determine if this automata has a prefix for this specific block (longer than the commonPrefix).\n    //  If we see it, we could set it as the seekTerm and we could also exit the block early if we get past this prefix\n    //  and runAutomatonFromPrefix would start from this prefix.  Smiley tried but benchmarks were not favorable to it.\n\n    initializeHeader(null, browser.getBlockFilePointer());\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23fcccd57316410c404dd37307a496ab850efa9c":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23fcccd57316410c404dd37307a496ab850efa9c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["23fcccd57316410c404dd37307a496ab850efa9c"],"23fcccd57316410c404dd37307a496ab850efa9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}