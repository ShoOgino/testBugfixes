{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer.ClientHandler#run().mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer.ClientHandler#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        //node.message(\"using stream buffer size=\" + bufferSize);\n        InputStream is = new BufferedInputStream(socket.getInputStream(), bufferSize);\n        DataInput in = new InputStreamDataInput(is);\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream(), bufferSize);\n        DataOutput out = new OutputStreamDataOutput(bos);\n\n        if (node instanceof SimplePrimaryNode) {\n          ((SimplePrimaryNode) node).handleOneConnection(random(), ss, stop, is, socket, in, out, bos);\n        } else {\n          ((SimpleReplicaNode) node).handleOneConnection(ss, stop, is, socket, in, out, bos);\n        }\n\n        bos.flush();\n        if (Node.VERBOSE_CONNECTIONS) {\n          node.message(\"bos.flush done\");\n        }\n\n        success = true;\n      } catch (Throwable t) {\n        if (t instanceof SocketException == false) {\n          node.message(\"unexpected exception handling client connection:\");\n          t.printStackTrace(System.out);\n          // Test should fail with this:\n          throw new RuntimeException(t);\n        } else {\n          node.message(\"SocketException \" + t + \" handling client connection; ignoring\");\n        }\n      } finally {\n        if (success) {\n          try {\n            IOUtils.close(socket);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        } else {\n          IOUtils.closeWhileHandlingException(socket);\n        }\n      }\n      if (Node.VERBOSE_CONNECTIONS) {\n        node.message(\"socket.close done\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d28b9a0a26f0720dd31816f591e27ef174ad7f7","date":1453683059,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer.ClientHandler#run().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer.ClientHandler#run().mjava","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        //node.message(\"using stream buffer size=\" + bufferSize);\n        InputStream is = new BufferedInputStream(socket.getInputStream(), bufferSize);\n        DataInput in = new InputStreamDataInput(is);\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream(), bufferSize);\n        DataOutput out = new OutputStreamDataOutput(bos);\n\n        if (node instanceof SimplePrimaryNode) {\n          ((SimplePrimaryNode) node).handleOneConnection(random(), ss, stop, is, socket, in, out, bos);\n        } else {\n          ((SimpleReplicaNode) node).handleOneConnection(ss, stop, is, socket, in, out, bos);\n        }\n\n        bos.flush();\n        if (Node.VERBOSE_CONNECTIONS) {\n          node.message(\"bos.flush done\");\n        }\n\n        success = true;\n      } catch (Throwable t) {\n        if (t instanceof SocketException == false && t instanceof NodeCommunicationException == false) {\n          node.message(\"unexpected exception handling client connection:\");\n          t.printStackTrace(System.out);\n          // Test should fail with this:\n          throw new RuntimeException(t);\n        } else {\n          node.message(\"exception \" + t + \" handling client connection; ignoring\");\n        }\n      } finally {\n        if (success) {\n          try {\n            IOUtils.close(socket);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        } else {\n          IOUtils.closeWhileHandlingException(socket);\n        }\n      }\n      if (Node.VERBOSE_CONNECTIONS) {\n        node.message(\"socket.close done\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        //node.message(\"using stream buffer size=\" + bufferSize);\n        InputStream is = new BufferedInputStream(socket.getInputStream(), bufferSize);\n        DataInput in = new InputStreamDataInput(is);\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream(), bufferSize);\n        DataOutput out = new OutputStreamDataOutput(bos);\n\n        if (node instanceof SimplePrimaryNode) {\n          ((SimplePrimaryNode) node).handleOneConnection(random(), ss, stop, is, socket, in, out, bos);\n        } else {\n          ((SimpleReplicaNode) node).handleOneConnection(ss, stop, is, socket, in, out, bos);\n        }\n\n        bos.flush();\n        if (Node.VERBOSE_CONNECTIONS) {\n          node.message(\"bos.flush done\");\n        }\n\n        success = true;\n      } catch (Throwable t) {\n        if (t instanceof SocketException == false) {\n          node.message(\"unexpected exception handling client connection:\");\n          t.printStackTrace(System.out);\n          // Test should fail with this:\n          throw new RuntimeException(t);\n        } else {\n          node.message(\"SocketException \" + t + \" handling client connection; ignoring\");\n        }\n      } finally {\n        if (success) {\n          try {\n            IOUtils.close(socket);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        } else {\n          IOUtils.closeWhileHandlingException(socket);\n        }\n      }\n      if (Node.VERBOSE_CONNECTIONS) {\n        node.message(\"socket.close done\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec317d5d3de749e12abcc9e6f976d765638fe9e2","date":1454411397,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer.ClientHandler#run().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer.ClientHandler#run().mjava","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        //node.message(\"using stream buffer size=\" + bufferSize);\n        InputStream is = new BufferedInputStream(socket.getInputStream(), bufferSize);\n        DataInput in = new InputStreamDataInput(is);\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream(), bufferSize);\n        DataOutput out = new OutputStreamDataOutput(bos);\n\n        if (node instanceof SimplePrimaryNode) {\n          ((SimplePrimaryNode) node).handleOneConnection(random(), ss, stop, is, socket, in, out, bos);\n        } else {\n          ((SimpleReplicaNode) node).handleOneConnection(ss, stop, is, socket, in, out, bos);\n        }\n\n        bos.flush();\n        if (Node.VERBOSE_CONNECTIONS) {\n          node.message(\"bos.flush done\");\n        }\n\n        success = true;\n      } catch (Throwable t) {\n        if (t instanceof SocketException == false && t instanceof NodeCommunicationException == false) {\n          node.message(\"unexpected exception handling client connection; now failing test:\");\n          t.printStackTrace(System.out);\n          IOUtils.closeWhileHandlingException(ss);\n          // Test should fail with this:\n          throw new RuntimeException(t);\n        } else {\n          node.message(\"exception \" + t + \" handling client connection; ignoring\");\n        }\n      } finally {\n        if (success) {\n          try {\n            IOUtils.close(socket);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        } else {\n          IOUtils.closeWhileHandlingException(socket);\n        }\n      }\n      if (Node.VERBOSE_CONNECTIONS) {\n        node.message(\"socket.close done\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        //node.message(\"using stream buffer size=\" + bufferSize);\n        InputStream is = new BufferedInputStream(socket.getInputStream(), bufferSize);\n        DataInput in = new InputStreamDataInput(is);\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream(), bufferSize);\n        DataOutput out = new OutputStreamDataOutput(bos);\n\n        if (node instanceof SimplePrimaryNode) {\n          ((SimplePrimaryNode) node).handleOneConnection(random(), ss, stop, is, socket, in, out, bos);\n        } else {\n          ((SimpleReplicaNode) node).handleOneConnection(ss, stop, is, socket, in, out, bos);\n        }\n\n        bos.flush();\n        if (Node.VERBOSE_CONNECTIONS) {\n          node.message(\"bos.flush done\");\n        }\n\n        success = true;\n      } catch (Throwable t) {\n        if (t instanceof SocketException == false && t instanceof NodeCommunicationException == false) {\n          node.message(\"unexpected exception handling client connection:\");\n          t.printStackTrace(System.out);\n          // Test should fail with this:\n          throw new RuntimeException(t);\n        } else {\n          node.message(\"exception \" + t + \" handling client connection; ignoring\");\n        }\n      } finally {\n        if (success) {\n          try {\n            IOUtils.close(socket);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        } else {\n          IOUtils.closeWhileHandlingException(socket);\n        }\n      }\n      if (Node.VERBOSE_CONNECTIONS) {\n        node.message(\"socket.close done\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3d0d2e502d016d967c45c0c972ace4d02885e07","date":1454976917,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer.ClientHandler#run().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer.ClientHandler#run().mjava","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        //node.message(\"using stream buffer size=\" + bufferSize);\n        InputStream is = new BufferedInputStream(socket.getInputStream(), bufferSize);\n        DataInput in = new InputStreamDataInput(is);\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream(), bufferSize);\n        DataOutput out = new OutputStreamDataOutput(bos);\n\n        if (node instanceof SimplePrimaryNode) {\n          ((SimplePrimaryNode) node).handleOneConnection(random(), ss, stop, is, socket, in, out, bos);\n        } else {\n          ((SimpleReplicaNode) node).handleOneConnection(ss, stop, is, socket, in, out, bos);\n        }\n\n        bos.flush();\n        if (Node.VERBOSE_CONNECTIONS) {\n          node.message(\"bos.flush done\");\n        }\n\n        success = true;\n      } catch (Throwable t) {\n        if (t instanceof SocketException == false && t instanceof NodeCommunicationException == false) {\n          node.message(\"unexpected exception handling client connection; now failing test:\");\n          t.printStackTrace(System.out);\n          IOUtils.closeWhileHandlingException(ss);\n          // Test should fail with this:\n          throw new RuntimeException(t);\n        } else {\n          node.message(\"exception handling client connection; ignoring:\");\n          t.printStackTrace(System.out);\n        }\n      } finally {\n        if (success) {\n          try {\n            IOUtils.close(socket);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        } else {\n          IOUtils.closeWhileHandlingException(socket);\n        }\n      }\n      if (Node.VERBOSE_CONNECTIONS) {\n        node.message(\"socket.close done\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        //node.message(\"using stream buffer size=\" + bufferSize);\n        InputStream is = new BufferedInputStream(socket.getInputStream(), bufferSize);\n        DataInput in = new InputStreamDataInput(is);\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream(), bufferSize);\n        DataOutput out = new OutputStreamDataOutput(bos);\n\n        if (node instanceof SimplePrimaryNode) {\n          ((SimplePrimaryNode) node).handleOneConnection(random(), ss, stop, is, socket, in, out, bos);\n        } else {\n          ((SimpleReplicaNode) node).handleOneConnection(ss, stop, is, socket, in, out, bos);\n        }\n\n        bos.flush();\n        if (Node.VERBOSE_CONNECTIONS) {\n          node.message(\"bos.flush done\");\n        }\n\n        success = true;\n      } catch (Throwable t) {\n        if (t instanceof SocketException == false && t instanceof NodeCommunicationException == false) {\n          node.message(\"unexpected exception handling client connection; now failing test:\");\n          t.printStackTrace(System.out);\n          IOUtils.closeWhileHandlingException(ss);\n          // Test should fail with this:\n          throw new RuntimeException(t);\n        } else {\n          node.message(\"exception \" + t + \" handling client connection; ignoring\");\n        }\n      } finally {\n        if (success) {\n          try {\n            IOUtils.close(socket);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        } else {\n          IOUtils.closeWhileHandlingException(socket);\n        }\n      }\n      if (Node.VERBOSE_CONNECTIONS) {\n        node.message(\"socket.close done\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33b6213064c76adb293e52f03a3eb1528c5b1858","date":1454977105,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer.ClientHandler#run().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer.ClientHandler#run().mjava","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        //node.message(\"using stream buffer size=\" + bufferSize);\n        InputStream is = new BufferedInputStream(socket.getInputStream(), bufferSize);\n        DataInput in = new InputStreamDataInput(is);\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream(), bufferSize);\n        DataOutput out = new OutputStreamDataOutput(bos);\n\n        if (node instanceof SimplePrimaryNode) {\n          ((SimplePrimaryNode) node).handleOneConnection(random(), ss, stop, is, socket, in, out, bos);\n        } else {\n          ((SimpleReplicaNode) node).handleOneConnection(ss, stop, is, socket, in, out, bos);\n        }\n\n        bos.flush();\n        if (Node.VERBOSE_CONNECTIONS) {\n          node.message(\"bos.flush done\");\n        }\n\n        success = true;\n      } catch (Throwable t) {\n        if (t instanceof SocketException == false && t instanceof NodeCommunicationException == false) {\n          node.message(\"unexpected exception handling client connection; now failing test:\");\n          t.printStackTrace(System.out);\n          IOUtils.closeWhileHandlingException(ss);\n          // Test should fail with this:\n          throw new RuntimeException(t);\n        } else {\n          node.message(\"exception handling client connection; ignoring:\");\n          t.printStackTrace(System.out);\n        }\n      } finally {\n        if (success) {\n          try {\n            IOUtils.close(socket);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        } else {\n          IOUtils.closeWhileHandlingException(socket);\n        }\n      }\n      if (Node.VERBOSE_CONNECTIONS) {\n        node.message(\"socket.close done\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        //node.message(\"using stream buffer size=\" + bufferSize);\n        InputStream is = new BufferedInputStream(socket.getInputStream(), bufferSize);\n        DataInput in = new InputStreamDataInput(is);\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream(), bufferSize);\n        DataOutput out = new OutputStreamDataOutput(bos);\n\n        if (node instanceof SimplePrimaryNode) {\n          ((SimplePrimaryNode) node).handleOneConnection(random(), ss, stop, is, socket, in, out, bos);\n        } else {\n          ((SimpleReplicaNode) node).handleOneConnection(ss, stop, is, socket, in, out, bos);\n        }\n\n        bos.flush();\n        if (Node.VERBOSE_CONNECTIONS) {\n          node.message(\"bos.flush done\");\n        }\n\n        success = true;\n      } catch (Throwable t) {\n        if (t instanceof SocketException == false && t instanceof NodeCommunicationException == false) {\n          node.message(\"unexpected exception handling client connection; now failing test:\");\n          t.printStackTrace(System.out);\n          IOUtils.closeWhileHandlingException(ss);\n          // Test should fail with this:\n          throw new RuntimeException(t);\n        } else {\n          node.message(\"exception \" + t + \" handling client connection; ignoring\");\n        }\n      } finally {\n        if (success) {\n          try {\n            IOUtils.close(socket);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        } else {\n          IOUtils.closeWhileHandlingException(socket);\n        }\n      }\n      if (Node.VERBOSE_CONNECTIONS) {\n        node.message(\"socket.close done\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer.ClientHandler#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        //node.message(\"using stream buffer size=\" + bufferSize);\n        InputStream is = new BufferedInputStream(socket.getInputStream(), bufferSize);\n        DataInput in = new InputStreamDataInput(is);\n        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream(), bufferSize);\n        DataOutput out = new OutputStreamDataOutput(bos);\n\n        if (node instanceof SimplePrimaryNode) {\n          ((SimplePrimaryNode) node).handleOneConnection(random(), ss, stop, is, socket, in, out, bos);\n        } else {\n          ((SimpleReplicaNode) node).handleOneConnection(ss, stop, is, socket, in, out, bos);\n        }\n\n        bos.flush();\n        if (Node.VERBOSE_CONNECTIONS) {\n          node.message(\"bos.flush done\");\n        }\n\n        success = true;\n      } catch (Throwable t) {\n        if (t instanceof SocketException == false && t instanceof NodeCommunicationException == false) {\n          node.message(\"unexpected exception handling client connection; now failing test:\");\n          t.printStackTrace(System.out);\n          IOUtils.closeWhileHandlingException(ss);\n          // Test should fail with this:\n          throw new RuntimeException(t);\n        } else {\n          node.message(\"exception handling client connection; ignoring:\");\n          t.printStackTrace(System.out);\n        }\n      } finally {\n        if (success) {\n          try {\n            IOUtils.close(socket);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        } else {\n          IOUtils.closeWhileHandlingException(socket);\n        }\n      }\n      if (Node.VERBOSE_CONNECTIONS) {\n        node.message(\"socket.close done\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec317d5d3de749e12abcc9e6f976d765638fe9e2":["3d28b9a0a26f0720dd31816f591e27ef174ad7f7"],"c3d0d2e502d016d967c45c0c972ace4d02885e07":["ec317d5d3de749e12abcc9e6f976d765638fe9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33b6213064c76adb293e52f03a3eb1528c5b1858"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["ec317d5d3de749e12abcc9e6f976d765638fe9e2","c3d0d2e502d016d967c45c0c972ace4d02885e07"],"3d28b9a0a26f0720dd31816f591e27ef174ad7f7":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ec317d5d3de749e12abcc9e6f976d765638fe9e2":["c3d0d2e502d016d967c45c0c972ace4d02885e07","33b6213064c76adb293e52f03a3eb1528c5b1858"],"c3d0d2e502d016d967c45c0c972ace4d02885e07":["33b6213064c76adb293e52f03a3eb1528c5b1858"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["68496c2200e559fb7802f7575427b7a482659afb"],"3d28b9a0a26f0720dd31816f591e27ef174ad7f7":["ec317d5d3de749e12abcc9e6f976d765638fe9e2"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["3d28b9a0a26f0720dd31816f591e27ef174ad7f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}