{"path":"lucene/core/src/java/org/apache/lucene/util/FrequencyTrackingRingBuffer#add(T).mjava","commits":[{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FrequencyTrackingRingBuffer#add(T).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a new item to this ring buffer, potentially removing the oldest\n   * entry from this buffer if it is already full.\n   */\n  public synchronized void add(T item) {\n    // we need this method to be protected by a lock since it is important for\n    // correctness that the ring buffer and the frequencies table have\n    // consistent content\n    if (item == null) {\n      throw new IllegalArgumentException(\"null items are not supported\");\n    }\n    assert ringBuffer.size() <= maxSize;\n    if (ringBuffer.size() == maxSize) {\n      // evict the oldest entry\n      final T removed = ringBuffer.removeFirst();\n      final int newFrequency = frequency(removed) - 1;\n      if (newFrequency == 0) {\n        // free for GC\n        frequencies.remove(removed);\n      } else {\n        frequencies.put(removed, newFrequency);\n      }\n    }\n\n    // add the new entry and update frequencies\n    ringBuffer.addLast(item);\n    frequencies.put(item, frequency(item) + 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29fc95de48dc0c0b44cef66830a1f0c6c163ed26","date":1418988133,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/FrequencyTrackingRingBuffer#add(T).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add a new item to this ring buffer, potentially removing the oldest\n   * entry from this buffer if it is already full.\n   */\n  public synchronized void add(T item) {\n    // we need this method to be protected by a lock since it is important for\n    // correctness that the ring buffer and the frequencies table have\n    // consistent content\n    if (item == null) {\n      throw new IllegalArgumentException(\"null items are not supported\");\n    }\n    assert ringBuffer.size() <= maxSize;\n    if (ringBuffer.size() == maxSize) {\n      // evict the oldest entry\n      final T removed = ringBuffer.removeFirst();\n      final int newFrequency = frequency(removed) - 1;\n      if (newFrequency == 0) {\n        // free for GC\n        frequencies.remove(removed);\n      } else {\n        frequencies.put(removed, newFrequency);\n      }\n    }\n\n    // add the new entry and update frequencies\n    ringBuffer.addLast(item);\n    frequencies.put(item, frequency(item) + 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29fc95de48dc0c0b44cef66830a1f0c6c163ed26":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29fc95de48dc0c0b44cef66830a1f0c6c163ed26"]},"commit2Childs":{"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["29fc95de48dc0c0b44cef66830a1f0c6c163ed26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"29fc95de48dc0c0b44cef66830a1f0c6c163ed26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}