{"path":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testFind().mjava","commits":[{"id":"bbccaf0f052c2a25526a56531803c5ebac7c8f41","date":1363510731,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testFind().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFind() throws Exception {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.find(ref); //hash.add(ref);\n        if (key >= 0) { // string found in hash\n          assertFalse(strings.add(str));\n          assertTrue(key < count);\n          assertEquals(str, hash.get(key, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        } else {\n          key = hash.add(ref);\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testFind().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testFind().mjava","sourceNew":"  @Test\n  public void testFind() throws Exception {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.find(ref); //hash.add(ref);\n        if (key >= 0) { // string found in hash\n          assertFalse(strings.add(str));\n          assertTrue(key < count);\n          assertEquals(str, hash.get(key, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        } else {\n          key = hash.add(ref);\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFind() throws Exception {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.find(ref); //hash.add(ref);\n        if (key >= 0) { // string found in hash\n          assertFalse(strings.add(str));\n          assertTrue(key < count);\n          assertEquals(str, hash.get(key, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        } else {\n          key = hash.add(ref);\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testFind().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testFind().mjava","sourceNew":"  @Test\n  public void testFind() throws Exception {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.find(ref); //hash.add(ref);\n        if (key >= 0) { // string found in hash\n          assertFalse(strings.add(str));\n          assertTrue(key < count);\n          assertEquals(str, hash.get(key, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        } else {\n          key = hash.add(ref);\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFind() throws Exception {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.find(ref); //hash.add(ref);\n        if (key >= 0) { // string found in hash\n          assertFalse(strings.add(str));\n          assertTrue(key < count);\n          assertEquals(str, hash.get(key, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        } else {\n          key = hash.add(ref);\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testFind().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testFind().mjava","sourceNew":"  @Test\n  public void testFind() throws Exception {\n    BytesRefBuilder ref = new BytesRefBuilder();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.find(ref.get()); //hash.add(ref);\n        if (key >= 0) { // string found in hash\n          assertFalse(strings.add(str));\n          assertTrue(key < count);\n          assertEquals(str, hash.get(key, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        } else {\n          key = hash.add(ref.get());\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFind() throws Exception {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.find(ref); //hash.add(ref);\n        if (key >= 0) { // string found in hash\n          assertFalse(strings.add(str));\n          assertTrue(key < count);\n          assertEquals(str, hash.get(key, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        } else {\n          key = hash.add(ref);\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}