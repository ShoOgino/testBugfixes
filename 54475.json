{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#invoke(PluginBag[SolrRequestHandler],String,String,SolrRequest.METHOD,CoreContainer).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#invoke(PluginBag[SolrRequestHandler],String,String,SolrRequest.METHOD,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  private SolrQueryResponse invoke(PluginBag<SolrRequestHandler> reqHandlers, String path,\n                                   String fullPath, SolrRequest.METHOD method,\n                                   CoreContainer mockCC) {\n    HashMap<String, String> parts = new HashMap<>();\n    boolean containerHandlerLookup = mockCC.getRequestHandlers() == reqHandlers;\n    path = path == null ? fullPath : path;\n    Api api = null;\n    if (containerHandlerLookup) {\n      api = V2HttpCall.getApiInfo(reqHandlers, path, \"GET\", fullPath, parts);\n    } else {\n      api = V2HttpCall.getApiInfo(mockCC.getRequestHandlers(), fullPath, \"GET\", fullPath, parts);\n      if (api == null) api = new CompositeApi(null);\n      if (api instanceof CompositeApi) {\n        CompositeApi compositeApi = (CompositeApi) api;\n        api = V2HttpCall.getApiInfo(reqHandlers, path, \"GET\", fullPath, parts);\n        compositeApi.add(api);\n        api = compositeApi;\n      }\n    }\n\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, new MapSolrParams(new HashMap<>())){\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        return Collections.emptyList();\n      }\n    };\n\n    api.call(req,rsp);\n    return rsp;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#invoke(PluginBag[SolrRequestHandler],String,String,SolrRequest.METHOD,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  private SolrQueryResponse invoke(PluginBag<SolrRequestHandler> reqHandlers, String path,\n                                   String fullPath, SolrRequest.METHOD method,\n                                   CoreContainer mockCC) {\n    HashMap<String, String> parts = new HashMap<>();\n    boolean containerHandlerLookup = mockCC.getRequestHandlers() == reqHandlers;\n    path = path == null ? fullPath : path;\n    Api api = null;\n    if (containerHandlerLookup) {\n      api = V2HttpCall.getApiInfo(reqHandlers, path, \"GET\", fullPath, parts);\n    } else {\n      api = V2HttpCall.getApiInfo(mockCC.getRequestHandlers(), fullPath, \"GET\", fullPath, parts);\n      if (api == null) api = new CompositeApi(null);\n      if (api instanceof CompositeApi) {\n        CompositeApi compositeApi = (CompositeApi) api;\n        api = V2HttpCall.getApiInfo(reqHandlers, path, \"GET\", fullPath, parts);\n        compositeApi.add(api);\n        api = compositeApi;\n      }\n    }\n\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, new MapSolrParams(new HashMap<>())){\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        return Collections.emptyList();\n      }\n    };\n\n    api.call(req,rsp);\n    return rsp;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1","date":1566871283,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#invoke(PluginBag[SolrRequestHandler],String,String,SolrRequest.METHOD,CoreContainer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#invoke(PluginBag[SolrRequestHandler],String,String,SolrRequest.METHOD,CoreContainer).mjava","sourceNew":"  private SolrQueryResponse invoke(PluginBag<SolrRequestHandler> reqHandlers, String path,\n                                   String fullPath, SolrRequest.METHOD method,\n                                   CoreContainer mockCC) {\n    HashMap<String, String> parts = new HashMap<>();\n    boolean containerHandlerLookup = mockCC.getRequestHandlers() == reqHandlers;\n    path = path == null ? fullPath : path;\n    Api api = null;\n    if (containerHandlerLookup) {\n      api = V2HttpCall.getApiInfo(reqHandlers, path, \"GET\", fullPath, parts);\n    } else {\n      api = V2HttpCall.getApiInfo(mockCC.getRequestHandlers(), fullPath, \"GET\", fullPath, parts);\n      if (api == null) api = new CompositeApi(null);\n      if (api instanceof CompositeApi) {\n        CompositeApi compositeApi = (CompositeApi) api;\n        api = V2HttpCall.getApiInfo(reqHandlers, path, \"GET\", fullPath, parts);\n        compositeApi.add(api);\n        api = compositeApi;\n      }\n    }\n\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, new MapSolrParams(new HashMap<>())) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        return Collections.emptyList();\n      }\n    };\n\n    api.call(req, rsp);\n    return rsp;\n\n  }\n\n","sourceOld":"  private SolrQueryResponse invoke(PluginBag<SolrRequestHandler> reqHandlers, String path,\n                                   String fullPath, SolrRequest.METHOD method,\n                                   CoreContainer mockCC) {\n    HashMap<String, String> parts = new HashMap<>();\n    boolean containerHandlerLookup = mockCC.getRequestHandlers() == reqHandlers;\n    path = path == null ? fullPath : path;\n    Api api = null;\n    if (containerHandlerLookup) {\n      api = V2HttpCall.getApiInfo(reqHandlers, path, \"GET\", fullPath, parts);\n    } else {\n      api = V2HttpCall.getApiInfo(mockCC.getRequestHandlers(), fullPath, \"GET\", fullPath, parts);\n      if (api == null) api = new CompositeApi(null);\n      if (api instanceof CompositeApi) {\n        CompositeApi compositeApi = (CompositeApi) api;\n        api = V2HttpCall.getApiInfo(reqHandlers, path, \"GET\", fullPath, parts);\n        compositeApi.add(api);\n        api = compositeApi;\n      }\n    }\n\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, new MapSolrParams(new HashMap<>())){\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        return Collections.emptyList();\n      }\n    };\n\n    api.call(req,rsp);\n    return rsp;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1"],"86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"]},"commit2Childs":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}