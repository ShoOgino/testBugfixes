{"path":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","commits":[{"id":"71946974c05b5dc4d3201f8abf4ecd2609bba400","date":1319655558,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":["85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148","date":1343514038,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    File fileResourceLoaderBaseDir = null;\n    try {\n      String template_root = request.getParams().get(\"v.base_dir\");\n      fileResourceLoaderBaseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n      if (template_root != null) {\n        fileResourceLoaderBaseDir = new File(template_root);\n      }\n    } catch (SolrException e) {\n      // no worries... probably in ZooKeeper mode and getConfigDir() isn't available, so we'll just ignore omit\n      // the file system resource loader\n    }\n\n    if (fileResourceLoaderBaseDir != null) {\n      engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, fileResourceLoaderBaseDir.getAbsolutePath());\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    } else {\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n    }\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","4e371e5cc5fa0d900720a4a38ecf0b81ed44a6cd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    File fileResourceLoaderBaseDir = null;\n    try {\n      String template_root = request.getParams().get(\"v.base_dir\");\n      fileResourceLoaderBaseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n      if (template_root != null) {\n        fileResourceLoaderBaseDir = new File(template_root);\n      }\n    } catch (SolrException e) {\n      // no worries... probably in ZooKeeper mode and getConfigDir() isn't available, so we'll just ignore omit\n      // the file system resource loader\n    }\n\n    if (fileResourceLoaderBaseDir != null) {\n      engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, fileResourceLoaderBaseDir.getAbsolutePath());\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    } else {\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n    }\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    File fileResourceLoaderBaseDir = null;\n    try {\n      String template_root = request.getParams().get(\"v.base_dir\");\n      fileResourceLoaderBaseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n      if (template_root != null) {\n        fileResourceLoaderBaseDir = new File(template_root);\n      }\n    } catch (SolrException e) {\n      // no worries... probably in ZooKeeper mode and getConfigDir() isn't available, so we'll just ignore omit\n      // the file system resource loader\n    }\n\n    if (fileResourceLoaderBaseDir != null) {\n      engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, fileResourceLoaderBaseDir.getAbsolutePath());\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    } else {\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n    }\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd8fc50365ae7bb9c0d47256bc40182559b70d1","date":1373649022,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    File fileResourceLoaderBaseDir = null;\n    try {\n      String template_root = request.getParams().get(\"v.base_dir\");\n      fileResourceLoaderBaseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n      if (template_root != null) {\n        fileResourceLoaderBaseDir = new File(template_root);\n      }\n    } catch (SolrException e) {\n      // no worries... probably in ZooKeeper mode and getConfigDir() isn't available, so we'll just ignore omit\n      // the file system resource loader\n    }\n\n    if (fileResourceLoaderBaseDir != null) {\n      engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, fileResourceLoaderBaseDir.getAbsolutePath());\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    } else {\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n    }\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    File fileResourceLoaderBaseDir = null;\n    try {\n      String template_root = request.getParams().get(\"v.base_dir\");\n      fileResourceLoaderBaseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n      if (template_root != null) {\n        fileResourceLoaderBaseDir = new File(template_root);\n      }\n    } catch (SolrException e) {\n      // no worries... probably in ZooKeeper mode and getConfigDir() isn't available, so we'll just ignore omit\n      // the file system resource loader\n    }\n\n    if (fileResourceLoaderBaseDir != null) {\n      engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, fileResourceLoaderBaseDir.getAbsolutePath());\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    } else {\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n    }\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    File fileResourceLoaderBaseDir = null;\n    try {\n      String template_root = request.getParams().get(\"v.base_dir\");\n      fileResourceLoaderBaseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n      if (template_root != null) {\n        fileResourceLoaderBaseDir = new File(template_root);\n      }\n    } catch (SolrException e) {\n      // no worries... probably in ZooKeeper mode and getConfigDir() isn't available, so we'll just ignore omit\n      // the file system resource loader\n    }\n\n    if (fileResourceLoaderBaseDir != null) {\n      engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, fileResourceLoaderBaseDir.getAbsolutePath());\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    } else {\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n    }\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    File fileResourceLoaderBaseDir = null;\n    try {\n      String template_root = request.getParams().get(\"v.base_dir\");\n      fileResourceLoaderBaseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n      if (template_root != null) {\n        fileResourceLoaderBaseDir = new File(template_root);\n      }\n    } catch (SolrException e) {\n      // no worries... probably in ZooKeeper mode and getConfigDir() isn't available, so we'll just ignore omit\n      // the file system resource loader\n    }\n\n    if (fileResourceLoaderBaseDir != null) {\n      engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, fileResourceLoaderBaseDir.getAbsolutePath());\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    } else {\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n    }\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"824d674c7c80eeddb2c2e429f92d3b15688d8393","date":1379775111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    File fileResourceLoaderBaseDir = null;\n    try {\n      String template_root = request.getParams().get(\"v.base_dir\");\n      fileResourceLoaderBaseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n      if (template_root != null) {\n        fileResourceLoaderBaseDir = new File(template_root);\n      }\n    } catch (SolrException e) {\n      // no worries... probably in ZooKeeper mode and getConfigDir() isn't available, so we'll just ignore omit\n      // the file system resource loader\n    }\n\n    if (fileResourceLoaderBaseDir != null) {\n      engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, fileResourceLoaderBaseDir.getAbsolutePath());\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,file,solr\");\n    } else {\n      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n    }\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      Properties props = new Properties();\n      // Don't create a separate velocity log file by default.\n      props.put(RuntimeConstants.RUNTIME_LOG, \"\");\n\n      if (propFile == null) {\n        engine.init(props);\n      } else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      Properties props = new Properties();\n      // Don't create a separate velocity log file by default.\n      props.put(RuntimeConstants.RUNTIME_LOG, \"\");\n\n      if (propFile == null) {\n        engine.init(props);\n      } else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1936b95f78af7bc57e67df5b0de3f21a54df10af","date":1420842770,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, \"params,solr\");\n\n    // TODO: Externalize Velocity properties\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      Properties props = new Properties();\n      // Don't create a separate velocity log file by default.\n      props.put(RuntimeConstants.RUNTIME_LOG, \"\");\n\n      if (propFile == null) {\n        engine.init(props);\n      } else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          props.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"5eb2511ababf862ea11e10761c70ee560cd84510":["824d674c7c80eeddb2c2e429f92d3b15688d8393","7d89d7e4e5101347833eea558851bf4209218619"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["71946974c05b5dc4d3201f8abf4ecd2609bba400","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"b7605579001505896d48b07160075a5c8b8e128e":["7d89d7e4e5101347833eea558851bf4209218619","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"7d89d7e4e5101347833eea558851bf4209218619":["824d674c7c80eeddb2c2e429f92d3b15688d8393"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148"],"85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1936b95f78af7bc57e67df5b0de3f21a54df10af"]},"commit2Childs":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148"],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"b7605579001505896d48b07160075a5c8b8e128e":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["37a0f60745e53927c4c876cfe5b5a58170f0646c","824d674c7c80eeddb2c2e429f92d3b15688d8393"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["1936b95f78af7bc57e67df5b0de3f21a54df10af","b7605579001505896d48b07160075a5c8b8e128e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1fd8fc50365ae7bb9c0d47256bc40182559b70d1","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7605579001505896d48b07160075a5c8b8e128e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}