{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#loadfieldValue(Field,boolean,Class[#-extends-NLS]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#loadfieldValue(Field,boolean,Class[#-extends-NLS]).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#loadfieldValue(Field,boolean,Class[#-extends-NLS]).mjava","sourceNew":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<? extends NLS> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","sourceOld":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<? extends NLS> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#loadfieldValue(Field,boolean,Class[#-extends-NLS]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#loadfieldValue(Field,boolean,Class[#-extends-NLS]).mjava","sourceNew":"  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<? extends NLS> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","sourceOld":"  /**\n   * @param field\n   * @param isFieldAccessible\n   */\n  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<? extends NLS> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6","date":1421884114,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#loadfieldValue(Field,boolean,Class[#-extends-NLS]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#loadfieldValue(Field,boolean,Class[#-extends-NLS]).mjava","sourceNew":"  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<? extends NLS> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException | IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","sourceOld":"  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<? extends NLS> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException e) {\n      // should not happen\n    } catch (IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f27641d17cfd674c750ad0fe2f801c2216f38de","date":1441851864,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#loadfieldValue(Field,Class[#-extends-NLS]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/messages/NLS#loadfieldValue(Field,boolean,Class[#-extends-NLS]).mjava","sourceNew":"  private static void loadfieldValue(Field field, Class<? extends NLS> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException | IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","sourceOld":"  private static void loadfieldValue(Field field, boolean isFieldAccessible,\n      Class<? extends NLS> clazz) {\n    int MOD_EXPECTED = Modifier.PUBLIC | Modifier.STATIC;\n    int MOD_MASK = MOD_EXPECTED | Modifier.FINAL;\n    if ((field.getModifiers() & MOD_MASK) != MOD_EXPECTED)\n      return;\n\n    // Set a value for this empty field.\n    if (!isFieldAccessible)\n      makeAccessible(field);\n    try {\n      field.set(null, field.getName());\n      validateMessage(field.getName(), clazz);\n    } catch (IllegalArgumentException | IllegalAccessException e) {\n      // should not happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f27641d17cfd674c750ad0fe2f801c2216f38de":["5891bd634d5ddbf7c48cff0f4818c682ca42a4a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f27641d17cfd674c750ad0fe2f801c2216f38de"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["5891bd634d5ddbf7c48cff0f4818c682ca42a4a6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"5891bd634d5ddbf7c48cff0f4818c682ca42a4a6":["0f27641d17cfd674c750ad0fe2f801c2216f38de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0f27641d17cfd674c750ad0fe2f801c2216f38de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}