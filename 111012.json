{"path":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector#indexesOf(String[],int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector#indexesOf(String[],int,int).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector#indexesOf(String[],int,int).mjava","sourceNew":"  public int[] indexesOf(String[] termNumbers, int start, int len) {\n    // TODO: there must be a more efficient way of doing this.\n    //       At least, we could advance the lower bound of the terms array\n    //       as we find valid indices. Also, it might be possible to leverage\n    //       this even more by starting in the middle of the termNumbers array\n    //       and thus dividing the terms array maybe in half with each found index.\n    int res[] = new int[len];\n\n    for (int i = 0; i < len; i++) {\n      res[i] = indexOf(termNumbers[start + i]);\n    }\n    return res;\n  }\n\n","sourceOld":"  public int[] indexesOf(String[] termNumbers, int start, int len) {\n    // TODO: there must be a more efficient way of doing this.\n    //       At least, we could advance the lower bound of the terms array\n    //       as we find valid indices. Also, it might be possible to leverage\n    //       this even more by starting in the middle of the termNumbers array\n    //       and thus dividing the terms array maybe in half with each found index.\n    int res[] = new int[len];\n\n    for (int i = 0; i < len; i++) {\n      res[i] = indexOf(termNumbers[start + i]);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector#indexesOf(BytesRef[],int,int).mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector#indexesOf(String[],int,int).mjava","sourceNew":"  public int[] indexesOf(BytesRef[] termNumbers, int start, int len) {\n    // TODO: there must be a more efficient way of doing this.\n    //       At least, we could advance the lower bound of the terms array\n    //       as we find valid indices. Also, it might be possible to leverage\n    //       this even more by starting in the middle of the termNumbers array\n    //       and thus dividing the terms array maybe in half with each found index.\n    int res[] = new int[len];\n\n    for (int i = 0; i < len; i++) {\n      res[i] = indexOf(termNumbers[start + i]);\n    }\n    return res;\n  }\n\n","sourceOld":"  public int[] indexesOf(String[] termNumbers, int start, int len) {\n    // TODO: there must be a more efficient way of doing this.\n    //       At least, we could advance the lower bound of the terms array\n    //       as we find valid indices. Also, it might be possible to leverage\n    //       this even more by starting in the middle of the termNumbers array\n    //       and thus dividing the terms array maybe in half with each found index.\n    int res[] = new int[len];\n\n    for (int i = 0; i < len; i++) {\n      res[i] = indexOf(termNumbers[start + i]);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector#indexesOf(String[],int,int).mjava","sourceNew":null,"sourceOld":"  public int[] indexesOf(String[] termNumbers, int start, int len) {\n    // TODO: there must be a more efficient way of doing this.\n    //       At least, we could advance the lower bound of the terms array\n    //       as we find valid indices. Also, it might be possible to leverage\n    //       this even more by starting in the middle of the termNumbers array\n    //       and thus dividing the terms array maybe in half with each found index.\n    int res[] = new int[len];\n\n    for (int i = 0; i < len; i++) {\n      res[i] = indexOf(termNumbers[start + i]);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}