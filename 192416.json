{"path":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    StringIndex idx = FieldCache.DEFAULT.getStringIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.lookup[idx.order[i]]);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    StringIndex idx = FieldCache.DEFAULT.getStringIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.lookup[idx.order[i]]);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    StringIndex idx = FieldCache.DEFAULT.getStringIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.lookup[idx.order[i]]);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"70ad682703b8585f5d0a637efec044d57ec05efb":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}