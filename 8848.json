{"path":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","commits":[{"id":"d678d05c645583cb2ee5c2d5565fba91462466ed","date":1132608924,"type":1,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    assertEquals(\"Des\", filter.next().termText());\n    assertEquals(\"mot\", filter.next().termText());\n    assertEquals(\"cles\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"LA\", filter.next().termText());\n    assertEquals(\"CHAINE\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"AE\", filter.next().termText());\n    assertEquals(\"C\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"D\", filter.next().termText());\n    assertEquals(\"N\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"OE\", filter.next().termText());\n    assertEquals(\"TH\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"ae\", filter.next().termText());\n    assertEquals(\"c\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"d\", filter.next().termText());\n    assertEquals(\"n\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"oe\", filter.next().termText());\n    assertEquals(\"ss\", filter.next().termText());\n    assertEquals(\"th\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertNull(filter.next());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    assertEquals(\"Des\", filter.next().termText());\n    assertEquals(\"mot\", filter.next().termText());\n    assertEquals(\"cles\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"LA\", filter.next().termText());\n    assertEquals(\"CHAINE\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"AE\", filter.next().termText());\n    assertEquals(\"C\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"D\", filter.next().termText());\n    assertEquals(\"N\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"OE\", filter.next().termText());\n    assertEquals(\"TH\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"ae\", filter.next().termText());\n    assertEquals(\"c\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"d\", filter.next().termText());\n    assertEquals(\"n\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"oe\", filter.next().termText());\n    assertEquals(\"ss\", filter.next().termText());\n    assertEquals(\"th\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertNull(filter.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2d5b3a60e3d67d049091d4cf0d641fd1f5ba564","date":1217951253,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    assertEquals(\"Des\", filter.next().termText());\n    assertEquals(\"mot\", filter.next().termText());\n    assertEquals(\"cles\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"LA\", filter.next().termText());\n    assertEquals(\"CHAINE\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"AE\", filter.next().termText());\n    assertEquals(\"C\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"IJ\", filter.next().termText());\n    assertEquals(\"D\", filter.next().termText());\n    assertEquals(\"N\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"OE\", filter.next().termText());\n    assertEquals(\"TH\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"ae\", filter.next().termText());\n    assertEquals(\"c\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"ij\", filter.next().termText());\n    assertEquals(\"d\", filter.next().termText());\n    assertEquals(\"n\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"oe\", filter.next().termText());\n    assertEquals(\"ss\", filter.next().termText());\n    assertEquals(\"th\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertEquals(\"fi\", filter.next().termText());\n    assertEquals(\"fl\", filter.next().termText());\n    assertNull(filter.next());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    assertEquals(\"Des\", filter.next().termText());\n    assertEquals(\"mot\", filter.next().termText());\n    assertEquals(\"cles\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"LA\", filter.next().termText());\n    assertEquals(\"CHAINE\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"AE\", filter.next().termText());\n    assertEquals(\"C\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"D\", filter.next().termText());\n    assertEquals(\"N\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"OE\", filter.next().termText());\n    assertEquals(\"TH\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"ae\", filter.next().termText());\n    assertEquals(\"c\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"d\", filter.next().termText());\n    assertEquals(\"n\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"oe\", filter.next().termText());\n    assertEquals(\"ss\", filter.next().termText());\n    assertEquals(\"th\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertNull(filter.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    final Token reusableToken = new Token();\n    assertEquals(\"Des\", filter.next(reusableToken).term());\n    assertEquals(\"mot\", filter.next(reusableToken).term());\n    assertEquals(\"cles\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"LA\", filter.next(reusableToken).term());\n    assertEquals(\"CHAINE\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"AE\", filter.next(reusableToken).term());\n    assertEquals(\"C\", filter.next(reusableToken).term());\n    assertEquals(\"E\", filter.next(reusableToken).term());\n    assertEquals(\"E\", filter.next(reusableToken).term());\n    assertEquals(\"E\", filter.next(reusableToken).term());\n    assertEquals(\"E\", filter.next(reusableToken).term());\n    assertEquals(\"I\", filter.next(reusableToken).term());\n    assertEquals(\"I\", filter.next(reusableToken).term());\n    assertEquals(\"I\", filter.next(reusableToken).term());\n    assertEquals(\"I\", filter.next(reusableToken).term());\n    assertEquals(\"IJ\", filter.next(reusableToken).term());\n    assertEquals(\"D\", filter.next(reusableToken).term());\n    assertEquals(\"N\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"OE\", filter.next(reusableToken).term());\n    assertEquals(\"TH\", filter.next(reusableToken).term());\n    assertEquals(\"U\", filter.next(reusableToken).term());\n    assertEquals(\"U\", filter.next(reusableToken).term());\n    assertEquals(\"U\", filter.next(reusableToken).term());\n    assertEquals(\"U\", filter.next(reusableToken).term());\n    assertEquals(\"Y\", filter.next(reusableToken).term());\n    assertEquals(\"Y\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"ae\", filter.next(reusableToken).term());\n    assertEquals(\"c\", filter.next(reusableToken).term());\n    assertEquals(\"e\", filter.next(reusableToken).term());\n    assertEquals(\"e\", filter.next(reusableToken).term());\n    assertEquals(\"e\", filter.next(reusableToken).term());\n    assertEquals(\"e\", filter.next(reusableToken).term());\n    assertEquals(\"i\", filter.next(reusableToken).term());\n    assertEquals(\"i\", filter.next(reusableToken).term());\n    assertEquals(\"i\", filter.next(reusableToken).term());\n    assertEquals(\"i\", filter.next(reusableToken).term());\n    assertEquals(\"ij\", filter.next(reusableToken).term());\n    assertEquals(\"d\", filter.next(reusableToken).term());\n    assertEquals(\"n\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"oe\", filter.next(reusableToken).term());\n    assertEquals(\"ss\", filter.next(reusableToken).term());\n    assertEquals(\"th\", filter.next(reusableToken).term());\n    assertEquals(\"u\", filter.next(reusableToken).term());\n    assertEquals(\"u\", filter.next(reusableToken).term());\n    assertEquals(\"u\", filter.next(reusableToken).term());\n    assertEquals(\"u\", filter.next(reusableToken).term());\n    assertEquals(\"y\", filter.next(reusableToken).term());\n    assertEquals(\"y\", filter.next(reusableToken).term());\n    assertEquals(\"fi\", filter.next(reusableToken).term());\n    assertEquals(\"fl\", filter.next(reusableToken).term());\n    assertNull(filter.next(reusableToken));\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    assertEquals(\"Des\", filter.next().termText());\n    assertEquals(\"mot\", filter.next().termText());\n    assertEquals(\"cles\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"LA\", filter.next().termText());\n    assertEquals(\"CHAINE\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"AE\", filter.next().termText());\n    assertEquals(\"C\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"IJ\", filter.next().termText());\n    assertEquals(\"D\", filter.next().termText());\n    assertEquals(\"N\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"OE\", filter.next().termText());\n    assertEquals(\"TH\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"ae\", filter.next().termText());\n    assertEquals(\"c\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"ij\", filter.next().termText());\n    assertEquals(\"d\", filter.next().termText());\n    assertEquals(\"n\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"oe\", filter.next().termText());\n    assertEquals(\"ss\", filter.next().termText());\n    assertEquals(\"th\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertEquals(\"fi\", filter.next().termText());\n    assertEquals(\"fl\", filter.next().termText());\n    assertNull(filter.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    final Token reusableToken = new Token();\n    assertEquals(\"Des\", filter.next(reusableToken).term());\n    assertEquals(\"mot\", filter.next(reusableToken).term());\n    assertEquals(\"cles\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"LA\", filter.next(reusableToken).term());\n    assertEquals(\"CHAINE\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"A\", filter.next(reusableToken).term());\n    assertEquals(\"AE\", filter.next(reusableToken).term());\n    assertEquals(\"C\", filter.next(reusableToken).term());\n    assertEquals(\"E\", filter.next(reusableToken).term());\n    assertEquals(\"E\", filter.next(reusableToken).term());\n    assertEquals(\"E\", filter.next(reusableToken).term());\n    assertEquals(\"E\", filter.next(reusableToken).term());\n    assertEquals(\"I\", filter.next(reusableToken).term());\n    assertEquals(\"I\", filter.next(reusableToken).term());\n    assertEquals(\"I\", filter.next(reusableToken).term());\n    assertEquals(\"I\", filter.next(reusableToken).term());\n    assertEquals(\"IJ\", filter.next(reusableToken).term());\n    assertEquals(\"D\", filter.next(reusableToken).term());\n    assertEquals(\"N\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"O\", filter.next(reusableToken).term());\n    assertEquals(\"OE\", filter.next(reusableToken).term());\n    assertEquals(\"TH\", filter.next(reusableToken).term());\n    assertEquals(\"U\", filter.next(reusableToken).term());\n    assertEquals(\"U\", filter.next(reusableToken).term());\n    assertEquals(\"U\", filter.next(reusableToken).term());\n    assertEquals(\"U\", filter.next(reusableToken).term());\n    assertEquals(\"Y\", filter.next(reusableToken).term());\n    assertEquals(\"Y\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"a\", filter.next(reusableToken).term());\n    assertEquals(\"ae\", filter.next(reusableToken).term());\n    assertEquals(\"c\", filter.next(reusableToken).term());\n    assertEquals(\"e\", filter.next(reusableToken).term());\n    assertEquals(\"e\", filter.next(reusableToken).term());\n    assertEquals(\"e\", filter.next(reusableToken).term());\n    assertEquals(\"e\", filter.next(reusableToken).term());\n    assertEquals(\"i\", filter.next(reusableToken).term());\n    assertEquals(\"i\", filter.next(reusableToken).term());\n    assertEquals(\"i\", filter.next(reusableToken).term());\n    assertEquals(\"i\", filter.next(reusableToken).term());\n    assertEquals(\"ij\", filter.next(reusableToken).term());\n    assertEquals(\"d\", filter.next(reusableToken).term());\n    assertEquals(\"n\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"o\", filter.next(reusableToken).term());\n    assertEquals(\"oe\", filter.next(reusableToken).term());\n    assertEquals(\"ss\", filter.next(reusableToken).term());\n    assertEquals(\"th\", filter.next(reusableToken).term());\n    assertEquals(\"u\", filter.next(reusableToken).term());\n    assertEquals(\"u\", filter.next(reusableToken).term());\n    assertEquals(\"u\", filter.next(reusableToken).term());\n    assertEquals(\"u\", filter.next(reusableToken).term());\n    assertEquals(\"y\", filter.next(reusableToken).term());\n    assertEquals(\"y\", filter.next(reusableToken).term());\n    assertEquals(\"fi\", filter.next(reusableToken).term());\n    assertEquals(\"fl\", filter.next(reusableToken).term());\n    assertNull(filter.next(reusableToken));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":null,"sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":null,"sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"/dev/null","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["d2d5b3a60e3d67d049091d4cf0d641fd1f5ba564"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["8d78f014fded44fbde905f4f84cdc21907b371e8","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"d2d5b3a60e3d67d049091d4cf0d641fd1f5ba564":["d678d05c645583cb2ee5c2d5565fba91462466ed"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["0a046c0c310bc77931fc8441bd920053b607dd14"],"d678d05c645583cb2ee5c2d5565fba91462466ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","8d78f014fded44fbde905f4f84cdc21907b371e8"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"d2d5b3a60e3d67d049091d4cf0d641fd1f5ba564":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"d678d05c645583cb2ee5c2d5565fba91462466ed":["d2d5b3a60e3d67d049091d4cf0d641fd1f5ba564"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d678d05c645583cb2ee5c2d5565fba91462466ed"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}