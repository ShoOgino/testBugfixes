{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7249bf663236743660155abfc0941aebf4245391","date":1433953380,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LegacyLongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new LegacyDoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new LegacyIntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new LegacyFloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new LegacyIntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new LegacyIntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LegacyLongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new LegacyDoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new LegacyIntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new LegacyFloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new LegacyIntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new LegacyIntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","bugFix":["2dd6ecb8250c497ed227653279d6a4f470bfbb31","770342641f7b505eaa8dccdc666158bff2419109","54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(new LogDocMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongPoint(\"theLong\", theLong--));\n      doc.add(new DoublePoint(\"theDouble\", theDouble--));\n      doc.add(new IntPoint(\"theInt\", theInt--));\n      doc.add(new FloatPoint(\"theFloat\", theFloat--));\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"sparse\", i));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntPoint(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // this test relies on one segment and docid order\n    IndexReader r = DirectoryReader.open(writer);\n    assertEquals(1, r.leaves().size());\n    reader = r.leaves().get(0).reader();\n    TestUtil.checkReader(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["8c146731a64debc22c115bbf11ee1a060aa7ea02","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"770342641f7b505eaa8dccdc666158bff2419109":["7249bf663236743660155abfc0941aebf4245391"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"7249bf663236743660155abfc0941aebf4245391":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["770342641f7b505eaa8dccdc666158bff2419109"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"770342641f7b505eaa8dccdc666158bff2419109":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","56572ec06f1407c066d6b7399413178b33176cd8"],"7249bf663236743660155abfc0941aebf4245391":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["7249bf663236743660155abfc0941aebf4245391"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}