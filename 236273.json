{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#put(CategoryPath,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#put(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#put(CategoryPath,int).mjava","sourceNew":"  /**\n   * Add a category to the cache, with the given ordinal as the value.\n   * <P>\n   * If the implementation keeps only a partial cache (e.g., an LRU cache)\n   * and finds that its cache is full, it should clear up part of the cache\n   * and return <code>true</code>. Otherwise, it should return\n   * <code>false</code>.\n   * <P>\n   * The reason why the caller needs to know if part of the cache was\n   * cleared is that in that case it will have to commit its on-disk index\n   * (so that all the latest category additions can be searched on disk, if\n   * we can't rely on the cache to contain them).\n   * <P>\n   * Ordinals should be non-negative. Currently there is no defined way to\n   * specify that a cache should remember a category does NOT exist.\n   * It doesn't really matter, because normally the next thing we do after\n   * finding that a category does not exist is to add it.\n   */\n  public boolean put(CategoryPath categoryPath, int ordinal);\n\n","sourceOld":"  /**\n   * Add a category to the cache, with the given ordinal as the value.\n   * <P>\n   * If the implementation keeps only a partial cache (e.g., an LRU cache)\n   * and finds that its cache is full, it should clear up part of the cache\n   * and return <code>true</code>. Otherwise, it should return\n   * <code>false</code>.\n   * <P>\n   * The reason why the caller needs to know if part of the cache was\n   * cleared is that in that case it will have to commit its on-disk index\n   * (so that all the latest category additions can be searched on disk, if\n   * we can't rely on the cache to contain them).\n   * <P>\n   * Ordinals should be non-negative. Currently there is no defined way to\n   * specify that a cache should remember a category does NOT exist.\n   * It doesn't really matter, because normally the next thing we do after\n   * finding that a category does not exist is to add it.\n   */\n  public boolean put(CategoryPath categoryPath, int ordinal);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#put(FacetLabel,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#put(CategoryPath,int).mjava","sourceNew":"  /**\n   * Add a category to the cache, with the given ordinal as the value.\n   * <P>\n   * If the implementation keeps only a partial cache (e.g., an LRU cache)\n   * and finds that its cache is full, it should clear up part of the cache\n   * and return <code>true</code>. Otherwise, it should return\n   * <code>false</code>.\n   * <P>\n   * The reason why the caller needs to know if part of the cache was\n   * cleared is that in that case it will have to commit its on-disk index\n   * (so that all the latest category additions can be searched on disk, if\n   * we can't rely on the cache to contain them).\n   * <P>\n   * Ordinals should be non-negative. Currently there is no defined way to\n   * specify that a cache should remember a category does NOT exist.\n   * It doesn't really matter, because normally the next thing we do after\n   * finding that a category does not exist is to add it.\n   */\n  public boolean put(FacetLabel categoryPath, int ordinal);\n\n","sourceOld":"  /**\n   * Add a category to the cache, with the given ordinal as the value.\n   * <P>\n   * If the implementation keeps only a partial cache (e.g., an LRU cache)\n   * and finds that its cache is full, it should clear up part of the cache\n   * and return <code>true</code>. Otherwise, it should return\n   * <code>false</code>.\n   * <P>\n   * The reason why the caller needs to know if part of the cache was\n   * cleared is that in that case it will have to commit its on-disk index\n   * (so that all the latest category additions can be searched on disk, if\n   * we can't rely on the cache to contain them).\n   * <P>\n   * Ordinals should be non-negative. Currently there is no defined way to\n   * specify that a cache should remember a category does NOT exist.\n   * It doesn't really matter, because normally the next thing we do after\n   * finding that a category does not exist is to add it.\n   */\n  public boolean put(CategoryPath categoryPath, int ordinal);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#put(CategoryPath,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add a category to the cache, with the given ordinal as the value.\n   * <P>\n   * If the implementation keeps only a partial cache (e.g., an LRU cache)\n   * and finds that its cache is full, it should clear up part of the cache\n   * and return <code>true</code>. Otherwise, it should return\n   * <code>false</code>.\n   * <P>\n   * The reason why the caller needs to know if part of the cache was\n   * cleared is that in that case it will have to commit its on-disk index\n   * (so that all the latest category additions can be searched on disk, if\n   * we can't rely on the cache to contain them).\n   * <P>\n   * Ordinals should be non-negative. Currently there is no defined way to\n   * specify that a cache should remember a category does NOT exist.\n   * It doesn't really matter, because normally the next thing we do after\n   * finding that a category does not exist is to add it.\n   */\n  public boolean put(CategoryPath categoryPath, int ordinal);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}