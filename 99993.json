{"path":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"229fd5dc94765f137932ddf46f64e9814f568803","date":1276820681,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ec8ca9beadfeafceab15219ccf41e29bda6abf9","date":1286732730,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1ec8ca9beadfeafceab15219ccf41e29bda6abf9"],"c26f00b574427b55127e869b935845554afde1fa":["1ec8ca9beadfeafceab15219ccf41e29bda6abf9","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1ec8ca9beadfeafceab15219ccf41e29bda6abf9"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","229fd5dc94765f137932ddf46f64e9814f568803"],"1ec8ca9beadfeafceab15219ccf41e29bda6abf9":["229fd5dc94765f137932ddf46f64e9814f568803"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","1ec8ca9beadfeafceab15219ccf41e29bda6abf9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"229fd5dc94765f137932ddf46f64e9814f568803":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","229fd5dc94765f137932ddf46f64e9814f568803"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1ec8ca9beadfeafceab15219ccf41e29bda6abf9":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"229fd5dc94765f137932ddf46f64e9814f568803":["5f4e87790277826a2aea119328600dfb07761f32","1ec8ca9beadfeafceab15219ccf41e29bda6abf9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}