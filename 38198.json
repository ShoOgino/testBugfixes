{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#createMinLength(BreakIterator,int).mjava","commits":[{"id":"1c215be2eed9175b15dc0027a12e6f3a6ace25f8","date":1483848648,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#createMinLength(BreakIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Breaks will be at least {@code minLength} apart (to the extent possible). */\n  public static LengthGoalBreakIterator createMinLength(BreakIterator baseIter, int minLength) {\n    return new LengthGoalBreakIterator(baseIter, minLength, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#createMinLength(BreakIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Breaks will be at least {@code minLength} apart (to the extent possible). */\n  public static LengthGoalBreakIterator createMinLength(BreakIterator baseIter, int minLength) {\n    return new LengthGoalBreakIterator(baseIter, minLength, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab9796b8ce55058e483d2f195ac9b1942fcf478","date":1577858220,"type":3,"author":"Nándor Mátravölgyi","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#createMinLength(BreakIterator,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#createMinLength(BreakIterator,int).mjava","sourceNew":"  /** For backwards compatibility you can initialise the break iterator without fragmentAlignment. */\n  @Deprecated\n  public static LengthGoalBreakIterator createMinLength(BreakIterator baseIter, int minLength) {\n    return createMinLength(baseIter, minLength, 0.f);\n  }\n\n","sourceOld":"  /** Breaks will be at least {@code minLength} apart (to the extent possible). */\n  public static LengthGoalBreakIterator createMinLength(BreakIterator baseIter, int minLength) {\n    return new LengthGoalBreakIterator(baseIter, minLength, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#createMinLength(BreakIterator,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/LengthGoalBreakIterator#createMinLength(BreakIterator,int).mjava","sourceNew":"  /** For backwards compatibility you can initialise the break iterator without fragmentAlignment. */\n  @Deprecated\n  public static LengthGoalBreakIterator createMinLength(BreakIterator baseIter, int minLength) {\n    return createMinLength(baseIter, minLength, 0.f);\n  }\n\n","sourceOld":"  /** Breaks will be at least {@code minLength} apart (to the extent possible). */\n  public static LengthGoalBreakIterator createMinLength(BreakIterator baseIter, int minLength) {\n    return new LengthGoalBreakIterator(baseIter, minLength, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["1c215be2eed9175b15dc0027a12e6f3a6ace25f8"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":["1c215be2eed9175b15dc0027a12e6f3a6ace25f8","9ab9796b8ce55058e483d2f195ac9b1942fcf478"],"1c215be2eed9175b15dc0027a12e6f3a6ace25f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c215be2eed9175b15dc0027a12e6f3a6ace25f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ab9796b8ce55058e483d2f195ac9b1942fcf478"]},"commit2Childs":{"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"1c215be2eed9175b15dc0027a12e6f3a6ace25f8":["9ab9796b8ce55058e483d2f195ac9b1942fcf478","c606b777c4250f3f3f6f66d659c7c4c403679b71","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c215be2eed9175b15dc0027a12e6f3a6ace25f8","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}