{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(String,String).mjava","commits":[{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(String,String).mjava","pathOld":"/dev/null","sourceNew":"  static SolrCloudManager createCloudManager(String clusterStateStr, String metadata) {\n    Map m = (Map) Utils.fromJSONString(clusterStateStr);\n    Map meta = (Map) Utils.fromJSONString(metadata);\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.load(0, m, Collections.emptySet(), null);\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, Utils.getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> emptyMap());\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(String,String).mjava","sourceNew":"  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.load(0, m, Collections.emptySet(), null);\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, Utils.getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> emptyMap());\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager createCloudManager(String clusterStateStr, String metadata) {\n    Map m = (Map) Utils.fromJSONString(clusterStateStr);\n    Map meta = (Map) Utils.fromJSONString(metadata);\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.load(0, m, Collections.emptySet(), null);\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, Utils.getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> emptyMap());\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5a27e78e3d29dee02bab19ded25336471e96882":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f5a27e78e3d29dee02bab19ded25336471e96882"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["f5a27e78e3d29dee02bab19ded25336471e96882"],"f5a27e78e3d29dee02bab19ded25336471e96882":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}