{"path":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","commits":[{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configSetName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      NamedList flags = getConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configSetName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configSetName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      ConfigSet.SchemaSupplier schema = force -> createIndexSchema(dcore, solrConfig, force);\n      return new ConfigSet(configSetName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configSetName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c1f39a1c5a00532404e216378a8157523b83551","date":1597798332,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema indexSchema = createIndexSchema(dcore, solrConfig, false);\n      return new ConfigSet(configSetName(dcore), solrConfig, force -> indexSchema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      ConfigSet.SchemaSupplier schema = force -> createIndexSchema(dcore, solrConfig, force);\n      return new ConfigSet(configSetName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fc1087854af39c9b439f47d913fd3ac1d85ac5c","date":1599523122,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      return new ConfigSet(configSetName(dcore), solrConfig, force -> createIndexSchema(dcore, solrConfig, force), properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema indexSchema = createIndexSchema(dcore, solrConfig, false);\n      return new ConfigSet(configSetName(dcore), solrConfig, force -> indexSchema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938fe8fd4d30ae70161827366f67c2382985e446","date":1600050178,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema indexSchema = createIndexSchema(dcore, solrConfig, false);\n      return new ConfigSet(configSetName(dcore), solrConfig, force -> indexSchema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      return new ConfigSet(configSetName(dcore), solrConfig, force -> createIndexSchema(dcore, solrConfig, force), properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e451e492cce54699988e2ce0aea55e3ff170cb0","date":1600305561,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      return new ConfigSet(configSetName(dcore), solrConfig, force -> createIndexSchema(dcore, solrConfig, force), properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema indexSchema = createIndexSchema(dcore, solrConfig, false);\n      return new ConfigSet(configSetName(dcore), solrConfig, force -> indexSchema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c1f39a1c5a00532404e216378a8157523b83551":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["0c1f39a1c5a00532404e216378a8157523b83551"],"938fe8fd4d30ae70161827366f67c2382985e446":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c"],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["938fe8fd4d30ae70161827366f67c2382985e446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e451e492cce54699988e2ce0aea55e3ff170cb0"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["0c1f39a1c5a00532404e216378a8157523b83551"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"0c1f39a1c5a00532404e216378a8157523b83551":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c"],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["938fe8fd4d30ae70161827366f67c2382985e446"],"938fe8fd4d30ae70161827366f67c2382985e446":["0e451e492cce54699988e2ce0aea55e3ff170cb0"],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}