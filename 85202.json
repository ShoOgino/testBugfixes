{"path":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","commits":[{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the optimized equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    Field norms = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.ANALYZED);\n    // indexed without norms\n    Field noNorms = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.ANALYZED_NO_NORMS);\n    // not indexed, but stored\n    Field noIndex = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.NO);\n    // not indexed but stored, omitNorms is set\n    Field noNormsNoIndex = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.NO);\n    noNormsNoIndex.setOmitNorms(true);\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", \"a\", Field.Store.YES, Field.Index.ANALYZED);\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the optimized equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    Field norms = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.ANALYZED);\n    // indexed without norms\n    Field noNorms = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.ANALYZED_NO_NORMS);\n    // not indexed, but stored\n    Field noIndex = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.NO);\n    // not indexed but stored, omitNorms is set\n    Field noNormsNoIndex = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.NO);\n    noNormsNoIndex.setOmitNorms(true);\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", \"a\", Field.Store.YES, Field.Index.ANALYZED);\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the optimized equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    Field norms = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.ANALYZED);\n    // indexed without norms\n    Field noNorms = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.ANALYZED_NO_NORMS);\n    // not indexed, but stored\n    Field noIndex = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.NO);\n    // not indexed but stored, omitNorms is set\n    Field noNormsNoIndex = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.NO);\n    noNormsNoIndex.setOmitNorms(true);\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", \"a\", Field.Store.YES, Field.Index.ANALYZED);\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","sourceNew":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the optimized equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    Field norms = new Field(\"foo\", customType, \"a\");\n    // indexed without norms\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setOmitNorms(true);\n    Field noNorms = new Field(\"foo\", customType1, \"a\");\n    // not indexed, but stored\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    Field noIndex = new Field(\"foo\", customType2, \"a\");\n    // not indexed but stored, omitNorms is set\n    FieldType customType3 = new FieldType();\n    customType3.setStored(true);\n    customType3.setOmitNorms(true);\n    Field noNormsNoIndex = new Field(\"foo\", customType3, \"a\");\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", customType, \"a\");\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","sourceOld":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the optimized equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    Field norms = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.ANALYZED);\n    // indexed without norms\n    Field noNorms = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.ANALYZED_NO_NORMS);\n    // not indexed, but stored\n    Field noIndex = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.NO);\n    // not indexed but stored, omitNorms is set\n    Field noNormsNoIndex = new Field(\"foo\", \"a\", Field.Store.YES, Field.Index.NO);\n    noNormsNoIndex.setOmitNorms(true);\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", \"a\", Field.Store.YES, Field.Index.ANALYZED);\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","sourceNew":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the optimized equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    Field norms = new Field(\"foo\", \"a\", customType);\n    // indexed without norms\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setOmitNorms(true);\n    Field noNorms = new Field(\"foo\", \"a\", customType1);\n    // not indexed, but stored\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    Field noIndex = new Field(\"foo\", \"a\", customType2);\n    // not indexed but stored, omitNorms is set\n    FieldType customType3 = new FieldType();\n    customType3.setStored(true);\n    customType3.setOmitNorms(true);\n    Field noNormsNoIndex = new Field(\"foo\", \"a\", customType3);\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", \"a\", customType);\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","sourceOld":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the optimized equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    Field norms = new Field(\"foo\", customType, \"a\");\n    // indexed without norms\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setOmitNorms(true);\n    Field noNorms = new Field(\"foo\", customType1, \"a\");\n    // not indexed, but stored\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    Field noIndex = new Field(\"foo\", customType2, \"a\");\n    // not indexed but stored, omitNorms is set\n    FieldType customType3 = new FieldType();\n    customType3.setStored(true);\n    customType3.setOmitNorms(true);\n    Field noNormsNoIndex = new Field(\"foo\", customType3, \"a\");\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", customType, \"a\");\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","sourceNew":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the fully merged equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    Field norms = new Field(\"foo\", \"a\", customType);\n    // indexed without norms\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setOmitNorms(true);\n    Field noNorms = new Field(\"foo\", \"a\", customType1);\n    // not indexed, but stored\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    Field noIndex = new Field(\"foo\", \"a\", customType2);\n    // not indexed but stored, omitNorms is set\n    FieldType customType3 = new FieldType();\n    customType3.setStored(true);\n    customType3.setOmitNorms(true);\n    Field noNormsNoIndex = new Field(\"foo\", \"a\", customType3);\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", \"a\", customType);\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","sourceOld":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the optimized equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    Field norms = new Field(\"foo\", \"a\", customType);\n    // indexed without norms\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setOmitNorms(true);\n    Field noNorms = new Field(\"foo\", \"a\", customType1);\n    // not indexed, but stored\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    Field noIndex = new Field(\"foo\", \"a\", customType2);\n    // not indexed but stored, omitNorms is set\n    FieldType customType3 = new FieldType();\n    customType3.setStored(true);\n    customType3.setOmitNorms(true);\n    Field noNormsNoIndex = new Field(\"foo\", \"a\", customType3);\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", \"a\", customType);\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","sourceNew":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the fully merged equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    Field norms = new Field(\"foo\", \"a\", customType);\n    // indexed without norms\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setOmitNorms(true);\n    Field noNorms = new Field(\"foo\", \"a\", customType1);\n    // not indexed, but stored\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    Field noIndex = new Field(\"foo\", \"a\", customType2);\n    // not indexed but stored, omitNorms is set\n    FieldType customType3 = new FieldType();\n    customType3.setStored(true);\n    customType3.setOmitNorms(true);\n    Field noNormsNoIndex = new Field(\"foo\", \"a\", customType3);\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", \"a\", customType);\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","sourceOld":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the fully merged equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    Field norms = new Field(\"foo\", \"a\", customType);\n    // indexed without norms\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setOmitNorms(true);\n    Field noNorms = new Field(\"foo\", \"a\", customType1);\n    // not indexed, but stored\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    Field noIndex = new Field(\"foo\", \"a\", customType2);\n    // not indexed but stored, omitNorms is set\n    FieldType customType3 = new FieldType();\n    customType3.setStored(true);\n    customType3.setOmitNorms(true);\n    Field noNormsNoIndex = new Field(\"foo\", \"a\", customType3);\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", \"a\", customType);\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["29ef99d61cda9641b6250bf9567329a6e65f901d","1509f151d7692d84fae414b2b799ac06ba60fcb4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}