{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultStoredFieldsWriter#copyFieldsWithDeletions(MergeState,MergeState.IndexReaderAndLiveDocs,DefaultStoredFieldsReader,int[]).mjava","commits":[{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultStoredFieldsWriter#copyFieldsWithDeletions(MergeState,MergeState.IndexReaderAndLiveDocs,DefaultStoredFieldsReader,int[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#copyFieldsWithDeletions(FieldsWriter,MergeState.IndexReaderAndLiveDocs,FieldsReader).mjava","sourceNew":"  private int copyFieldsWithDeletions(MergeState mergeState, final MergeState.IndexReaderAndLiveDocs reader,\n                                      final DefaultStoredFieldsReader matchingFieldsReader, int rawDocLengths[])\n    throws IOException, MergeAbortedException, CorruptIndexException {\n    int docCount = 0;\n    final int maxDoc = reader.reader.maxDoc();\n    final Bits liveDocs = reader.liveDocs;\n    assert liveDocs != null;\n    if (matchingFieldsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      for (int j = 0; j < maxDoc;) {\n        if (!liveDocs.get(j)) {\n          // skip deleted docs\n          ++j;\n          continue;\n        }\n        // We can optimize this case (doing a bulk byte copy) since the field\n        // numbers are identical\n        int start = j, numDocs = 0;\n        do {\n          j++;\n          numDocs++;\n          if (j >= maxDoc) break;\n          if (!liveDocs.get(j)) {\n            j++;\n            break;\n          }\n        } while(numDocs < MAX_RAW_MERGE_DOCS);\n\n        IndexInput stream = matchingFieldsReader.rawDocs(rawDocLengths, start, numDocs);\n        addRawDocuments(stream, rawDocLengths, numDocs);\n        docCount += numDocs;\n        mergeState.checkAbort.work(300 * numDocs);\n      }\n    } else {\n      for (int j = 0; j < maxDoc; j++) {\n        if (!liveDocs.get(j)) {\n          // skip deleted docs\n          continue;\n        }\n        // TODO: this could be more efficient using\n        // FieldVisitor instead of loading/writing entire\n        // doc; ie we just have to renumber the field number\n        // on the fly?\n        // NOTE: it's very important to first assign to doc then pass it to\n        // fieldsWriter.addDocument; see LUCENE-1282\n        Document doc = reader.reader.document(j);\n        addDocument(doc, mergeState.fieldInfos);\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    return docCount;\n  }\n\n","sourceOld":"  private int copyFieldsWithDeletions(final FieldsWriter fieldsWriter, final MergeState.IndexReaderAndLiveDocs reader,\n                                      final FieldsReader matchingFieldsReader)\n    throws IOException, MergeAbortedException, CorruptIndexException {\n    int docCount = 0;\n    final int maxDoc = reader.reader.maxDoc();\n    final Bits liveDocs = reader.liveDocs;\n    assert liveDocs != null;\n    if (matchingFieldsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      for (int j = 0; j < maxDoc;) {\n        if (!liveDocs.get(j)) {\n          // skip deleted docs\n          ++j;\n          continue;\n        }\n        // We can optimize this case (doing a bulk byte copy) since the field\n        // numbers are identical\n        int start = j, numDocs = 0;\n        do {\n          j++;\n          numDocs++;\n          if (j >= maxDoc) break;\n          if (!liveDocs.get(j)) {\n            j++;\n            break;\n          }\n        } while(numDocs < MAX_RAW_MERGE_DOCS);\n\n        IndexInput stream = matchingFieldsReader.rawDocs(rawDocLengths, start, numDocs);\n        fieldsWriter.addRawDocuments(stream, rawDocLengths, numDocs);\n        docCount += numDocs;\n        checkAbort.work(300 * numDocs);\n      }\n    } else {\n      for (int j = 0; j < maxDoc; j++) {\n        if (!liveDocs.get(j)) {\n          // skip deleted docs\n          continue;\n        }\n        // TODO: this could be more efficient using\n        // FieldVisitor instead of loading/writing entire\n        // doc; ie we just have to renumber the field number\n        // on the fly?\n        // NOTE: it's very important to first assign to doc then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        Document doc = reader.reader.document(j);\n        fieldsWriter.addDocument(doc, fieldInfos);\n        docCount++;\n        checkAbort.work(300);\n      }\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40StoredFieldsWriter#copyFieldsWithDeletions(MergeState,MergeState.IndexReaderAndLiveDocs,Lucene40StoredFieldsReader,int[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultStoredFieldsWriter#copyFieldsWithDeletions(MergeState,MergeState.IndexReaderAndLiveDocs,DefaultStoredFieldsReader,int[]).mjava","sourceNew":"  private int copyFieldsWithDeletions(MergeState mergeState, final MergeState.IndexReaderAndLiveDocs reader,\n                                      final Lucene40StoredFieldsReader matchingFieldsReader, int rawDocLengths[])\n    throws IOException, MergeAbortedException, CorruptIndexException {\n    int docCount = 0;\n    final int maxDoc = reader.reader.maxDoc();\n    final Bits liveDocs = reader.liveDocs;\n    assert liveDocs != null;\n    if (matchingFieldsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      for (int j = 0; j < maxDoc;) {\n        if (!liveDocs.get(j)) {\n          // skip deleted docs\n          ++j;\n          continue;\n        }\n        // We can optimize this case (doing a bulk byte copy) since the field\n        // numbers are identical\n        int start = j, numDocs = 0;\n        do {\n          j++;\n          numDocs++;\n          if (j >= maxDoc) break;\n          if (!liveDocs.get(j)) {\n            j++;\n            break;\n          }\n        } while(numDocs < MAX_RAW_MERGE_DOCS);\n\n        IndexInput stream = matchingFieldsReader.rawDocs(rawDocLengths, start, numDocs);\n        addRawDocuments(stream, rawDocLengths, numDocs);\n        docCount += numDocs;\n        mergeState.checkAbort.work(300 * numDocs);\n      }\n    } else {\n      for (int j = 0; j < maxDoc; j++) {\n        if (!liveDocs.get(j)) {\n          // skip deleted docs\n          continue;\n        }\n        // TODO: this could be more efficient using\n        // FieldVisitor instead of loading/writing entire\n        // doc; ie we just have to renumber the field number\n        // on the fly?\n        // NOTE: it's very important to first assign to doc then pass it to\n        // fieldsWriter.addDocument; see LUCENE-1282\n        Document doc = reader.reader.document(j);\n        addDocument(doc, mergeState.fieldInfos);\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    return docCount;\n  }\n\n","sourceOld":"  private int copyFieldsWithDeletions(MergeState mergeState, final MergeState.IndexReaderAndLiveDocs reader,\n                                      final DefaultStoredFieldsReader matchingFieldsReader, int rawDocLengths[])\n    throws IOException, MergeAbortedException, CorruptIndexException {\n    int docCount = 0;\n    final int maxDoc = reader.reader.maxDoc();\n    final Bits liveDocs = reader.liveDocs;\n    assert liveDocs != null;\n    if (matchingFieldsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      for (int j = 0; j < maxDoc;) {\n        if (!liveDocs.get(j)) {\n          // skip deleted docs\n          ++j;\n          continue;\n        }\n        // We can optimize this case (doing a bulk byte copy) since the field\n        // numbers are identical\n        int start = j, numDocs = 0;\n        do {\n          j++;\n          numDocs++;\n          if (j >= maxDoc) break;\n          if (!liveDocs.get(j)) {\n            j++;\n            break;\n          }\n        } while(numDocs < MAX_RAW_MERGE_DOCS);\n\n        IndexInput stream = matchingFieldsReader.rawDocs(rawDocLengths, start, numDocs);\n        addRawDocuments(stream, rawDocLengths, numDocs);\n        docCount += numDocs;\n        mergeState.checkAbort.work(300 * numDocs);\n      }\n    } else {\n      for (int j = 0; j < maxDoc; j++) {\n        if (!liveDocs.get(j)) {\n          // skip deleted docs\n          continue;\n        }\n        // TODO: this could be more efficient using\n        // FieldVisitor instead of loading/writing entire\n        // doc; ie we just have to renumber the field number\n        // on the fly?\n        // NOTE: it's very important to first assign to doc then pass it to\n        // fieldsWriter.addDocument; see LUCENE-1282\n        Document doc = reader.reader.document(j);\n        addDocument(doc, mergeState.fieldInfos);\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}