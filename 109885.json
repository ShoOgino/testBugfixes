{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String sql = params.get(\"sql\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    StreamContext context = new StreamContext();\n    TupleStream tupleStream = SQLTupleStreamParser.parse(sql, tableMappings, numWorkers, workerCollection, workerZkhost);\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(StreamHandler.clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"tuples\", tupleStream);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a55bf71f91aeded06b44ad1abea6666ea168b697","date":1435941127,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String sql = params.get(\"sql\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    StreamContext context = new StreamContext();\n    try {\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, tableMappings, numWorkers, workerCollection, workerZkhost);\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n      rsp.add(\"tuples\", new ExceptionStream(tupleStream));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      logger.error(\"Exception parsing SQL\", e);\n      rsp.add(\"tuples\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String sql = params.get(\"sql\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    StreamContext context = new StreamContext();\n    TupleStream tupleStream = SQLTupleStreamParser.parse(sql, tableMappings, numWorkers, workerCollection, workerZkhost);\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(StreamHandler.clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"tuples\", tupleStream);\n  }\n\n","bugFix":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"sql\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    StreamContext context = new StreamContext();\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, numWorkers, workerCollection, workerZkhost);\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String sql = params.get(\"sql\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    StreamContext context = new StreamContext();\n    try {\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, tableMappings, numWorkers, workerCollection, workerZkhost);\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n      rsp.add(\"tuples\", new ExceptionStream(tupleStream));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      logger.error(\"Exception parsing SQL\", e);\n      rsp.add(\"tuples\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":["5d61d4181e71350e5e61802f2706c65a7a1a509e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79509167584beb75c0b777d2b701adeb1f06d885","date":1441841855,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"sql\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, numWorkers, workerCollection, workerZkhost, AggregationMode.getMode(mode));\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"sql\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    StreamContext context = new StreamContext();\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, numWorkers, workerCollection, workerZkhost);\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, numWorkers, workerCollection, workerZkhost, AggregationMode.getMode(mode));\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"sql\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, numWorkers, workerCollection, workerZkhost, AggregationMode.getMode(mode));\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec77e67e448734229255f16b8e0b1b4402f23095","date":1453748031,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, numWorkers, workerCollection, workerZkhost,\n          AggregationMode.getMode(mode), includeMetadata);\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, numWorkers, workerCollection, workerZkhost, AggregationMode.getMode(mode));\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c39fd399a800c79eff2beaad702c9b6190d499fd","date":1453997311,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      context.setSolrClientCache(StreamHandler.clientCache);\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql,\n                                                           numWorkers,\n                                                           workerCollection,\n                                                           workerZkhost,\n                                                           AggregationMode.getMode(mode),\n                                                           includeMetadata,\n                                                           context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, numWorkers, workerCollection, workerZkhost,\n          AggregationMode.getMode(mode), includeMetadata);\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      context.setSolrClientCache(StreamHandler.clientCache);\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql,\n                                                           numWorkers,\n                                                           workerCollection,\n                                                           workerZkhost,\n                                                           AggregationMode.getMode(mode),\n                                                           includeMetadata,\n                                                           context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, numWorkers, workerCollection, workerZkhost,\n          AggregationMode.getMode(mode), includeMetadata);\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d61d4181e71350e5e61802f2706c65a7a1a509e","date":1454363521,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      context.setSolrClientCache(StreamHandler.clientCache);\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql,\n                                                           numWorkers,\n                                                           workerCollection,\n                                                           workerZkhost,\n                                                           AggregationMode.getMode(mode),\n                                                           includeMetadata,\n                                                           context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      context.setSolrClientCache(StreamHandler.clientCache);\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql,\n                                                           numWorkers,\n                                                           workerCollection,\n                                                           workerZkhost,\n                                                           AggregationMode.getMode(mode),\n                                                           includeMetadata,\n                                                           context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      context.setSolrClientCache(StreamHandler.clientCache);\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql,\n                                                           numWorkers,\n                                                           workerCollection,\n                                                           workerZkhost,\n                                                           AggregationMode.getMode(mode),\n                                                           includeMetadata,\n                                                           context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"sql parameter cannot be null\");\n      }\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql, numWorkers, workerCollection, workerZkhost, AggregationMode.getMode(mode));\n      context.numWorkers = numWorkers;\n      context.setSolrClientCache(StreamHandler.clientCache);\n      tupleStream.setStreamContext(context);\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n\n    TupleStream tupleStream = null;\n    try {\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      Properties info = new Properties();\n      info.setProperty(\"model\",\n          \"inline:{\\n\" +\n              \"  \\\"version\\\": \\\"1.0\\\",\\n\" +\n              \"  \\\"defaultSchema\\\": \\\"\" + defaultZkhost + \"\\\",\\n\" +\n              \"  \\\"schemas\\\": [\\n\" +\n              \"    {\\n\" +\n              \"      \\\"name\\\": \\\"\" + defaultZkhost + \"\\\",\\n\" +\n              \"      \\\"type\\\": \\\"custom\\\",\\n\" +\n              \"      \\\"factory\\\": \\\"\" + SolrSchemaFactory.class.getName() + \"\\\",\\n\" +\n              \"      \\\"operand\\\": {\\n\" +\n              \"        \\\"zk\\\": \\\"\" + defaultZkhost + \"\\\"\\n\" +\n              \"      }\\n\" +\n              \"    }\\n\" +\n              \"  ]\\n\" +\n              \"}\");\n      info.setProperty(\"lex\", \"MYSQL\");\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(\n          new JDBCStream(\"jdbc:calcite:\", sql, null, info, null)));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      context.setSolrClientCache(StreamHandler.clientCache);\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql,\n                                                           numWorkers,\n                                                           workerCollection,\n                                                           workerZkhost,\n                                                           AggregationMode.getMode(mode),\n                                                           includeMetadata,\n                                                           context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34960db40f081388a12ae7131547fb03236705fd","date":1461892880,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    params.set(\"includeMetadata\", params.getBool(\"includeMetadata\", false));\n\n    TupleStream tupleStream = null;\n    try {\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      /*\n       * Would be great to replace this with the JDBCStream. Can't do that currently since need to have metadata\n       * added to the stream for the JDBC driver. This could be fixed by using the Calcite Avatica server and client.\n       */\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(new SqlHandlerStream(sql, params)));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n\n    TupleStream tupleStream = null;\n    try {\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      Properties info = new Properties();\n      info.setProperty(\"model\",\n          \"inline:{\\n\" +\n              \"  \\\"version\\\": \\\"1.0\\\",\\n\" +\n              \"  \\\"defaultSchema\\\": \\\"\" + defaultZkhost + \"\\\",\\n\" +\n              \"  \\\"schemas\\\": [\\n\" +\n              \"    {\\n\" +\n              \"      \\\"name\\\": \\\"\" + defaultZkhost + \"\\\",\\n\" +\n              \"      \\\"type\\\": \\\"custom\\\",\\n\" +\n              \"      \\\"factory\\\": \\\"\" + SolrSchemaFactory.class.getName() + \"\\\",\\n\" +\n              \"      \\\"operand\\\": {\\n\" +\n              \"        \\\"zk\\\": \\\"\" + defaultZkhost + \"\\\"\\n\" +\n              \"      }\\n\" +\n              \"    }\\n\" +\n              \"  ]\\n\" +\n              \"}\");\n      info.setProperty(\"lex\", \"MYSQL\");\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(\n          new JDBCStream(\"jdbc:calcite:\", sql, null, info, null)));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0104212f65198f40658f73c83200eaa99553ea09","date":1462026700,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n\n\n    TupleStream tupleStream = null;\n    try {\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = \"jdbc:calcitesolr:\";\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      if(params.getBool(\"includeMetadata\", false)) {\n        /*\n         * Would be great to replace this with the JDBCStream. Can't do that currently since need to have metadata\n         * added to the stream for the JDBC driver. This could be fixed by using the Calcite Avatica server and client.\n         */\n        tupleStream = new SqlHandlerStream(url, sql, properties, driverClass);\n      } else {\n        tupleStream = new JDBCStream(url, sql, null, properties, driverClass);\n      }\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    params.set(\"includeMetadata\", params.getBool(\"includeMetadata\", false));\n\n    TupleStream tupleStream = null;\n    try {\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      /*\n       * Would be great to replace this with the JDBCStream. Can't do that currently since need to have metadata\n       * added to the stream for the JDBC driver. This could be fixed by using the Calcite Avatica server and client.\n       */\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(new SqlHandlerStream(sql, params)));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb6141814b8d48be493c9aafd5dacf509f1054d","date":1476202427,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\", defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(workerZkhost == null) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      context.setSolrClientCache(StreamHandler.clientCache);\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql,\n                                                           numWorkers,\n                                                           workerCollection,\n                                                           workerZkhost,\n                                                           AggregationMode.getMode(mode),\n                                                           includeMetadata,\n                                                           context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\",defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      context.setSolrClientCache(StreamHandler.clientCache);\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql,\n                                                           numWorkers,\n                                                           workerCollection,\n                                                           workerZkhost,\n                                                           AggregationMode.getMode(mode),\n                                                           includeMetadata,\n                                                           context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":["ed509e20c5e173e5a72924d126d600d7e539654a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed509e20c5e173e5a72924d126d600d7e539654a","date":1476217650,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\", defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      context.setSolrClientCache(StreamHandler.clientCache);\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql,\n                                                           numWorkers,\n                                                           workerCollection,\n                                                           workerZkhost,\n                                                           AggregationMode.getMode(mode),\n                                                           includeMetadata,\n                                                           context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\", defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(workerZkhost == null) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      context.setSolrClientCache(StreamHandler.clientCache);\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql,\n                                                           numWorkers,\n                                                           workerCollection,\n                                                           workerZkhost,\n                                                           AggregationMode.getMode(mode),\n                                                           includeMetadata,\n                                                           context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":["3bb6141814b8d48be493c9aafd5dacf509f1054d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = \"jdbc:calcitesolr:\";\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      if(params.getBool(\"includeMetadata\", false)) {\n        /*\n         * Would be great to replace this with the JDBCStream. Can't do that currently since need to have metadata\n         * added to the stream for the JDBC driver. This could be fixed by using the Calcite Avatica server and client.\n         */\n        tupleStream = new SqlHandlerStream(url, sql, properties, driverClass);\n      } else {\n        tupleStream = new JDBCStream(url, sql, null, properties, driverClass);\n      }\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n\n\n    TupleStream tupleStream = null;\n    try {\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = \"jdbc:calcitesolr:\";\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      if(params.getBool(\"includeMetadata\", false)) {\n        /*\n         * Would be great to replace this with the JDBCStream. Can't do that currently since need to have metadata\n         * added to the stream for the JDBC driver. This could be fixed by using the Calcite Avatica server and client.\n         */\n        tupleStream = new SqlHandlerStream(url, sql, properties, driverClass);\n      } else {\n        tupleStream = new JDBCStream(url, sql, null, properties, driverClass);\n      }\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcbcd58b7af0ce15c2274481aebfaa9c1eab9890","date":1477598910,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = \"jdbc:calcitesolr:\";\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      if(params.getBool(\"includeMetadata\", false)) {\n        /*\n         * Would be great to replace this with the JDBCStream. Can't do that currently since need to have metadata\n         * added to the stream for the JDBC driver. This could be fixed by using the Calcite Avatica server and client.\n         */\n        tupleStream = new SqlHandlerStream(url, sql, properties, driverClass);\n      } else {\n        tupleStream = new JDBCStream(url, sql, null, properties, driverClass);\n      }\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = \"jdbc:calcitesolr:\";\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      if(params.getBool(\"includeMetadata\", false)) {\n        /*\n         * Would be great to replace this with the JDBCStream. Can't do that currently since need to have metadata\n         * added to the stream for the JDBC driver. This could be fixed by using the Calcite Avatica server and client.\n         */\n        tupleStream = new SqlHandlerStream(url, sql, properties, driverClass);\n      } else {\n        tupleStream = new JDBCStream(url, sql, null, properties, driverClass);\n      }\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ec0d36fa431b057fed42d0fb97e6cdfe99b870","date":1478017188,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      if(params.getBool(\"includeMetadata\", false)) {\n        /*\n         * Would be great to replace this with the JDBCStream. Can't do that currently since need to have metadata\n         * added to the stream for the JDBC driver. This could be fixed by using the Calcite Avatica server and client.\n         */\n        tupleStream = new SqlHandlerStream(url, sql, properties, driverClass);\n      } else {\n        tupleStream = new JDBCStream(url, sql, null, properties, driverClass);\n      }\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = \"jdbc:calcitesolr:\";\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      if(params.getBool(\"includeMetadata\", false)) {\n        /*\n         * Would be great to replace this with the JDBCStream. Can't do that currently since need to have metadata\n         * added to the stream for the JDBC driver. This could be fixed by using the Calcite Avatica server and client.\n         */\n        tupleStream = new SqlHandlerStream(url, sql, properties, driverClass);\n      } else {\n        tupleStream = new JDBCStream(url, sql, null, properties, driverClass);\n      }\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98","date":1478186540,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      if(params.getBool(\"includeMetadata\", false)) {\n        /*\n         * Would be great to replace this with the JDBCStream. Can't do that currently since need to have metadata\n         * added to the stream for the JDBC driver. This could be fixed by using the Calcite Avatica server and client.\n         */\n        tupleStream = new SqlHandlerStream(url, sql, properties, driverClass);\n      } else {\n        tupleStream = new JDBCStream(url, sql, null, properties, driverClass);\n      }\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f20deebda1cf327549c84cb60464135abd31c71","date":1487004368,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"facet\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"map_reduce\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"facet\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    String sql = params.get(\"stmt\");\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    String workerCollection = params.get(\"workerCollection\", defaultWorkerCollection);\n    String workerZkhost = params.get(\"workerZkhost\", defaultZkhost);\n    String mode = params.get(\"aggregationMode\", \"map_reduce\");\n    StreamContext context = new StreamContext();\n\n    // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n    boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      context.setSolrClientCache(StreamHandler.clientCache);\n\n      TupleStream tupleStream = SQLTupleStreamParser.parse(sql,\n                                                           numWorkers,\n                                                           workerCollection,\n                                                           workerZkhost,\n                                                           AggregationMode.getMode(mode),\n                                                           includeMetadata,\n                                                           context);\n\n      rsp.add(\"result-set\", new StreamHandler.TimerStream(new ExceptionStream(tupleStream)));\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81","date":1489617105,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params = adjustParams(params);\n    req.setParams(params);\n\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"facet\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"facet\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6106d879512729bf1e4840d612448c4180d110c8","date":1489651910,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params = adjustParams(params);\n    req.setParams(params);\n\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"facet\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"facet\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params = adjustParams(params);\n    req.setParams(params);\n\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"facet\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"facet\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c80f6f4fe2e841ba56e6ce200951063ab91196d3","date":1533052731,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params = adjustParams(params);\n    req.setParams(params);\n\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"facet\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params = adjustParams(params);\n    req.setParams(params);\n\n    String sql = params.get(\"stmt\");\n    // Set defaults for parameters\n    params.set(\"numWorkers\", params.getInt(\"numWorkers\", 1));\n    params.set(\"workerCollection\", params.get(\"workerCollection\", defaultWorkerCollection));\n    params.set(\"workerZkhost\", params.get(\"workerZkhost\", defaultZkhost));\n    params.set(\"aggregationMode\", params.get(\"aggregationMode\", \"facet\"));\n\n    TupleStream tupleStream = null;\n    try {\n\n      if(!isCloud) {\n        throw new IllegalStateException(sqlNonCloudErrorMsg);\n      }\n\n      if(sql == null) {\n        throw new Exception(\"stmt parameter cannot be null\");\n      }\n\n      String url = CalciteSolrDriver.CONNECT_STRING_PREFIX;\n\n      Properties properties = new Properties();\n      // Add all query parameters\n      Iterator<String> parameterNamesIterator = params.getParameterNamesIterator();\n      while(parameterNamesIterator.hasNext()) {\n        String param = parameterNamesIterator.next();\n        properties.setProperty(param, params.get(param));\n      }\n\n      // Set these last to ensure that they are set properly\n      properties.setProperty(\"lex\", Lex.MYSQL.toString());\n      properties.setProperty(\"zk\", defaultZkhost);\n\n      String driverClass = CalciteSolrDriver.class.getCanonicalName();\n\n      // JDBC driver requires metadata from the SQLHandler. Default to false since this adds a new Metadata stream.\n      boolean includeMetadata = params.getBool(\"includeMetadata\", false);\n      tupleStream = new SqlHandlerStream(url, sql, null, properties, driverClass, includeMetadata);\n\n      tupleStream = new StreamHandler.TimerStream(new ExceptionStream(tupleStream));\n\n      rsp.add(\"result-set\", tupleStream);\n    } catch(Exception e) {\n      //Catch the SQL parsing and query transformation exceptions.\n      if(tupleStream != null) {\n        tupleStream.close();\n      }\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new StreamHandler.DummyErrorStream(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d61d4181e71350e5e61802f2706c65a7a1a509e":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"ec77e67e448734229255f16b8e0b1b4402f23095":["3ec71d4701edbd96cfea97384101d13611393552"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81"],"3bb6141814b8d48be493c9aafd5dacf509f1054d":["5d61d4181e71350e5e61802f2706c65a7a1a509e"],"3ec71d4701edbd96cfea97384101d13611393552":["79509167584beb75c0b777d2b701adeb1f06d885"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"c39fd399a800c79eff2beaad702c9b6190d499fd":["ec77e67e448734229255f16b8e0b1b4402f23095"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["ed509e20c5e173e5a72924d126d600d7e539654a","3f20deebda1cf327549c84cb60464135abd31c71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98":["33ec0d36fa431b057fed42d0fb97e6cdfe99b870"],"3f20deebda1cf327549c84cb60464135abd31c71":["b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98"],"33ec0d36fa431b057fed42d0fb97e6cdfe99b870":["dcbcd58b7af0ce15c2274481aebfaa9c1eab9890"],"ab68488225b6a6c357dda72ed11dedca9914a192":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","6106d879512729bf1e4840d612448c4180d110c8"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["ec77e67e448734229255f16b8e0b1b4402f23095","c39fd399a800c79eff2beaad702c9b6190d499fd"],"34960db40f081388a12ae7131547fb03236705fd":["d984627825732e682759c22df7a3b171a80f3812"],"79509167584beb75c0b777d2b701adeb1f06d885":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"0104212f65198f40658f73c83200eaa99553ea09":["34960db40f081388a12ae7131547fb03236705fd"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["3ec71d4701edbd96cfea97384101d13611393552","5d61d4181e71350e5e61802f2706c65a7a1a509e"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dcbcd58b7af0ce15c2274481aebfaa9c1eab9890":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0104212f65198f40658f73c83200eaa99553ea09","ed509e20c5e173e5a72924d126d600d7e539654a"],"6106d879512729bf1e4840d612448c4180d110c8":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"d984627825732e682759c22df7a3b171a80f3812":["5d61d4181e71350e5e61802f2706c65a7a1a509e"],"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"ed509e20c5e173e5a72924d126d600d7e539654a":["3bb6141814b8d48be493c9aafd5dacf509f1054d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c80f6f4fe2e841ba56e6ce200951063ab91196d3"]},"commit2Childs":{"5d61d4181e71350e5e61802f2706c65a7a1a509e":["3bb6141814b8d48be493c9aafd5dacf509f1054d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","d984627825732e682759c22df7a3b171a80f3812"],"ec77e67e448734229255f16b8e0b1b4402f23095":["c39fd399a800c79eff2beaad702c9b6190d499fd","8d15e34266d75e4e8b95da046cd0afc812367b38"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb6141814b8d48be493c9aafd5dacf509f1054d":["ed509e20c5e173e5a72924d126d600d7e539654a"],"3ec71d4701edbd96cfea97384101d13611393552":["ec77e67e448734229255f16b8e0b1b4402f23095","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"c39fd399a800c79eff2beaad702c9b6190d499fd":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["ab68488225b6a6c357dda72ed11dedca9914a192","6106d879512729bf1e4840d612448c4180d110c8","7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98":["3f20deebda1cf327549c84cb60464135abd31c71"],"3f20deebda1cf327549c84cb60464135abd31c71":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"33ec0d36fa431b057fed42d0fb97e6cdfe99b870":["b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"8d15e34266d75e4e8b95da046cd0afc812367b38":["5d61d4181e71350e5e61802f2706c65a7a1a509e"],"34960db40f081388a12ae7131547fb03236705fd":["0104212f65198f40658f73c83200eaa99553ea09"],"79509167584beb75c0b777d2b701adeb1f06d885":["3ec71d4701edbd96cfea97384101d13611393552"],"0104212f65198f40658f73c83200eaa99553ea09":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"dcbcd58b7af0ce15c2274481aebfaa9c1eab9890":["33ec0d36fa431b057fed42d0fb97e6cdfe99b870"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["dcbcd58b7af0ce15c2274481aebfaa9c1eab9890"],"6106d879512729bf1e4840d612448c4180d110c8":["ab68488225b6a6c357dda72ed11dedca9914a192"],"d984627825732e682759c22df7a3b171a80f3812":["34960db40f081388a12ae7131547fb03236705fd"],"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81":["c80f6f4fe2e841ba56e6ce200951063ab91196d3"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["79509167584beb75c0b777d2b701adeb1f06d885"],"ed509e20c5e173e5a72924d126d600d7e539654a":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}