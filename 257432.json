{"path":"lucene/src/test-framework/org/apache/lucene/analysis/MockTokenizer#close().mjava","commits":[{"id":"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","date":1305207152,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockTokenizer#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n    super.close();\n    // in some exceptional cases (e.g. TestIndexWriterExceptions) a test can prematurely close()\n    // these tests should disable this check, by default we check the normal workflow.\n    // TODO: investigate the CachingTokenFilter \"double-close\"... for now we ignore this\n    assert !enableChecks || streamState == State.END || streamState == State.CLOSE : \"close() called in wrong state: \" + streamState;\n    streamState = State.CLOSE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockTokenizer#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n    super.close();\n    // in some exceptional cases (e.g. TestIndexWriterExceptions) a test can prematurely close()\n    // these tests should disable this check, by default we check the normal workflow.\n    // TODO: investigate the CachingTokenFilter \"double-close\"... for now we ignore this\n    assert !enableChecks || streamState == State.END || streamState == State.CLOSE : \"close() called in wrong state: \" + streamState;\n    streamState = State.CLOSE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/MockTokenizer#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n    super.close();\n    // in some exceptional cases (e.g. TestIndexWriterExceptions) a test can prematurely close()\n    // these tests should disable this check, by default we check the normal workflow.\n    // TODO: investigate the CachingTokenFilter \"double-close\"... for now we ignore this\n    assert !enableChecks || streamState == State.END || streamState == State.CLOSE : \"close() called in wrong state: \" + streamState;\n    streamState = State.CLOSE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenizer#close().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockTokenizer#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    super.close();\n    // in some exceptional cases (e.g. TestIndexWriterExceptions) a test can prematurely close()\n    // these tests should disable this check, by default we check the normal workflow.\n    // TODO: investigate the CachingTokenFilter \"double-close\"... for now we ignore this\n    assert !enableChecks || streamState == State.END || streamState == State.CLOSE : \"close() called in wrong state: \" + streamState;\n    streamState = State.CLOSE;\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    super.close();\n    // in some exceptional cases (e.g. TestIndexWriterExceptions) a test can prematurely close()\n    // these tests should disable this check, by default we check the normal workflow.\n    // TODO: investigate the CachingTokenFilter \"double-close\"... for now we ignore this\n    assert !enableChecks || streamState == State.END || streamState == State.CLOSE : \"close() called in wrong state: \" + streamState;\n    streamState = State.CLOSE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["7b91922b55d15444d554721b352861d028eb8278","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}