{"path":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","commits":[{"id":"2562fab31a7b144e6187859bfa09e363dc6de268","date":1170358826,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxTime() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\",\n           \"field_t\", \"what's inside?\",\n           \"subject\", \"info\"\n      ), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n\t      adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n    \thandler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cb21c97cb62d6a55701323446620b2c7b4bdce97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0589ffc79e13c50260b3fd6a3805fbbf6d0bf70c","date":1170711122,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","sourceNew":"  public void testMaxTime() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n\t      adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n    \thandler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxTime() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\",\n           \"field_t\", \"what's inside?\",\n           \"subject\", \"info\"\n      ), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n\t      adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n    \thandler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb21c97cb62d6a55701323446620b2c7b4bdce97","date":1183447892,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","sourceNew":"  public void testMaxTime() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n\t      adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n    \thandler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    \n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n    assertEquals( 3, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxTime() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n\t      adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n    \thandler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.autoCommitCount );\n    \n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n  }\n\n","bugFix":["2562fab31a7b144e6187859bfa09e363dc6de268"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69b02622fdb25e982f5c9e346906142f1448a1bd","date":1186627562,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","sourceNew":"  public void testMaxTime() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n\t      adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n    \thandler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    \n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n    assertEquals( 3, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxTime() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n\t      adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n    \thandler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    \n    // Wait longer then the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n    assertEquals( 3, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a16a21ce0db3df902bcea143bbf027dcbdd44437","date":1188947139,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","sourceNew":"  public void testMaxTime() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n\t      adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n    \thandler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    \n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n    assertEquals( 3, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxTime() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n\t      adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n    \thandler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    \n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n    assertEquals( 3, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","sourceNew":"  public void testMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    \n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n    assertEquals( 3, tracker.autoCommitCount );\n  }\n\n","sourceOld":"  public void testMaxTime() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n\t      adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n    \thandler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    \n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n    assertEquals( 3, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f79ef2b5b190ea507e4b1204ad05c6ac6592f08","date":1201672558,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","sourceNew":"  public void testMaxTime() throws Exception {\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(10000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(10000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, tracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(10000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, tracker.getCommitCount() );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","sourceOld":"  public void testMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    assertEquals( 2, tracker.autoCommitCount );\n    \n    // Wait longer than the autocommit time\n    Thread.sleep( 1000 );\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n    assertEquals( 3, tracker.autoCommitCount );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b8ad483f79618324f541eafcb248c12efcff732","date":1217975559,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","sourceNew":"  public void testMaxTime() throws Exception {\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, tracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, tracker.getCommitCount() );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","sourceOld":"  public void testMaxTime() throws Exception {\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(10000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(10000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, tracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(10000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, tracker.getCommitCount() );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb0de6d8f30f35a800bf40d1d78e49fb97add10","date":1250444567,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","sourceNew":"  public void testMaxTime() throws Exception {\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    tracker.timeUpperBound = 1000;\n    tracker.docsUpperBound = -1;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, tracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, tracker.getCommitCount() );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","sourceOld":"  public void testMaxTime() throws Exception {\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 500;\n    tracker.docsUpperBound = -1;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, tracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, tracker.getCommitCount() );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6868c259eb4c44f9a4aaa824280e49dff8b5891","date":1251379465,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","sourceNew":"  public void testMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    tracker.timeUpperBound = 1000;\n    tracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, tracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(30000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, tracker.getCommitCount() );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","sourceOld":"  public void testMaxTime() throws Exception {\n    CommitListener trigger = new CommitListener();\n    SolrCore core = h.getCore();\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    tracker.timeUpperBound = 1000;\n    tracker.docsUpperBound = -1;\n    updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, tracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, tracker.getCommitCount() );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxTime().mjava","sourceNew":"  public void testMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    tracker.timeUpperBound = 1000;\n    tracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, tracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(30000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, tracker.getCommitCount() );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","sourceOld":"  public void testMaxTime() throws Exception {\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    // too low of a number can cause a slow host to commit before the test code checks that it\n    // isn't there... causing a failure at \"shouldn't find any\"\n    tracker.timeUpperBound = 1000;\n    tracker.docsUpperBound = -1;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it it is in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // But not this one\n    assertQ(\"should find none\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete the document\n    assertU( delI(\"529\") );\n    assertQ(\"deleted, but should still be there\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(30000));\n    trigger.reset();\n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"550\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 2, tracker.getCommitCount() );\n    assertQ(\"deleted and time has passed\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(30000));\n    trigger.reset();\n    \n    req.setContentStreams( toContentStreams(\n      adoc(\"id\", \"531\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    handler.handleRequest( req, rsp );\n    assertEquals( 3, tracker.getCommitCount() );\n\n    assertQ(\"now it should\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"but not this\", req(\"id:531\") ,\"//result[@numFound=0]\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["a16a21ce0db3df902bcea143bbf027dcbdd44437"],"69b02622fdb25e982f5c9e346906142f1448a1bd":["cb21c97cb62d6a55701323446620b2c7b4bdce97"],"f6868c259eb4c44f9a4aaa824280e49dff8b5891":["1eb0de6d8f30f35a800bf40d1d78e49fb97add10"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4f79ef2b5b190ea507e4b1204ad05c6ac6592f08":["6d6338c87060be5f66757a94945975f3bbd377a9"],"0b8ad483f79618324f541eafcb248c12efcff732":["4f79ef2b5b190ea507e4b1204ad05c6ac6592f08"],"a16a21ce0db3df902bcea143bbf027dcbdd44437":["69b02622fdb25e982f5c9e346906142f1448a1bd"],"cb21c97cb62d6a55701323446620b2c7b4bdce97":["0589ffc79e13c50260b3fd6a3805fbbf6d0bf70c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0589ffc79e13c50260b3fd6a3805fbbf6d0bf70c":["2562fab31a7b144e6187859bfa09e363dc6de268"],"2562fab31a7b144e6187859bfa09e363dc6de268":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["f6868c259eb4c44f9a4aaa824280e49dff8b5891"],"1eb0de6d8f30f35a800bf40d1d78e49fb97add10":["0b8ad483f79618324f541eafcb248c12efcff732"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["4f79ef2b5b190ea507e4b1204ad05c6ac6592f08"],"69b02622fdb25e982f5c9e346906142f1448a1bd":["a16a21ce0db3df902bcea143bbf027dcbdd44437"],"f6868c259eb4c44f9a4aaa824280e49dff8b5891":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2562fab31a7b144e6187859bfa09e363dc6de268"],"4f79ef2b5b190ea507e4b1204ad05c6ac6592f08":["0b8ad483f79618324f541eafcb248c12efcff732"],"0b8ad483f79618324f541eafcb248c12efcff732":["1eb0de6d8f30f35a800bf40d1d78e49fb97add10"],"a16a21ce0db3df902bcea143bbf027dcbdd44437":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cb21c97cb62d6a55701323446620b2c7b4bdce97":["69b02622fdb25e982f5c9e346906142f1448a1bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0589ffc79e13c50260b3fd6a3805fbbf6d0bf70c":["cb21c97cb62d6a55701323446620b2c7b4bdce97"],"2562fab31a7b144e6187859bfa09e363dc6de268":["0589ffc79e13c50260b3fd6a3805fbbf6d0bf70c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"1eb0de6d8f30f35a800bf40d1d78e49fb97add10":["f6868c259eb4c44f9a4aaa824280e49dff8b5891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}