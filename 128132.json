{"path":"solr/core/src/test/org/apache/solr/pkg/TestPackages#postFileAndWait(MiniSolrCloudCluster,String,String,String).mjava","commits":[{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#postFileAndWait(MiniSolrCloudCluster,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  static void postFileAndWait(MiniSolrCloudCluster cluster, String fname, String path, String sig) throws Exception {\n    ByteBuffer fileContent = getFileContent(fname);\n    String sha512 = DigestUtils.sha512Hex(fileContent.array());\n\n    TestDistribPackageStore.postFile(cluster.getSolrClient(),\n        fileContent,\n        path, sig);// has file, but no signature\n\n    TestDistribPackageStore.waitForAllNodesHaveFile(cluster, path, Utils.makeMap(\n        \":files:\" + path + \":sha512\",\n        sha512\n    ), false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650b520f2a4daa4b0712e2393dc29ae7f21f10ac","date":1593054531,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#postFileAndWait(MiniSolrCloudCluster,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#postFileAndWait(MiniSolrCloudCluster,String,String,String).mjava","sourceNew":"  public static void postFileAndWait(MiniSolrCloudCluster cluster, String fname, String path, String sig) throws Exception {\n    ByteBuffer fileContent = getFileContent(fname);\n    String sha512 = DigestUtils.sha512Hex(fileContent.array());\n\n    TestDistribPackageStore.postFile(cluster.getSolrClient(),\n        fileContent,\n        path, sig);// has file, but no signature\n\n    TestDistribPackageStore.waitForAllNodesHaveFile(cluster, path, Utils.makeMap(\n        \":files:\" + path + \":sha512\",\n        sha512\n    ), false);\n  }\n\n","sourceOld":"  static void postFileAndWait(MiniSolrCloudCluster cluster, String fname, String path, String sig) throws Exception {\n    ByteBuffer fileContent = getFileContent(fname);\n    String sha512 = DigestUtils.sha512Hex(fileContent.array());\n\n    TestDistribPackageStore.postFile(cluster.getSolrClient(),\n        fileContent,\n        path, sig);// has file, but no signature\n\n    TestDistribPackageStore.waitForAllNodesHaveFile(cluster, path, Utils.makeMap(\n        \":files:\" + path + \":sha512\",\n        sha512\n    ), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ec73f19361ec6354e55c878a349735fa8bc52e","date":1596183798,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#postFileAndWait(MiniSolrCloudCluster,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#postFileAndWait(MiniSolrCloudCluster,String,String,String).mjava","sourceNew":"  public static void postFileAndWait(MiniSolrCloudCluster cluster, String fname, String path, String sig) throws Exception {\n    ByteBuffer fileContent = getFileContent(fname);\n    String sha512 = DigestUtils.sha512Hex(fileContent.array());\n\n    TestDistribPackageStore.postFile(cluster.getSolrClient(),\n        fileContent,\n        path, sig);// has file, but no signature\n\n    TestDistribPackageStore.checkAllNodesForFile(cluster, path, Utils.makeMap(\n            \":files:\" + path + \":sha512\",\n        sha512\n    ), false);\n  }\n\n","sourceOld":"  public static void postFileAndWait(MiniSolrCloudCluster cluster, String fname, String path, String sig) throws Exception {\n    ByteBuffer fileContent = getFileContent(fname);\n    String sha512 = DigestUtils.sha512Hex(fileContent.array());\n\n    TestDistribPackageStore.postFile(cluster.getSolrClient(),\n        fileContent,\n        path, sig);// has file, but no signature\n\n    TestDistribPackageStore.waitForAllNodesHaveFile(cluster, path, Utils.makeMap(\n        \":files:\" + path + \":sha512\",\n        sha512\n    ), false);\n  }\n\n","bugFix":null,"bugIntro":["9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6","date":1601357122,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#postFileAndWait(MiniSolrCloudCluster,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#postFileAndWait(MiniSolrCloudCluster,String,String,String).mjava","sourceNew":"  public static void postFileAndWait(MiniSolrCloudCluster cluster, String fname, String path, String sig) throws Exception {\n    ByteBuffer fileContent = getFileContent(fname);\n    String sha512 = DigestUtils.sha512Hex(fileContent.array());\n\n    TestDistribPackageStore.postFile(cluster.getSolrClient(),\n        fileContent,\n        path, sig);// has file, but no signature\n\n    TestDistribPackageStore.checkAllNodesForFile(cluster, path, Utils.makeMap(\n        \":files:\" + path + \":sha512\",\n        sha512\n    ), false);\n  }\n\n","sourceOld":"  public static void postFileAndWait(MiniSolrCloudCluster cluster, String fname, String path, String sig) throws Exception {\n    ByteBuffer fileContent = getFileContent(fname);\n    String sha512 = DigestUtils.sha512Hex(fileContent.array());\n\n    TestDistribPackageStore.postFile(cluster.getSolrClient(),\n        fileContent,\n        path, sig);// has file, but no signature\n\n    TestDistribPackageStore.checkAllNodesForFile(cluster, path, Utils.makeMap(\n            \":files:\" + path + \":sha512\",\n        sha512\n    ), false);\n  }\n\n","bugFix":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6"]},"commit2Childs":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}