{"path":"lucene/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#next().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/SegmentTermEnum#next().mjava","sourceNew":"  /** Increments the enumeration to the next element.  True if one exists.*/\n  public final boolean next() throws IOException {\n    prevBuffer.set(termBuffer);\n    //System.out.println(\"  ste setPrev=\" + prev() + \" this=\" + this);\n\n    if (position++ >= size - 1) {\n      termBuffer.reset();\n      //System.out.println(\"    EOF\");\n      return false;\n    }\n\n    termBuffer.read(input, fieldInfos);\n    newSuffixStart = termBuffer.newSuffixStart;\n\n    termInfo.docFreq = input.readVInt();\t  // read doc freq\n    termInfo.freqPointer += input.readVLong();\t  // read freq pointer\n    termInfo.proxPointer += input.readVLong();\t  // read prox pointer\n    \n    if (termInfo.docFreq >= skipInterval) \n      termInfo.skipOffset = input.readVInt();\n\n    if (isIndex)\n      indexPointer += input.readVLong();\t  // read index pointer\n\n    //System.out.println(\"  ste ret term=\" + term());\n    return true;\n  }\n\n","sourceOld":"  /** Increments the enumeration to the next element.  True if one exists.*/\n  public final boolean next() throws IOException {\n    prevBuffer.set(termBuffer);\n    //System.out.println(\"  ste setPrev=\" + prev() + \" this=\" + this);\n\n    if (position++ >= size - 1) {\n      termBuffer.reset();\n      //System.out.println(\"    EOF\");\n      return false;\n    }\n\n    termBuffer.read(input, fieldInfos);\n    newSuffixStart = termBuffer.newSuffixStart;\n\n    termInfo.docFreq = input.readVInt();\t  // read doc freq\n    termInfo.freqPointer += input.readVLong();\t  // read freq pointer\n    termInfo.proxPointer += input.readVLong();\t  // read prox pointer\n    \n    if (termInfo.docFreq >= skipInterval) \n      termInfo.skipOffset = input.readVInt();\n\n    if (isIndex)\n      indexPointer += input.readVLong();\t  // read index pointer\n\n    //System.out.println(\"  ste ret term=\" + term());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#next().mjava","sourceNew":"  /** Increments the enumeration to the next element.  True if one exists.*/\n  public final boolean next() throws IOException {\n    prevBuffer.set(termBuffer);\n    //System.out.println(\"  ste setPrev=\" + prev() + \" this=\" + this);\n\n    if (position++ >= size - 1) {\n      termBuffer.reset();\n      //System.out.println(\"    EOF\");\n      return false;\n    }\n\n    termBuffer.read(input, fieldInfos);\n    newSuffixStart = termBuffer.newSuffixStart;\n\n    termInfo.docFreq = input.readVInt();\t  // read doc freq\n    termInfo.freqPointer += input.readVLong();\t  // read freq pointer\n    termInfo.proxPointer += input.readVLong();\t  // read prox pointer\n    \n    if (termInfo.docFreq >= skipInterval) \n      termInfo.skipOffset = input.readVInt();\n\n    if (isIndex)\n      indexPointer += input.readVLong();\t  // read index pointer\n\n    //System.out.println(\"  ste ret term=\" + term());\n    return true;\n  }\n\n","sourceOld":"  /** Increments the enumeration to the next element.  True if one exists.*/\n  public final boolean next() throws IOException {\n    prevBuffer.set(termBuffer);\n    //System.out.println(\"  ste setPrev=\" + prev() + \" this=\" + this);\n\n    if (position++ >= size - 1) {\n      termBuffer.reset();\n      //System.out.println(\"    EOF\");\n      return false;\n    }\n\n    termBuffer.read(input, fieldInfos);\n    newSuffixStart = termBuffer.newSuffixStart;\n\n    termInfo.docFreq = input.readVInt();\t  // read doc freq\n    termInfo.freqPointer += input.readVLong();\t  // read freq pointer\n    termInfo.proxPointer += input.readVLong();\t  // read prox pointer\n    \n    if (termInfo.docFreq >= skipInterval) \n      termInfo.skipOffset = input.readVInt();\n\n    if (isIndex)\n      indexPointer += input.readVLong();\t  // read index pointer\n\n    //System.out.println(\"  ste ret term=\" + term());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}