{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","date":1484565333,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = source.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = source.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = source.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return null; // TODO delegate to DoubleValuesSource?\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = source.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = source.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return null; // TODO delegate to DoubleValuesSource?\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = source.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = source.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = source.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return null; // TODO delegate to DoubleValuesSource?\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a38488a55cc52553c9792da5044dd31b15128cd8","date":1510755769,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = source.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","706a7a3396c030cc66dda92a0492eb492131c4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a38488a55cc52553c9792da5044dd31b15128cd8"],"a38488a55cc52553c9792da5044dd31b15128cd8":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a38488a55cc52553c9792da5044dd31b15128cd8","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["a38488a55cc52553c9792da5044dd31b15128cd8"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["507e7decdf00981d09a74632ea30299a4ce6ba72","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a38488a55cc52553c9792da5044dd31b15128cd8":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","507e7decdf00981d09a74632ea30299a4ce6ba72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}