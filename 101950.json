{"path":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","sourceNew":"    /** This test that writes larger than the size of the buffer output\n     * will correctly increment the file pointer.\n     */\n    public void testLargeWrites() throws IOException {\n        IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random));\n\n        byte[] largeBuf = new byte[2048];\n        for (int i=0; i<largeBuf.length; i++) {\n            largeBuf[i] = (byte) (Math.random() * 256);\n        }\n\n        long currentPos = os.getFilePointer();\n        os.writeBytes(largeBuf, largeBuf.length);\n\n        try {\n            assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n        } finally {\n            os.close();\n        }\n\n    }\n\n","sourceOld":"    /** This test that writes larger than the size of the buffer output\n     * will correctly increment the file pointer.\n     */\n    public void testLargeWrites() throws IOException {\n        IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random));\n\n        byte[] largeBuf = new byte[2048];\n        for (int i=0; i<largeBuf.length; i++) {\n            largeBuf[i] = (byte) (Math.random() * 256);\n        }\n\n        long currentPos = os.getFilePointer();\n        os.writeBytes(largeBuf, largeBuf.length);\n\n        try {\n            assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n        } finally {\n            os.close();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","sourceNew":"    /** This test that writes larger than the size of the buffer output\n     * will correctly increment the file pointer.\n     */\n    public void testLargeWrites() throws IOException {\n        IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random()));\n\n        byte[] largeBuf = new byte[2048];\n        for (int i=0; i<largeBuf.length; i++) {\n            largeBuf[i] = (byte) (Math.random() * 256);\n        }\n\n        long currentPos = os.getFilePointer();\n        os.writeBytes(largeBuf, largeBuf.length);\n\n        try {\n            assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n        } finally {\n            os.close();\n        }\n\n    }\n\n","sourceOld":"    /** This test that writes larger than the size of the buffer output\n     * will correctly increment the file pointer.\n     */\n    public void testLargeWrites() throws IOException {\n        IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random));\n\n        byte[] largeBuf = new byte[2048];\n        for (int i=0; i<largeBuf.length; i++) {\n            largeBuf[i] = (byte) (Math.random() * 256);\n        }\n\n        long currentPos = os.getFilePointer();\n        os.writeBytes(largeBuf, largeBuf.length);\n\n        try {\n            assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n        } finally {\n            os.close();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","sourceNew":"  /** \n   * This test that writes larger than the size of the buffer output\n   * will correctly increment the file pointer.\n   */\n  public void testLargeWrites() throws IOException {\n    IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random()));\n    \n    byte[] largeBuf = new byte[2048];\n    for (int i=0; i<largeBuf.length; i++) {\n      largeBuf[i] = (byte) (Math.random() * 256);\n    }\n    \n    long currentPos = os.getFilePointer();\n    os.writeBytes(largeBuf, largeBuf.length);\n    \n    try {\n      assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n    } finally {\n      os.close();\n    }\n  }\n\n","sourceOld":"    /** This test that writes larger than the size of the buffer output\n     * will correctly increment the file pointer.\n     */\n    public void testLargeWrites() throws IOException {\n        IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random()));\n\n        byte[] largeBuf = new byte[2048];\n        for (int i=0; i<largeBuf.length; i++) {\n            largeBuf[i] = (byte) (Math.random() * 256);\n        }\n\n        long currentPos = os.getFilePointer();\n        os.writeBytes(largeBuf, largeBuf.length);\n\n        try {\n            assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n        } finally {\n            os.close();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","sourceNew":null,"sourceOld":"  /** \n   * This test that writes larger than the size of the buffer output\n   * will correctly increment the file pointer.\n   */\n  public void testLargeWrites() throws IOException {\n    IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random()));\n    \n    byte[] largeBuf = new byte[2048];\n    for (int i=0; i<largeBuf.length; i++) {\n      largeBuf[i] = (byte) (Math.random() * 256);\n    }\n    \n    long currentPos = os.getFilePointer();\n    os.writeBytes(largeBuf, largeBuf.length);\n    \n    try {\n      assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","sourceNew":null,"sourceOld":"    /** This test that writes larger than the size of the buffer output\n     * will correctly increment the file pointer.\n     */\n    public void testLargeWrites() throws IOException {\n        IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random()));\n\n        byte[] largeBuf = new byte[2048];\n        for (int i=0; i<largeBuf.length; i++) {\n            largeBuf[i] = (byte) (Math.random() * 256);\n        }\n\n        long currentPos = os.getFilePointer();\n        os.writeBytes(largeBuf, largeBuf.length);\n\n        try {\n            assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n        } finally {\n            os.close();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}