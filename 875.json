{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","sourceNew":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef term = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(term.bytes, start, suffix);\n            term.length = start + suffix;\n            return term;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            seekExact(mid * interval);\n            int cmp = term.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          seekExact(block < 0 ? -1 : block * interval);\n          \n          while (next() != null) {\n            int cmp = term.compareTo(text);\n            if (cmp == 0) {\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            next();\n          }\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef term = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(term.bytes, start, suffix);\n            term.length = start + suffix;\n            return term;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            seekExact(mid * interval);\n            int cmp = term.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          seekExact(block < 0 ? -1 : block * interval);\n          \n          while (next() != null) {\n            int cmp = term.compareTo(text);\n            if (cmp == 0) {\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            next();\n          }\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","sourceNew":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef term = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(term.bytes, start, suffix);\n            term.length = start + suffix;\n            return term;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            seekExact(mid * interval);\n            int cmp = term.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          seekExact(block < 0 ? -1 : block * interval);\n          \n          while (next() != null) {\n            int cmp = term.compareTo(text);\n            if (cmp == 0) {\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            next();\n          }\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef term = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(term.bytes, start, suffix);\n            term.length = start + suffix;\n            return term;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            seekExact(mid * interval);\n            int cmp = term.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          seekExact(block < 0 ? -1 : block * interval);\n          \n          while (next() != null) {\n            int cmp = term.compareTo(text);\n            if (cmp == 0) {\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            next();\n          }\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","sourceNew":null,"sourceOld":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef term = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(term.bytes, start, suffix);\n            term.length = start + suffix;\n            return term;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            seekExact(mid * interval);\n            int cmp = term.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          seekExact(block < 0 ? -1 : block * interval);\n          \n          while (next() != null) {\n            int cmp = term.compareTo(text);\n            if (cmp == 0) {\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            next();\n          }\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}