{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/CachingMatchesIterator#cache().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/CachingMatchesIterator#cache().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/CachingMatchesIterator#cache().mjava","sourceNew":"  private void cache() throws IOException {\n    count = 0;\n    MatchesIterator mi = in.getSubMatches();\n    if (mi == null) {\n      count = 1;\n      posAndOffsets[0] = in.startPosition();\n      posAndOffsets[1] = in.endPosition();\n      posAndOffsets[2] = in.startOffset();\n      posAndOffsets[3] = in.endOffset();\n    }\n    else {\n      while (mi.next()) {\n        if (count * 4 >= posAndOffsets.length) {\n          posAndOffsets = ArrayUtil.grow(posAndOffsets, (count + 1) * 4);\n        }\n        posAndOffsets[count * 4] = mi.startPosition();\n        posAndOffsets[count * 4 + 1] = mi.endPosition();\n        posAndOffsets[count * 4 + 2] = mi.startOffset();\n        posAndOffsets[count * 4 + 3] = mi.endOffset();\n        count++;\n      }\n    }\n  }\n\n","sourceOld":"  private void cache() throws IOException {\n    count = 0;\n    MatchesIterator mi = in.getSubMatches();\n    if (mi == null) {\n      count = 1;\n      posAndOffsets[0] = in.startPosition();\n      posAndOffsets[1] = in.endPosition();\n      posAndOffsets[2] = in.startOffset();\n      posAndOffsets[3] = in.endOffset();\n    }\n    else {\n      while (mi.next()) {\n        if (count * 4 >= posAndOffsets.length) {\n          posAndOffsets = ArrayUtil.grow(posAndOffsets, (count + 1) * 4);\n        }\n        posAndOffsets[count * 4] = mi.startPosition();\n        posAndOffsets[count * 4 + 1] = mi.endPosition();\n        posAndOffsets[count * 4 + 2] = mi.startOffset();\n        posAndOffsets[count * 4 + 3] = mi.endOffset();\n        count++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea","date":1574601528,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/CachingMatchesIterator#cache().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/CachingMatchesIterator#cache().mjava","sourceNew":"  private void cache() throws IOException {\n    count = 0;\n    MatchesIterator mi = in.getSubMatches();\n    if (mi == null) {\n      count = 1;\n      posAndOffsets[0] = in.startPosition();\n      posAndOffsets[1] = in.endPosition();\n      posAndOffsets[2] = in.startOffset();\n      posAndOffsets[3] = in.endOffset();\n      matchingQueries [0] = in.getQuery();\n    }\n    else {\n      while (mi.next()) {\n        if (count * 4 >= posAndOffsets.length) {\n          posAndOffsets = ArrayUtil.grow(posAndOffsets, (count + 1) * 4);\n          matchingQueries = ArrayUtil.grow(matchingQueries, (count + 1));\n        }\n        posAndOffsets[count * 4] = mi.startPosition();\n        posAndOffsets[count * 4 + 1] = mi.endPosition();\n        posAndOffsets[count * 4 + 2] = mi.startOffset();\n        posAndOffsets[count * 4 + 3] = mi.endOffset();\n        matchingQueries[count] = mi.getQuery();\n        count++;\n      }\n    }\n  }\n\n","sourceOld":"  private void cache() throws IOException {\n    count = 0;\n    MatchesIterator mi = in.getSubMatches();\n    if (mi == null) {\n      count = 1;\n      posAndOffsets[0] = in.startPosition();\n      posAndOffsets[1] = in.endPosition();\n      posAndOffsets[2] = in.startOffset();\n      posAndOffsets[3] = in.endOffset();\n    }\n    else {\n      while (mi.next()) {\n        if (count * 4 >= posAndOffsets.length) {\n          posAndOffsets = ArrayUtil.grow(posAndOffsets, (count + 1) * 4);\n        }\n        posAndOffsets[count * 4] = mi.startPosition();\n        posAndOffsets[count * 4 + 1] = mi.endPosition();\n        posAndOffsets[count * 4 + 2] = mi.startOffset();\n        posAndOffsets[count * 4 + 3] = mi.endOffset();\n        count++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}