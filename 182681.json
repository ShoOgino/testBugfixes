{"path":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(Searcher,Query).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(Searcher,Query).mjava","pathOld":"lucene/src/demo/org/apache/lucene/demo/SearchFiles#doStreamingSearch(Searcher,Query).mjava","sourceNew":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final Searcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","sourceOld":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final Searcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(Searcher,Query).mjava","sourceNew":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","sourceOld":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final Searcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(Searcher,Query).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final Searcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(Searcher,Query).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final Searcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}