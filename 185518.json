{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      if (scorer instanceof ToParentBlockJoinQuery.BlockJoinScorer) {\n        enroll((ToParentBlockJoinQuery) scorer.getWeight().getQuery(), (ToParentBlockJoinQuery.BlockJoinScorer) scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      if (scorer instanceof ToParentBlockJoinQuery.BlockJoinScorer) {\n        enroll((ToParentBlockJoinQuery) scorer.getWeight().getQuery(), (ToParentBlockJoinQuery.BlockJoinScorer) scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11","date":1367321736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    //System.out.println(\"\\nqueue: add top scorer=\" + scorer);\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      //System.out.println(\"  poll: \" + scorer + \"; \" + scorer.getWeight().getQuery());\n      if (scorer instanceof ToParentBlockJoinQuery.BlockJoinScorer) {\n        enroll((ToParentBlockJoinQuery) scorer.getWeight().getQuery(), (ToParentBlockJoinQuery.BlockJoinScorer) scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        //System.out.println(\"  add sub: \" + sub.child + \"; \" + sub.child.getWeight().getQuery());\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      if (scorer instanceof ToParentBlockJoinQuery.BlockJoinScorer) {\n        enroll((ToParentBlockJoinQuery) scorer.getWeight().getQuery(), (ToParentBlockJoinQuery.BlockJoinScorer) scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<>();\n    //System.out.println(\"\\nqueue: add top scorer=\" + scorer);\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      //System.out.println(\"  poll: \" + scorer + \"; \" + scorer.getWeight().getQuery());\n      if (scorer instanceof ToParentBlockJoinQuery.BlockJoinScorer) {\n        enroll((ToParentBlockJoinQuery) scorer.getWeight().getQuery(), (ToParentBlockJoinQuery.BlockJoinScorer) scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        //System.out.println(\"  add sub: \" + sub.child + \"; \" + sub.child.getWeight().getQuery());\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    //System.out.println(\"\\nqueue: add top scorer=\" + scorer);\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      //System.out.println(\"  poll: \" + scorer + \"; \" + scorer.getWeight().getQuery());\n      if (scorer instanceof ToParentBlockJoinQuery.BlockJoinScorer) {\n        enroll((ToParentBlockJoinQuery) scorer.getWeight().getQuery(), (ToParentBlockJoinQuery.BlockJoinScorer) scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        //System.out.println(\"  add sub: \" + sub.child + \"; \" + sub.child.getWeight().getQuery());\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<>();\n    //System.out.println(\"\\nqueue: add top scorer=\" + scorer);\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      //System.out.println(\"  poll: \" + scorer + \"; \" + scorer.getWeight().getQuery());\n      if (scorer instanceof ToParentBlockJoinQuery.BlockJoinScorer) {\n        enroll((ToParentBlockJoinQuery) scorer.getWeight().getQuery(), (ToParentBlockJoinQuery.BlockJoinScorer) scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        //System.out.println(\"  add sub: \" + sub.child + \"; \" + sub.child.getWeight().getQuery());\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["901e951cec2e6af4e503209a6721c8834db23279"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["901e951cec2e6af4e503209a6721c8834db23279"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"901e951cec2e6af4e503209a6721c8834db23279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}