{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","commits":[{"id":"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6","date":1423132645,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(Path backup, int nDocs) throws IOException {\n    try (Directory dir = new SimpleFSDirectory(backup)) {\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits);\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d32699b9d6d5982ddfd5f25843ae42adf37c22c","date":1424850267,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","sourceNew":"  private void verify(Path backup, int nDocs) throws IOException {\n    try (Directory dir = new SimpleFSDirectory(backup);\n        IndexReader reader = DirectoryReader.open(dir)) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits);\n    }\n  }\n\n","sourceOld":"  private void verify(Path backup, int nDocs) throws IOException {\n    try (Directory dir = new SimpleFSDirectory(backup)) {\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits);\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","sourceNew":"  private void verify(Path backup, int nDocs) throws IOException {\n    try (Directory dir = new SimpleFSDirectory(backup);\n        IndexReader reader = DirectoryReader.open(dir)) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits);\n    }\n  }\n\n","sourceOld":"  private void verify(Path backup, int nDocs) throws IOException {\n    try (Directory dir = new SimpleFSDirectory(backup)) {\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits);\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","sourceNew":"  private void verify(Path backup, int nDocs) throws IOException {\n    try (Directory dir = new SimpleFSDirectory(backup);\n        IndexReader reader = DirectoryReader.open(dir)) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits.value);\n    }\n  }\n\n","sourceOld":"  private void verify(Path backup, int nDocs) throws IOException {\n    try (Directory dir = new SimpleFSDirectory(backup);\n        IndexReader reader = DirectoryReader.open(dir)) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","sourceNew":"  private void verify(Path backup, int nDocs) throws IOException {\n    log.info(\"Verifying ndocs={} in {}\", nDocs, backup);\n    try (Directory dir = new SimpleFSDirectory(backup);\n        IndexReader reader = DirectoryReader.open(dir)) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits.value);\n    }\n  }\n\n","sourceOld":"  private void verify(Path backup, int nDocs) throws IOException {\n    try (Directory dir = new SimpleFSDirectory(backup);\n        IndexReader reader = DirectoryReader.open(dir)) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","sourceNew":"  private void verify(Path backup, int nDocs) throws IOException {\n    log.info(\"Verifying ndocs={} in {}\", nDocs, backup);\n    try (Directory dir = new NIOFSDirectory(backup);\n         IndexReader reader = DirectoryReader.open(dir)) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits.value);\n    }\n  }\n\n","sourceOld":"  private void verify(Path backup, int nDocs) throws IOException {\n    log.info(\"Verifying ndocs={} in {}\", nDocs, backup);\n    try (Directory dir = new SimpleFSDirectory(backup);\n        IndexReader reader = DirectoryReader.open(dir)) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#verify(Path,int).mjava","sourceNew":"  private void verify(Path backup, int nDocs) throws IOException {\n    log.info(\"Verifying ndocs={} in {}\", nDocs, backup);\n    try (Directory dir = new NIOFSDirectory(backup);\n         IndexReader reader = DirectoryReader.open(dir)) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits.value);\n    }\n  }\n\n","sourceOld":"  private void verify(Path backup, int nDocs) throws IOException {\n    log.info(\"Verifying ndocs={} in {}\", nDocs, backup);\n    try (Directory dir = new SimpleFSDirectory(backup);\n        IndexReader reader = DirectoryReader.open(dir)) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n      TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n      assertEquals(nDocs, hits.totalHits.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6","9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"9ca2a57dbb0665332572cf1a0dffa67234089615":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d32699b9d6d5982ddfd5f25843ae42adf37c22c":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"9d32699b9d6d5982ddfd5f25843ae42adf37c22c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}