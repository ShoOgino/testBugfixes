{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,Searcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, Searcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","date":1295478199,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = query.getSimilarity(searcher);\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new TreeSet<Term>();\n    query.extractTerms(terms);\n    final ReaderContext context = searcher.getTopReaderContext();\n    final TermContext states[] = new TermContext[terms.size()];\n    int i = 0;\n    for (Term term : terms)\n      states[i++] = TermContext.build(context, term, true);\n    stats = similarity.computeStats(searcher, query.getField(), query.getBoost(), states);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new TreeSet<Term>();\n    query.extractTerms(terms);\n    final ReaderContext context = searcher.getTopReaderContext();\n    final TermContext states[] = new TermContext[terms.size()];\n    int i = 0;\n    for (Term term : terms)\n      states[i++] = TermContext.build(context, term, true);\n    stats = similarity.computeStats(searcher, query.getField(), query.getBoost(), states);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new TreeSet<Term>();\n    query.extractTerms(terms);\n    final ReaderContext context = searcher.getTopReaderContext();\n    final TermContext states[] = new TermContext[terms.size()];\n    int i = 0;\n    for (Term term : terms)\n      states[i++] = TermContext.build(context, term, true);\n    stats = similarity.computeStats(searcher, query.getField(), query.getBoost(), states);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new HashSet<Term>();\n    query.extractTerms(terms);\n    \n    idfExp = similarity.idfExplain(terms, searcher);\n    idf = idfExp.getIdf();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","date":1320398636,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new TreeSet<Term>();\n    query.extractTerms(terms);\n    final ReaderContext context = searcher.getTopReaderContext();\n    final TermContext states[] = new TermContext[terms.size()];\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      states[i] = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, states[i]);\n      i++;\n    }\n    stats = similarity.computeStats(\n        searcher.collectionStatistics(query.getField()), \n        query.getBoost(), \n        termStats);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new TreeSet<Term>();\n    query.extractTerms(terms);\n    final ReaderContext context = searcher.getTopReaderContext();\n    final TermContext states[] = new TermContext[terms.size()];\n    int i = 0;\n    for (Term term : terms)\n      states[i++] = TermContext.build(context, term, true);\n    stats = similarity.computeStats(searcher, query.getField(), query.getBoost(), states);\n  }\n\n","bugFix":null,"bugIntro":["d2da200553d43622ccbeef29f3c1b6223fec4d83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final ReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeStats(\n        searcher.collectionStatistics(query.getField()), \n        query.getBoost(), \n        termStats);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    terms=new TreeSet<Term>();\n    query.extractTerms(terms);\n    final ReaderContext context = searcher.getTopReaderContext();\n    final TermContext states[] = new TermContext[terms.size()];\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      states[i] = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, states[i]);\n      i++;\n    }\n    stats = similarity.computeStats(\n        searcher.collectionStatistics(query.getField()), \n        query.getBoost(), \n        termStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeStats(\n        searcher.collectionStatistics(query.getField()), \n        query.getBoost(), \n        termStats);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final ReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeStats(\n        searcher.collectionStatistics(query.getField()), \n        query.getBoost(), \n        termStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeStats(\n        searcher.collectionStatistics(query.getField()), \n        query.getBoost(), \n        termStats);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final ReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeStats(\n        searcher.collectionStatistics(query.getField()), \n        query.getBoost(), \n        termStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeWeight(query.getBoost(), \n        searcher.collectionStatistics(query.getField()), \n        termStats);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeStats(\n        searcher.collectionStatistics(query.getField()), \n        query.getBoost(), \n        termStats);\n  }\n\n","bugFix":null,"bugIntro":["d2da200553d43622ccbeef29f3c1b6223fec4d83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeWeight(query.getBoost(), \n        searcher.collectionStatistics(query.getField()), \n        termStats);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarityProvider().get(query.getField());\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeWeight(query.getBoost(), \n        searcher.collectionStatistics(query.getField()), \n        termStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher).mjava","sourceNew":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeWeight(query.getBoost(), \n        searcher.collectionStatistics(query.getField()), \n        termStats);\n  }\n\n","sourceOld":"  public SpanWeight(SpanQuery query, IndexSearcher searcher)\n    throws IOException {\n    this.similarity = searcher.getSimilarity();\n    this.query = query;\n    \n    termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStatistics termStats[] = new TermStatistics[terms.size()];\n    int i = 0;\n    for (Term term : terms) {\n      TermContext state = TermContext.build(context, term, true);\n      termStats[i] = searcher.termStatistics(term, state);\n      termContexts.put(term, state);\n      i++;\n    }\n    stats = similarity.computeWeight(query.getBoost(), \n        searcher.collectionStatistics(query.getField()), \n        termStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"660345363f16c7d4c38aa11a35bf59aa99466cf1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a015474a0e3185be4c42ed156c0f1e88b90b1ace","8493985e6883b3fa8231d172694d2aa3a85cb182"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["e79a6d080bdd5b2a8f56342cf571b5476de04180","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"1291e4568eb7d9463d751627596ef14baf4c1603":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","0f3cee3d20b0c786e6fca20539454262e29edcab"],"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"660345363f16c7d4c38aa11a35bf59aa99466cf1":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["e79a6d080bdd5b2a8f56342cf571b5476de04180","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["8493985e6883b3fa8231d172694d2aa3a85cb182","5cab9a86bd67202d20b6adc463008c8e982b070a"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["0f3cee3d20b0c786e6fca20539454262e29edcab","bb9b72f7c3d7827c64dd4ec580ded81778da361d","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}