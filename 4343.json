{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","sourceNew":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert register != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be sorted: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n    \n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","sourceOld":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert register != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be sorted: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n    \n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d94feb02e9c604630d8a6758abcb40cbfa91f5d","date":1340964157,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","sourceNew":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert stateRegistry != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be in sorted UTF-8 order: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n\n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","sourceOld":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert register != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be sorted: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n    \n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert register != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be sorted: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n    \n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}