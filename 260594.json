{"path":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","commits":[{"id":"cc031ce325db96bcb30084c4d9bad6d4521a9e9f","date":1363549910,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","pathOld":"/dev/null","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Count both \"Publish Year\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Year\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new SortedSetDocValuesAccumulator(fsp, state));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Count both \"Publish Year\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Year\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new SortedSetDocValuesAccumulator(state, fsp));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Count both \"Publish Year\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Year\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new SortedSetDocValuesAccumulator(fsp, state));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Count both \"Publish Year\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Year\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new SortedSetDocValuesAccumulator(state, fsp));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Count both \"Publish Year\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Year\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new SortedSetDocValuesAccumulator(fsp, state));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Count both \"Publish Year\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new FacetLabel(\"Publish Year\"), 10), \n        new CountFacetRequest(new FacetLabel(\"Author\"), 10));\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new SortedSetDocValuesAccumulator(state, fsp));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Count both \"Publish Year\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Year\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new SortedSetDocValuesAccumulator(state, fsp));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d899affd3c008feba40d1405b7a38972ce2005b4","date":1385469973,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<SimpleFacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n    FacetsConfig config = getConfig();\n\n    // Aggregatses the facet counts\n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, sfc);\n\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Count both \"Publish Year\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new FacetLabel(\"Publish Year\"), 10), \n        new CountFacetRequest(new FacetLabel(\"Author\"), 10));\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new SortedSetDocValuesAccumulator(state, fsp));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n    FacetsConfig config = getConfig();\n\n    // Aggregatses the facet counts\n    FacetsCollector sfc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, sfc);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<SimpleFacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n    FacetsConfig config = getConfig();\n\n    // Aggregatses the facet counts\n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, sfc);\n\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n    FacetsConfig config = getConfig();\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    Facets.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, fc);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n    FacetsConfig config = getConfig();\n\n    // Aggregatses the facet counts\n    FacetsCollector sfc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, sfc);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, fc);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n    FacetsConfig config = getConfig();\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    Facets.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, fc);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, fc);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Count both \"Publish Year\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Year\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(new SortedSetDocValuesAccumulator(state, fsp));\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fc8c22124fdcf9d76449bd2fa04decbe74e2e2","date":1391685460,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new DefaultSortedSetDocValuesReaderState(indexReader);\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, fc);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(indexReader);\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, fc);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleSortedSetFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new DefaultSortedSetDocValuesReaderState(indexReader);\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, fc);\n\n    List<FacetResult> results = new ArrayList<>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    SortedSetDocValuesReaderState state = new DefaultSortedSetDocValuesReaderState(indexReader);\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new SortedSetDocValuesFacetCounts(state, fc);\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Year\"));\n    indexReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["30fc8c22124fdcf9d76449bd2fa04decbe74e2e2"],"30fc8c22124fdcf9d76449bd2fa04decbe74e2e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["d899affd3c008feba40d1405b7a38972ce2005b4"],"d899affd3c008feba40d1405b7a38972ce2005b4":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["cc031ce325db96bcb30084c4d9bad6d4521a9e9f"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["78522aad83283ca58fae08fd89406b65429d0229"],"78522aad83283ca58fae08fd89406b65429d0229":["21d36d0db865f7b84026b447bec653469a6e66df"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","fd83550e4b0bdd36e7d9dca9273264100782440b"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["cc031ce325db96bcb30084c4d9bad6d4521a9e9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cc031ce325db96bcb30084c4d9bad6d4521a9e9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30fc8c22124fdcf9d76449bd2fa04decbe74e2e2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d899affd3c008feba40d1405b7a38972ce2005b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc031ce325db96bcb30084c4d9bad6d4521a9e9f"],"21d36d0db865f7b84026b447bec653469a6e66df":["78522aad83283ca58fae08fd89406b65429d0229"],"d899affd3c008feba40d1405b7a38972ce2005b4":["21d36d0db865f7b84026b447bec653469a6e66df"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"78522aad83283ca58fae08fd89406b65429d0229":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["30fc8c22124fdcf9d76449bd2fa04decbe74e2e2"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["c190847801a50f4dd20fd639bdc29b54ea3b288b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"cc031ce325db96bcb30084c4d9bad6d4521a9e9f":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}