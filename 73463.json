{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#defaultCounterValue(DocCollection,boolean).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#defaultCounterValue(DocCollection,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#defaultCounterValue(DocCollection,boolean).mjava","sourceNew":"  private static int defaultCounterValue(DocCollection collection, boolean newCollection) {\n    if (newCollection) return 0;\n    int defaultValue = collection.getReplicas().size();\n    if (collection.getReplicationFactor() != null) {\n      // numReplicas and replicationFactor * numSlices can be not equals,\n      // in case of many addReplicas or deleteReplicas are executed\n      defaultValue = Math.max(defaultValue,\n          collection.getReplicationFactor() * collection.getSlices().size());\n    }\n    return defaultValue * 20;\n  }\n\n","sourceOld":"  private static int defaultCounterValue(DocCollection collection, boolean newCollection) {\n    if (newCollection) return 0;\n    int defaultValue = collection.getReplicas().size();\n    if (collection.getReplicationFactor() != null) {\n      // numReplicas and replicationFactor * numSlices can be not equals,\n      // in case of many addReplicas or deleteReplicas are executed\n      defaultValue = Math.max(defaultValue,\n          collection.getReplicationFactor() * collection.getSlices().size());\n    }\n    return defaultValue * 20;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#defaultCounterValue(DocCollection,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#defaultCounterValue(DocCollection,boolean).mjava","sourceNew":"  private static int defaultCounterValue(DocCollection collection, boolean newCollection) {\n    if (newCollection) return 0;\n    int defaultValue = collection.getReplicas().size();\n    if (collection.getReplicationFactor() != null) {\n      // numReplicas and replicationFactor * numSlices can be not equals,\n      // in case of many addReplicas or deleteReplicas are executed\n      defaultValue = Math.max(defaultValue,\n          collection.getReplicationFactor() * collection.getSlices().size());\n    }\n    return defaultValue * 20;\n  }\n\n","sourceOld":"  private static int defaultCounterValue(DocCollection collection, boolean newCollection) {\n    if (newCollection) return 0;\n    int defaultValue = collection.getReplicas().size();\n    if (collection.getReplicationFactor() != null) {\n      // numReplicas and replicationFactor * numSlices can be not equals,\n      // in case of many addReplicas or deleteReplicas are executed\n      defaultValue = Math.max(defaultValue,\n          collection.getReplicationFactor() * collection.getSlices().size());\n    }\n    return defaultValue * 20;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#defaultCounterValue(DocCollection,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#defaultCounterValue(DocCollection,boolean).mjava","sourceNew":"  private static int defaultCounterValue(DocCollection collection, boolean newCollection) {\n    if (newCollection) return 0;\n    int defaultValue = collection.getReplicas().size();\n    return defaultValue;\n  }\n\n","sourceOld":"  private static int defaultCounterValue(DocCollection collection, boolean newCollection) {\n    if (newCollection) return 0;\n    int defaultValue = collection.getReplicas().size();\n    if (collection.getReplicationFactor() != null) {\n      // numReplicas and replicationFactor * numSlices can be not equals,\n      // in case of many addReplicas or deleteReplicas are executed\n      defaultValue = Math.max(defaultValue,\n          collection.getReplicationFactor() * collection.getSlices().size());\n    }\n    return defaultValue * 20;\n  }\n\n","bugFix":["44bfd7d2ea76c7c37dd13eadc1889039e172f3c7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}