{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","commits":[{"id":"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36","date":1349174553,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,boolean).mjava","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options, IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n\n    boolean supportsOrds = true;\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      boolean useTermOrd = supportsOrds && useTermState == false && random().nextInt(5) == 1;\n\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          if (useTermOrd) {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() + \" using ord=\" + fieldAndTerm.ord);\n          } else {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n          }\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        if (useTermOrd) {\n          // Try seek by ord sometimes:\n          try {\n            termsEnum.seekExact(fieldAndTerm.ord);\n          } catch (UnsupportedOperationException uoe) {\n            supportsOrds = false;\n            assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n          }\n        } else {\n          assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n        }\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      long termOrd;\n      if (supportsOrds) {\n        try {\n          termOrd = termsEnum.ord();\n        } catch (UnsupportedOperationException uoe) {\n          supportsOrds = false;\n          termOrd = -1;\n        }\n      } else {\n        termOrd = -1;\n      }\n\n      if (termOrd != -1) {\n        // PostingsFormat supports ords\n        assertEquals(fieldAndTerm.ord, termsEnum.ord());\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n\n    // Test Terms.intersect:\n    for(String field : fields.keySet()) {\n      while (true) {\n        Automaton a = AutomatonTestUtil.randomAutomaton(random());\n        CompiledAutomaton ca = new CompiledAutomaton(a);\n        if (ca.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // Keep retrying until we get an A that will really \"use\" the PF's intersect code:\n          continue;\n        }\n        // System.out.println(\"A:\\n\" + a.toDot());\n\n        BytesRef startTerm = null;\n        if (random().nextBoolean()) {\n          RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n          for (int iter=0;iter<100;iter++) {\n            int[] codePoints = ras.getRandomAcceptedString(random());\n            if (codePoints.length == 0) {\n              continue;\n            }\n            startTerm = new BytesRef(UnicodeUtil.newString(codePoints, 0, codePoints.length));\n            break;\n          }\n          // Don't allow empty string startTerm:\n          if (startTerm == null) {\n            continue;\n          }\n        }\n        TermsEnum intersected = fieldsSource.terms(field).intersect(ca, startTerm);\n\n        Set<BytesRef> intersectedTerms = new HashSet<BytesRef>();\n        BytesRef term;\n        while ((term = intersected.next()) != null) {\n          if (startTerm != null) {\n            // NOTE: not <=\n            assertTrue(startTerm.compareTo(term) < 0);\n          }\n          intersectedTerms.add(BytesRef.deepCopyOf(term));     \n          verifyEnum(threadState,\n                     field,\n                     term,\n                     intersected,\n                     maxTestOptions,\n                     maxIndexOptions,\n                     options,\n                     alwaysTestMax);\n        }\n\n        if (ca.runAutomaton == null) {\n          assertTrue(intersectedTerms.isEmpty());\n        } else {\n          for(BytesRef term2 : fields.get(field).keySet()) {\n            boolean expected;\n            if (startTerm != null && startTerm.compareTo(term2) >= 0) {\n              expected = false;\n            } else {\n              expected = ca.runAutomaton.run(term2.bytes, term2.offset, term2.length);\n            }\n            assertEquals(\"term=\" + term2, expected, intersectedTerms.contains(term2));\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c69b0e51e02e191025c0417fcecfd32205f5d45","date":1415272618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n\n    boolean supportsOrds = true;\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      boolean useTermOrd = supportsOrds && useTermState == false && random().nextInt(5) == 1;\n\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          if (useTermOrd) {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() + \" using ord=\" + fieldAndTerm.ord);\n          } else {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n          }\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        if (useTermOrd) {\n          // Try seek by ord sometimes:\n          try {\n            termsEnum.seekExact(fieldAndTerm.ord);\n          } catch (UnsupportedOperationException uoe) {\n            supportsOrds = false;\n            assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n          }\n        } else {\n          assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n        }\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      long termOrd;\n      if (supportsOrds) {\n        try {\n          termOrd = termsEnum.ord();\n        } catch (UnsupportedOperationException uoe) {\n          supportsOrds = false;\n          termOrd = -1;\n        }\n      } else {\n        termOrd = -1;\n      }\n\n      if (termOrd != -1) {\n        // PostingsFormat supports ords\n        assertEquals(fieldAndTerm.ord, termsEnum.ord());\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n\n    // Test Terms.intersect:\n    for(String field : fields.keySet()) {\n      while (true) {\n        Automaton a = AutomatonTestUtil.randomAutomaton(random());\n        CompiledAutomaton ca = new CompiledAutomaton(a, null, true, Integer.MAX_VALUE);\n        if (ca.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // Keep retrying until we get an A that will really \"use\" the PF's intersect code:\n          continue;\n        }\n        // System.out.println(\"A:\\n\" + a.toDot());\n\n        BytesRef startTerm = null;\n        if (random().nextBoolean()) {\n          RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n          for (int iter=0;iter<100;iter++) {\n            int[] codePoints = ras.getRandomAcceptedString(random());\n            if (codePoints.length == 0) {\n              continue;\n            }\n            startTerm = new BytesRef(UnicodeUtil.newString(codePoints, 0, codePoints.length));\n            break;\n          }\n          // Don't allow empty string startTerm:\n          if (startTerm == null) {\n            continue;\n          }\n        }\n        TermsEnum intersected = fieldsSource.terms(field).intersect(ca, startTerm);\n\n        Set<BytesRef> intersectedTerms = new HashSet<BytesRef>();\n        BytesRef term;\n        while ((term = intersected.next()) != null) {\n          if (startTerm != null) {\n            // NOTE: not <=\n            assertTrue(startTerm.compareTo(term) < 0);\n          }\n          intersectedTerms.add(BytesRef.deepCopyOf(term));     \n          verifyEnum(threadState,\n                     field,\n                     term,\n                     intersected,\n                     maxTestOptions,\n                     maxIndexOptions,\n                     options,\n                     alwaysTestMax);\n        }\n\n        if (ca.runAutomaton == null) {\n          assertTrue(intersectedTerms.isEmpty());\n        } else {\n          for(BytesRef term2 : fields.get(field).keySet()) {\n            boolean expected;\n            if (startTerm != null && startTerm.compareTo(term2) >= 0) {\n              expected = false;\n            } else {\n              expected = ca.runAutomaton.run(term2.bytes, term2.offset, term2.length);\n            }\n            assertEquals(\"term=\" + term2, expected, intersectedTerms.contains(term2));\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n\n    boolean supportsOrds = true;\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      boolean useTermOrd = supportsOrds && useTermState == false && random().nextInt(5) == 1;\n\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          if (useTermOrd) {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() + \" using ord=\" + fieldAndTerm.ord);\n          } else {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n          }\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        if (useTermOrd) {\n          // Try seek by ord sometimes:\n          try {\n            termsEnum.seekExact(fieldAndTerm.ord);\n          } catch (UnsupportedOperationException uoe) {\n            supportsOrds = false;\n            assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n          }\n        } else {\n          assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n        }\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      long termOrd;\n      if (supportsOrds) {\n        try {\n          termOrd = termsEnum.ord();\n        } catch (UnsupportedOperationException uoe) {\n          supportsOrds = false;\n          termOrd = -1;\n        }\n      } else {\n        termOrd = -1;\n      }\n\n      if (termOrd != -1) {\n        // PostingsFormat supports ords\n        assertEquals(fieldAndTerm.ord, termsEnum.ord());\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n\n    // Test Terms.intersect:\n    for(String field : fields.keySet()) {\n      while (true) {\n        Automaton a = AutomatonTestUtil.randomAutomaton(random());\n        CompiledAutomaton ca = new CompiledAutomaton(a);\n        if (ca.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // Keep retrying until we get an A that will really \"use\" the PF's intersect code:\n          continue;\n        }\n        // System.out.println(\"A:\\n\" + a.toDot());\n\n        BytesRef startTerm = null;\n        if (random().nextBoolean()) {\n          RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n          for (int iter=0;iter<100;iter++) {\n            int[] codePoints = ras.getRandomAcceptedString(random());\n            if (codePoints.length == 0) {\n              continue;\n            }\n            startTerm = new BytesRef(UnicodeUtil.newString(codePoints, 0, codePoints.length));\n            break;\n          }\n          // Don't allow empty string startTerm:\n          if (startTerm == null) {\n            continue;\n          }\n        }\n        TermsEnum intersected = fieldsSource.terms(field).intersect(ca, startTerm);\n\n        Set<BytesRef> intersectedTerms = new HashSet<BytesRef>();\n        BytesRef term;\n        while ((term = intersected.next()) != null) {\n          if (startTerm != null) {\n            // NOTE: not <=\n            assertTrue(startTerm.compareTo(term) < 0);\n          }\n          intersectedTerms.add(BytesRef.deepCopyOf(term));     \n          verifyEnum(threadState,\n                     field,\n                     term,\n                     intersected,\n                     maxTestOptions,\n                     maxIndexOptions,\n                     options,\n                     alwaysTestMax);\n        }\n\n        if (ca.runAutomaton == null) {\n          assertTrue(intersectedTerms.isEmpty());\n        } else {\n          for(BytesRef term2 : fields.get(field).keySet()) {\n            boolean expected;\n            if (startTerm != null && startTerm.compareTo(term2) >= 0) {\n              expected = false;\n            } else {\n              expected = ca.runAutomaton.run(term2.bytes, term2.offset, term2.length);\n            }\n            assertEquals(\"term=\" + term2, expected, intersectedTerms.contains(term2));\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n","bugFix":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n\n    boolean supportsOrds = true;\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      boolean useTermOrd = supportsOrds && useTermState == false && random().nextInt(5) == 1;\n\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          if (useTermOrd) {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() + \" using ord=\" + fieldAndTerm.ord);\n          } else {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n          }\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        if (useTermOrd) {\n          // Try seek by ord sometimes:\n          try {\n            termsEnum.seekExact(fieldAndTerm.ord);\n          } catch (UnsupportedOperationException uoe) {\n            supportsOrds = false;\n            assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n          }\n        } else {\n          assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n        }\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      long termOrd;\n      if (supportsOrds) {\n        try {\n          termOrd = termsEnum.ord();\n        } catch (UnsupportedOperationException uoe) {\n          supportsOrds = false;\n          termOrd = -1;\n        }\n      } else {\n        termOrd = -1;\n      }\n\n      if (termOrd != -1) {\n        // PostingsFormat supports ords\n        assertEquals(fieldAndTerm.ord, termsEnum.ord());\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n\n    // Test Terms.intersect:\n    for(String field : fields.keySet()) {\n      while (true) {\n        Automaton a = AutomatonTestUtil.randomAutomaton(random());\n        CompiledAutomaton ca = new CompiledAutomaton(a, null, true, Integer.MAX_VALUE, false);\n        if (ca.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // Keep retrying until we get an A that will really \"use\" the PF's intersect code:\n          continue;\n        }\n        // System.out.println(\"A:\\n\" + a.toDot());\n\n        BytesRef startTerm = null;\n        if (random().nextBoolean()) {\n          RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n          for (int iter=0;iter<100;iter++) {\n            int[] codePoints = ras.getRandomAcceptedString(random());\n            if (codePoints.length == 0) {\n              continue;\n            }\n            startTerm = new BytesRef(UnicodeUtil.newString(codePoints, 0, codePoints.length));\n            break;\n          }\n          // Don't allow empty string startTerm:\n          if (startTerm == null) {\n            continue;\n          }\n        }\n        TermsEnum intersected = fieldsSource.terms(field).intersect(ca, startTerm);\n\n        Set<BytesRef> intersectedTerms = new HashSet<BytesRef>();\n        BytesRef term;\n        while ((term = intersected.next()) != null) {\n          if (startTerm != null) {\n            // NOTE: not <=\n            assertTrue(startTerm.compareTo(term) < 0);\n          }\n          intersectedTerms.add(BytesRef.deepCopyOf(term));     \n          verifyEnum(threadState,\n                     field,\n                     term,\n                     intersected,\n                     maxTestOptions,\n                     maxIndexOptions,\n                     options,\n                     alwaysTestMax);\n        }\n\n        if (ca.runAutomaton == null) {\n          assertTrue(intersectedTerms.isEmpty());\n        } else {\n          for(BytesRef term2 : fields.get(field).keySet()) {\n            boolean expected;\n            if (startTerm != null && startTerm.compareTo(term2) >= 0) {\n              expected = false;\n            } else {\n              expected = ca.runAutomaton.run(term2.bytes, term2.offset, term2.length);\n            }\n            assertEquals(\"term=\" + term2, expected, intersectedTerms.contains(term2));\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n\n    boolean supportsOrds = true;\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      boolean useTermOrd = supportsOrds && useTermState == false && random().nextInt(5) == 1;\n\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          if (useTermOrd) {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() + \" using ord=\" + fieldAndTerm.ord);\n          } else {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n          }\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        if (useTermOrd) {\n          // Try seek by ord sometimes:\n          try {\n            termsEnum.seekExact(fieldAndTerm.ord);\n          } catch (UnsupportedOperationException uoe) {\n            supportsOrds = false;\n            assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n          }\n        } else {\n          assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n        }\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      long termOrd;\n      if (supportsOrds) {\n        try {\n          termOrd = termsEnum.ord();\n        } catch (UnsupportedOperationException uoe) {\n          supportsOrds = false;\n          termOrd = -1;\n        }\n      } else {\n        termOrd = -1;\n      }\n\n      if (termOrd != -1) {\n        // PostingsFormat supports ords\n        assertEquals(fieldAndTerm.ord, termsEnum.ord());\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n\n    // Test Terms.intersect:\n    for(String field : fields.keySet()) {\n      while (true) {\n        Automaton a = AutomatonTestUtil.randomAutomaton(random());\n        CompiledAutomaton ca = new CompiledAutomaton(a, null, true, Integer.MAX_VALUE);\n        if (ca.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // Keep retrying until we get an A that will really \"use\" the PF's intersect code:\n          continue;\n        }\n        // System.out.println(\"A:\\n\" + a.toDot());\n\n        BytesRef startTerm = null;\n        if (random().nextBoolean()) {\n          RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n          for (int iter=0;iter<100;iter++) {\n            int[] codePoints = ras.getRandomAcceptedString(random());\n            if (codePoints.length == 0) {\n              continue;\n            }\n            startTerm = new BytesRef(UnicodeUtil.newString(codePoints, 0, codePoints.length));\n            break;\n          }\n          // Don't allow empty string startTerm:\n          if (startTerm == null) {\n            continue;\n          }\n        }\n        TermsEnum intersected = fieldsSource.terms(field).intersect(ca, startTerm);\n\n        Set<BytesRef> intersectedTerms = new HashSet<BytesRef>();\n        BytesRef term;\n        while ((term = intersected.next()) != null) {\n          if (startTerm != null) {\n            // NOTE: not <=\n            assertTrue(startTerm.compareTo(term) < 0);\n          }\n          intersectedTerms.add(BytesRef.deepCopyOf(term));     \n          verifyEnum(threadState,\n                     field,\n                     term,\n                     intersected,\n                     maxTestOptions,\n                     maxIndexOptions,\n                     options,\n                     alwaysTestMax);\n        }\n\n        if (ca.runAutomaton == null) {\n          assertTrue(intersectedTerms.isEmpty());\n        } else {\n          for(BytesRef term2 : fields.get(field).keySet()) {\n            boolean expected;\n            if (startTerm != null && startTerm.compareTo(term2) >= 0) {\n              expected = false;\n            } else {\n              expected = ca.runAutomaton.run(term2.bytes, term2.offset, term2.length);\n            }\n            assertEquals(\"term=\" + term2, expected, intersectedTerms.contains(term2));\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n\n    boolean supportsOrds = true;\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      boolean useTermOrd = supportsOrds && useTermState == false && random().nextInt(5) == 1;\n\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          if (useTermOrd) {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() + \" using ord=\" + fieldAndTerm.ord);\n          } else {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n          }\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        if (useTermOrd) {\n          // Try seek by ord sometimes:\n          try {\n            termsEnum.seekExact(fieldAndTerm.ord);\n          } catch (UnsupportedOperationException uoe) {\n            supportsOrds = false;\n            assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n          }\n        } else {\n          assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n        }\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      long termOrd;\n      if (supportsOrds) {\n        try {\n          termOrd = termsEnum.ord();\n        } catch (UnsupportedOperationException uoe) {\n          supportsOrds = false;\n          termOrd = -1;\n        }\n      } else {\n        termOrd = -1;\n      }\n\n      if (termOrd != -1) {\n        // PostingsFormat supports ords\n        assertEquals(fieldAndTerm.ord, termsEnum.ord());\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n\n    // Test Terms.intersect:\n    for(String field : fields.keySet()) {\n      while (true) {\n        Automaton a = AutomatonTestUtil.randomAutomaton(random());\n        CompiledAutomaton ca = new CompiledAutomaton(a, null, true, Integer.MAX_VALUE, false);\n        if (ca.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // Keep retrying until we get an A that will really \"use\" the PF's intersect code:\n          continue;\n        }\n        // System.out.println(\"A:\\n\" + a.toDot());\n\n        BytesRef startTerm = null;\n        if (random().nextBoolean()) {\n          RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n          for (int iter=0;iter<100;iter++) {\n            int[] codePoints = ras.getRandomAcceptedString(random());\n            if (codePoints.length == 0) {\n              continue;\n            }\n            startTerm = new BytesRef(UnicodeUtil.newString(codePoints, 0, codePoints.length));\n            break;\n          }\n          // Don't allow empty string startTerm:\n          if (startTerm == null) {\n            continue;\n          }\n        }\n        TermsEnum intersected = fieldsSource.terms(field).intersect(ca, startTerm);\n\n        Set<BytesRef> intersectedTerms = new HashSet<BytesRef>();\n        BytesRef term;\n        while ((term = intersected.next()) != null) {\n          if (startTerm != null) {\n            // NOTE: not <=\n            assertTrue(startTerm.compareTo(term) < 0);\n          }\n          intersectedTerms.add(BytesRef.deepCopyOf(term));     \n          verifyEnum(threadState,\n                     field,\n                     term,\n                     intersected,\n                     maxTestOptions,\n                     maxIndexOptions,\n                     options,\n                     alwaysTestMax);\n        }\n\n        if (ca.runAutomaton == null) {\n          assertTrue(intersectedTerms.isEmpty());\n        } else {\n          for(BytesRef term2 : fields.get(field).keySet()) {\n            boolean expected;\n            if (startTerm != null && startTerm.compareTo(term2) >= 0) {\n              expected = false;\n            } else {\n              expected = ca.runAutomaton.run(term2.bytes, term2.offset, term2.length);\n            }\n            assertEquals(\"term=\" + term2, expected, intersectedTerms.contains(term2));\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n\n    boolean supportsOrds = true;\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      boolean useTermOrd = supportsOrds && useTermState == false && random().nextInt(5) == 1;\n\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          if (useTermOrd) {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() + \" using ord=\" + fieldAndTerm.ord);\n          } else {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n          }\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        if (useTermOrd) {\n          // Try seek by ord sometimes:\n          try {\n            termsEnum.seekExact(fieldAndTerm.ord);\n          } catch (UnsupportedOperationException uoe) {\n            supportsOrds = false;\n            assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n          }\n        } else {\n          assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n        }\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      long termOrd;\n      if (supportsOrds) {\n        try {\n          termOrd = termsEnum.ord();\n        } catch (UnsupportedOperationException uoe) {\n          supportsOrds = false;\n          termOrd = -1;\n        }\n      } else {\n        termOrd = -1;\n      }\n\n      if (termOrd != -1) {\n        // PostingsFormat supports ords\n        assertEquals(fieldAndTerm.ord, termsEnum.ord());\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n\n    // Test Terms.intersect:\n    for(String field : fields.keySet()) {\n      while (true) {\n        Automaton a = AutomatonTestUtil.randomAutomaton(random());\n        CompiledAutomaton ca = new CompiledAutomaton(a, null, true, Integer.MAX_VALUE);\n        if (ca.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // Keep retrying until we get an A that will really \"use\" the PF's intersect code:\n          continue;\n        }\n        // System.out.println(\"A:\\n\" + a.toDot());\n\n        BytesRef startTerm = null;\n        if (random().nextBoolean()) {\n          RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n          for (int iter=0;iter<100;iter++) {\n            int[] codePoints = ras.getRandomAcceptedString(random());\n            if (codePoints.length == 0) {\n              continue;\n            }\n            startTerm = new BytesRef(UnicodeUtil.newString(codePoints, 0, codePoints.length));\n            break;\n          }\n          // Don't allow empty string startTerm:\n          if (startTerm == null) {\n            continue;\n          }\n        }\n        TermsEnum intersected = fieldsSource.terms(field).intersect(ca, startTerm);\n\n        Set<BytesRef> intersectedTerms = new HashSet<BytesRef>();\n        BytesRef term;\n        while ((term = intersected.next()) != null) {\n          if (startTerm != null) {\n            // NOTE: not <=\n            assertTrue(startTerm.compareTo(term) < 0);\n          }\n          intersectedTerms.add(BytesRef.deepCopyOf(term));     \n          verifyEnum(threadState,\n                     field,\n                     term,\n                     intersected,\n                     maxTestOptions,\n                     maxIndexOptions,\n                     options,\n                     alwaysTestMax);\n        }\n\n        if (ca.runAutomaton == null) {\n          assertTrue(intersectedTerms.isEmpty());\n        } else {\n          for(BytesRef term2 : fields.get(field).keySet()) {\n            boolean expected;\n            if (startTerm != null && startTerm.compareTo(term2) >= 0) {\n              expected = false;\n            } else {\n              expected = ca.runAutomaton.run(term2.bytes, term2.offset, term2.length);\n            }\n            assertEquals(\"term=\" + term2, expected, intersectedTerms.contains(term2));\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testTermsOneThread(Random,Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  private void testTermsOneThread(Random random, Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n\n    boolean supportsOrds = true;\n    \n    Collections.shuffle(allTerms, random);\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random.nextInt(5) == 1;\n      boolean useTermOrd = supportsOrds && useTermState == false && random.nextInt(5) == 1;\n\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (LuceneTestCase.VERBOSE) {\n          if (useTermOrd) {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() + \" using ord=\" + fieldAndTerm.ord);\n          } else {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n          }\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random.nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        if (useTermOrd) {\n          // Try seek by ord sometimes:\n          try {\n            termsEnum.seekExact(fieldAndTerm.ord);\n          } catch (UnsupportedOperationException uoe) {\n            supportsOrds = false;\n            assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n          }\n        } else {\n          assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n        }\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      long termOrd;\n      if (supportsOrds) {\n        try {\n          termOrd = termsEnum.ord();\n        } catch (UnsupportedOperationException uoe) {\n          supportsOrds = false;\n          termOrd = -1;\n        }\n      } else {\n        termOrd = -1;\n      }\n\n      if (termOrd != -1) {\n        // PostingsFormat supports ords\n        assertEquals(fieldAndTerm.ord, termsEnum.ord());\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random.nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(random, threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random.nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random.nextInt(10) == 7) {\n        // Try same term again\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(random, threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n\n    // Test Terms.intersect:\n    for(String field : fields.keySet()) {\n      while (true) {\n        Automaton a = AutomatonTestUtil.randomAutomaton(random);\n        CompiledAutomaton ca = new CompiledAutomaton(a, null, true, Integer.MAX_VALUE, false);\n        if (ca.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // Keep retrying until we get an A that will really \"use\" the PF's intersect code:\n          continue;\n        }\n        // System.out.println(\"A:\\n\" + a.toDot());\n\n        BytesRef startTerm = null;\n        if (random.nextBoolean()) {\n          RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n          for (int iter=0;iter<100;iter++) {\n            int[] codePoints = ras.getRandomAcceptedString(random);\n            if (codePoints.length == 0) {\n              continue;\n            }\n            startTerm = new BytesRef(UnicodeUtil.newString(codePoints, 0, codePoints.length));\n            break;\n          }\n          // Don't allow empty string startTerm:\n          if (startTerm == null) {\n            continue;\n          }\n        }\n        TermsEnum intersected = fieldsSource.terms(field).intersect(ca, startTerm);\n\n        Set<BytesRef> intersectedTerms = new HashSet<BytesRef>();\n        BytesRef term;\n        while ((term = intersected.next()) != null) {\n          if (startTerm != null) {\n            // NOTE: not <=\n            assertTrue(startTerm.compareTo(term) < 0);\n          }\n          intersectedTerms.add(BytesRef.deepCopyOf(term));     \n          verifyEnum(random, threadState,\n                     field,\n                     term,\n                     intersected,\n                     maxTestOptions,\n                     maxIndexOptions,\n                     options,\n                     alwaysTestMax);\n        }\n\n        if (ca.runAutomaton == null) {\n          assertTrue(intersectedTerms.isEmpty());\n        } else {\n          for(BytesRef term2 : fields.get(field).keySet()) {\n            boolean expected;\n            if (startTerm != null && startTerm.compareTo(term2) >= 0) {\n              expected = false;\n            } else {\n              expected = ca.runAutomaton.run(term2.bytes, term2.offset, term2.length);\n            }\n            assertEquals(\"term=\" + term2, expected, intersectedTerms.contains(term2));\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n\n    boolean supportsOrds = true;\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      boolean useTermOrd = supportsOrds && useTermState == false && random().nextInt(5) == 1;\n\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          if (useTermOrd) {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() + \" using ord=\" + fieldAndTerm.ord);\n          } else {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n          }\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        if (useTermOrd) {\n          // Try seek by ord sometimes:\n          try {\n            termsEnum.seekExact(fieldAndTerm.ord);\n          } catch (UnsupportedOperationException uoe) {\n            supportsOrds = false;\n            assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n          }\n        } else {\n          assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n        }\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      long termOrd;\n      if (supportsOrds) {\n        try {\n          termOrd = termsEnum.ord();\n        } catch (UnsupportedOperationException uoe) {\n          supportsOrds = false;\n          termOrd = -1;\n        }\n      } else {\n        termOrd = -1;\n      }\n\n      if (termOrd != -1) {\n        // PostingsFormat supports ords\n        assertEquals(fieldAndTerm.ord, termsEnum.ord());\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n\n    // Test Terms.intersect:\n    for(String field : fields.keySet()) {\n      while (true) {\n        Automaton a = AutomatonTestUtil.randomAutomaton(random());\n        CompiledAutomaton ca = new CompiledAutomaton(a, null, true, Integer.MAX_VALUE, false);\n        if (ca.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // Keep retrying until we get an A that will really \"use\" the PF's intersect code:\n          continue;\n        }\n        // System.out.println(\"A:\\n\" + a.toDot());\n\n        BytesRef startTerm = null;\n        if (random().nextBoolean()) {\n          RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n          for (int iter=0;iter<100;iter++) {\n            int[] codePoints = ras.getRandomAcceptedString(random());\n            if (codePoints.length == 0) {\n              continue;\n            }\n            startTerm = new BytesRef(UnicodeUtil.newString(codePoints, 0, codePoints.length));\n            break;\n          }\n          // Don't allow empty string startTerm:\n          if (startTerm == null) {\n            continue;\n          }\n        }\n        TermsEnum intersected = fieldsSource.terms(field).intersect(ca, startTerm);\n\n        Set<BytesRef> intersectedTerms = new HashSet<BytesRef>();\n        BytesRef term;\n        while ((term = intersected.next()) != null) {\n          if (startTerm != null) {\n            // NOTE: not <=\n            assertTrue(startTerm.compareTo(term) < 0);\n          }\n          intersectedTerms.add(BytesRef.deepCopyOf(term));     \n          verifyEnum(threadState,\n                     field,\n                     term,\n                     intersected,\n                     maxTestOptions,\n                     maxIndexOptions,\n                     options,\n                     alwaysTestMax);\n        }\n\n        if (ca.runAutomaton == null) {\n          assertTrue(intersectedTerms.isEmpty());\n        } else {\n          for(BytesRef term2 : fields.get(field).keySet()) {\n            boolean expected;\n            if (startTerm != null && startTerm.compareTo(term2) >= 0) {\n              expected = false;\n            } else {\n              expected = ca.runAutomaton.run(term2.bytes, term2.offset, term2.length);\n            }\n            assertEquals(\"term=\" + term2, expected, intersectedTerms.contains(term2));\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testTermsOneThread(Random,Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","sourceNew":"  private void testTermsOneThread(Random random, Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n\n    boolean supportsOrds = true;\n    \n    Collections.shuffle(allTerms, random);\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random.nextInt(5) == 1;\n      boolean useTermOrd = supportsOrds && useTermState == false && random.nextInt(5) == 1;\n\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (LuceneTestCase.VERBOSE) {\n          if (useTermOrd) {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() + \" using ord=\" + fieldAndTerm.ord);\n          } else {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n          }\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random.nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        if (useTermOrd) {\n          // Try seek by ord sometimes:\n          try {\n            termsEnum.seekExact(fieldAndTerm.ord);\n          } catch (UnsupportedOperationException uoe) {\n            supportsOrds = false;\n            assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n          }\n        } else {\n          assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n        }\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      long termOrd;\n      if (supportsOrds) {\n        try {\n          termOrd = termsEnum.ord();\n        } catch (UnsupportedOperationException uoe) {\n          supportsOrds = false;\n          termOrd = -1;\n        }\n      } else {\n        termOrd = -1;\n      }\n\n      if (termOrd != -1) {\n        // PostingsFormat supports ords\n        assertEquals(fieldAndTerm.ord, termsEnum.ord());\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random.nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(random, threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random.nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random.nextInt(10) == 7) {\n        // Try same term again\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(random, threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n\n    // Test Terms.intersect:\n    for(String field : fields.keySet()) {\n      while (true) {\n        Automaton a = AutomatonTestUtil.randomAutomaton(random);\n        CompiledAutomaton ca = new CompiledAutomaton(a, null, true, Integer.MAX_VALUE, false);\n        if (ca.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // Keep retrying until we get an A that will really \"use\" the PF's intersect code:\n          continue;\n        }\n        // System.out.println(\"A:\\n\" + a.toDot());\n\n        BytesRef startTerm = null;\n        if (random.nextBoolean()) {\n          RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n          for (int iter=0;iter<100;iter++) {\n            int[] codePoints = ras.getRandomAcceptedString(random);\n            if (codePoints.length == 0) {\n              continue;\n            }\n            startTerm = new BytesRef(UnicodeUtil.newString(codePoints, 0, codePoints.length));\n            break;\n          }\n          // Don't allow empty string startTerm:\n          if (startTerm == null) {\n            continue;\n          }\n        }\n        TermsEnum intersected = fieldsSource.terms(field).intersect(ca, startTerm);\n\n        Set<BytesRef> intersectedTerms = new HashSet<BytesRef>();\n        BytesRef term;\n        while ((term = intersected.next()) != null) {\n          if (startTerm != null) {\n            // NOTE: not <=\n            assertTrue(startTerm.compareTo(term) < 0);\n          }\n          intersectedTerms.add(BytesRef.deepCopyOf(term));     \n          verifyEnum(random, threadState,\n                     field,\n                     term,\n                     intersected,\n                     maxTestOptions,\n                     maxIndexOptions,\n                     options,\n                     alwaysTestMax);\n        }\n\n        if (ca.runAutomaton == null) {\n          assertTrue(intersectedTerms.isEmpty());\n        } else {\n          for(BytesRef term2 : fields.get(field).keySet()) {\n            boolean expected;\n            if (startTerm != null && startTerm.compareTo(term2) >= 0) {\n              expected = false;\n            } else {\n              expected = ca.runAutomaton.run(term2.bytes, term2.offset, term2.length);\n            }\n            assertEquals(\"term=\" + term2, expected, intersectedTerms.contains(term2));\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<>();\n\n    boolean supportsOrds = true;\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      boolean useTermOrd = supportsOrds && useTermState == false && random().nextInt(5) == 1;\n\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          if (useTermOrd) {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() + \" using ord=\" + fieldAndTerm.ord);\n          } else {\n            System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n          }\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        if (useTermOrd) {\n          // Try seek by ord sometimes:\n          try {\n            termsEnum.seekExact(fieldAndTerm.ord);\n          } catch (UnsupportedOperationException uoe) {\n            supportsOrds = false;\n            assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n          }\n        } else {\n          assertTrue(termsEnum.seekExact(fieldAndTerm.term));\n        }\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      long termOrd;\n      if (supportsOrds) {\n        try {\n          termOrd = termsEnum.ord();\n        } catch (UnsupportedOperationException uoe) {\n          supportsOrds = false;\n          termOrd = -1;\n        }\n      } else {\n        termOrd = -1;\n      }\n\n      if (termOrd != -1) {\n        // PostingsFormat supports ords\n        assertEquals(fieldAndTerm.ord, termsEnum.ord());\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n\n    // Test Terms.intersect:\n    for(String field : fields.keySet()) {\n      while (true) {\n        Automaton a = AutomatonTestUtil.randomAutomaton(random());\n        CompiledAutomaton ca = new CompiledAutomaton(a, null, true, Integer.MAX_VALUE, false);\n        if (ca.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // Keep retrying until we get an A that will really \"use\" the PF's intersect code:\n          continue;\n        }\n        // System.out.println(\"A:\\n\" + a.toDot());\n\n        BytesRef startTerm = null;\n        if (random().nextBoolean()) {\n          RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n          for (int iter=0;iter<100;iter++) {\n            int[] codePoints = ras.getRandomAcceptedString(random());\n            if (codePoints.length == 0) {\n              continue;\n            }\n            startTerm = new BytesRef(UnicodeUtil.newString(codePoints, 0, codePoints.length));\n            break;\n          }\n          // Don't allow empty string startTerm:\n          if (startTerm == null) {\n            continue;\n          }\n        }\n        TermsEnum intersected = fieldsSource.terms(field).intersect(ca, startTerm);\n\n        Set<BytesRef> intersectedTerms = new HashSet<BytesRef>();\n        BytesRef term;\n        while ((term = intersected.next()) != null) {\n          if (startTerm != null) {\n            // NOTE: not <=\n            assertTrue(startTerm.compareTo(term) < 0);\n          }\n          intersectedTerms.add(BytesRef.deepCopyOf(term));     \n          verifyEnum(threadState,\n                     field,\n                     term,\n                     intersected,\n                     maxTestOptions,\n                     maxIndexOptions,\n                     options,\n                     alwaysTestMax);\n        }\n\n        if (ca.runAutomaton == null) {\n          assertTrue(intersectedTerms.isEmpty());\n        } else {\n          for(BytesRef term2 : fields.get(field).keySet()) {\n            boolean expected;\n            if (startTerm != null && startTerm.compareTo(term2) >= 0) {\n              expected = false;\n            } else {\n              expected = ca.runAutomaton.run(term2.bytes, term2.offset, term2.length);\n            }\n            assertEquals(\"term=\" + term2, expected, intersectedTerms.contains(term2));\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7c69b0e51e02e191025c0417fcecfd32205f5d45","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"7c69b0e51e02e191025c0417fcecfd32205f5d45":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3e8715d826e588419327562287d5d6a8040d63d6"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"3e8715d826e588419327562287d5d6a8040d63d6":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3e8715d826e588419327562287d5d6a8040d63d6"],"7c69b0e51e02e191025c0417fcecfd32205f5d45":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}