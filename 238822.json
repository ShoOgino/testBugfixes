{"path":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final FixedBitSet bits = new FixedBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context, acceptDocs);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context) throws IOException {\n\n    final FixedBitSet bits = new FixedBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context, context.reader.getLiveDocs());\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final FixedBitSet bits = new FixedBitSet(context.reader.maxDoc());\n    Spans spans = query.getSpans(context, acceptDocs);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}