{"path":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","commits":[{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      TopDocs topDocs = toTopDocs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, topDocs);\n      \n      // query-time parameters\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      int numSnippets = params.getInt(HighlightParams.SNIPPETS, 1);\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, topDocs, numSnippets);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      TopDocs topDocs = toTopDocs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, topDocs);\n      \n      // query-time parameters\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      int numSnippets = params.getInt(HighlightParams.SNIPPETS, 1);\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, topDocs, numSnippets);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"603175ca08914b73fa328e1ac07c772f8103ecd0","date":1363642166,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      int numSnippets = params.getInt(HighlightParams.SNIPPETS, 1);\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, numSnippets);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      TopDocs topDocs = toTopDocs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, topDocs);\n      \n      // query-time parameters\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      int numSnippets = params.getInt(HighlightParams.SNIPPETS, 1);\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, topDocs, numSnippets);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8176b5c0894f97addb4b77198ec5684476b1b32","date":1365103218,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      // TODO: make this per-field\n      int numSnippets = params.getInt(HighlightParams.SNIPPETS, 1);\n      int maxPassages[] = new int[fieldNames.length];\n      Arrays.fill(maxPassages, numSnippets);\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      int numSnippets = params.getInt(HighlightParams.SNIPPETS, 1);\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, numSnippets);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd905c4a79d42991e9ab7416d8acee9b43bd7511","date":1365248927,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          return new PassageFormatter(preTag, postTag, ellipsis);\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      // TODO: make this per-field\n      int numSnippets = params.getInt(HighlightParams.SNIPPETS, 1);\n      int maxPassages[] = new int[fieldNames.length];\n      Arrays.fill(maxPassages, numSnippets);\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b197567ed7b63994641ee44ec9d13bfae783732","date":1365257860,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          return new PassageFormatter(preTag, postTag, ellipsis);\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          return new PassageFormatter(preTag, postTag, ellipsis);\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de75ff011665b8661eefbff2954ce4fbe8b6b791","date":1365261286,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new PassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          return new PassageFormatter(preTag, postTag, ellipsis);\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116a468ed771d87fd94eb1350dd2d42bbf0b262f","date":1365791134,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new DefaultPassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new PassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d","date":1372774106,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new DefaultPassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n\n        @Override\n        protected char getMultiValuedSeparator(String field) {\n          String sep = params.getFieldParam(field, HighlightParams.MULTI_VALUED_SEPARATOR, \" \");\n          if (sep.length() != 1) {\n            throw new IllegalArgumentException(HighlightParams.MULTI_VALUED_SEPARATOR + \" must be exactly one character.\");\n          }\n          return sep.charAt(0);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new DefaultPassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new DefaultPassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n\n        @Override\n        protected char getMultiValuedSeparator(String field) {\n          String sep = params.getFieldParam(field, HighlightParams.MULTI_VALUED_SEPARATOR, \" \");\n          if (sep.length() != 1) {\n            throw new IllegalArgumentException(HighlightParams.MULTI_VALUED_SEPARATOR + \" must be exactly one character.\");\n          }\n          return sep.charAt(0);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new DefaultPassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd81b1d062b9688a18721a1adfc489577479856a","date":1390711758,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      final IndexSchema schema = req.getSchema();\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new DefaultPassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n\n        @Override\n        protected char getMultiValuedSeparator(String field) {\n          String sep = params.getFieldParam(field, HighlightParams.MULTI_VALUED_SEPARATOR, \" \");\n          if (sep.length() != 1) {\n            throw new IllegalArgumentException(HighlightParams.MULTI_VALUED_SEPARATOR + \" must be exactly one character.\");\n          }\n          return sep.charAt(0);\n        }\n\n        @Override\n        protected Analyzer getIndexAnalyzer(String field) {\n          if (params.getFieldBool(field, HighlightParams.HIGHLIGHT_MULTI_TERM, false)) {\n            return schema.getAnalyzer();\n          } else {\n            return null;\n          }\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new DefaultPassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n\n        @Override\n        protected char getMultiValuedSeparator(String field) {\n          String sep = params.getFieldParam(field, HighlightParams.MULTI_VALUED_SEPARATOR, \" \");\n          if (sep.length() != 1) {\n            throw new IllegalArgumentException(HighlightParams.MULTI_VALUED_SEPARATOR + \" must be exactly one character.\");\n          }\n          return sep.charAt(0);\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      final IndexSchema schema = req.getSchema();\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new DefaultPassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n\n        @Override\n        protected char getMultiValuedSeparator(String field) {\n          String sep = params.getFieldParam(field, HighlightParams.MULTI_VALUED_SEPARATOR, \" \");\n          if (sep.length() != 1) {\n            throw new IllegalArgumentException(HighlightParams.MULTI_VALUED_SEPARATOR + \" must be exactly one character.\");\n          }\n          return sep.charAt(0);\n        }\n\n        @Override\n        protected Analyzer getIndexAnalyzer(String field) {\n          if (params.getFieldBool(field, HighlightParams.HIGHLIGHT_MULTI_TERM, false)) {\n            return schema.getIndexAnalyzer();\n          } else {\n            return null;\n          }\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      final IndexSchema schema = req.getSchema();\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new DefaultPassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n\n        @Override\n        protected char getMultiValuedSeparator(String field) {\n          String sep = params.getFieldParam(field, HighlightParams.MULTI_VALUED_SEPARATOR, \" \");\n          if (sep.length() != 1) {\n            throw new IllegalArgumentException(HighlightParams.MULTI_VALUED_SEPARATOR + \" must be exactly one character.\");\n          }\n          return sep.charAt(0);\n        }\n\n        @Override\n        protected Analyzer getIndexAnalyzer(String field) {\n          if (params.getFieldBool(field, HighlightParams.HIGHLIGHT_MULTI_TERM, false)) {\n            return schema.getAnalyzer();\n          } else {\n            return null;\n          }\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d06bb264f7738a0a00a120507fe6ac8f2a16c75","date":1406737633,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (!isHighlightingEnabled(params))\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    int[] docIDs = toDocIDs(docs);\n\n    // fetch the unique keys\n    String[] keys = getUniqueKeys(searcher, docIDs);\n\n    // query-time parameters\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    int maxPassages[] = new int[fieldNames.length];\n    for (int i = 0; i < fieldNames.length; i++) {\n      maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n    }\n\n    PostingsHighlighter highlighter = getHighlighter(req);\n    Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n    return encodeSnippets(keys, fieldNames, snippets);\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (isHighlightingEnabled(params)) {\n      SolrIndexSearcher searcher = req.getSearcher();\n      int[] docIDs = toDocIDs(docs);\n      \n      // fetch the unique keys\n      String[] keys = getUniqueKeys(searcher, docIDs);\n      \n      // query-time parameters\n      int maxLength = params.getInt(HighlightParams.MAX_CHARS, PostingsHighlighter.DEFAULT_MAX_LENGTH);\n      String[] fieldNames = getHighlightFields(query, req, defaultFields);\n      \n      int maxPassages[] = new int[fieldNames.length];\n      for (int i = 0; i < fieldNames.length; i++) {\n        maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n      }\n      \n      final IndexSchema schema = req.getSchema();\n      \n      PostingsHighlighter highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          boolean defaultSummary = params.getFieldBool(fieldName, HighlightParams.DEFAULT_SUMMARY, true);\n          if (defaultSummary) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \"<em>\");\n          String postTag = params.getFieldParam(fieldName, HighlightParams.TAG_POST, \"</em>\");\n          String ellipsis = params.getFieldParam(fieldName, HighlightParams.TAG_ELLIPSIS, \"... \");\n          String encoder = params.getFieldParam(fieldName, HighlightParams.ENCODER, \"simple\");\n          return new DefaultPassageFormatter(preTag, postTag, ellipsis, \"html\".equals(encoder));\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          float k1 = params.getFieldFloat(fieldName, HighlightParams.SCORE_K1, 1.2f);\n          float b = params.getFieldFloat(fieldName, HighlightParams.SCORE_B, 0.75f);\n          float pivot = params.getFieldFloat(fieldName, HighlightParams.SCORE_PIVOT, 87f);\n          return new PassageScorer(k1, b, pivot);\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n          String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n          String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n          Locale locale = parseLocale(language, country, variant);\n          String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n          return parseBreakIterator(type, locale);\n        }\n\n        @Override\n        protected char getMultiValuedSeparator(String field) {\n          String sep = params.getFieldParam(field, HighlightParams.MULTI_VALUED_SEPARATOR, \" \");\n          if (sep.length() != 1) {\n            throw new IllegalArgumentException(HighlightParams.MULTI_VALUED_SEPARATOR + \" must be exactly one character.\");\n          }\n          return sep.charAt(0);\n        }\n\n        @Override\n        protected Analyzer getIndexAnalyzer(String field) {\n          if (params.getFieldBool(field, HighlightParams.HIGHLIGHT_MULTI_TERM, false)) {\n            return schema.getIndexAnalyzer();\n          } else {\n            return null;\n          }\n        }\n      };\n      \n      Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n      return encodeSnippets(keys, fieldNames, snippets);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"424b0811c7309a660798cd4e2939a8adee546665","date":1495551772,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (!isHighlightingEnabled(params))\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    int[] docIDs = toDocIDs(docs);\n\n    // fetch the unique keys\n    String[] keys = getUniqueKeys(searcher, docIDs);\n\n    // query-time parameters\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    int maxPassages[] = new int[fieldNames.length];\n    for (int i = 0; i < fieldNames.length; i++) {\n      maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n    }\n\n    PostingsHighlighter highlighter = getHighlighter(req);\n    Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n    return encodeSnippets(keys, fieldNames, snippets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    final SolrParams params = req.getParams(); \n    \n    // if highlighting isnt enabled, then why call doHighlighting?\n    if (!isHighlightingEnabled(params))\n      return null;\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    int[] docIDs = toDocIDs(docs);\n\n    // fetch the unique keys\n    String[] keys = getUniqueKeys(searcher, docIDs);\n\n    // query-time parameters\n    String[] fieldNames = getHighlightFields(query, req, defaultFields);\n\n    int maxPassages[] = new int[fieldNames.length];\n    for (int i = 0; i < fieldNames.length; i++) {\n      maxPassages[i] = params.getFieldInt(fieldNames[i], HighlightParams.SNIPPETS, 1);\n    }\n\n    PostingsHighlighter highlighter = getHighlighter(req);\n    Map<String,String[]> snippets = highlighter.highlightFields(fieldNames, query, searcher, docIDs, maxPassages);\n    return encodeSnippets(keys, fieldNames, snippets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"3d06bb264f7738a0a00a120507fe6ac8f2a16c75":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"4b197567ed7b63994641ee44ec9d13bfae783732":["dd905c4a79d42991e9ab7416d8acee9b43bd7511"],"e8176b5c0894f97addb4b77198ec5684476b1b32":["603175ca08914b73fa328e1ac07c772f8103ecd0"],"603175ca08914b73fa328e1ac07c772f8103ecd0":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["116a468ed771d87fd94eb1350dd2d42bbf0b262f","2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d"],"424b0811c7309a660798cd4e2939a8adee546665":["3d06bb264f7738a0a00a120507fe6ac8f2a16c75"],"116a468ed771d87fd94eb1350dd2d42bbf0b262f":["de75ff011665b8661eefbff2954ce4fbe8b6b791"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3d06bb264f7738a0a00a120507fe6ac8f2a16c75","424b0811c7309a660798cd4e2939a8adee546665"],"2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d":["116a468ed771d87fd94eb1350dd2d42bbf0b262f"],"dd905c4a79d42991e9ab7416d8acee9b43bd7511":["e8176b5c0894f97addb4b77198ec5684476b1b32"],"de75ff011665b8661eefbff2954ce4fbe8b6b791":["4b197567ed7b63994641ee44ec9d13bfae783732"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["dd81b1d062b9688a18721a1adfc489577479856a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd81b1d062b9688a18721a1adfc489577479856a":["2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["424b0811c7309a660798cd4e2939a8adee546665"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3d06bb264f7738a0a00a120507fe6ac8f2a16c75":["424b0811c7309a660798cd4e2939a8adee546665","e9017cf144952056066919f1ebc7897ff9bd71b1"],"4b197567ed7b63994641ee44ec9d13bfae783732":["de75ff011665b8661eefbff2954ce4fbe8b6b791"],"e8176b5c0894f97addb4b77198ec5684476b1b32":["dd905c4a79d42991e9ab7416d8acee9b43bd7511"],"603175ca08914b73fa328e1ac07c772f8103ecd0":["e8176b5c0894f97addb4b77198ec5684476b1b32"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"424b0811c7309a660798cd4e2939a8adee546665":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"116a468ed771d87fd94eb1350dd2d42bbf0b262f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","603175ca08914b73fa328e1ac07c772f8103ecd0"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","dd81b1d062b9688a18721a1adfc489577479856a"],"dd905c4a79d42991e9ab7416d8acee9b43bd7511":["4b197567ed7b63994641ee44ec9d13bfae783732"],"de75ff011665b8661eefbff2954ce4fbe8b6b791":["116a468ed771d87fd94eb1350dd2d42bbf0b262f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["3d06bb264f7738a0a00a120507fe6ac8f2a16c75"],"dd81b1d062b9688a18721a1adfc489577479856a":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}