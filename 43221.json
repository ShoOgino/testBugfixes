{"path":"solr/src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#compareBottom(int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#compareBottom(int).mjava","pathOld":"/dev/null","sourceNew":"    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = this.order[doc];\n      int ord = (order == 0) ? NULL_ORD : order;\n      final int cmp = bottomOrd - ord;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      final String val2 = lookup[order];\n\n      // take care of the case where both vals are null\n      if (bottomValue == val2) return 0;\n \n      return bottomValue.compareTo(val2);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#compareBottom(int).mjava","sourceNew":null,"sourceOld":"    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = this.order[doc];\n      int ord = (order == 0) ? NULL_ORD : order;\n      final int cmp = bottomOrd - ord;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      final String val2 = lookup[order];\n\n      // take care of the case where both vals are null\n      if (bottomValue == val2) return 0;\n \n      return bottomValue.compareTo(val2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#compareBottom(int).mjava","pathOld":"src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#compareBottom(int).mjava","sourceNew":"    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = this.order[doc];\n      int ord = (order == 0) ? NULL_ORD : order;\n      final int cmp = bottomOrd - ord;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      final String val2 = lookup[order];\n\n      // take care of the case where both vals are null\n      if (bottomValue == val2) return 0;\n \n      return bottomValue.compareTo(val2);\n    }\n\n","sourceOld":"    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = this.order[doc];\n      int ord = (order == 0) ? NULL_ORD : order;\n      final int cmp = bottomOrd - ord;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      final String val2 = lookup[order];\n\n      // take care of the case where both vals are null\n      if (bottomValue == val2) return 0;\n \n      return bottomValue.compareTo(val2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#compareBottom(int).mjava","pathOld":"/dev/null","sourceNew":"    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = this.order[doc];\n      int ord = (order == 0) ? NULL_ORD : order;\n      final int cmp = bottomOrd - ord;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      final String val2 = lookup[order];\n\n      // take care of the case where both vals are null\n      if (bottomValue == val2) return 0;\n \n      return bottomValue.compareTo(val2);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#compareBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#compareBottom(int).mjava","sourceNew":"    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      int ord = (order == 0) ? NULL_ORD : order;\n      final int cmp = bottomOrd - ord;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      // take care of the case where both vals are null\n      if (bottomOrd == NULL_ORD) return 0;\n      return bottomValue.compareTo(termsIndex.lookup(order, tempBR));\n    }\n\n","sourceOld":"    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = this.order[doc];\n      int ord = (order == 0) ? NULL_ORD : order;\n      final int cmp = bottomOrd - ord;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      final String val2 = lookup[order];\n\n      // take care of the case where both vals are null\n      if (bottomValue == val2) return 0;\n \n      return bottomValue.compareTo(val2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c81a8899ecd6e225389876dfeac34c6873c4516","date":1284403877,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#compareBottom(int).mjava","sourceNew":null,"sourceOld":"    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      int ord = (order == 0) ? NULL_ORD : order;\n      final int cmp = bottomOrd - ord;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      // take care of the case where both vals are null\n      if (bottomOrd == NULL_ORD) return 0;\n      return bottomValue.compareTo(termsIndex.lookup(order, tempBR));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#compareBottom(int).mjava","sourceNew":null,"sourceOld":"    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      int ord = (order == 0) ? NULL_ORD : order;\n      final int cmp = bottomOrd - ord;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      // take care of the case where both vals are null\n      if (bottomOrd == NULL_ORD) return 0;\n      return bottomValue.compareTo(termsIndex.lookup(order, tempBR));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"0c81a8899ecd6e225389876dfeac34c6873c4516":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","0c81a8899ecd6e225389876dfeac34c6873c4516"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0c81a8899ecd6e225389876dfeac34c6873c4516"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["0c81a8899ecd6e225389876dfeac34c6873c4516","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"0c81a8899ecd6e225389876dfeac34c6873c4516":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}