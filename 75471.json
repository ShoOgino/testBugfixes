{"path":"lucene/misc/src/test/org/apache/lucene/search/TestDocValuesStatsCollector#testDocsWithLongValues().mjava","commits":[{"id":"05e797f1e66d5397a0e587dbec4b7c278fb776bf","date":1481805728,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDocValuesStatsCollector#testDocsWithLongValues().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDocValuesStatsCollector#testRandomDocsWithLongValues().mjava","sourceNew":"  public void testDocsWithLongValues() throws IOException {\n    try (Directory dir = newDirectory();\n        IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig())) {\n      String field = \"numeric\";\n      int numDocs = TestUtil.nextInt(random(), 1, 100);\n      long[] docValues = new long[numDocs];\n      int nextVal = 1;\n      for (int i = 0; i < numDocs; i++) {\n        Document doc = new Document();\n        if (random().nextBoolean()) { // not all documents have a value\n          doc.add(new NumericDocValuesField(field, nextVal));\n          doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n          docValues[i] = nextVal;\n          ++nextVal;\n        }\n        indexWriter.addDocument(doc);\n      }\n\n      // 20% of cases delete some docs\n      if (random().nextDouble() < 0.2) {\n        for (int i = 0; i < numDocs; i++) {\n          if (random().nextBoolean()) {\n            indexWriter.deleteDocuments(new Term(\"id\", \"doc\" + i));\n            docValues[i] = 0;\n          }\n        }\n      }\n\n      try (DirectoryReader reader = DirectoryReader.open(indexWriter)) {\n        IndexSearcher searcher = new IndexSearcher(reader);\n        LongDocValuesStats stats = new LongDocValuesStats(field);\n        searcher.search(new MatchAllDocsQuery(), new DocValuesStatsCollector(stats));\n\n        int expCount = (int) Arrays.stream(docValues).filter(v -> v > 0).count();\n        assertEquals(expCount, stats.count());\n        assertEquals(getZeroValues(docValues).count() - reader.numDeletedDocs(), stats.missing());\n        if (stats.count() > 0) {\n          LongSummaryStatistics sumStats = getPositiveValues(docValues).summaryStatistics();\n          assertEquals(sumStats.getMax(), stats.max().longValue());\n          assertEquals(sumStats.getMin(), stats.min().longValue());\n          assertEquals(sumStats.getAverage(), stats.mean(), 0.00001);\n          assertEquals(sumStats.getSum(), stats.sum().longValue());\n          double variance = computeVariance(docValues, stats.mean, stats.count());\n          assertEquals(variance, stats.variance(), 0.00001);\n          assertEquals(Math.sqrt(variance), stats.stdev(), 0.00001);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomDocsWithLongValues() throws IOException {\n    try (Directory dir = newDirectory();\n        IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig())) {\n      String field = \"numeric\";\n      int numDocs = TestUtil.nextInt(random(), 1, 100);\n      long[] docValues = new long[numDocs];\n      int nextVal = 1;\n      for (int i = 0; i < numDocs; i++) {\n        Document doc = new Document();\n        if (random().nextBoolean()) { // not all documents have a value\n          doc.add(new NumericDocValuesField(field, nextVal));\n          doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n          docValues[i] = nextVal;\n          ++nextVal;\n        }\n        indexWriter.addDocument(doc);\n      }\n\n      // 20% of cases delete some docs\n      if (random().nextDouble() < 0.2) {\n        for (int i = 0; i < numDocs; i++) {\n          if (random().nextBoolean()) {\n            indexWriter.deleteDocuments(new Term(\"id\", \"doc\" + i));\n            docValues[i] = 0;\n          }\n        }\n      }\n\n      try (DirectoryReader reader = DirectoryReader.open(indexWriter)) {\n        IndexSearcher searcher = new IndexSearcher(reader);\n        LongDocValuesStats stats = new LongDocValuesStats(field);\n        searcher.search(new MatchAllDocsQuery(), new DocValuesStatsCollector(stats));\n\n        int expCount = (int) Arrays.stream(docValues).filter(v -> v > 0).count();\n        assertEquals(expCount, stats.count());\n        assertEquals(getZeroValues(docValues).count() - reader.numDeletedDocs(), stats.missing());\n        if (stats.count() > 0) {\n          assertEquals(getPositiveValues(docValues).max().getAsLong(), stats.max().longValue());\n          assertEquals(getPositiveValues(docValues).min().getAsLong(), stats.min().longValue());\n          assertEquals(getPositiveValues(docValues).average().getAsDouble(), stats.mean(), 0.00001);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDocValuesStatsCollector#testDocsWithLongValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithLongValues() throws IOException {\n    try (Directory dir = newDirectory();\n        IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig())) {\n      String field = \"numeric\";\n      int numDocs = TestUtil.nextInt(random(), 1, 100);\n      long[] docValues = new long[numDocs];\n      int nextVal = 1;\n      for (int i = 0; i < numDocs; i++) {\n        Document doc = new Document();\n        if (random().nextBoolean()) { // not all documents have a value\n          doc.add(new NumericDocValuesField(field, nextVal));\n          doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n          docValues[i] = nextVal;\n          ++nextVal;\n        }\n        indexWriter.addDocument(doc);\n      }\n\n      // 20% of cases delete some docs\n      if (random().nextDouble() < 0.2) {\n        for (int i = 0; i < numDocs; i++) {\n          if (random().nextBoolean()) {\n            indexWriter.deleteDocuments(new Term(\"id\", \"doc\" + i));\n            docValues[i] = 0;\n          }\n        }\n      }\n\n      try (DirectoryReader reader = DirectoryReader.open(indexWriter)) {\n        IndexSearcher searcher = new IndexSearcher(reader);\n        LongDocValuesStats stats = new LongDocValuesStats(field);\n        searcher.search(new MatchAllDocsQuery(), new DocValuesStatsCollector(stats));\n\n        int expCount = (int) Arrays.stream(docValues).filter(v -> v > 0).count();\n        assertEquals(expCount, stats.count());\n        assertEquals(getZeroValues(docValues).count() - reader.numDeletedDocs(), stats.missing());\n        if (stats.count() > 0) {\n          LongSummaryStatistics sumStats = getPositiveValues(docValues).summaryStatistics();\n          assertEquals(sumStats.getMax(), stats.max().longValue());\n          assertEquals(sumStats.getMin(), stats.min().longValue());\n          assertEquals(sumStats.getAverage(), stats.mean(), 0.00001);\n          assertEquals(sumStats.getSum(), stats.sum().longValue());\n          double variance = computeVariance(docValues, stats.mean, stats.count());\n          assertEquals(variance, stats.variance(), 0.00001);\n          assertEquals(Math.sqrt(variance), stats.stdev(), 0.00001);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db50efc931d15d3f220dd02fb9cda28cecfaf584","date":1482177276,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDocValuesStatsCollector#testDocsWithLongValues().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDocValuesStatsCollector#testDocsWithLongValues().mjava","sourceNew":"  public void testDocsWithLongValues() throws IOException {\n    try (Directory dir = newDirectory();\n        IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig())) {\n      String field = \"numeric\";\n      int numDocs = TestUtil.nextInt(random(), 1, 100);\n      long[] docValues = new long[numDocs];\n      int nextVal = 1;\n      for (int i = 0; i < numDocs; i++) {\n        Document doc = new Document();\n        if (random().nextBoolean()) { // not all documents have a value\n          doc.add(new NumericDocValuesField(field, nextVal));\n          doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n          docValues[i] = nextVal;\n          ++nextVal;\n        }\n        indexWriter.addDocument(doc);\n      }\n\n      // 20% of cases delete some docs\n      if (random().nextDouble() < 0.2) {\n        for (int i = 0; i < numDocs; i++) {\n          if (random().nextBoolean()) {\n            indexWriter.deleteDocuments(new Term(\"id\", \"doc\" + i));\n            docValues[i] = 0;\n          }\n        }\n      }\n\n      try (DirectoryReader reader = DirectoryReader.open(indexWriter)) {\n        IndexSearcher searcher = new IndexSearcher(reader);\n        LongDocValuesStats stats = new LongDocValuesStats(field);\n        searcher.search(new MatchAllDocsQuery(), new DocValuesStatsCollector(stats));\n\n        int expCount = (int) Arrays.stream(docValues).filter(v -> v > 0).count();\n        assertEquals(expCount, stats.count());\n        int numDocsWithoutField = (int) getZeroValues(docValues).count();\n        assertEquals(computeExpMissing(numDocsWithoutField, numDocs, reader), stats.missing());\n        if (stats.count() > 0) {\n          LongSummaryStatistics sumStats = getPositiveValues(docValues).summaryStatistics();\n          assertEquals(sumStats.getMax(), stats.max().longValue());\n          assertEquals(sumStats.getMin(), stats.min().longValue());\n          assertEquals(sumStats.getAverage(), stats.mean(), 0.00001);\n          assertEquals(sumStats.getSum(), stats.sum().longValue());\n          double variance = computeVariance(docValues, stats.mean, stats.count());\n          assertEquals(variance, stats.variance(), 0.00001);\n          assertEquals(Math.sqrt(variance), stats.stdev(), 0.00001);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithLongValues() throws IOException {\n    try (Directory dir = newDirectory();\n        IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig())) {\n      String field = \"numeric\";\n      int numDocs = TestUtil.nextInt(random(), 1, 100);\n      long[] docValues = new long[numDocs];\n      int nextVal = 1;\n      for (int i = 0; i < numDocs; i++) {\n        Document doc = new Document();\n        if (random().nextBoolean()) { // not all documents have a value\n          doc.add(new NumericDocValuesField(field, nextVal));\n          doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n          docValues[i] = nextVal;\n          ++nextVal;\n        }\n        indexWriter.addDocument(doc);\n      }\n\n      // 20% of cases delete some docs\n      if (random().nextDouble() < 0.2) {\n        for (int i = 0; i < numDocs; i++) {\n          if (random().nextBoolean()) {\n            indexWriter.deleteDocuments(new Term(\"id\", \"doc\" + i));\n            docValues[i] = 0;\n          }\n        }\n      }\n\n      try (DirectoryReader reader = DirectoryReader.open(indexWriter)) {\n        IndexSearcher searcher = new IndexSearcher(reader);\n        LongDocValuesStats stats = new LongDocValuesStats(field);\n        searcher.search(new MatchAllDocsQuery(), new DocValuesStatsCollector(stats));\n\n        int expCount = (int) Arrays.stream(docValues).filter(v -> v > 0).count();\n        assertEquals(expCount, stats.count());\n        assertEquals(getZeroValues(docValues).count() - reader.numDeletedDocs(), stats.missing());\n        if (stats.count() > 0) {\n          LongSummaryStatistics sumStats = getPositiveValues(docValues).summaryStatistics();\n          assertEquals(sumStats.getMax(), stats.max().longValue());\n          assertEquals(sumStats.getMin(), stats.min().longValue());\n          assertEquals(sumStats.getAverage(), stats.mean(), 0.00001);\n          assertEquals(sumStats.getSum(), stats.sum().longValue());\n          double variance = computeVariance(docValues, stats.mean, stats.count());\n          assertEquals(variance, stats.variance(), 0.00001);\n          assertEquals(Math.sqrt(variance), stats.stdev(), 0.00001);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDocValuesStatsCollector#testDocsWithLongValues().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDocValuesStatsCollector#testDocsWithLongValues().mjava","sourceNew":"  public void testDocsWithLongValues() throws IOException {\n    try (Directory dir = newDirectory();\n        IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig())) {\n      String field = \"numeric\";\n      int numDocs = TestUtil.nextInt(random(), 1, 100);\n      long[] docValues = new long[numDocs];\n      int nextVal = 1;\n      for (int i = 0; i < numDocs; i++) {\n        Document doc = new Document();\n        if (random().nextBoolean()) { // not all documents have a value\n          doc.add(new NumericDocValuesField(field, nextVal));\n          doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n          docValues[i] = nextVal;\n          ++nextVal;\n        }\n        indexWriter.addDocument(doc);\n      }\n\n      // 20% of cases delete some docs\n      if (random().nextDouble() < 0.2) {\n        for (int i = 0; i < numDocs; i++) {\n          if (random().nextBoolean()) {\n            indexWriter.deleteDocuments(new Term(\"id\", \"doc\" + i));\n            docValues[i] = 0;\n          }\n        }\n      }\n\n      try (DirectoryReader reader = DirectoryReader.open(indexWriter)) {\n        IndexSearcher searcher = new IndexSearcher(reader);\n        LongDocValuesStats stats = new LongDocValuesStats(field);\n        searcher.search(new MatchAllDocsQuery(), new DocValuesStatsCollector(stats));\n\n        int expCount = (int) Arrays.stream(docValues).filter(v -> v > 0).count();\n        assertEquals(expCount, stats.count());\n        int numDocsWithoutField = (int) getZeroValues(docValues).count();\n        assertEquals(computeExpMissing(numDocsWithoutField, numDocs, reader), stats.missing());\n        if (stats.count() > 0) {\n          LongSummaryStatistics sumStats = getPositiveValues(docValues).summaryStatistics();\n          assertEquals(sumStats.getMax(), stats.max().longValue());\n          assertEquals(sumStats.getMin(), stats.min().longValue());\n          assertEquals(sumStats.getAverage(), stats.mean(), 0.00001);\n          assertEquals(sumStats.getSum(), stats.sum().longValue());\n          double variance = computeVariance(docValues, stats.mean, stats.count());\n          assertEquals(variance, stats.variance(), 0.00001);\n          assertEquals(Math.sqrt(variance), stats.stdev(), 0.00001);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithLongValues() throws IOException {\n    try (Directory dir = newDirectory();\n        IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig())) {\n      String field = \"numeric\";\n      int numDocs = TestUtil.nextInt(random(), 1, 100);\n      long[] docValues = new long[numDocs];\n      int nextVal = 1;\n      for (int i = 0; i < numDocs; i++) {\n        Document doc = new Document();\n        if (random().nextBoolean()) { // not all documents have a value\n          doc.add(new NumericDocValuesField(field, nextVal));\n          doc.add(new StringField(\"id\", \"doc\" + i, Store.NO));\n          docValues[i] = nextVal;\n          ++nextVal;\n        }\n        indexWriter.addDocument(doc);\n      }\n\n      // 20% of cases delete some docs\n      if (random().nextDouble() < 0.2) {\n        for (int i = 0; i < numDocs; i++) {\n          if (random().nextBoolean()) {\n            indexWriter.deleteDocuments(new Term(\"id\", \"doc\" + i));\n            docValues[i] = 0;\n          }\n        }\n      }\n\n      try (DirectoryReader reader = DirectoryReader.open(indexWriter)) {\n        IndexSearcher searcher = new IndexSearcher(reader);\n        LongDocValuesStats stats = new LongDocValuesStats(field);\n        searcher.search(new MatchAllDocsQuery(), new DocValuesStatsCollector(stats));\n\n        int expCount = (int) Arrays.stream(docValues).filter(v -> v > 0).count();\n        assertEquals(expCount, stats.count());\n        assertEquals(getZeroValues(docValues).count() - reader.numDeletedDocs(), stats.missing());\n        if (stats.count() > 0) {\n          LongSummaryStatistics sumStats = getPositiveValues(docValues).summaryStatistics();\n          assertEquals(sumStats.getMax(), stats.max().longValue());\n          assertEquals(sumStats.getMin(), stats.min().longValue());\n          assertEquals(sumStats.getAverage(), stats.mean(), 0.00001);\n          assertEquals(sumStats.getSum(), stats.sum().longValue());\n          double variance = computeVariance(docValues, stats.mean, stats.count());\n          assertEquals(variance, stats.variance(), 0.00001);\n          assertEquals(Math.sqrt(variance), stats.stdev(), 0.00001);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db50efc931d15d3f220dd02fb9cda28cecfaf584":["05e797f1e66d5397a0e587dbec4b7c278fb776bf"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["9856095f7afb5a607bf5e65077615ed91273508c","db50efc931d15d3f220dd02fb9cda28cecfaf584"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","05e797f1e66d5397a0e587dbec4b7c278fb776bf"],"05e797f1e66d5397a0e587dbec4b7c278fb776bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db50efc931d15d3f220dd02fb9cda28cecfaf584"]},"commit2Childs":{"db50efc931d15d3f220dd02fb9cda28cecfaf584":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9856095f7afb5a607bf5e65077615ed91273508c","05e797f1e66d5397a0e587dbec4b7c278fb776bf"],"9856095f7afb5a607bf5e65077615ed91273508c":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"05e797f1e66d5397a0e587dbec4b7c278fb776bf":["db50efc931d15d3f220dd02fb9cda28cecfaf584","9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}