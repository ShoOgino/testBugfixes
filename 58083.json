{"path":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","commits":[{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e6c873b95174ff04c895232927baa76a95925eb","date":1385054916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d996c36bf85996da326201b915c87d41449d7f5","date":1403084374,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","sourceNew":"  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    return joinElection(context,replacement, false);\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,boolean).mjava","sourceNew":"  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    return joinElection(context,replacement, false);\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @return sequential node number\n   */\n  public int joinElection(ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException {\n    context.joinedElectionFired();\n    \n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          cont = true;\n          if (tries++ > 20) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n          try {\n            Thread.sleep(50);\n          } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 20) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        try {\n          Thread.sleep(50);\n        } catch (InterruptedException e2) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, replacement);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d996c36bf85996da326201b915c87d41449d7f5":["9e6c873b95174ff04c895232927baa76a95925eb"],"9e6c873b95174ff04c895232927baa76a95925eb":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["9e6c873b95174ff04c895232927baa76a95925eb","7d996c36bf85996da326201b915c87d41449d7f5"],"d82832af39f94dbb58a3130fd216ff1d49435589":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["88f39c3b3a16aebc5a91335341c7ad5b560e2277","9e6c873b95174ff04c895232927baa76a95925eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d996c36bf85996da326201b915c87d41449d7f5"]},"commit2Childs":{"7d996c36bf85996da326201b915c87d41449d7f5":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e6c873b95174ff04c895232927baa76a95925eb":["7d996c36bf85996da326201b915c87d41449d7f5","e57c73924f3b8c19defa62e96bfa34a4922d49c2","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d82832af39f94dbb58a3130fd216ff1d49435589","db4fdbf3d262768eabc027cd8321edca0cd11fa8","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["9e6c873b95174ff04c895232927baa76a95925eb","d82832af39f94dbb58a3130fd216ff1d49435589","db4fdbf3d262768eabc027cd8321edca0cd11fa8","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d82832af39f94dbb58a3130fd216ff1d49435589","db4fdbf3d262768eabc027cd8321edca0cd11fa8","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}