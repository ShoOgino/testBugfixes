{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CountStream#CountStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CountStream#CountStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public CountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CountStream#CountStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CountStream#CountStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n\n","sourceOld":"  public CountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3078cad1008b796c6d573b743c586fdf9ef5660a","date":1436019875,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/RecordCountStream#RecordCountStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CountStream#CountStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n\n","sourceOld":"  public CountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3078cad1008b796c6d573b743c586fdf9ef5660a":["e431b0806b8db369da896b66a74e304a49953c7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3078cad1008b796c6d573b743c586fdf9ef5660a"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"3078cad1008b796c6d573b743c586fdf9ef5660a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e431b0806b8db369da896b66a74e304a49953c7b":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}