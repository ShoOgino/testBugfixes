{"path":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMapMerge().mjava","commits":[{"id":"0d3072fffb39e4aa50fce38815821919b35fc194","date":1138579199,"type":0,"author":"Yoav Shapira","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMapMerge().mjava","pathOld":"/dev/null","sourceNew":"  public void testMapMerge() throws IOException {\r\n    SynonymMap map = new SynonymMap();\r\n\r\n    boolean orig = false;\r\n    boolean merge = true;\r\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\r\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\r\n    // System.out.println(map);\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3 a5,2\"));\r\n\r\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\r\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\r\n    //System.out.println(map);\r\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"b3 b5,2\"));\r\n\r\n\r\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\r\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3/A3 a5,2/A5\"));\r\n\r\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a3,2/A3 a5,2/A5\"));\r\n\r\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\r\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a2 a3/A3 a4 a5/A5 a6\"));\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1781d63ce2d5e979c8b3f35682b60a86f5df553","date":1153254917,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMapMerge().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMapMerge().mjava","sourceNew":"  public void testMapMerge() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\n    // System.out.println(map);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3 a5,2\"));\n\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\n    //System.out.println(map);\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"b3 b5,2\"));\n\n\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3/A3 a5,2/A5\"));\n\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a3,2/A3 a5,2/A5\"));\n\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a2 a3/A3 a4 a5/A5 a6\"));\n  }\n\n","sourceOld":"  public void testMapMerge() throws IOException {\r\n    SynonymMap map = new SynonymMap();\r\n\r\n    boolean orig = false;\r\n    boolean merge = true;\r\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\r\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\r\n    // System.out.println(map);\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3 a5,2\"));\r\n\r\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\r\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\r\n    //System.out.println(map);\r\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"b3 b5,2\"));\r\n\r\n\r\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\r\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3/A3 a5,2/A5\"));\r\n\r\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a3,2/A3 a5,2/A5\"));\r\n\r\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\r\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a2 a3/A3 a4 a5/A5 a6\"));\r\n  }\r\n\n","bugFix":["0d3072fffb39e4aa50fce38815821919b35fc194"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMapMerge().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMapMerge().mjava","sourceNew":"  public void testMapMerge() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\n\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\n\n    assertTokenizesTo(map, \"b\",\n        new String[] { \"b3\", \"b5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\n    \n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 2, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a2\", \"a3\", \"A3\", \"a4\", \"a5\", \"A5\", \"a6\" },\n        new int[] { 1, 1, 1, 0, 1, 1, 0, 1  });\n  }\n\n","sourceOld":"  public void testMapMerge() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\n    // System.out.println(map);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3 a5,2\"));\n\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\n    //System.out.println(map);\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"b3 b5,2\"));\n\n\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3/A3 a5,2/A5\"));\n\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a3,2/A3 a5,2/A5\"));\n\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a2 a3/A3 a4 a5/A5 a6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#testMapMerge().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMapMerge().mjava","sourceNew":"  public void testMapMerge() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\n\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\n\n    assertTokenizesTo(map, \"b\",\n        new String[] { \"b3\", \"b5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\n    \n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 2, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a2\", \"a3\", \"A3\", \"a4\", \"a5\", \"A5\", \"a6\" },\n        new int[] { 1, 1, 1, 0, 1, 1, 0, 1  });\n  }\n\n","sourceOld":"  public void testMapMerge() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\n\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\n\n    assertTokenizesTo(map, \"b\",\n        new String[] { \"b3\", \"b5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\n    \n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 2, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a2\", \"a3\", \"A3\", \"a4\", \"a5\", \"A5\", \"a6\" },\n        new int[] { 1, 1, 1, 0, 1, 1, 0, 1  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"c1781d63ce2d5e979c8b3f35682b60a86f5df553":["0d3072fffb39e4aa50fce38815821919b35fc194"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"0d3072fffb39e4aa50fce38815821919b35fc194":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0d3072fffb39e4aa50fce38815821919b35fc194"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c1781d63ce2d5e979c8b3f35682b60a86f5df553":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"0d3072fffb39e4aa50fce38815821919b35fc194":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}