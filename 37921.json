{"path":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sort n string sequence list.\n   * \n   * @param seqs\n   */\n  private void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        return Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sort n string sequence list.\n   * \n   * @param seqs\n   */\n  private void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        return Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sort n string sequence list.\n   * \n   * @param seqs\n   */\n  private void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        return Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","sourceNew":"  /**\n   * Sort n string sequence list.\n   */\n  private void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        return Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Sort n string sequence list.\n   * \n   * @param seqs\n   */\n  private void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        return Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44de42d869f7d8e5235d43c4ad9a99f520363a2f","date":1389871557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","sourceNew":"  /**\n   * Sort n string sequence list.\n   */\n  public static void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        return Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Sort n string sequence list.\n   */\n  private void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        return Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d996c36bf85996da326201b915c87d41449d7f5","date":1403084374,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","sourceNew":"  /**\n   * Sort n string sequence list.\n   */\n  public static void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        int i = Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n        return i == 0 ? o1.compareTo(o2) : i ;\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Sort n string sequence list.\n   */\n  public static void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        return Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","sourceNew":"  /**\n   * Sort n string sequence list.\n   */\n  public static void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        int i = Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n        return i == 0 ? o1.compareTo(o2) : i ;\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Sort n string sequence list.\n   */\n  public static void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        return Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ea01e15f477524516b07b300a3ae03d1bec9bc","date":1455919598,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","sourceNew":"  /**\n   * Sort n string sequence list.\n   */\n  public static void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        int i = getSeq(o1) - getSeq(o2);\n        return i == 0 ? o1.compareTo(o2) : i ;\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Sort n string sequence list.\n   */\n  public static void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        int i = Integer.valueOf(getSeq(o1)).compareTo(\n            Integer.valueOf(getSeq(o2)));\n        return i == 0 ? o1.compareTo(o2) : i ;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#sortSeqs(List[String]).mjava","sourceNew":"  /**\n   * Sort n string sequence list.\n   */\n  public static void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, (o1, o2) -> {\n      int i = getSeq(o1) - getSeq(o2);\n      return i == 0 ? o1.compareTo(o2) : i;\n    });\n  }\n\n","sourceOld":"  /**\n   * Sort n string sequence list.\n   */\n  public static void sortSeqs(List<String> seqs) {\n    Collections.sort(seqs, new Comparator<String>() {\n      \n      @Override\n      public int compare(String o1, String o2) {\n        int i = getSeq(o1) - getSeq(o2);\n        return i == 0 ? o1.compareTo(o2) : i ;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"7d996c36bf85996da326201b915c87d41449d7f5":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["44de42d869f7d8e5235d43c4ad9a99f520363a2f","7d996c36bf85996da326201b915c87d41449d7f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a1ea01e15f477524516b07b300a3ae03d1bec9bc":["7d996c36bf85996da326201b915c87d41449d7f5"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a0c04b71951333291abc7f317109a6a5957bd28":["a1ea01e15f477524516b07b300a3ae03d1bec9bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a0c04b71951333291abc7f317109a6a5957bd28"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"],"7d996c36bf85996da326201b915c87d41449d7f5":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","a1ea01e15f477524516b07b300a3ae03d1bec9bc"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a1ea01e15f477524516b07b300a3ae03d1bec9bc":["3a0c04b71951333291abc7f317109a6a5957bd28"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["7d996c36bf85996da326201b915c87d41449d7f5","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"3a0c04b71951333291abc7f317109a6a5957bd28":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","e57c73924f3b8c19defa62e96bfa34a4922d49c2","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}