{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List[Scorer],int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List[Scorer],int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List[Scorer],int).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer( List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(null);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    initScorerDocQueue();\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer( List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(null);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    initScorerDocQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List[Scorer],int).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    initScorerDocQueue();\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer( List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(null);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    initScorerDocQueue();\n  }\n\n","bugFix":null,"bugIntro":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List[Scorer],int).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    initScorerDocQueue();\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer( List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(null);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    initScorerDocQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(List[Scorer],int).mjava","sourceNew":null,"sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer( List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(null);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    initScorerDocQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5e679b9c5f68f1f331de920ae8366af75b44060":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["9454a6510e2db155fb01faa5c049b06ece95fab9","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","e5e679b9c5f68f1f331de920ae8366af75b44060","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}