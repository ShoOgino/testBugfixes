{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test BooleanQuery.maxClauseCount\n    int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(2);\n      // This query would normally return 3 documents, because 3 terms match:\n      query = new FuzzyQuery(new Term(\"field\", \"aaaab\"), FuzzyQuery.defaultMinSimilarity, 3);   \n      hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"only 2 documents should match\", 2, hits.length);\n      Set<String> possibleTerms = new HashSet<String>(Arrays.asList(\"aaaaa\",\"aaaab\"));\n      for (int i = 0; i < hits.length; i++) {\n        final String term = searcher.doc(hits[i].doc).get(\"field\");\n        assertTrue(\"term '\" + term + \"' should not appear in results\", possibleTerms.contains(term));\n      }\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test BooleanQuery.maxClauseCount\n    int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(2);\n      // This query would normally return 3 documents, because 3 terms match:\n      query = new FuzzyQuery(new Term(\"field\", \"aaaab\"), FuzzyQuery.defaultMinSimilarity, 3);   \n      hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"only 2 documents should match\", 2, hits.length);\n      Set<String> possibleTerms = new HashSet<String>(Arrays.asList(\"aaaaa\",\"aaaab\"));\n      for (int i = 0; i < hits.length; i++) {\n        final String term = searcher.doc(hits[i].doc).get(\"field\");\n        assertTrue(\"term '\" + term + \"' should not appear in results\", possibleTerms.contains(term));\n      }\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":null,"sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test BooleanQuery.maxClauseCount\n    int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(2);\n      // This query would normally return 3 documents, because 3 terms match:\n      query = new FuzzyQuery(new Term(\"field\", \"aaaab\"), FuzzyQuery.defaultMinSimilarity, 3);   \n      hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(\"only 2 documents should match\", 2, hits.length);\n      Set<String> possibleTerms = new HashSet<String>(Arrays.asList(\"aaaaa\",\"aaaab\"));\n      for (int i = 0; i < hits.length; i++) {\n        final String term = searcher.doc(hits[i].doc).get(\"field\");\n        assertTrue(\"term '\" + term + \"' should not appear in results\", possibleTerms.contains(term));\n      }\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}