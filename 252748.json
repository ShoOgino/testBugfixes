{"path":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"528e99d64a1ce5cb29637aa0868fc44b86fded04","date":1326898557,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // if we got the list of fields from the index, only list stored fields\n      if (returnFields==null && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade","ba8f9f8067c19ebc33a32bf20a73711e36f21695"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0be0ed0e14fd70ceae18ec6c13480478b8a768f9","date":1336109399,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["a094c728ab58b12a130aaeed26d06f3c71aa8a61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a094c728ab58b12a130aaeed26d06f3c71aa8a61","date":1353256142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":["b69cd84ea1afad0c686a964bdc267f3a298b8c0e","0be0ed0e14fd70ceae18ec6c13480478b8a768f9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4","date":1366137262,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<String>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getLuceneFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        fields = new LinkedHashSet<String>();\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        fields = req.getSearcher().getFieldNames();\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<String>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<String>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<String>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<String>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<String>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext ) {\n      writeDocuments(null, (ResultContext)responseObj, returnFields );\n    }\n    else if (responseObj instanceof DocList) {\n      ResultContext ctx = new ResultContext();\n      ctx.docs =  (DocList)responseObj;\n      writeDocuments(null, ctx, returnFields );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getResponse();\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getValues().get(\"response\");\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getResponse();\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Iterable<String> all = req.getSearcher().getFieldNames();\n        if (fields == null) {\n          fields = Sets.newHashSet(all);\n        } else {\n          Iterables.addAll(fields, all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getResponse();\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Collection<String> all = req.getSearcher().getFieldNames();\n        if(fields==null) {\n          fields = all;\n        }\n        else {\n          fields.addAll(all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df476dd588f9e2c99c43fd9d3d896fd30221938f","date":1457020485,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy\n        (',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true, \"\\n\");\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, \n        CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false, \"\\n\");\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getResponse();\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Iterable<String> all = req.getSearcher().getFieldNames();\n        if (fields == null) {\n          fields = Sets.newHashSet(all);\n        } else {\n          Iterables.addAll(fields, all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getResponse();\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Iterable<String> all = req.getSearcher().getFieldNames();\n        if (fields == null) {\n          fields = Sets.newHashSet(all);\n        } else {\n          Iterables.addAll(fields, all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":["b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy\n        (',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true, \"\\n\");\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, \n        CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false, \"\\n\");\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getResponse();\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Iterable<String> all = req.getSearcher().getFieldNames();\n        if (fields == null) {\n          fields = Sets.newHashSet(all);\n        } else {\n          Iterables.addAll(fields, all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false);\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getResponse();\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Iterable<String> all = req.getSearcher().getFieldNames();\n        if (fields == null) {\n          fields = Sets.newHashSet(all);\n        } else {\n          Iterables.addAll(fields, all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba8f9f8067c19ebc33a32bf20a73711e36f21695","date":1543134399,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy\n        (',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true, \"\\n\");\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, \n        CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false, \"\\n\");\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getResponse();\n    boolean returnStoredOrDocValStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Iterable<String> all = req.getSearcher().getFieldNames();\n        if (fields == null) {\n          fields = Sets.newHashSet(all);\n        } else {\n          Iterables.addAll(fields, all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnStoredOrDocValStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return stored fields or useDocValuesAsStored=true fields,\n      // unless an explicit field list is specified\n      if (returnStoredOrDocValStored && !sf.stored() && !(sf.hasDocValues() && sf.useDocValuesAsStored())) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy\n        (',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true, \"\\n\");\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, \n        CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false, \"\\n\");\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getResponse();\n    boolean returnOnlyStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Iterable<String> all = req.getSearcher().getFieldNames();\n        if (fields == null) {\n          fields = Sets.newHashSet(all);\n        } else {\n          Iterables.addAll(fields, all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnOnlyStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return only stored fields, unless an explicit field list is specified\n      if (returnOnlyStored && sf != null && !sf.stored()) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":["528e99d64a1ce5cb29637aa0868fc44b86fded04"],"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"080177034f0f8c5fc458255dbe1e84334b531ade","date":1553677716,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy\n        (',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true, \"\\n\");\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, \n        CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false, \"\\n\");\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = getFields();\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      if (shouldSkipField(field)) {\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    writeResponse(rsp.getResponse());\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    SolrParams params = req.getParams();\n\n    strategy = new CSVStrategy\n        (',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true, \"\\n\");\n    CSVStrategy strat = strategy;\n\n    String sep = params.get(CSV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    String nl = params.get(CSV_NEWLINE);\n    if (nl!=null) {\n      if (nl.length()==0) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid newline:'\"+nl+\"'\");\n      strat.setPrinterNewline(nl);\n    }\n\n    String encapsulator = params.get(CSV_ENCAPSULATOR);\n    String escape = params.get(CSV_ESCAPE);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      if (encapsulator == null) {\n        strat.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);\n      }\n    }\n\n    if (strat.getEscape() == '\\\\') {\n      // If the escape is the standard backslash, then also enable\n      // unicode escapes (it's harmless since 'u' would not otherwise\n      // be escaped.\n      strat.setUnicodeEscapeInterpretation(true);\n    }\n    printer = new CSVPrinter(writer, strategy);\n    \n\n    CSVStrategy mvStrategy = new CSVStrategy(strategy.getDelimiter(), CSVStrategy.ENCAPSULATOR_DISABLED, \n        CSVStrategy.COMMENTS_DISABLED, '\\\\', false, false, false, false, \"\\n\");\n    strat = mvStrategy;\n\n    sep = params.get(MV_SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n      strat.setDelimiter(sep.charAt(0));\n    }\n\n    encapsulator = params.get(MV_ENCAPSULATOR);\n    escape = params.get(MV_ESCAPE);\n\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n      strat.setEncapsulator(encapsulator.charAt(0));\n      if (escape == null) {\n        strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n      }\n    }\n\n    escape = params.get(MV_ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n      strat.setEscape(escape.charAt(0));\n      // encapsulator will already be disabled if it wasn't specified\n    }\n\n    Collection<String> fields = returnFields.getRequestedFieldNames();\n    Object responseObj = rsp.getResponse();\n    boolean returnStoredOrDocValStored = false;\n    if (fields==null||returnFields.hasPatternMatching()) {\n      if (responseObj instanceof SolrDocumentList) {\n        // get the list of fields from the SolrDocumentList\n        if(fields==null) {\n          fields = new LinkedHashSet<>();\n        }\n        for (SolrDocument sdoc: (SolrDocumentList)responseObj) {\n          fields.addAll(sdoc.getFieldNames());\n        }\n      } else {\n        // get the list of fields from the index\n        Iterable<String> all = req.getSearcher().getFieldNames();\n        if (fields == null) {\n          fields = Sets.newHashSet(all);\n        } else {\n          Iterables.addAll(fields, all);\n        }\n      }\n      if (returnFields.wantsScore()) {\n        fields.add(\"score\");\n      } else {\n        fields.remove(\"score\");\n      }\n      returnStoredOrDocValStored = true;\n    }\n\n    CSVSharedBufPrinter csvPrinterMV = new CSVSharedBufPrinter(mvWriter, mvStrategy);\n\n    for (String field : fields) {\n       if (!returnFields.wantsField(field)) {\n         continue;\n       }\n      if (field.equals(\"score\")) {\n        CSVField csvField = new CSVField();\n        csvField.name = \"score\";\n        csvFields.put(\"score\", csvField);\n        continue;\n      }\n\n      SchemaField sf = schema.getFieldOrNull(field);\n      if (sf == null) {\n        FieldType ft = new StrField();\n        sf = new SchemaField(field, ft);\n      }\n      \n      // Return stored fields or useDocValuesAsStored=true fields,\n      // unless an explicit field list is specified\n      if (returnStoredOrDocValStored && !sf.stored() && !(sf.hasDocValues() && sf.useDocValuesAsStored())) {\n        continue;\n      }\n\n      // check for per-field overrides\n      sep = params.get(\"f.\" + field + '.' + CSV_SEPARATOR);\n      encapsulator = params.get(\"f.\" + field + '.' + CSV_ENCAPSULATOR);\n      escape = params.get(\"f.\" + field + '.' + CSV_ESCAPE);\n     \n      // if polyfield and no escape is provided, add \"\\\\\" escape by default\n      if (sf.isPolyField()) {\n        escape = (escape==null)?\"\\\\\":escape;\n      }\n\n      CSVSharedBufPrinter csvPrinter = csvPrinterMV;\n      if (sep != null || encapsulator != null || escape != null) {\n        // create a new strategy + printer if there were any per-field overrides\n        strat = (CSVStrategy)mvStrategy.clone();\n        if (sep!=null) {\n          if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv separator:'\"+sep+\"'\");\n          strat.setDelimiter(sep.charAt(0));\n        }\n        if (encapsulator!=null) {\n          if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv encapsulator:'\"+encapsulator+\"'\");\n          strat.setEncapsulator(encapsulator.charAt(0));\n          if (escape == null) {\n            strat.setEscape(CSVStrategy.ESCAPE_DISABLED);\n          }\n        }\n        if (escape!=null) {\n          if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid mv escape:'\"+escape+\"'\");\n          strat.setEscape(escape.charAt(0));\n          if (encapsulator == null) {\n            strat.setEncapsulator(CSVStrategy.ENCAPSULATOR_DISABLED);\n          }\n        }        \n        csvPrinter = new CSVSharedBufPrinter(mvWriter, strat);\n      }\n\n      CSVField csvField = new CSVField();\n      csvField.name = field;\n      csvField.sf = sf;\n      csvField.mvPrinter = csvPrinter;\n      csvFields.put(field, csvField);\n    }\n\n    NullValue = params.get(CSV_NULL, \"\");\n\n    if (params.getBool(CSV_HEADER, true)) {\n      for (CSVField csvField : csvFields.values()) {\n        printer.print(csvField.name);\n      }\n      printer.println();\n    }\n\n    if (responseObj instanceof ResultContext) {\n      writeDocuments(null, (ResultContext)responseObj );\n    }\n    else if (responseObj instanceof DocList) {\n\n      ResultContext ctx = new BasicResultContext((DocList)responseObj, returnFields, null, null, req);\n      writeDocuments(null, ctx );\n    } else if (responseObj instanceof SolrDocumentList) {\n      writeSolrDocumentList(null, (SolrDocumentList)responseObj, returnFields );\n    }\n\n  }\n\n","bugFix":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","634f330c54fd3f9f491d52036dc3f40b4f4d8934","b69cd84ea1afad0c686a964bdc267f3a298b8c0e","6aedf81f068e430dec27d94310415cc6ff52731c","528e99d64a1ce5cb29637aa0868fc44b86fded04","ba8f9f8067c19ebc33a32bf20a73711e36f21695","7cc4a7e1c7c8349744a449a0def295f2fd99d6a4","ecd75942508378ccc92c3a26f71db6cba9f25784","ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["7cc4a7e1c7c8349744a449a0def295f2fd99d6a4","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"df476dd588f9e2c99c43fd9d3d896fd30221938f":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"407687e67faf6e1f02a211ca078d8e3eed631027":["0be0ed0e14fd70ceae18ec6c13480478b8a768f9","a094c728ab58b12a130aaeed26d06f3c71aa8a61"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7cc4a7e1c7c8349744a449a0def295f2fd99d6a4"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ba8f9f8067c19ebc33a32bf20a73711e36f21695":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"528e99d64a1ce5cb29637aa0868fc44b86fded04":["c26f00b574427b55127e869b935845554afde1fa"],"080177034f0f8c5fc458255dbe1e84334b531ade":["ba8f9f8067c19ebc33a32bf20a73711e36f21695"],"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4":["a094c728ab58b12a130aaeed26d06f3c71aa8a61"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a094c728ab58b12a130aaeed26d06f3c71aa8a61":["0be0ed0e14fd70ceae18ec6c13480478b8a768f9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["ac9de183adbc9483681f275ac1e2d92ed19f52e1","df476dd588f9e2c99c43fd9d3d896fd30221938f"],"0be0ed0e14fd70ceae18ec6c13480478b8a768f9":["528e99d64a1ce5cb29637aa0868fc44b86fded04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["080177034f0f8c5fc458255dbe1e84334b531ade"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["528e99d64a1ce5cb29637aa0868fc44b86fded04"],"df476dd588f9e2c99c43fd9d3d896fd30221938f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["df476dd588f9e2c99c43fd9d3d896fd30221938f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"ba8f9f8067c19ebc33a32bf20a73711e36f21695":["080177034f0f8c5fc458255dbe1e84334b531ade"],"528e99d64a1ce5cb29637aa0868fc44b86fded04":["0be0ed0e14fd70ceae18ec6c13480478b8a768f9"],"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"080177034f0f8c5fc458255dbe1e84334b531ade":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a094c728ab58b12a130aaeed26d06f3c71aa8a61":["407687e67faf6e1f02a211ca078d8e3eed631027","7cc4a7e1c7c8349744a449a0def295f2fd99d6a4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ecd75942508378ccc92c3a26f71db6cba9f25784":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["ba8f9f8067c19ebc33a32bf20a73711e36f21695"],"0be0ed0e14fd70ceae18ec6c13480478b8a768f9":["407687e67faf6e1f02a211ca078d8e3eed631027","a094c728ab58b12a130aaeed26d06f3c71aa8a61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}