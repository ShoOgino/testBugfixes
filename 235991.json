{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","commits":[{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ClientDataProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","sourceNew":"    public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n        throws IOException, SolrServerException {\n      String url = zkClientClusterStateProvider.getZkStateReader().getBaseUrlForNodeName(solrNode);\n\n      GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n      try (HttpSolrClient client = new HttpSolrClient.Builder()\n          .withHttpClient(solrClient.getHttpClient())\n          .withBaseSolrUrl(url)\n          .withResponseParser(new BinaryResponseParser())\n          .build()) {\n        NamedList<Object> rsp = client.request(request);\n        request.response.nl = rsp;\n        return request.response;\n      }\n    }\n\n","sourceOld":"    public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n        throws IOException, SolrServerException {\n      String url = zkClientClusterStateProvider.getZkStateReader().getBaseUrlForNodeName(solrNode);\n\n      GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n      try (HttpSolrClient client = new HttpSolrClient.Builder()\n          .withHttpClient(solrClient.getHttpClient())\n          .withBaseSolrUrl(url)\n          .withResponseParser(new BinaryResponseParser())\n          .build()) {\n        NamedList<Object> rsp = client.request(request);\n        request.response.nl = rsp;\n        return request.response;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"    public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n        throws IOException, SolrServerException {\n      String url = zkClientClusterStateProvider.getZkStateReader().getBaseUrlForNodeName(solrNode);\n\n      GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n      try (HttpSolrClient client = new HttpSolrClient.Builder()\n          .withHttpClient(solrClient.getHttpClient())\n          .withBaseSolrUrl(url)\n          .withResponseParser(new BinaryResponseParser())\n          .build()) {\n        NamedList<Object> rsp = client.request(request);\n        request.response.nl = rsp;\n        return request.response;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ceb6c985c67eee88c5a7718658e45d25a7d7e200"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"    public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n        throws IOException, SolrServerException {\n      String url = zkClientClusterStateProvider.getZkStateReader().getBaseUrlForNodeName(solrNode);\n\n      GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n      try (HttpSolrClient client = new HttpSolrClient.Builder()\n          .withHttpClient(solrClient.getHttpClient())\n          .withBaseSolrUrl(url)\n          .withResponseParser(new BinaryResponseParser())\n          .build()) {\n        NamedList<Object> rsp = client.request(request);\n        request.response.nl = rsp;\n        return request.response;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"    public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n        throws IOException, SolrServerException {\n      String url = zkClientClusterStateProvider.getZkStateReader().getBaseUrlForNodeName(solrNode);\n\n      GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n      try (HttpSolrClient client = new HttpSolrClient.Builder()\n          .withHttpClient(solrClient.getHttpClient())\n          .withBaseSolrUrl(url)\n          .withResponseParser(new BinaryResponseParser())\n          .build()) {\n        NamedList<Object> rsp = client.request(request);\n        request.response.nl = rsp;\n        return request.response;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","sourceNew":"    public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n        throws IOException, SolrServerException {\n      String url = zkClientClusterStateProvider.getZkStateReader().getBaseUrlForNodeName(solrNode);\n\n      GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n      try (HttpSolrClient client = new HttpSolrClient.Builder()\n          .withHttpClient(solrClient.getHttpClient())\n          .withBaseSolrUrl(url)\n          .withResponseParser(new BinaryResponseParser())\n          .build()) {\n        NamedList<Object> rsp = client.request(request);\n        request.response.nl = rsp;\n        return request.response;\n      }\n    }\n\n","sourceOld":"    public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n        throws IOException, SolrServerException {\n      String url = zkClientClusterStateProvider.getZkStateReader().getBaseUrlForNodeName(solrNode);\n\n      GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n      try (HttpSolrClient client = new HttpSolrClient.Builder()\n          .withHttpClient(solrClient.getHttpClient())\n          .withBaseSolrUrl(url)\n          .withResponseParser(new BinaryResponseParser())\n          .build()) {\n        NamedList<Object> rsp = client.request(request);\n        request.response.nl = rsp;\n        return request.response;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["28288370235ed02234a64753cdbf0c6ec096304a"],"86fff6c123a5a1d38adb665dd045347219798da9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","86fff6c123a5a1d38adb665dd045347219798da9","28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86fff6c123a5a1d38adb665dd045347219798da9":[],"28288370235ed02234a64753cdbf0c6ec096304a":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["86fff6c123a5a1d38adb665dd045347219798da9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}