{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadFloatField(FieldInfo,IndexInput).mjava","commits":[{"id":"1982459c2ac4916bf3c0644b801f0cb3e4ee159f","date":1359034079,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadFloatField(FieldInfo,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private NumericDocValues loadFloatField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME, \n                                 Lucene40DocValuesFormat.FLOATS_VERSION_START, \n                                 Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);\n    input.readInt();\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dac1db31006989ae24922811f00f909d30f1391d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4772ea9604873dc0b22ea724398008998afc8e41","date":1359133954,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadFloatField(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadFloatField(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericDocValues loadFloatField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME, \n                                 Lucene40DocValuesFormat.FLOATS_VERSION_START, \n                                 Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues loadFloatField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME, \n                                 Lucene40DocValuesFormat.FLOATS_VERSION_START, \n                                 Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);\n    input.readInt();\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadFloatField(FieldInfo,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private NumericDocValues loadFloatField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME, \n                                 Lucene40DocValuesFormat.FLOATS_VERSION_START, \n                                 Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dac1db31006989ae24922811f00f909d30f1391d","date":1387560411,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadFloatField(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadFloatField(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericDocValues loadFloatField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.FLOATS_VERSION_START,\n                                 Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues loadFloatField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME, \n                                 Lucene40DocValuesFormat.FLOATS_VERSION_START, \n                                 Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","bugFix":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadFloatField(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadFloatField(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericDocValues loadFloatField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.FLOATS_VERSION_START,\n                                 Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues loadFloatField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.FLOATS_VERSION_START,\n                                 Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadFloatField(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadFloatField(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericDocValues loadFloatField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.FLOATS_VERSION_START,\n                                 Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues loadFloatField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.FLOATS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.FLOATS_VERSION_START,\n                                 Lucene40DocValuesFormat.FLOATS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4772ea9604873dc0b22ea724398008998afc8e41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["dac1db31006989ae24922811f00f909d30f1391d"],"dac1db31006989ae24922811f00f909d30f1391d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4772ea9604873dc0b22ea724398008998afc8e41":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["dac1db31006989ae24922811f00f909d30f1391d","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["dac1db31006989ae24922811f00f909d30f1391d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"dac1db31006989ae24922811f00f909d30f1391d":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["4772ea9604873dc0b22ea724398008998afc8e41"],"4772ea9604873dc0b22ea724398008998afc8e41":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}