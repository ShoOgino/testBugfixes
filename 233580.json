{"path":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testQPA().mjava","commits":[{"id":"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c","date":1110211682,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testQPA().mjava","pathOld":"/dev/null","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    // note the parens in this next assertion differ from the original\n    // QueryParser behavior\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"(+term -\\\"phrase1 phrase2\\\") term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd99bbca4169b09ee71fda976ded4b764e88f1c8","date":1110231999,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testQPA().mjava","pathOld":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    // note the parens in this next assertion differ from the original\n    // QueryParser behavior\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"(+term -\\\"phrase1 phrase2\\\") term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop OR stop AND stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    // note the parens in this next assertion differ from the original\n    // QueryParser behavior\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"(+term -\\\"phrase1 phrase2\\\") term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a","date":1114594353,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testQPA().mjava","pathOld":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    // note the parens in this next assertion differ from the original\n    // QueryParser behavior\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"(+term -\\\"phrase1 phrase2\\\") term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop OR stop AND stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    // note the parens in this next assertion differ from the original\n    // QueryParser behavior\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"(+term -\\\"phrase1 phrase2\\\") term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop OR stop AND stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["dd99bbca4169b09ee71fda976ded4b764e88f1c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd99bbca4169b09ee71fda976ded4b764e88f1c8":["de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c"],"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"]},"commit2Childs":{"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c"],"dd99bbca4169b09ee71fda976ded4b764e88f1c8":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c":["dd99bbca4169b09ee71fda976ded4b764e88f1c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}