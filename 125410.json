{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new KeywordMarkerFilter(result, excltable);\n    if (!stemdict.isEmpty())\n      result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n    result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (!stemdict.isEmpty())\n        result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stoptable);\n      if (!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new DutchStemFilter(result, stemdict);\n      return new TokenStreamComponents(source, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a32c7218952a3082e8be4be1a325fd217603f365","date":1363034315,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link SetKeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new SetKeywordMarkerFilter(result, excltable);\n    if (!stemdict.isEmpty())\n      result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n    result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link KeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new KeywordMarkerFilter(result, excltable);\n    if (!stemdict.isEmpty())\n      result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n    result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08dc2bbe7fd8de37a9c71ea07ee8077e6f732373","date":1363790283,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link SetKeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new SetKeywordMarkerFilter(result, excltable);\n    if (!stemdict.isEmpty())\n      result = new StemmerOverrideFilter(result, stemdict);\n    result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link SetKeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new SetKeywordMarkerFilter(result, excltable);\n    if (!stemdict.isEmpty())\n      result = new StemmerOverrideFilter(matchVersion, result, stemdict);\n    result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7476b30b7c03f9027676c9df28fda37629da2c97","date":1364206093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link SetKeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new SetKeywordMarkerFilter(result, excltable);\n    if (stemdict != null)\n      result = new StemmerOverrideFilter(result, stemdict);\n    result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link SetKeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new SetKeywordMarkerFilter(result, excltable);\n    if (!stemdict.isEmpty())\n      result = new StemmerOverrideFilter(result, stemdict);\n    result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link SetKeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new StandardTokenizer(matchVersion);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new SetKeywordMarkerFilter(result, excltable);\n    if (stemdict != null)\n      result = new StemmerOverrideFilter(result, stemdict);\n    result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link LowerCaseFilter}, \n   *   {@link StopFilter}, {@link SetKeywordMarkerFilter} if a stem exclusion set is provided,\n   *   {@link StemmerOverrideFilter}, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new SetKeywordMarkerFilter(result, excltable);\n    if (stemdict != null)\n      result = new StemmerOverrideFilter(result, stemdict);\n    result = new SnowballFilter(result, new org.tartarus.snowball.ext.DutchStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7476b30b7c03f9027676c9df28fda37629da2c97":["08dc2bbe7fd8de37a9c71ea07ee8077e6f732373"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["7476b30b7c03f9027676c9df28fda37629da2c97"],"a32c7218952a3082e8be4be1a325fd217603f365":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"08dc2bbe7fd8de37a9c71ea07ee8077e6f732373":["a32c7218952a3082e8be4be1a325fd217603f365"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"7476b30b7c03f9027676c9df28fda37629da2c97":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["a32c7218952a3082e8be4be1a325fd217603f365"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a32c7218952a3082e8be4be1a325fd217603f365":["08dc2bbe7fd8de37a9c71ea07ee8077e6f732373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"08dc2bbe7fd8de37a9c71ea07ee8077e6f732373":["7476b30b7c03f9027676c9df28fda37629da2c97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}