{"path":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","commits":[{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    \n    // Add the documents\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain_,score\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertEquals( \"should be one bigger [\"+id1+\",\"+id2+\"]\", id1, id2-1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8044931943cfb14d69feeb0b36e04a37b25617b3","date":1301077049,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain_,score\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    \n    // Add the documents\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain_,score\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertEquals( \"should be one bigger [\"+id1+\",\"+id2+\"]\", id1, id2-1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1c76c72faecc7c9b683ad67e99240c975ee37b3","date":1301109514,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa=_value:aaa_,ten=_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain_,score\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa=_value:aaa_,ten=_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa=_value:aaa_,ten=_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"089f282a18e3d45011af07ffa6756dfc5dde76cd","date":1301959439,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test @Ignore   // TODO: re-enable when new transformer syntax is implemented\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa:_value:aaa_,ten:_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa=_value:aaa_,ten=_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test @Ignore   // TODO: re-enable when new transformer syntax is implemented\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa:_value:aaa_,ten:_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa=_value:aaa_,ten=_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test @Ignore   // TODO: re-enable when new transformer syntax is implemented\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa:_value:aaa_,ten:_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa=_value:aaa_,ten=_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test @Ignore   // TODO: re-enable when new transformer syntax is implemented\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa:_value:aaa_,ten:_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa=_value:aaa_,ten=_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"785c5e6bc8889b740445ed7f2b278a442ad92f7f","date":1307558822,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test @Ignore   // TODO: re-enable when new transformer syntax is implemented\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa:_value:aaa_,ten:_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test @Ignore   // TODO: re-enable when new transformer syntax is implemented\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa:_value:aaa_,ten:_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test @Ignore   // TODO: re-enable when new transformer syntax is implemented\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,_docid_,_explain:nl_,score,aaa:_value:aaa_,ten:_value:int:10_\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"_docid_\" );\n    int id2 = (Integer)out2.getFieldValue( \"_docid_\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"_explain:nl_\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"c26f00b574427b55127e869b935845554afde1fa":["785c5e6bc8889b740445ed7f2b278a442ad92f7f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["8044931943cfb14d69feeb0b36e04a37b25617b3"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","089f282a18e3d45011af07ffa6756dfc5dde76cd"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","089f282a18e3d45011af07ffa6756dfc5dde76cd"],"785c5e6bc8889b740445ed7f2b278a442ad92f7f":["089f282a18e3d45011af07ffa6756dfc5dde76cd"],"089f282a18e3d45011af07ffa6756dfc5dde76cd":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c1c76c72faecc7c9b683ad67e99240c975ee37b3","089f282a18e3d45011af07ffa6756dfc5dde76cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"8044931943cfb14d69feeb0b36e04a37b25617b3":["6aedf81f068e430dec27d94310415cc6ff52731c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"6aedf81f068e430dec27d94310415cc6ff52731c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["089f282a18e3d45011af07ffa6756dfc5dde76cd","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"962d04139994fce5193143ef35615499a9a96d78":[],"785c5e6bc8889b740445ed7f2b278a442ad92f7f":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"089f282a18e3d45011af07ffa6756dfc5dde76cd":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","785c5e6bc8889b740445ed7f2b278a442ad92f7f","a3776dccca01c11e7046323cfad46a3b4a471233"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","6aedf81f068e430dec27d94310415cc6ff52731c"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"8044931943cfb14d69feeb0b36e04a37b25617b3":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6aedf81f068e430dec27d94310415cc6ff52731c":["8044931943cfb14d69feeb0b36e04a37b25617b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}