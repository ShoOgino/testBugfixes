{"path":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#testComplexNested().mjava","commits":[{"id":"94a3c9097762cec00567aff9ceae83842107c895","date":1249571658,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#testComplexNested().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testComplexNested() throws IOException {\n\t\tBoostingNearQuery query;\n\t\tTopDocs hits;\n\n\t\t// combine ordered and unordered spans with some nesting to make sure all payloads are counted\n\n\t\tSpanQuery q1 = newPhraseQuery(\"field\", \"nine hundred\", true);\n\t\tSpanQuery q2 = newPhraseQuery(\"field\", \"ninety nine\", true);\n\t\tSpanQuery q3 = newPhraseQuery(\"field\", \"nine ninety\", false);\n\t\tSpanQuery q4 = newPhraseQuery(\"field\", \"hundred nine\", false);\n\t\tSpanQuery[]clauses = new SpanQuery[] {new BoostingNearQuery(new SpanQuery[] {q1,q2}, 0, true), new BoostingNearQuery(new SpanQuery[] {q3,q4}, 0, false)};\n\t\tquery = new BoostingNearQuery(clauses, 0, false);\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t// should be only 1 hit - doc 999\n\t\tassertTrue(\"should only be one hit\", hits.scoreDocs.length == 1);\n\t\t// the score should be 3 - the average of all the underlying payloads\n\t\tScoreDoc doc = hits.scoreDocs[0];\n//\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);  \n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e9a421afb32184cc61e8326108325225d58dfde0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testComplexNested().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#testComplexNested().mjava","sourceNew":"\tpublic void testComplexNested() throws IOException {\n\t\tPayloadNearQuery query;\n\t\tTopDocs hits;\n\n\t\t// combine ordered and unordered spans with some nesting to make sure all payloads are counted\n\n\t\tSpanQuery q1 = newPhraseQuery(\"field\", \"nine hundred\", true);\n\t\tSpanQuery q2 = newPhraseQuery(\"field\", \"ninety nine\", true);\n\t\tSpanQuery q3 = newPhraseQuery(\"field\", \"nine ninety\", false);\n\t\tSpanQuery q4 = newPhraseQuery(\"field\", \"hundred nine\", false);\n\t\tSpanQuery[]clauses = new SpanQuery[] {new PayloadNearQuery(new SpanQuery[] {q1,q2}, 0, true), new PayloadNearQuery(new SpanQuery[] {q3,q4}, 0, false)};\n\t\tquery = new PayloadNearQuery(clauses, 0, false);\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t// should be only 1 hit - doc 999\n\t\tassertTrue(\"should only be one hit\", hits.scoreDocs.length == 1);\n\t\t// the score should be 3 - the average of all the underlying payloads\n\t\tScoreDoc doc = hits.scoreDocs[0];\n//\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);  \n\t}\n\n","sourceOld":"\tpublic void testComplexNested() throws IOException {\n\t\tBoostingNearQuery query;\n\t\tTopDocs hits;\n\n\t\t// combine ordered and unordered spans with some nesting to make sure all payloads are counted\n\n\t\tSpanQuery q1 = newPhraseQuery(\"field\", \"nine hundred\", true);\n\t\tSpanQuery q2 = newPhraseQuery(\"field\", \"ninety nine\", true);\n\t\tSpanQuery q3 = newPhraseQuery(\"field\", \"nine ninety\", false);\n\t\tSpanQuery q4 = newPhraseQuery(\"field\", \"hundred nine\", false);\n\t\tSpanQuery[]clauses = new SpanQuery[] {new BoostingNearQuery(new SpanQuery[] {q1,q2}, 0, true), new BoostingNearQuery(new SpanQuery[] {q3,q4}, 0, false)};\n\t\tquery = new BoostingNearQuery(clauses, 0, false);\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t// should be only 1 hit - doc 999\n\t\tassertTrue(\"should only be one hit\", hits.scoreDocs.length == 1);\n\t\t// the score should be 3 - the average of all the underlying payloads\n\t\tScoreDoc doc = hits.scoreDocs[0];\n//\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);  \n\t}\n\n","bugFix":null,"bugIntro":["e9a421afb32184cc61e8326108325225d58dfde0"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"94a3c9097762cec00567aff9ceae83842107c895":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["94a3c9097762cec00567aff9ceae83842107c895"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"]},"commit2Childs":{"94a3c9097762cec00567aff9ceae83842107c895":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94a3c9097762cec00567aff9ceae83842107c895"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}