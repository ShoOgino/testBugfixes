{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}