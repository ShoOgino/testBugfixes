{"path":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseMapErrorChecking() {\n    SimpleOrderedMap<String> bogus = new SimpleOrderedMap<String>();\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n\n    bogus.add(\"id\", \"some id\");\n    bogus.add(\"message\", \"some message\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should still not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n    \n    bogus.add(\"type\", \"not a real type\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"invalid type should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Invalid type\")); \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testParseMapErrorChecking() {\n    SimpleOrderedMap<String> bogus = new SimpleOrderedMap<String>();\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n\n    bogus.add(\"id\", \"some id\");\n    bogus.add(\"message\", \"some message\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should still not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n    \n    bogus.add(\"type\", \"not a real type\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"invalid type should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Invalid type\")); \n    }\n  }\n\n","sourceOld":"  public void testParseMapErrorChecking() {\n    SimpleOrderedMap<String> bogus = new SimpleOrderedMap<String>();\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n\n    bogus.add(\"id\", \"some id\");\n    bogus.add(\"message\", \"some message\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should still not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n    \n    bogus.add(\"type\", \"not a real type\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"invalid type should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Invalid type\")); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testParseMapErrorChecking() {\n    SimpleOrderedMap<String> bogus = new SimpleOrderedMap<String>();\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n\n    bogus.add(\"id\", \"some id\");\n    bogus.add(\"message\", \"some message\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should still not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n    \n    bogus.add(\"type\", \"not a real type\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"invalid type should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Invalid type\")); \n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testParseMapErrorChecking() {\n    SimpleOrderedMap<String> bogus = new SimpleOrderedMap<String>();\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n\n    bogus.add(\"id\", \"some id\");\n    bogus.add(\"message\", \"some message\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should still not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n    \n    bogus.add(\"type\", \"not a real type\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"invalid type should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Invalid type\")); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testParseMapErrorChecking() {\n    SimpleOrderedMap<String> bogus = new SimpleOrderedMap<>();\n    SolrException e = expectThrows(SolrException.class, () -> ToleratedUpdateError.parseMap(bogus));\n    assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\"));\n\n    bogus.add(\"id\", \"some id\");\n    bogus.add(\"message\", \"some message\");\n    e = expectThrows(SolrException.class, () -> ToleratedUpdateError.parseMap(bogus));\n    assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\"));\n    \n    bogus.add(\"type\", \"not a real type\");\n    e = expectThrows(SolrException.class, () -> ToleratedUpdateError.parseMap(bogus));\n    assertTrue(e.toString(), e.getMessage().contains(\"Invalid type\"));\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testParseMapErrorChecking() {\n    SimpleOrderedMap<String> bogus = new SimpleOrderedMap<String>();\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n\n    bogus.add(\"id\", \"some id\");\n    bogus.add(\"message\", \"some message\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should still not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n    \n    bogus.add(\"type\", \"not a real type\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"invalid type should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Invalid type\")); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testParseMapErrorChecking() {\n    SimpleOrderedMap<String> bogus = new SimpleOrderedMap<>();\n    SolrException e = expectThrows(SolrException.class, () -> ToleratedUpdateError.parseMap(bogus));\n    assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\"));\n\n    bogus.add(\"id\", \"some id\");\n    bogus.add(\"message\", \"some message\");\n    e = expectThrows(SolrException.class, () -> ToleratedUpdateError.parseMap(bogus));\n    assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\"));\n    \n    bogus.add(\"type\", \"not a real type\");\n    e = expectThrows(SolrException.class, () -> ToleratedUpdateError.parseMap(bogus));\n    assertTrue(e.toString(), e.getMessage().contains(\"Invalid type\"));\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testParseMapErrorChecking() {\n    SimpleOrderedMap<String> bogus = new SimpleOrderedMap<String>();\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n\n    bogus.add(\"id\", \"some id\");\n    bogus.add(\"message\", \"some message\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should still not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n    \n    bogus.add(\"type\", \"not a real type\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"invalid type should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Invalid type\")); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/TestToleratedUpdateError#testParseMapErrorChecking().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testParseMapErrorChecking() {\n    SimpleOrderedMap<String> bogus = new SimpleOrderedMap<>();\n    SolrException e = expectThrows(SolrException.class, () -> ToleratedUpdateError.parseMap(bogus));\n    assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\"));\n\n    bogus.add(\"id\", \"some id\");\n    bogus.add(\"message\", \"some message\");\n    e = expectThrows(SolrException.class, () -> ToleratedUpdateError.parseMap(bogus));\n    assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\"));\n    \n    bogus.add(\"type\", \"not a real type\");\n    e = expectThrows(SolrException.class, () -> ToleratedUpdateError.parseMap(bogus));\n    assertTrue(e.toString(), e.getMessage().contains(\"Invalid type\"));\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testParseMapErrorChecking() {\n    SimpleOrderedMap<String> bogus = new SimpleOrderedMap<String>();\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n\n    bogus.add(\"id\", \"some id\");\n    bogus.add(\"message\", \"some message\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"map should still not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Map does not represent a ToleratedUpdateError\") );\n    }\n    \n    bogus.add(\"type\", \"not a real type\");\n    try {\n      ToleratedUpdateError.parseMap(bogus);\n      fail(\"invalid type should not be parsable\");\n    } catch (SolrException e) {\n      assertTrue(e.toString(), e.getMessage().contains(\"Invalid type\")); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["8d35c84fdef07284c122012ca4000d3b7285a66e","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["8d35c84fdef07284c122012ca4000d3b7285a66e","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["4cba13865da71de3b9b0937fcbc66d726089356d"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}