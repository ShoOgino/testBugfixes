{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.SimpleFieldCollector#SimpleFieldCollector(Sort,FieldValueHitQueue[Entry],int,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.SimpleFieldCollector#SimpleFieldCollector(Sort,FieldValueHitQueue[Entry],int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.SimpleFieldCollector#SimpleFieldCollector(Sort,FieldValueHitQueue[Entry],int,boolean,boolean,boolean).mjava","sourceNew":"    public SimpleFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, int numHits, boolean fillFields,\n        boolean trackDocScores, boolean trackMaxScore, boolean trackTotalHits) {\n      super(queue, numHits, fillFields, sort.needsScores() || trackDocScores || trackMaxScore);\n      this.sort = sort;\n      this.queue = queue;\n      if (trackMaxScore) {\n        maxScore = Float.NEGATIVE_INFINITY; // otherwise we would keep NaN\n      }\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      // If one of the sort fields needs scores, and if we also track scores, then\n      // we might call scorer.score() several times per doc so wrapping the scorer\n      // to cache scores would help\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n      this.trackTotalHits = trackTotalHits;\n    }\n\n","sourceOld":"    public SimpleFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, int numHits, boolean fillFields,\n        boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields, sort.needsScores() || trackDocScores || trackMaxScore);\n      this.queue = queue;\n      if (trackMaxScore) {\n        maxScore = Float.NEGATIVE_INFINITY; // otherwise we would keep NaN\n      }\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      // If one of the sort fields needs scores, and if we also track scores, then\n      // we might call scorer.score() several times per doc so wrapping the scorer\n      // to cache scores would help\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.SimpleFieldCollector#SimpleFieldCollector(Sort,FieldValueHitQueue[Entry],int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.SimpleFieldCollector#SimpleFieldCollector(Sort,FieldValueHitQueue[Entry],int,boolean,boolean,boolean).mjava","sourceNew":"    public SimpleFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, int numHits, boolean fillFields,\n        boolean trackDocScores, boolean trackMaxScore, boolean trackTotalHits) {\n      super(queue, numHits, fillFields, sort.needsScores() || trackDocScores || trackMaxScore);\n      this.sort = sort;\n      this.queue = queue;\n      if (trackMaxScore) {\n        maxScore = Float.NEGATIVE_INFINITY; // otherwise we would keep NaN\n      }\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      // If one of the sort fields needs scores, and if we also track scores, then\n      // we might call scorer.score() several times per doc so wrapping the scorer\n      // to cache scores would help\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n      this.trackTotalHits = trackTotalHits;\n    }\n\n","sourceOld":"    public SimpleFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, int numHits, boolean fillFields,\n        boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields, sort.needsScores() || trackDocScores || trackMaxScore);\n      this.queue = queue;\n      if (trackMaxScore) {\n        maxScore = Float.NEGATIVE_INFINITY; // otherwise we would keep NaN\n      }\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      // If one of the sort fields needs scores, and if we also track scores, then\n      // we might call scorer.score() several times per doc so wrapping the scorer\n      // to cache scores would help\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.SimpleFieldCollector#SimpleFieldCollector(Sort,FieldValueHitQueue[Entry],int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.SimpleFieldCollector#SimpleFieldCollector(Sort,FieldValueHitQueue[Entry],int,boolean,boolean,boolean,boolean).mjava","sourceNew":"    public SimpleFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, int numHits, boolean fillFields,\n        boolean trackDocScores, boolean trackTotalHits) {\n      super(queue, numHits, fillFields, sort.needsScores() || trackDocScores);\n      this.sort = sort;\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      // If one of the sort fields needs scores, and if we also track scores, then\n      // we might call scorer.score() several times per doc so wrapping the scorer\n      // to cache scores would help\n      this.mayNeedScoresTwice = sort.needsScores() && trackDocScores;\n      this.trackTotalHits = trackTotalHits;\n    }\n\n","sourceOld":"    public SimpleFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, int numHits, boolean fillFields,\n        boolean trackDocScores, boolean trackMaxScore, boolean trackTotalHits) {\n      super(queue, numHits, fillFields, sort.needsScores() || trackDocScores || trackMaxScore);\n      this.sort = sort;\n      this.queue = queue;\n      if (trackMaxScore) {\n        maxScore = Float.NEGATIVE_INFINITY; // otherwise we would keep NaN\n      }\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      // If one of the sort fields needs scores, and if we also track scores, then\n      // we might call scorer.score() several times per doc so wrapping the scorer\n      // to cache scores would help\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n      this.trackTotalHits = trackTotalHits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.SimpleFieldCollector#SimpleFieldCollector(Sort,FieldValueHitQueue[Entry],int,boolean,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"    public SimpleFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, int numHits, boolean fillFields,\n        boolean trackDocScores, boolean trackMaxScore, boolean trackTotalHits) {\n      super(queue, numHits, fillFields, sort.needsScores() || trackDocScores || trackMaxScore);\n      this.sort = sort;\n      this.queue = queue;\n      if (trackMaxScore) {\n        maxScore = Float.NEGATIVE_INFINITY; // otherwise we would keep NaN\n      }\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      // If one of the sort fields needs scores, and if we also track scores, then\n      // we might call scorer.score() several times per doc so wrapping the scorer\n      // to cache scores would help\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n      this.trackTotalHits = trackTotalHits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","404d1ab7f6f396235047017c88d545fec15dafb7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1aad05eeff7818b0833c02ac6b743aa72054963b","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"404d1ab7f6f396235047017c88d545fec15dafb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aad05eeff7818b0833c02ac6b743aa72054963b","404d1ab7f6f396235047017c88d545fec15dafb7"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}