{"path":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"    public void onInit(List<? extends IndexCommit> commits) throws IOException {\n      for (final IndexCommit commit : commits) {\n        Map<String,String> userData=commit.getUserData();\n        if (userData.size() > 0) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String x = userData.get(\"index\");\n          String lastVal = x.substring(x.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\t\t\t\t\n            }\n            System.out.println();\n            */\n\t\t\t\t\t\t\n            commit.delete();\t\t\t\t\t\t\t\t\t\n          }\n        }\n      }\n    }\t\t\n\n","sourceOld":"    public void onInit(List<? extends IndexCommit> commits) throws IOException {\n      for (final IndexCommit commit : commits) {\n        Map<String,String> userData=commit.getUserData();\n        if (userData.size() > 0) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String x = userData.get(\"index\");\n          String lastVal = x.substring(x.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\t\t\t\t\n            }\n            System.out.println();\n            */\n\t\t\t\t\t\t\n            commit.delete();\t\t\t\t\t\t\t\t\t\n          }\n        }\n      }\n    }\t\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"    public void onInit(List<? extends IndexCommit> commits) throws IOException {\n      for (final IndexCommit commit : commits) {\n        Map<String,String> userData=commit.getUserData();\n        if (userData.size() > 0) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String x = userData.get(\"index\");\n          String lastVal = x.substring(x.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\n            }\n            System.out.println();\n            */\n\n            commit.delete();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void onInit(List<? extends IndexCommit> commits) throws IOException {\n      for (final IndexCommit commit : commits) {\n        Map<String,String> userData=commit.getUserData();\n        if (userData.size() > 0) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String x = userData.get(\"index\");\n          String lastVal = x.substring(x.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\t\t\t\t\n            }\n            System.out.println();\n            */\n\t\t\t\t\t\t\n            commit.delete();\t\t\t\t\t\t\t\t\t\n          }\n        }\n      }\n    }\t\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"    @Override\n    public void onInit(List<? extends IndexCommit> commits) throws IOException {\n      for (final IndexCommit commit : commits) {\n        Map<String,String> userData=commit.getUserData();\n        if (userData.size() > 0) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String x = userData.get(\"index\");\n          String lastVal = x.substring(x.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\n            }\n            System.out.println();\n            */\n\n            commit.delete();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void onInit(List<? extends IndexCommit> commits) throws IOException {\n      for (final IndexCommit commit : commits) {\n        Map<String,String> userData=commit.getUserData();\n        if (userData.size() > 0) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String x = userData.get(\"index\");\n          String lastVal = x.substring(x.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\n            }\n            System.out.println();\n            */\n\n            commit.delete();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.RollbackDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"    @Override\n    public void onInit(List<? extends IndexCommit> commits) throws IOException {\n      for (final IndexCommit commit : commits) {\n        Map<String,String> userData=commit.getUserData();\n        if (userData.size() > 0) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String x = userData.get(\"index\");\n          String lastVal = x.substring(x.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\n            }\n            System.out.println();\n            */\n\n            commit.delete();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void onInit(List<? extends IndexCommit> commits) throws IOException {\n      for (final IndexCommit commit : commits) {\n        Map<String,String> userData=commit.getUserData();\n        if (userData.size() > 0) {\n          // Label for a commit point is \"Records 1-30\"\n          // This code reads the last id (\"30\" in this example) and deletes it\n          // if it is after the desired rollback point\n          String x = userData.get(\"index\");\n          String lastVal = x.substring(x.lastIndexOf(\"-\")+1);\n          int last = Integer.parseInt(lastVal);\n          if (last>rollbackPoint) {\n            /*\n            System.out.print(\"\\tRolling back commit point:\" +\n                             \" UserData=\"+commit.getUserData() +\")  (\"+(commits.size()-1)+\" commit points left) files=\");\n            Collection files = commit.getFileNames();\n            for (Iterator iterator2 = files.iterator(); iterator2.hasNext();) {\n              System.out.print(\" \"+iterator2.next());\n            }\n            System.out.println();\n            */\n\n            commit.delete();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7530de27b87b961b51f01bd1299b7004d46e8823"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}