{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"/dev/null","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY,\n                ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        LOG.finer(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.finest(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Unable to execute query: \" + query, e);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e8e3766b37206c683d41cf09b4a544b7b28530d0","78002dda5f9d46d20e8cf0a7c070b8205219a93d","78002dda5f9d46d20e8cf0a7c070b8205219a93d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY,\n                ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Unable to execute query: \" + query, e);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY,\n                ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        LOG.finer(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.finest(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Unable to execute query: \" + query, e);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd42c8ecc9f8a8e590c5526544a77258089ca23f","date":1229189880,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Unable to execute query: \" + query, e);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY,\n                ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Unable to execute query: \" + query, e);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8e3766b37206c683d41cf09b4a544b7b28530d0","date":1245905471,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Unable to execute query: \" + query, e);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Unable to execute query: \" + query, e);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f24d87791042430a77c0e6c1e7a59d5840146f5e","date":1252329554,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Unable to execute query: \" + query, e);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#ResultSetIterator(String).mjava","sourceNew":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","sourceOld":"    public ResultSetIterator(String query) {\n\n      try {\n        Connection c = getConnection();\n        stmt = c.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n        stmt.setFetchSize(batchSize);\n        stmt.setMaxRows(maxRows);\n        LOG.debug(\"Executing SQL: \" + query);\n        long start = System.currentTimeMillis();\n        if (stmt.execute(query)) {\n          resultSet = stmt.getResultSet();\n        }\n        LOG.trace(\"Time taken for sql :\"\n                + (System.currentTimeMillis() - start));\n        colNames = readFieldNames(resultSet.getMetaData());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to execute query: \" + query);\n      }\n      if (resultSet == null) {\n        rSetIterator = new ArrayList<Map<String, Object>>().iterator();\n        return;\n      }\n\n      rSetIterator = new Iterator<Map<String, Object>>() {\n        public boolean hasNext() {\n          return hasnext();\n        }\n\n        public Map<String, Object> next() {\n          return getARow();\n        }\n\n        public void remove() {/* do nothing */\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"f24d87791042430a77c0e6c1e7a59d5840146f5e":["e8e3766b37206c683d41cf09b4a544b7b28530d0"],"e8e3766b37206c683d41cf09b4a544b7b28530d0":["dd42c8ecc9f8a8e590c5526544a77258089ca23f"],"ad94625fb8d088209f46650c8097196fec67f00c":["f24d87791042430a77c0e6c1e7a59d5840146f5e"],"dd42c8ecc9f8a8e590c5526544a77258089ca23f":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f24d87791042430a77c0e6c1e7a59d5840146f5e":["ad94625fb8d088209f46650c8097196fec67f00c"],"e8e3766b37206c683d41cf09b4a544b7b28530d0":["f24d87791042430a77c0e6c1e7a59d5840146f5e"],"dd42c8ecc9f8a8e590c5526544a77258089ca23f":["e8e3766b37206c683d41cf09b4a544b7b28530d0"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["dd42c8ecc9f8a8e590c5526544a77258089ca23f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}