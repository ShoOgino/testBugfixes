{"path":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageImplementation#testUpdateEntry().mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageImplementation#testUpdateEntry().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageImplementation#testUpdateEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.updateEntry(ServerBaseEntry)'\n     */\n    public void testUpdateEntry() throws InterruptedException {\n        Object monitor = new Object();\n        AtomicBoolean reached = new AtomicBoolean(false);\n\n        MultiThreadEntryStub concuEntry = new MultiThreadEntryStub();\n        concuEntry.setId(System.currentTimeMillis() + \"\");\n        ProvidedService conf = new ProvidedServiceStub();\n        \n        concuEntry.setServiceConfig(conf);\n        concuEntry.setUpdated(DateTime.now());\n        concuEntry.setFeedId(\"feed\");\n        this.storage.storeEntry(concuEntry);\n        storage.close();\n        concuEntry.acceptGetEntryVisitor(getMonitorVisitor(monitor,reached));\n\n\n        Thread t1 = getUpdThread(storage, concuEntry, false);\n\n        Thread t2 = getUpdThread(storage, concuEntry, true);\n        t1.start();\n        /*\n         * Wait active -- not nice but works fine here\n         * wait until thread parked\n         */\n\n        while (true) {\n            synchronized (monitor) {\n                if (reached.get())\n                    break;\n                monitor.wait(10);\n            }\n        }\n        t2.start();\n        t2.join(800);\n        /*\n         * Wait active -- not nice but works fine here\n         * wake up the waiting thread\n         */\n        while (true) {\n            synchronized (monitor) {\n                if (!reached.get())\n                    break;\n                monitor.notifyAll();\n            }\n        }\n        t1.join(300);\n        if (fail)\n            fail(\"thread failed -- see stacktrace\");\n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.updateEntry(ServerBaseEntry)'\n     */\n    public void testUpdateEntry() throws InterruptedException {\n        Object monitor = new Object();\n        AtomicBoolean reached = new AtomicBoolean(false);\n\n        MultiThreadEntryStub concuEntry = new MultiThreadEntryStub();\n        concuEntry.setId(System.currentTimeMillis() + \"\");\n        ProvidedService conf = new ProvidedServiceStub();\n        \n        concuEntry.setServiceConfig(conf);\n        concuEntry.setUpdated(DateTime.now());\n        concuEntry.setFeedId(\"feed\");\n        this.storage.storeEntry(concuEntry);\n        storage.close();\n        concuEntry.acceptGetEntryVisitor(getMonitorVisitor(monitor,reached));\n\n\n        Thread t1 = getUpdThread(storage, concuEntry, false);\n\n        Thread t2 = getUpdThread(storage, concuEntry, true);\n        t1.start();\n        /*\n         * Wait active -- not nice but works fine here\n         * wait until thread parked\n         */\n\n        while (true) {\n            synchronized (monitor) {\n                if (reached.get())\n                    break;\n                monitor.wait(10);\n            }\n        }\n        t2.start();\n        t2.join(800);\n        /*\n         * Wait active -- not nice but works fine here\n         * wake up the waiting thread\n         */\n        while (true) {\n            synchronized (monitor) {\n                if (!reached.get())\n                    break;\n                monitor.notifyAll();\n            }\n        }\n        t1.join(300);\n        if (fail)\n            fail(\"thread failed -- see stacktrace\");\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageImplementation#testUpdateEntry().mjava","sourceNew":null,"sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.updateEntry(ServerBaseEntry)'\n     */\n    public void testUpdateEntry() throws InterruptedException {\n        Object monitor = new Object();\n        AtomicBoolean reached = new AtomicBoolean(false);\n\n        MultiThreadEntryStub concuEntry = new MultiThreadEntryStub();\n        concuEntry.setId(System.currentTimeMillis() + \"\");\n        ProvidedService conf = new ProvidedServiceStub();\n        \n        concuEntry.setServiceConfig(conf);\n        concuEntry.setUpdated(DateTime.now());\n        concuEntry.setFeedId(\"feed\");\n        this.storage.storeEntry(concuEntry);\n        storage.close();\n        concuEntry.acceptGetEntryVisitor(getMonitorVisitor(monitor,reached));\n\n\n        Thread t1 = getUpdThread(storage, concuEntry, false);\n\n        Thread t2 = getUpdThread(storage, concuEntry, true);\n        t1.start();\n        /*\n         * Wait active -- not nice but works fine here\n         * wait until thread parked\n         */\n\n        while (true) {\n            synchronized (monitor) {\n                if (reached.get())\n                    break;\n                monitor.wait(10);\n            }\n        }\n        t2.start();\n        t2.join(800);\n        /*\n         * Wait active -- not nice but works fine here\n         * wake up the waiting thread\n         */\n        while (true) {\n            synchronized (monitor) {\n                if (!reached.get())\n                    break;\n                monitor.notifyAll();\n            }\n        }\n        t1.join(300);\n        if (fail)\n            fail(\"thread failed -- see stacktrace\");\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}