{"path":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","commits":[{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4897c5b415f476d84ec970a19c41510645887526","date":1342627582,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["aaab905067d767cfe84d5d589c540723680f236e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","date":1345037674,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["cab31d869ae741ad9e0dcd49b07ef6ce51107a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4d5fc8284faca306256427bbbb86017a32002cf","date":1347055110,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n\n      log.debug(\"Closing: {}\", cacheValue);\n\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.preClose();\n          }\n        }\n        try {\n          directory.close();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error closing directory\", t);\n        }\n\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.postClose();\n          }\n          closeListeners.remove(directory);\n        }\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n\n      log.debug(\"Closing: {}\", cacheValue);\n\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["aaab905067d767cfe84d5d589c540723680f236e","cab31d869ae741ad9e0dcd49b07ef6ce51107a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.preClose();\n          }\n        }\n        try {\n          directory.close();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error closing directory\", t);\n        }\n\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.postClose();\n          }\n          closeListeners.remove(directory);\n        }\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n\n      log.debug(\"Closing: {}\", cacheValue);\n\n      cacheValue.refCnt--;\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        directory.close();\n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.onClose();\n          }\n          closeListeners.remove(directory);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a2db3227fbc9542db033f69166e6608fd8f27be","date":1355326983,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.preClose();\n          }\n        }\n        try {\n          log.info(\"Closing directory:\" + cacheValue.path);\n          directory.close();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error closing directory\", t);\n        }\n\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.postClose();\n          }\n          closeListeners.remove(directory);\n        }\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.preClose();\n          }\n        }\n        try {\n          directory.close();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error closing directory\", t);\n        }\n\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.postClose();\n          }\n          closeListeners.remove(directory);\n        }\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["aaab905067d767cfe84d5d589c540723680f236e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab0a184e5eecc6dd0b6e678d147ee60ceea47769","date":1355376781,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      if (closed) {\n        throw new RuntimeException(\"Already closed\");\n      }\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.preClose();\n          }\n        }\n        try {\n          log.info(\"Closing directory:\" + cacheValue.path);\n          directory.close();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error closing directory\", t);\n        }\n\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.postClose();\n          }\n          closeListeners.remove(directory);\n        }\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.preClose();\n          }\n        }\n        try {\n          log.info(\"Closing directory:\" + cacheValue.path);\n          directory.close();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error closing directory\", t);\n        }\n\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.postClose();\n          }\n          closeListeners.remove(directory);\n        }\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd7e39a555794a7c63658e9b00f1558d6df35340","date":1355382786,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.preClose();\n          }\n        }\n        try {\n          log.info(\"Closing directory:\" + cacheValue.path);\n          directory.close();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error closing directory\", t);\n        }\n\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.postClose();\n          }\n          closeListeners.remove(directory);\n        }\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      if (closed) {\n        throw new RuntimeException(\"Already closed\");\n      }\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.preClose();\n          }\n        }\n        try {\n          log.info(\"Closing directory:\" + cacheValue.path);\n          directory.close();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error closing directory\", t);\n        }\n\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.postClose();\n          }\n          closeListeners.remove(directory);\n        }\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aaab905067d767cfe84d5d589c540723680f236e","date":1355885775,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.preClose();\n          }\n        }\n        try {\n          log.info(\"Closing directory:\" + cacheValue.path);\n          directory.close();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error closing directory\", t);\n        }\n\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.postClose();\n          }\n          closeListeners.remove(directory);\n        }\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d","4897c5b415f476d84ec970a19c41510645887526","5a2db3227fbc9542db033f69166e6608fd8f27be"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        List<CloseListener> listeners = closeListeners.remove(directory);\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.preClose();\n          }\n        }\n        try {\n          directory.close();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error closing directory\", t);\n        }\n\n        if (listeners != null) {\n          for (CloseListener listener : listeners) {\n            listener.postClose();\n          }\n          closeListeners.remove(directory);\n        }\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab31d869ae741ad9e0dcd49b07ef6ce51107a7c","date":1362604055,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.info(\"Releasing directory:\" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        log.info(\"Closing directory:\" + cacheValue.path);\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b97a32ef0f7ada102673c4b42228da75f324b52b","date":1362975614,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        if (cacheValue.path != null) {\n          byPathCache.remove(cacheValue.path);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        byPathCache.remove(cacheValue.path);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47672449aafbeb4308705f66b6b577836a5571d4","date":1363536675,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        \n        // if it's been closed, it's path is now\n        // owned by another Directory instance\n        if (!cacheValue.closed) {\n          byPathCache.remove(cacheValue.path);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        if (cacheValue.path != null) {\n          byPathCache.remove(cacheValue.path);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2295e2775c39b05b81f566701b1e7e9475128f2","date":1363552877,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        \n        // if it's been closed, it's path is now\n        // owned by another Directory instance\n        if (!cacheValue.latestForPath) {\n          byPathCache.remove(cacheValue.path);\n          cacheValue.latestForPath = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        \n        // if it's been closed, it's path is now\n        // owned by another Directory instance\n        if (!cacheValue.closed) {\n          byPathCache.remove(cacheValue.path);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54f9a16329716fa08b653c53f1c3dfc6b284d2cc","date":1363905854,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        \n        byPathCache.remove(cacheValue.path);\n        \n      }\n    }\n  }\n\n","sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        \n        // if it's been closed, it's path is now\n        // owned by another Directory instance\n        if (!cacheValue.latestForPath) {\n          byPathCache.remove(cacheValue.path);\n          cacheValue.latestForPath = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#close(Directory).mjava","sourceNew":null,"sourceOld":"  private void close(Directory directory) throws IOException {\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path);\n\n      cacheValue.refCnt--;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir) {\n        closeDirectory(cacheValue);\n        \n        byDirectoryCache.remove(directory);\n        \n        byPathCache.remove(cacheValue.path);\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","aaab905067d767cfe84d5d589c540723680f236e"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["aba371508186796cc6151d8223a5b4e16d02e26e","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"47672449aafbeb4308705f66b6b577836a5571d4":["b97a32ef0f7ada102673c4b42228da75f324b52b"],"5a2db3227fbc9542db033f69166e6608fd8f27be":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["e4d5fc8284faca306256427bbbb86017a32002cf"],"cd7e39a555794a7c63658e9b00f1558d6df35340":["ab0a184e5eecc6dd0b6e678d147ee60ceea47769"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["4897c5b415f476d84ec970a19c41510645887526"],"aaab905067d767cfe84d5d589c540723680f236e":["cd7e39a555794a7c63658e9b00f1558d6df35340"],"e4d5fc8284faca306256427bbbb86017a32002cf":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"058801f8673d53a5abac8088204860ec29a40f0d":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e22ffe8cc51a892ae103df018822d7873e901c2a","4897c5b415f476d84ec970a19c41510645887526"],"b97a32ef0f7ada102673c4b42228da75f324b52b":["cab31d869ae741ad9e0dcd49b07ef6ce51107a7c"],"ab0a184e5eecc6dd0b6e678d147ee60ceea47769":["5a2db3227fbc9542db033f69166e6608fd8f27be"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e22ffe8cc51a892ae103df018822d7873e901c2a","4897c5b415f476d84ec970a19c41510645887526"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["fe33227f6805edab2036cbb80645cc4e2d1fa424","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4897c5b415f476d84ec970a19c41510645887526":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["e2295e2775c39b05b81f566701b1e7e9475128f2"],"e2295e2775c39b05b81f566701b1e7e9475128f2":["47672449aafbeb4308705f66b6b577836a5571d4"],"cab31d869ae741ad9e0dcd49b07ef6ce51107a7c":["aaab905067d767cfe84d5d589c540723680f236e"],"f2126b84bd093fa3d921582a109a0ee578c28126":["e4d5fc8284faca306256427bbbb86017a32002cf","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["058801f8673d53a5abac8088204860ec29a40f0d"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"47672449aafbeb4308705f66b6b577836a5571d4":["e2295e2775c39b05b81f566701b1e7e9475128f2"],"5a2db3227fbc9542db033f69166e6608fd8f27be":["ab0a184e5eecc6dd0b6e678d147ee60ceea47769"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","5a2db3227fbc9542db033f69166e6608fd8f27be","f2126b84bd093fa3d921582a109a0ee578c28126"],"cd7e39a555794a7c63658e9b00f1558d6df35340":["aaab905067d767cfe84d5d589c540723680f236e"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["616c1830142ff5c1ddedec1ed898733b73c8e23b","e4d5fc8284faca306256427bbbb86017a32002cf","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"aaab905067d767cfe84d5d589c540723680f236e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cab31d869ae741ad9e0dcd49b07ef6ce51107a7c"],"e4d5fc8284faca306256427bbbb86017a32002cf":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"058801f8673d53a5abac8088204860ec29a40f0d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":["616c1830142ff5c1ddedec1ed898733b73c8e23b"],"b97a32ef0f7ada102673c4b42228da75f324b52b":["47672449aafbeb4308705f66b6b577836a5571d4"],"ab0a184e5eecc6dd0b6e678d147ee60ceea47769":["cd7e39a555794a7c63658e9b00f1558d6df35340"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"4897c5b415f476d84ec970a19c41510645887526":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["058801f8673d53a5abac8088204860ec29a40f0d"],"cab31d869ae741ad9e0dcd49b07ef6ce51107a7c":["b97a32ef0f7ada102673c4b42228da75f324b52b"],"e2295e2775c39b05b81f566701b1e7e9475128f2":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"e22ffe8cc51a892ae103df018822d7873e901c2a":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","4897c5b415f476d84ec970a19c41510645887526"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}