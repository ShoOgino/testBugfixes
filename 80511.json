{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiSliceMerge#testMultipleSlicesOfMultipleIndexSearchers().mjava","commits":[{"id":"36510a8e3c1ec60d366b45f8f716e9dc47589661","date":1561989412,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiSliceMerge#testMultipleSlicesOfMultipleIndexSearchers().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleSlicesOfMultipleIndexSearchers() throws Exception {\n    Executor executor1 = runnable -> runnable.run();\n    Executor executor2 = runnable -> runnable.run();\n\n    IndexSearcher searchers[] = new IndexSearcher[] {\n        new IndexSearcher(reader1, executor1),\n        new IndexSearcher(reader2, executor2)\n    };\n\n    Query query = new MatchAllDocsQuery();\n\n    TopDocs topDocs1 = searchers[0].search(query, Integer.MAX_VALUE);\n    TopDocs topDocs2 = searchers[1].search(query, Integer.MAX_VALUE);\n\n    assertEquals(topDocs1.scoreDocs.length, topDocs2.scoreDocs.length);\n\n    for (int i = 0; i < topDocs1.scoreDocs.length; i++) {\n      topDocs1.scoreDocs[i].shardIndex = 0;\n      topDocs2.scoreDocs[i].shardIndex = 1;\n    }\n\n    TopDocs[] shardHits = {topDocs1, topDocs2};\n\n    TopDocs mergedHits1 = TopDocs.merge(0, topDocs1.scoreDocs.length, shardHits);\n    TopDocs mergedHits2 = TopDocs.merge(0, topDocs1.scoreDocs.length, shardHits);\n\n    CheckHits.checkEqual(query, mergedHits1.scoreDocs, mergedHits2.scoreDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4f6b0fb6f08ac48f438f03002a283a63cb9992","date":1561992803,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiSliceMerge#testMultipleSlicesOfMultipleIndexSearchers().mjava","sourceNew":null,"sourceOld":"  public void testMultipleSlicesOfMultipleIndexSearchers() throws Exception {\n    Executor executor1 = runnable -> runnable.run();\n    Executor executor2 = runnable -> runnable.run();\n\n    IndexSearcher searchers[] = new IndexSearcher[] {\n        new IndexSearcher(reader1, executor1),\n        new IndexSearcher(reader2, executor2)\n    };\n\n    Query query = new MatchAllDocsQuery();\n\n    TopDocs topDocs1 = searchers[0].search(query, Integer.MAX_VALUE);\n    TopDocs topDocs2 = searchers[1].search(query, Integer.MAX_VALUE);\n\n    assertEquals(topDocs1.scoreDocs.length, topDocs2.scoreDocs.length);\n\n    for (int i = 0; i < topDocs1.scoreDocs.length; i++) {\n      topDocs1.scoreDocs[i].shardIndex = 0;\n      topDocs2.scoreDocs[i].shardIndex = 1;\n    }\n\n    TopDocs[] shardHits = {topDocs1, topDocs2};\n\n    TopDocs mergedHits1 = TopDocs.merge(0, topDocs1.scoreDocs.length, shardHits);\n    TopDocs mergedHits2 = TopDocs.merge(0, topDocs1.scoreDocs.length, shardHits);\n\n    CheckHits.checkEqual(query, mergedHits1.scoreDocs, mergedHits2.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fccd4a691aac1aff06ab8110d8693514a34160c3","date":1562092518,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiSliceMerge#testMultipleSlicesOfMultipleIndexSearchers().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleSlicesOfMultipleIndexSearchers() throws Exception {\n    Executor executor1 = runnable -> runnable.run();\n    Executor executor2 = runnable -> runnable.run();\n\n    IndexSearcher searchers[] = new IndexSearcher[] {\n        new IndexSearcher(reader1, executor1),\n        new IndexSearcher(reader2, executor2)\n    };\n\n    Query query = new MatchAllDocsQuery();\n\n    TopDocs topDocs1 = searchers[0].search(query, Integer.MAX_VALUE);\n    TopDocs topDocs2 = searchers[1].search(query, Integer.MAX_VALUE);\n\n    assertEquals(topDocs1.scoreDocs.length, topDocs2.scoreDocs.length);\n\n    for (int i = 0; i < topDocs1.scoreDocs.length; i++) {\n      topDocs1.scoreDocs[i].shardIndex = 0;\n      topDocs2.scoreDocs[i].shardIndex = 1;\n    }\n\n    TopDocs[] shardHits = {topDocs1, topDocs2};\n\n    TopDocs mergedHits1 = TopDocs.merge(0, topDocs1.scoreDocs.length, shardHits);\n    TopDocs mergedHits2 = TopDocs.merge(0, topDocs1.scoreDocs.length, shardHits);\n\n    CheckHits.checkEqual(query, mergedHits1.scoreDocs, mergedHits2.scoreDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["36510a8e3c1ec60d366b45f8f716e9dc47589661"]},"commit2Childs":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36510a8e3c1ec60d366b45f8f716e9dc47589661"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}