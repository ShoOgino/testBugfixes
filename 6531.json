{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9","date":1334679794,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n      analyzer.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n      analyzer.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          @SuppressWarnings(\"deprecation\")\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n      analyzer.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n      analyzer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n      analyzer.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          @SuppressWarnings(\"deprecation\")\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n      analyzer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n      analyzer.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n      analyzer.close();\n    }\n  }\n\n","bugFix":["a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymGraphFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n      analyzer.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      SynonymMap.Builder b = new SynonymMap.Builder(random().nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(b, randomNonEmptyString(), randomNonEmptyString(), random().nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random().nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          TokenStream stream = new SynonymFilter(tokenizer, map, ignoreCase);\n          return new TokenStreamComponents(tokenizer, new RemoveDuplicatesTokenFilter(stream));\n        }\n      };\n\n      checkRandomData(random(), analyzer, 200);\n      analyzer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9"],"d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["71da933d30aea361ccc224d6544c451cbf49916d"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"71da933d30aea361ccc224d6544c451cbf49916d":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["71da933d30aea361ccc224d6544c451cbf49916d"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"71da933d30aea361ccc224d6544c451cbf49916d":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}