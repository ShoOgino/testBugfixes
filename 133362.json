{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","commits":[{"id":"3a88f37cd0154833b5c58daac509eb8be347d0f2","date":1397029487,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"/dev/null","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new RandomIndexWriter(random(), dir2, cfg);\n    w.addIndexes(reader);\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d42bcb1dbd6311b86df9a70c92c326dbdfd1607f","date":1399579769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    w.addIndexes(reader);\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new RandomIndexWriter(random(), dir2, cfg);\n    w.addIndexes(reader);\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    w.addIndexes(reader);\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    w.addIndexes(reader);\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d34561cfa6c4a189806b851dc6e06c4ef8c8556","date":1409388745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    if (dir2 instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir2).setEnableVirusScanner(false);\n    }\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    w.addIndexes(reader);\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    w.addIndexes(reader);\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    if (dir2 instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir2).setEnableVirusScanner(false);\n    }\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    IndexReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    if (dir2 instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir2).setEnableVirusScanner(false);\n    }\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    w.addIndexes(reader);\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b479f0298c43fe197c7c01b5ac00a69ba20e9984","date":1454077548,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    if (dir2 instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir2).setEnableVirusScanner(false);\n    }\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    if (dir2 instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir2).setEnableVirusScanner(false);\n    }\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    if (dir2 instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir2).setEnableVirusScanner(false);\n    }\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    if (dir2 instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir2).setEnableVirusScanner(false);\n    }\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = newDirectory();\n\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    if (dir2 instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir2).setEnableVirusScanner(false);\n    }\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = newDirectory();\n\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    if (dir2 instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir2).setEnableVirusScanner(false);\n    }\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = newDirectory();\n\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    if (dir2 instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir2).setEnableVirusScanner(false);\n    }\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = newDirectory();\n\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    if (dir2 instanceof MockDirectoryWrapper) {\n      // Else, the virus checker may prevent deletion of files and cause\n      // us to see too many bytes used by extension in the end:\n      ((MockDirectoryWrapper) dir2).setEnableVirusScanner(false);\n    }\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = applyCreatedVersionMajor(newDirectory());\n\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = applyCreatedVersionMajor(newDirectory());\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = newDirectory();\n\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMergeStability().mjava","sourceNew":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = applyCreatedVersionMajor(newDirectory());\n\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = applyCreatedVersionMajor(newDirectory());\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */\n  public void testMergeStability() throws Exception {\n    assumeTrue(\"merge is not stable\", mergeIsStable());\n    Directory dir = newDirectory();\n\n    // do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio\n    // do not use RIW which will change things up!\n    MergePolicy mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    IndexWriterConfig cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    IndexWriter w = new IndexWriter(dir, cfg);\n    final int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; ++i) {\n      Document d = new Document();\n      addRandomFields(d);\n      w.addDocument(d);\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n\n    Directory dir2 = newDirectory();\n    mp = newTieredMergePolicy();\n    mp.setNoCFSRatio(0);\n    cfg = new IndexWriterConfig(new MockAnalyzer(random())).setUseCompoundFile(false).setMergePolicy(mp);\n    w = new IndexWriter(dir2, cfg);\n    TestUtil.addIndexesSlowly(w, reader);\n\n    w.commit();\n    w.close();\n\n    assertEquals(bytesUsedByExtension(dir), bytesUsedByExtension(dir2));\n\n    reader.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b479f0298c43fe197c7c01b5ac00a69ba20e9984":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"5a207d19eac354d649c3f0e2cce070017c78125e":["8d15e34266d75e4e8b95da046cd0afc812367b38","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","b470f36a9372c97283360b1304eacbde22df6c0d"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["9d34561cfa6c4a189806b851dc6e06c4ef8c8556"],"d42bcb1dbd6311b86df9a70c92c326dbdfd1607f":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["5a207d19eac354d649c3f0e2cce070017c78125e"],"9d34561cfa6c4a189806b851dc6e06c4ef8c8556":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b470f36a9372c97283360b1304eacbde22df6c0d":["8d15e34266d75e4e8b95da046cd0afc812367b38","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["d42bcb1dbd6311b86df9a70c92c326dbdfd1607f"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["5a207d19eac354d649c3f0e2cce070017c78125e"],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","b479f0298c43fe197c7c01b5ac00a69ba20e9984"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31741cf1390044e38a2ec3127cf302ba841bfd75"]},"commit2Childs":{"b479f0298c43fe197c7c01b5ac00a69ba20e9984":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"5a207d19eac354d649c3f0e2cce070017c78125e":["31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["b479f0298c43fe197c7c01b5ac00a69ba20e9984","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"d42bcb1dbd6311b86df9a70c92c326dbdfd1607f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d34561cfa6c4a189806b851dc6e06c4ef8c8556":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["9d34561cfa6c4a189806b851dc6e06c4ef8c8556"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["d42bcb1dbd6311b86df9a70c92c326dbdfd1607f"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}