{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","commits":[{"id":"1735d662b62f98976dc6cccfe9d327c5e7b22dff","date":1498984143,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n    }\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n    typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n    typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n    typeVsCount.put(Replica.Type.PULL, pullReplicas);\n    for (String shardName : shardNames) {\n      int idx = 0;\n      for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n        for (int i = 0; i < e.getValue(); i++) {\n          Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n              .hint(Hint.COLL, collName)\n              .hint(Hint.REPLICATYPE, e.getKey())\n              .hint(Hint.SHARD, shardName);\n          if (nodesList != null) {\n            for (String nodeName : nodesList) {\n              suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n            }\n          }\n          SolrRequest op = suggester.getOperation();\n          if (op == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" + Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n          }\n          session = suggester.getSession();\n          positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n        }\n      }\n    }\n\n    return positions;\n  }\n\n","sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor,\n                                                              List<String> nodesList) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        if (nodesList != null)  {\n          for (String nodeName : nodesList) {\n            suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n          }\n        }\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add(op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n    }\n\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cdp);\n    Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n    typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n    typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n    typeVsCount.put(Replica.Type.PULL, pullReplicas);\n    for (String shardName : shardNames) {\n      int idx = 0;\n      for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n        for (int i = 0; i < e.getValue(); i++) {\n          Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n              .hint(Hint.COLL, collName)\n              .hint(Hint.REPLICATYPE, e.getKey())\n              .hint(Hint.SHARD, shardName);\n          if (nodesList != null) {\n            for (String nodeName : nodesList) {\n              suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n            }\n          }\n          SolrRequest op = suggester.getOperation();\n          if (op == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" + Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n          }\n          session = suggester.getSession();\n          positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n        }\n      }\n    }\n\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n    }\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n    typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n    typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n    typeVsCount.put(Replica.Type.PULL, pullReplicas);\n    for (String shardName : shardNames) {\n      int idx = 0;\n      for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n        for (int i = 0; i < e.getValue(); i++) {\n          Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n              .hint(Hint.COLL, collName)\n              .hint(Hint.REPLICATYPE, e.getKey())\n              .hint(Hint.SHARD, shardName);\n          if (nodesList != null) {\n            for (String nodeName : nodesList) {\n              suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n            }\n          }\n          SolrRequest op = suggester.getOperation();\n          if (op == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" + Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n          }\n          session = suggester.getSession();\n          positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n        }\n      }\n    }\n\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["1735d662b62f98976dc6cccfe9d327c5e7b22dff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1735d662b62f98976dc6cccfe9d327c5e7b22dff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}