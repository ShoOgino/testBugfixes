{"path":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","commits":[{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  // TODO: better name?\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = DocsEnum.FLAG_FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n      } else {\n        enumFlags = 0;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n      } else {\n        enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","sourceNew":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = DocsEnum.FLAG_FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n      } else {\n        enumFlags = 0;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n      } else {\n        enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","sourceOld":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  // TODO: better name?\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = DocsEnum.FLAG_FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n      } else {\n        enumFlags = 0;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n      } else {\n        enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","sourceNew":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = DocsEnum.FLAG_FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n      } else {\n        enumFlags = 0;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n      } else {\n        enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","sourceOld":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  // TODO: better name?\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = DocsEnum.FLAG_FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n      } else {\n        enumFlags = 0;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n      } else {\n        enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","sourceNew":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = PostingsEnum.FLAG_FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.FLAG_PAYLOADS;\n      } else {\n        enumFlags = PostingsEnum.FLAG_POSITIONS;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.FLAG_PAYLOADS | PostingsEnum.FLAG_OFFSETS;\n      } else {\n        enumFlags = PostingsEnum.FLAG_OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","sourceOld":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = DocsEnum.FLAG_FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n      } else {\n        enumFlags = 0;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n      } else {\n        enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","sourceNew":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = PostingsEnum.FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS;\n      } else {\n        enumFlags = PostingsEnum.POSITIONS;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n      } else {\n        enumFlags = PostingsEnum.OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","sourceOld":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = PostingsEnum.FLAG_FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.FLAG_PAYLOADS;\n      } else {\n        enumFlags = PostingsEnum.FLAG_POSITIONS;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.FLAG_PAYLOADS | PostingsEnum.FLAG_OFFSETS;\n      } else {\n        enumFlags = PostingsEnum.FLAG_OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","sourceNew":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = PostingsEnum.FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS;\n      } else {\n        enumFlags = PostingsEnum.POSITIONS;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n      } else {\n        enumFlags = PostingsEnum.OFFSETS;\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = PostingsEnum.FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS;\n      } else {\n        enumFlags = PostingsEnum.POSITIONS;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n      } else {\n        enumFlags = PostingsEnum.OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","sourceNew":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = PostingsEnum.FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS;\n      } else {\n        enumFlags = PostingsEnum.POSITIONS;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n      } else {\n        enumFlags = PostingsEnum.OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","sourceOld":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = PostingsEnum.FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS;\n      } else {\n        enumFlags = PostingsEnum.POSITIONS;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n      } else {\n        enumFlags = PostingsEnum.OFFSETS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#setField(FieldInfo).mjava","sourceNew":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = PostingsEnum.FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS;\n      } else {\n        enumFlags = PostingsEnum.POSITIONS;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n      } else {\n        enumFlags = PostingsEnum.OFFSETS;\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets the current field for writing, and returns the\n   * fixed length of long[] metadata (which is fixed per\n   * field), called when the writing switches to another field. */\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n\n    writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n    writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    writePayloads = fieldInfo.hasPayloads();\n\n    if (writeFreqs == false) {\n      enumFlags = 0;\n    } else if (writePositions == false) {\n      enumFlags = PostingsEnum.FREQS;\n    } else if (writeOffsets == false) {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS;\n      } else {\n        enumFlags = PostingsEnum.POSITIONS;\n      }\n    } else {\n      if (writePayloads) {\n        enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n      } else {\n        enumFlags = PostingsEnum.OFFSETS;\n      }\n    }\n\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"99eb4a732d1a908f4636ace52928876136bf1896":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","99eb4a732d1a908f4636ace52928876136bf1896"],"51f5280f31484820499077f41fcdfe92d527d9dc":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}