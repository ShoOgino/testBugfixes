{"path":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","commits":[{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    Arrays.sort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    Arrays.sort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    Arrays.sort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["98bc22650ab0fe51f9c00513397bfa42a64fc663"]},"commit2Childs":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}