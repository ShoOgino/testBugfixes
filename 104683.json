{"path":"modules/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#mergeResults(IntermediateFacetResult...).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#mergeResults(IntermediateFacetResult...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merge results of several facet partitions. Logic of the merge is undefined\n   * and open for interpretations. For example, a merge implementation could\n   * keep top K results. Passed {@link IntermediateFacetResult} must be ones\n   * that were created by this handler otherwise a {@link ClassCastException} is\n   * thrown. In addition, all passed {@link IntermediateFacetResult} must have\n   * the same {@link FacetRequest} otherwise an {@link IllegalArgumentException}\n   * is thrown.\n   * \n   * @param tmpResults one or more temporary results created by <b>this</b>\n   *        handler.\n   * @return temporary facet result that represents to union, as specified by\n   *         <b>this</b> handler, of the input temporary facet results.\n   * @throws IOException on error.\n   * @throws ClassCastException if the temporary result passed was not created\n   *         by this handler\n   * @throws IllegalArgumentException if passed <code>facetResults</code> do not\n   *         have the same {@link FacetRequest}\n   * @see IntermediateFacetResult#getFacetRequest()\n   */\n  public abstract IntermediateFacetResult mergeResults(IntermediateFacetResult... tmpResults) \n  throws IOException, ClassCastException, IllegalArgumentException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#mergeResults(IntermediateFacetResult...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merge results of several facet partitions. Logic of the merge is undefined\n   * and open for interpretations. For example, a merge implementation could\n   * keep top K results. Passed {@link IntermediateFacetResult} must be ones\n   * that were created by this handler otherwise a {@link ClassCastException} is\n   * thrown. In addition, all passed {@link IntermediateFacetResult} must have\n   * the same {@link FacetRequest} otherwise an {@link IllegalArgumentException}\n   * is thrown.\n   * \n   * @param tmpResults one or more temporary results created by <b>this</b>\n   *        handler.\n   * @return temporary facet result that represents to union, as specified by\n   *         <b>this</b> handler, of the input temporary facet results.\n   * @throws IOException on error.\n   * @throws ClassCastException if the temporary result passed was not created\n   *         by this handler\n   * @throws IllegalArgumentException if passed <code>facetResults</code> do not\n   *         have the same {@link FacetRequest}\n   * @see IntermediateFacetResult#getFacetRequest()\n   */\n  public abstract IntermediateFacetResult mergeResults(IntermediateFacetResult... tmpResults) \n  throws IOException, ClassCastException, IllegalArgumentException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#mergeResults(IntermediateFacetResult...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merge results of several facet partitions. Logic of the merge is undefined\n   * and open for interpretations. For example, a merge implementation could\n   * keep top K results. Passed {@link IntermediateFacetResult} must be ones\n   * that were created by this handler otherwise a {@link ClassCastException} is\n   * thrown. In addition, all passed {@link IntermediateFacetResult} must have\n   * the same {@link FacetRequest} otherwise an {@link IllegalArgumentException}\n   * is thrown.\n   * \n   * @param tmpResults one or more temporary results created by <b>this</b>\n   *        handler.\n   * @return temporary facet result that represents to union, as specified by\n   *         <b>this</b> handler, of the input temporary facet results.\n   * @throws IOException on error.\n   * @throws ClassCastException if the temporary result passed was not created\n   *         by this handler\n   * @throws IllegalArgumentException if passed <code>facetResults</code> do not\n   *         have the same {@link FacetRequest}\n   * @see IntermediateFacetResult#getFacetRequest()\n   */\n  public abstract IntermediateFacetResult mergeResults(IntermediateFacetResult... tmpResults) \n  throws IOException, ClassCastException, IllegalArgumentException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#mergeResults(IntermediateFacetResult...).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#mergeResults(IntermediateFacetResult...).mjava","sourceNew":"  /**\n   * Merge results of several facet partitions. Logic of the merge is undefined\n   * and open for interpretations. For example, a merge implementation could\n   * keep top K results. Passed {@link IntermediateFacetResult} must be ones\n   * that were created by this handler otherwise a {@link ClassCastException} is\n   * thrown. In addition, all passed {@link IntermediateFacetResult} must have\n   * the same {@link FacetRequest} otherwise an {@link IllegalArgumentException}\n   * is thrown.\n   * \n   * @param tmpResults one or more temporary results created by <b>this</b>\n   *        handler.\n   * @return temporary facet result that represents to union, as specified by\n   *         <b>this</b> handler, of the input temporary facet results.\n   * @throws IOException on error.\n   * @throws ClassCastException if the temporary result passed was not created\n   *         by this handler\n   * @throws IllegalArgumentException if passed <code>facetResults</code> do not\n   *         have the same {@link FacetRequest}\n   * @see IntermediateFacetResult#getFacetRequest()\n   */\n  public abstract IntermediateFacetResult mergeResults(IntermediateFacetResult... tmpResults) \n  throws IOException, ClassCastException, IllegalArgumentException;\n\n","sourceOld":"  /**\n   * Merge results of several facet partitions. Logic of the merge is undefined\n   * and open for interpretations. For example, a merge implementation could\n   * keep top K results. Passed {@link IntermediateFacetResult} must be ones\n   * that were created by this handler otherwise a {@link ClassCastException} is\n   * thrown. In addition, all passed {@link IntermediateFacetResult} must have\n   * the same {@link FacetRequest} otherwise an {@link IllegalArgumentException}\n   * is thrown.\n   * \n   * @param tmpResults one or more temporary results created by <b>this</b>\n   *        handler.\n   * @return temporary facet result that represents to union, as specified by\n   *         <b>this</b> handler, of the input temporary facet results.\n   * @throws IOException on error.\n   * @throws ClassCastException if the temporary result passed was not created\n   *         by this handler\n   * @throws IllegalArgumentException if passed <code>facetResults</code> do not\n   *         have the same {@link FacetRequest}\n   * @see IntermediateFacetResult#getFacetRequest()\n   */\n  public abstract IntermediateFacetResult mergeResults(IntermediateFacetResult... tmpResults) \n  throws IOException, ClassCastException, IllegalArgumentException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}