{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["0f3cee3d20b0c786e6fca20539454262e29edcab","fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0f);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75b4d037d2c8fd7d68c07be61d25c0260cf8091e","date":1336829560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0f);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0f);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0f);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0f);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0f);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0f);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0f);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0f);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","0f3cee3d20b0c786e6fca20539454262e29edcab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity(true);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity(true);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity(true);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity(true);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity(true);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity(true);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity(true);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity(true);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newTextField(\"foo\", \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new FloatDocValuesField(\"foo_boost\", 0.0F);\n    doc.add(dvField);\n    Field field2 = newTextField(\"bar\", \"\", Field.Store.NO);\n    doc.add(field2);\n    \n    field.setStringValue(\"quick brown fox\");\n    field2.setStringValue(\"quick brown fox\");\n    dvField.setFloatValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setStringValue(\"jumps over lazy brown dog\");\n    field2.setStringValue(\"jumps over lazy brown dog\");\n    dvField.setFloatValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir, false);\n    final Similarity base = searcher1.getSimilarity(true);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir, false);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random(), tq, searcher1);\n    QueryUtils.check(random(), tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"485545da3b4429d6f138b4baac573a97820ee93b":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["485545da3b4429d6f138b4baac573a97820ee93b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["04f07771a2a7dd3a395700665ed839c3dae2def2","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["c8a0e442f7b61f811680273b25da95994a724466"],"c8a0e442f7b61f811680273b25da95994a724466":["485545da3b4429d6f138b4baac573a97820ee93b"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"485545da3b4429d6f138b4baac573a97820ee93b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["d4d69c535930b5cce125cff868d40f6373dc27d4","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["485545da3b4429d6f138b4baac573a97820ee93b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["b94236357aaa22b76c10629851fe4e376e0cea82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c8a0e442f7b61f811680273b25da95994a724466":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}