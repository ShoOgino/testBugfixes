{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#Lucene60PointsWriter(SegmentWriteState,int).mjava","commits":[{"id":"10005c6013abbd1102f2463cf95604d4c8774c99","date":1469460814,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#Lucene60PointsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#Lucene60PointsWriter(SegmentWriteState,int,double).mjava","sourceNew":"  /** Full constructor */\n  public Lucene60PointsWriter(SegmentWriteState writeState, int maxPointsInLeafNode) throws IOException {\n    assert writeState.fieldInfos.hasPointValues();\n    this.writeState = writeState;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    String dataFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n                                                         writeState.segmentSuffix,\n                                                         Lucene60PointsFormat.DATA_EXTENSION);\n    dataOut = writeState.directory.createOutput(dataFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(dataOut,\n                                 Lucene60PointsFormat.DATA_CODEC_NAME,\n                                 Lucene60PointsFormat.DATA_VERSION_CURRENT,\n                                 writeState.segmentInfo.getId(),\n                                 writeState.segmentSuffix);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Full constructor */\n  public Lucene60PointsWriter(SegmentWriteState writeState, int maxPointsInLeafNode, double maxMBSortInHeap) throws IOException {\n    assert writeState.fieldInfos.hasPointValues();\n    this.writeState = writeState;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.maxMBSortInHeap = maxMBSortInHeap;\n    String dataFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n                                                         writeState.segmentSuffix,\n                                                         Lucene60PointsFormat.DATA_EXTENSION);\n    dataOut = writeState.directory.createOutput(dataFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(dataOut,\n                                 Lucene60PointsFormat.DATA_CODEC_NAME,\n                                 Lucene60PointsFormat.DATA_VERSION_CURRENT,\n                                 writeState.segmentInfo.getId(),\n                                 writeState.segmentSuffix);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08973aa47f2cf98a588293a53af4e948952ccfb","date":1469518724,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#Lucene60PointsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#Lucene60PointsWriter(SegmentWriteState,int,double).mjava","sourceNew":"  /** Full constructor */\n  public Lucene60PointsWriter(SegmentWriteState writeState, int maxPointsInLeafNode) throws IOException {\n    assert writeState.fieldInfos.hasPointValues();\n    this.writeState = writeState;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    String dataFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n                                                         writeState.segmentSuffix,\n                                                         Lucene60PointsFormat.DATA_EXTENSION);\n    dataOut = writeState.directory.createOutput(dataFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(dataOut,\n                                 Lucene60PointsFormat.DATA_CODEC_NAME,\n                                 Lucene60PointsFormat.DATA_VERSION_CURRENT,\n                                 writeState.segmentInfo.getId(),\n                                 writeState.segmentSuffix);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Full constructor */\n  public Lucene60PointsWriter(SegmentWriteState writeState, int maxPointsInLeafNode, double maxMBSortInHeap) throws IOException {\n    assert writeState.fieldInfos.hasPointValues();\n    this.writeState = writeState;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.maxMBSortInHeap = maxMBSortInHeap;\n    String dataFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n                                                         writeState.segmentSuffix,\n                                                         Lucene60PointsFormat.DATA_EXTENSION);\n    dataOut = writeState.directory.createOutput(dataFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(dataOut,\n                                 Lucene60PointsFormat.DATA_CODEC_NAME,\n                                 Lucene60PointsFormat.DATA_VERSION_CURRENT,\n                                 writeState.segmentInfo.getId(),\n                                 writeState.segmentSuffix);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0567940defa1ea6eb8a039d9d36e3682063f8a4","date":1469815320,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#Lucene60PointsWriter(SegmentWriteState,int,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#Lucene60PointsWriter(SegmentWriteState,int).mjava","sourceNew":"  /** Full constructor */\n  public Lucene60PointsWriter(SegmentWriteState writeState, int maxPointsInLeafNode, double maxMBSortInHeap) throws IOException {\n    assert writeState.fieldInfos.hasPointValues();\n    this.writeState = writeState;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.maxMBSortInHeap = maxMBSortInHeap;\n    String dataFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n                                                         writeState.segmentSuffix,\n                                                         Lucene60PointsFormat.DATA_EXTENSION);\n    dataOut = writeState.directory.createOutput(dataFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(dataOut,\n                                 Lucene60PointsFormat.DATA_CODEC_NAME,\n                                 Lucene60PointsFormat.DATA_VERSION_CURRENT,\n                                 writeState.segmentInfo.getId(),\n                                 writeState.segmentSuffix);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Full constructor */\n  public Lucene60PointsWriter(SegmentWriteState writeState, int maxPointsInLeafNode) throws IOException {\n    assert writeState.fieldInfos.hasPointValues();\n    this.writeState = writeState;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    String dataFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n                                                         writeState.segmentSuffix,\n                                                         Lucene60PointsFormat.DATA_EXTENSION);\n    dataOut = writeState.directory.createOutput(dataFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(dataOut,\n                                 Lucene60PointsFormat.DATA_CODEC_NAME,\n                                 Lucene60PointsFormat.DATA_VERSION_CURRENT,\n                                 writeState.segmentInfo.getId(),\n                                 writeState.segmentSuffix);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#Lucene60PointsWriter(SegmentWriteState,int).mjava","sourceNew":null,"sourceOld":"  /** Full constructor */\n  public Lucene60PointsWriter(SegmentWriteState writeState, int maxPointsInLeafNode) throws IOException {\n    assert writeState.fieldInfos.hasPointValues();\n    this.writeState = writeState;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    String dataFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n                                                         writeState.segmentSuffix,\n                                                         Lucene60PointsFormat.DATA_EXTENSION);\n    dataOut = writeState.directory.createOutput(dataFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(dataOut,\n                                 Lucene60PointsFormat.DATA_CODEC_NAME,\n                                 Lucene60PointsFormat.DATA_VERSION_CURRENT,\n                                 writeState.segmentInfo.getId(),\n                                 writeState.segmentSuffix);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0567940defa1ea6eb8a039d9d36e3682063f8a4":["d08973aa47f2cf98a588293a53af4e948952ccfb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"10005c6013abbd1102f2463cf95604d4c8774c99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d08973aa47f2cf98a588293a53af4e948952ccfb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10005c6013abbd1102f2463cf95604d4c8774c99"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["d08973aa47f2cf98a588293a53af4e948952ccfb","b0567940defa1ea6eb8a039d9d36e3682063f8a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0567940defa1ea6eb8a039d9d36e3682063f8a4"]},"commit2Childs":{"b0567940defa1ea6eb8a039d9d36e3682063f8a4":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10005c6013abbd1102f2463cf95604d4c8774c99","d08973aa47f2cf98a588293a53af4e948952ccfb"],"10005c6013abbd1102f2463cf95604d4c8774c99":["d08973aa47f2cf98a588293a53af4e948952ccfb"],"d08973aa47f2cf98a588293a53af4e948952ccfb":["b0567940defa1ea6eb8a039d9d36e3682063f8a4","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}