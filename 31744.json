{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int docOrd = termsIndex.getOrd(doc);\n      if (docOrd == -1) {\n        docOrd = missingOrd;\n      }\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - docOrd;\n      } else if (bottomOrd >= docOrd) {\n        // the equals case always means bottom is > doc\n        // (because we set bottomOrd to the lower bound in\n        // setBottom):\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int docOrd = termsIndex.getOrd(doc);\n      if (docOrd == -1) {\n        docOrd = missingOrd;\n      }\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - docOrd;\n      } else if (bottomOrd >= docOrd) {\n        // the equals case always means bottom is > doc\n        // (because we set bottomOrd to the lower bound in\n        // setBottom):\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) throws IOException {\n      assert bottomSlot != -1;\n      int docOrd = getOrdForDoc(doc);\n      if (docOrd == -1) {\n        docOrd = missingOrd;\n      }\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - docOrd;\n      } else if (bottomOrd >= docOrd) {\n        // the equals case always means bottom is > doc\n        // (because we set bottomOrd to the lower bound in\n        // setBottom):\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int docOrd = termsIndex.getOrd(doc);\n      if (docOrd == -1) {\n        docOrd = missingOrd;\n      }\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - docOrd;\n      } else if (bottomOrd >= docOrd) {\n        // the equals case always means bottom is > doc\n        // (because we set bottomOrd to the lower bound in\n        // setBottom):\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) throws IOException {\n      assert bottomSlot != -1;\n      int docOrd = getOrdForDoc(doc);\n      if (docOrd == -1) {\n        docOrd = missingOrd;\n      }\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - docOrd;\n      } else if (bottomOrd >= docOrd) {\n        // the equals case always means bottom is > doc\n        // (because we set bottomOrd to the lower bound in\n        // setBottom):\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int docOrd = termsIndex.getOrd(doc);\n      if (docOrd == -1) {\n        docOrd = missingOrd;\n      }\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - docOrd;\n      } else if (bottomOrd >= docOrd) {\n        // the equals case always means bottom is > doc\n        // (because we set bottomOrd to the lower bound in\n        // setBottom):\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) throws IOException {\n      assert bottomSlot != -1;\n      int docOrd = getOrdForDoc(doc);\n      if (docOrd == -1) {\n        docOrd = missingOrd;\n      }\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - docOrd;\n      } else if (bottomOrd >= docOrd) {\n        // the equals case always means bottom is > doc\n        // (because we set bottomOrd to the lower bound in\n        // setBottom):\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int docOrd = termsIndex.getOrd(doc);\n      if (docOrd == -1) {\n        docOrd = missingOrd;\n      }\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - docOrd;\n      } else if (bottomOrd >= docOrd) {\n        // the equals case always means bottom is > doc\n        // (because we set bottomOrd to the lower bound in\n        // setBottom):\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27ab7b234eab0cbc020836989b96ed430e1065bb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7615b855702e008d91a95a2578bf05d27372f599"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["27ab7b234eab0cbc020836989b96ed430e1065bb","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"7615b855702e008d91a95a2578bf05d27372f599":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["27ab7b234eab0cbc020836989b96ed430e1065bb","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"27ab7b234eab0cbc020836989b96ed430e1065bb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}