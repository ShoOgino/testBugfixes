{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NestableJsonFacetTest#testParsing().mjava","commits":[{"id":"304ab40a1554eb7b290d2d6d3cfa3daf743e6b00","date":1569043711,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NestableJsonFacetTest#testParsing().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParsing() {\n    NamedList<Object> list = new NamedList<>();\n    list.add(\"count\", 12);\n    NamedList<Object> buckets = new NamedList<Object>() {{\n      add(\"val\", \"Nike\");\n    }};\n    NamedList<Object> vals = new NamedList<Object>() {{\n      add(\"numBuckets\", 10);\n      add(\"allBuckets\", new NamedList<Object>(){{\n        add(\"count\", 12);\n      }});\n      add(\"before\", new NamedList<Object>(){{\n        add(\"count\", 1);\n      }});\n      add(\"after\", new NamedList<Object>(){{\n        add(\"count\", 2);\n      }});\n      add(\"between\", new NamedList<Object>(){{\n        add(\"count\", 9);\n      }});\n    }};\n    vals.add(\"buckets\", Collections.singletonList(buckets));\n    list.add(\"test\", vals);\n    NestableJsonFacet facet = new NestableJsonFacet(list);\n\n    assertEquals(12L, facet.getCount());\n    assertEquals(9L, facet.getBucketBasedFacets(\"test\").getBetween());\n    list.clear();\n\n    list.add(\"count\", 12L);\n    buckets = new NamedList<Object>() {{\n      add(\"val\", \"Nike\");\n    }};\n    vals = new NamedList<Object>() {{\n      add(\"numBuckets\", 10L);\n      add(\"allBuckets\", new NamedList<Object>(){{\n        add(\"count\", 12L);\n      }});\n      add(\"before\", new NamedList<Object>(){{\n        add(\"count\", 1L);\n      }});\n      add(\"after\", new NamedList<Object>(){{\n        add(\"count\", 2L);\n      }});\n      add(\"between\", new NamedList<Object>(){{\n        add(\"count\", 9L);\n      }});\n    }};\n    vals.add(\"buckets\", Collections.singletonList(buckets));\n    list.add(\"test\", vals);\n    facet = new NestableJsonFacet(list);\n    assertEquals(12L, facet.getCount());\n    assertEquals(2L, facet.getBucketBasedFacets(\"test\").getAfter());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"304ab40a1554eb7b290d2d6d3cfa3daf743e6b00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["304ab40a1554eb7b290d2d6d3cfa3daf743e6b00"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["304ab40a1554eb7b290d2d6d3cfa3daf743e6b00"],"304ab40a1554eb7b290d2d6d3cfa3daf743e6b00":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}