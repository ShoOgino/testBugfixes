{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","commits":[{"id":"733e01764d06768700a194141bccb026ff24bb29","date":1357643774,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","pathOld":"/dev/null","sourceNew":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values.longs, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values.longs, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values.longs[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","pathOld":"/dev/null","sourceNew":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values.longs, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values.longs, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values.longs[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values.longs, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values.longs, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values.longs[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values.longs, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values.longs, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values.longs[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37b84753dc1f66eba4973779932885fe42cde001","date":1358812051,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#refill().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.byteValueCount();\n      final int blocksSize = iterations * decoder.byteBlockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#refill().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.byteValueCount();\n      final int blocksSize = iterations * decoder.byteBlockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.byteValueCount();\n      final int blocksSize = iterations * decoder.byteBlockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["eda61b1e90b490cc5837200e04c02639a0d272c7"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["733e01764d06768700a194141bccb026ff24bb29"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","37b84753dc1f66eba4973779932885fe42cde001"],"733e01764d06768700a194141bccb026ff24bb29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37b84753dc1f66eba4973779932885fe42cde001":["07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["4e6354dd7c71fe122926fc53d7d29f715b1283db","eda61b1e90b490cc5837200e04c02639a0d272c7"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","733e01764d06768700a194141bccb026ff24bb29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","07155cdd910937cdf6877e48884d5782845c8b8b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"733e01764d06768700a194141bccb026ff24bb29":["eda61b1e90b490cc5837200e04c02639a0d272c7","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"37b84753dc1f66eba4973779932885fe42cde001":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["733e01764d06768700a194141bccb026ff24bb29","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"07155cdd910937cdf6877e48884d5782845c8b8b":["37b84753dc1f66eba4973779932885fe42cde001"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}