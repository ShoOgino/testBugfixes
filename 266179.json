{"path":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","commits":[{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader],int).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders,\n    int termInfosIndexDivisor) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, termInfosIndexDivisor, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader],int).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders,\n    int termInfosIndexDivisor) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, termInfosIndexDivisor, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82ffd58510acfc0e2e788a90a10002e689ec9145","date":1379018753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getDocValuesGen() == infos.info(i).getDocValuesGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getFieldInfosGen() == infos.info(i).getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getDocValuesGen() == infos.info(i).getDocValuesGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","date":1381263930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getFieldInfosGen() == infos.info(i).getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        IOUtils.reThrow(prior);\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getFieldInfosGen() == infos.info(i).getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getFieldInfosGen() == infos.info(i).getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        IOUtils.reThrow(prior);\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getFieldInfosGen() == infos.info(i).getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        IOUtils.reThrow(prior);\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab30d275f8bc9cc015c44bc2932d17cc0bf9d85","date":1400530193,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n\n    System.out.println(\"CYCLE infos=\" + infos.size());\n\n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n      System.out.println(\"  i=\" + i + \" newReaders[i]=\" + newReaders[i]);\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          System.out.println(\"    now in else\");\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getFieldInfosGen() == infos.info(i).getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            System.out.println(\"    has changes\");\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n            System.out.println(\"    done open\");\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              System.out.println(\"  decRef i=\" + i);\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        IOUtils.reThrow(prior);\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getFieldInfosGen() == infos.info(i).getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        IOUtils.reThrow(prior);\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1228ae01d4947434af33f754465a583fb93c23e5","date":1400530612,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getFieldInfosGen() == infos.info(i).getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        IOUtils.reThrow(prior);\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n\n    System.out.println(\"CYCLE infos=\" + infos.size());\n\n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n      System.out.println(\"  i=\" + i + \" newReaders[i]=\" + newReaders[i]);\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          System.out.println(\"    now in else\");\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getFieldInfosGen() == infos.info(i).getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            System.out.println(\"    has changes\");\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n            System.out.println(\"    done open\");\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              System.out.println(\"  decRef i=\" + i);\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        IOUtils.reThrow(prior);\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73cb3e2c71d5364fdb924c39cf9d7d1a25991413","date":1400838672,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      SegmentCommitInfo commitInfo = infos.info(i);\n\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(commitInfo.info.name);\n      SegmentReader oldReader;\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        oldReader = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        oldReader = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (oldReader == null || commitInfo.info.getUseCompoundFile() != oldReader.getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can decRef it safely\n          newReader = new SegmentReader(commitInfo, IOContext.READ);\n          newReaders[i] = newReader;\n        } else {\n          if (oldReader.getSegmentInfo().getDelGen() == commitInfo.getDelGen()\n              && oldReader.getSegmentInfo().getFieldInfosGen() == commitInfo.getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            oldReader.incRef();\n            newReaders[i] = oldReader;\n          } else {\n            // Steal the ref returned by SegmentReader ctor:\n            assert commitInfo.info.dir == oldReader.getSegmentInfo().info.dir;\n\n            // Make a best effort to detect when the app illegally \"rm -rf\" their\n            // index while a reader was open, and then called openIfChanged:\n            boolean illegalDocCountChange = commitInfo.info.getDocCount() != oldReader.getSegmentInfo().info.getDocCount();\n            \n            boolean hasNeitherDeletionsNorUpdates = commitInfo.hasDeletions()== false && commitInfo.hasFieldUpdates() == false;\n\n            boolean deletesWereLost = commitInfo.getDelGen() == -1 && oldReader.getSegmentInfo().getDelGen() != -1;\n\n            if (illegalDocCountChange || hasNeitherDeletionsNorUpdates || deletesWereLost) {\n              throw new IllegalStateException(\"same segment \" + commitInfo.info.name + \" has invalid changes; likely you are re-opening a reader after illegally removing index files yourself and building a new index in their place.  Use IndexWriter.deleteAll or OpenMode.CREATE instead\");\n            }\n\n            if (oldReader.getSegmentInfo().getDelGen() == commitInfo.getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(commitInfo, oldReader, oldReader.getLiveDocs(), oldReader.numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(commitInfo, oldReader);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRefWhileHandlingException(newReaders);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()\n              && newReaders[i].getSegmentInfo().getFieldInfosGen() == infos.info(i).getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            // there are changes to the reader, either liveDocs or DV updates\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions() || infos.info(i).hasFieldUpdates();\n            if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i], newReaders[i].getLiveDocs(), newReaders[i].numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(infos.info(i), newReaders[i]);\n            }\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        IOUtils.reThrow(prior);\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","sourceNew":null,"sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      SegmentCommitInfo commitInfo = infos.info(i);\n\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(commitInfo.info.name);\n      SegmentReader oldReader;\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        oldReader = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        oldReader = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (oldReader == null || commitInfo.info.getUseCompoundFile() != oldReader.getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can decRef it safely\n          newReader = new SegmentReader(commitInfo, IOContext.READ);\n          newReaders[i] = newReader;\n        } else {\n          if (oldReader.getSegmentInfo().getDelGen() == commitInfo.getDelGen()\n              && oldReader.getSegmentInfo().getFieldInfosGen() == commitInfo.getFieldInfosGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            oldReader.incRef();\n            newReaders[i] = oldReader;\n          } else {\n            // Steal the ref returned by SegmentReader ctor:\n            assert commitInfo.info.dir == oldReader.getSegmentInfo().info.dir;\n\n            // Make a best effort to detect when the app illegally \"rm -rf\" their\n            // index while a reader was open, and then called openIfChanged:\n            boolean illegalDocCountChange = commitInfo.info.getDocCount() != oldReader.getSegmentInfo().info.getDocCount();\n            \n            boolean hasNeitherDeletionsNorUpdates = commitInfo.hasDeletions()== false && commitInfo.hasFieldUpdates() == false;\n\n            boolean deletesWereLost = commitInfo.getDelGen() == -1 && oldReader.getSegmentInfo().getDelGen() != -1;\n\n            if (illegalDocCountChange || hasNeitherDeletionsNorUpdates || deletesWereLost) {\n              throw new IllegalStateException(\"same segment \" + commitInfo.info.name + \" has invalid changes; likely you are re-opening a reader after illegally removing index files yourself and building a new index in their place.  Use IndexWriter.deleteAll or OpenMode.CREATE instead\");\n            }\n\n            if (oldReader.getSegmentInfo().getDelGen() == commitInfo.getDelGen()) {\n              // only DV updates\n              newReaders[i] = new SegmentReader(commitInfo, oldReader, oldReader.getLiveDocs(), oldReader.numDocs());\n            } else {\n              // both DV and liveDocs have changed\n              newReaders[i] = new SegmentReader(commitInfo, oldReader);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRefWhileHandlingException(newReaders);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["8435160e9702b19398118ddf76b61c846612b6a4"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["82ffd58510acfc0e2e788a90a10002e689ec9145"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"82ffd58510acfc0e2e788a90a10002e689ec9145":["a45bec74b98f6fc05f52770cfb425739e6563960"],"a45bec74b98f6fc05f52770cfb425739e6563960":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8435160e9702b19398118ddf76b61c846612b6a4":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["73cb3e2c71d5364fdb924c39cf9d7d1a25991413"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73cb3e2c71d5364fdb924c39cf9d7d1a25991413":["1228ae01d4947434af33f754465a583fb93c23e5"],"1228ae01d4947434af33f754465a583fb93c23e5":["1ab30d275f8bc9cc015c44bc2932d17cc0bf9d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ab30d275f8bc9cc015c44bc2932d17cc0bf9d85":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["8435160e9702b19398118ddf76b61c846612b6a4"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1ab30d275f8bc9cc015c44bc2932d17cc0bf9d85"],"82ffd58510acfc0e2e788a90a10002e689ec9145":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"a45bec74b98f6fc05f52770cfb425739e6563960":["82ffd58510acfc0e2e788a90a10002e689ec9145"],"8435160e9702b19398118ddf76b61c846612b6a4":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"73cb3e2c71d5364fdb924c39cf9d7d1a25991413":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"1228ae01d4947434af33f754465a583fb93c23e5":["73cb3e2c71d5364fdb924c39cf9d7d1a25991413"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"1ab30d275f8bc9cc015c44bc2932d17cc0bf9d85":["1228ae01d4947434af33f754465a583fb93c23e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}