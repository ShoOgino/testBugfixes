{"path":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteDirect(Directory,List).mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteDirect(Directory,List).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Blindly delete the files used by the specific segments,\n   * with no reference counting and no retry.  This is only\n   * currently used by writer to delete its RAM segments\n   * from a RAMDirectory.\n   */\n  public void deleteDirect(Directory otherDir, List segments) throws IOException {\n    int size = segments.size();\n    for(int i=0;i<size;i++) {\n      List toDelete = ((SegmentInfo) segments.get(i)).files();\n      int size2 = toDelete.size();\n      for(int j=0;j<size2;j++) {\n        otherDir.deleteFile((String) toDelete.get(j));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b685e89f45e34ea31f9ca89912e4f29038818ff6","date":1173986546,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteDirect(Directory,List).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteDirect(Directory,List).mjava","sourceNew":"  /**\n   * Blindly delete the files used by the specific segments,\n   * with no reference counting and no retry.  This is only\n   * currently used by writer to delete its RAM segments\n   * from a RAMDirectory.\n   */\n  public void deleteDirect(Directory otherDir, List segments) throws IOException {\n    int size = segments.size();\n    for(int i=0;i<size;i++) {\n      List filestoDelete = ((SegmentInfo) segments.get(i)).files();\n      int size2 = filestoDelete.size();\n      for(int j=0;j<size2;j++) {\n        otherDir.deleteFile((String) filestoDelete.get(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Blindly delete the files used by the specific segments,\n   * with no reference counting and no retry.  This is only\n   * currently used by writer to delete its RAM segments\n   * from a RAMDirectory.\n   */\n  public void deleteDirect(Directory otherDir, List segments) throws IOException {\n    int size = segments.size();\n    for(int i=0;i<size;i++) {\n      List toDelete = ((SegmentInfo) segments.get(i)).files();\n      int size2 = toDelete.size();\n      for(int j=0;j<size2;j++) {\n        otherDir.deleteFile((String) toDelete.get(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5","date":1196805804,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#deleteDirect(Directory,List).mjava","sourceNew":null,"sourceOld":"  /**\n   * Blindly delete the files used by the specific segments,\n   * with no reference counting and no retry.  This is only\n   * currently used by writer to delete its RAM segments\n   * from a RAMDirectory.\n   */\n  public void deleteDirect(Directory otherDir, List segments) throws IOException {\n    int size = segments.size();\n    for(int i=0;i<size;i++) {\n      List filestoDelete = ((SegmentInfo) segments.get(i)).files();\n      int size2 = filestoDelete.size();\n      for(int j=0;j<size2;j++) {\n        otherDir.deleteFile((String) filestoDelete.get(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["8b6187898fc4413ccd18229711786550a280383c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"]},"commit2Childs":{"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}