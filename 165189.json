{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","commits":[{"id":"0eff89b16ebd0046c839c5d02ee44500be5c7886","date":1355766557,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["0eff89b16ebd0046c839c5d02ee44500be5c7886"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1cfa38e36fa296bb93d77df7d5556257dffa4535"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1cfa38e36fa296bb93d77df7d5556257dffa4535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}