{"path":"lucene/backwards/src/java/org/apache/lucene/index/TermsHashPerField#shrinkHash(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/TermsHashPerField#shrinkHash(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/TermsHashPerField#shrinkHash(int).mjava","sourceNew":"  void shrinkHash(int targetSize) {\n    assert postingsCompacted || numPostings == 0;\n\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = postingsHash.length;\n    while(newSize >= 8 && newSize/4 > targetSize) {\n      newSize /= 2;\n    }\n\n    if (newSize != postingsHash.length) {\n      postingsHash = new RawPostingList[newSize];\n      postingsHashSize = newSize;\n      postingsHashHalfSize = newSize/2;\n      postingsHashMask = newSize-1;\n    }\n  }\n\n","sourceOld":"  void shrinkHash(int targetSize) {\n    assert postingsCompacted || numPostings == 0;\n\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = postingsHash.length;\n    while(newSize >= 8 && newSize/4 > targetSize) {\n      newSize /= 2;\n    }\n\n    if (newSize != postingsHash.length) {\n      postingsHash = new RawPostingList[newSize];\n      postingsHashSize = newSize;\n      postingsHashHalfSize = newSize/2;\n      postingsHashMask = newSize-1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/TermsHashPerField#shrinkHash(int).mjava","sourceNew":null,"sourceOld":"  void shrinkHash(int targetSize) {\n    assert postingsCompacted || numPostings == 0;\n\n    // Cannot use ArrayUtil.shrink because we require power\n    // of 2:\n    int newSize = postingsHash.length;\n    while(newSize >= 8 && newSize/4 > targetSize) {\n      newSize /= 2;\n    }\n\n    if (newSize != postingsHash.length) {\n      postingsHash = new RawPostingList[newSize];\n      postingsHashSize = newSize;\n      postingsHashHalfSize = newSize/2;\n      postingsHashMask = newSize-1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}