{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  @Override\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  @Override\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  @Override\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  @Override\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}