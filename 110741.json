{"path":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","commits":[{"id":"a0a506fe165b26e024afa1aec8a4a7d758e837ff","date":1410971446,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // snappuller & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // snappuller & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // IndexFetcher & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // snappuller & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // IndexFetcher & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // snappuller & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // IndexFetcher & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // IndexFetcher & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // IndexFetcher & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // IndexFetcher & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":["9b346c75aa26766db314a531e6e7dd87a3a19a2a","d334fd45eadb0b96170767a921bb579f54519b06"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc37eb63edc0a1db0d74e5f531a60b987f98f327","date":1531827749,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir;\n    if (useMockDirectoryWrapper) dir = LuceneTestCase.newMockDirectory();\n    else dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir;\n    if (useMockDirectoryWrapper) dir = LuceneTestCase.newMockDirectory();\n    else dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc37eb63edc0a1db0d74e5f531a60b987f98f327":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"5a207d19eac354d649c3f0e2cce070017c78125e":["20f6b7cff3771384f27af0f059795d7e64aff6b9","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["20f6b7cff3771384f27af0f059795d7e64aff6b9","b470f36a9372c97283360b1304eacbde22df6c0d"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["5a207d19eac354d649c3f0e2cce070017c78125e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5a207d19eac354d649c3f0e2cce070017c78125e","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0a506fe165b26e024afa1aec8a4a7d758e837ff","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"b470f36a9372c97283360b1304eacbde22df6c0d":["20f6b7cff3771384f27af0f059795d7e64aff6b9","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc37eb63edc0a1db0d74e5f531a60b987f98f327"]},"commit2Childs":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"fc37eb63edc0a1db0d74e5f531a60b987f98f327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a207d19eac354d649c3f0e2cce070017c78125e":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["fc37eb63edc0a1db0d74e5f531a60b987f98f327","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}