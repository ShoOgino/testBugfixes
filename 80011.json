{"path":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPChildrenWoId().mjava","commits":[{"id":"0734346f2ba692d6dbf402faa9e19f958bbd0fc2","date":1531277981,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPChildrenWoId().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeeplyNestedURPChildrenWoId() throws Exception {\n    final String rootId = \"1\";\n    final String childKey = \"grandChild\";\n    final String expectedId = rootId + \"/children#1/\" + childKey + NUM_SEP_CHAR + SINGLE_VAL_CHAR;\n    SolrInputDocument noIdChildren = sdoc(\"id\", rootId, \"children\", sdocs(sdoc(\"name_s\", \"Yaz\"), sdoc(\"name_s\", \"Jazz\", childKey, sdoc(\"name_s\", \"Gaz\"))));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = noIdChildren;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n    List children = (List) noIdChildren.get(\"children\").getValues();\n    SolrInputDocument idLessChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(childKey).getValue();\n    assertTrue(\"Id less child did not get an Id\", idLessChild.containsKey(\"id\"));\n    assertEquals(\"Id less child was assigned an unexpected id\", expectedId, idLessChild.getFieldValue(\"id\").toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPChildrenWoId().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeeplyNestedURPChildrenWoId() throws Exception {\n    final String rootId = \"1\";\n    final String childKey = \"grandChild\";\n    final String expectedId = rootId + \"/children#1/\" + childKey + NUM_SEP_CHAR + SINGLE_VAL_CHAR;\n    SolrInputDocument noIdChildren = sdoc(\"id\", rootId, \"children\", sdocs(sdoc(\"name_s\", \"Yaz\"), sdoc(\"name_s\", \"Jazz\", childKey, sdoc(\"name_s\", \"Gaz\"))));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = noIdChildren;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n    List children = (List) noIdChildren.get(\"children\").getValues();\n    SolrInputDocument idLessChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(childKey).getValue();\n    assertTrue(\"Id less child did not get an Id\", idLessChild.containsKey(\"id\"));\n    assertEquals(\"Id less child was assigned an unexpected id\", expectedId, idLessChild.getFieldValue(\"id\").toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPChildrenWoId().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeeplyNestedURPChildrenWoId() throws Exception {\n    final String rootId = \"1\";\n    final String childKey = \"grandChild\";\n    final String expectedId = rootId + \"/children#1/\" + childKey + NUM_SEP_CHAR + SINGLE_VAL_CHAR;\n    SolrInputDocument noIdChildren = sdoc(\"id\", rootId, \"children\", sdocs(sdoc(\"name_s\", \"Yaz\"), sdoc(\"name_s\", \"Jazz\", childKey, sdoc(\"name_s\", \"Gaz\"))));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = noIdChildren;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n    List children = (List) noIdChildren.get(\"children\").getValues();\n    SolrInputDocument idLessChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(childKey).getValue();\n    assertTrue(\"Id less child did not get an Id\", idLessChild.containsKey(\"id\"));\n    assertEquals(\"Id less child was assigned an unexpected id\", expectedId, idLessChild.getFieldValue(\"id\").toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPChildrenWoId().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPChildrenWoId().mjava","sourceNew":"  @Test\n  public void testDeeplyNestedURPChildrenWoId() throws Exception {\n    final String rootId = \"1\";\n    final String childKey = \"grandChild\";\n    final String expectedId = rootId + \"/children#1/\" + childKey + NUM_SEP_CHAR + SINGLE_VAL_CHAR;\n    SolrInputDocument noIdChildren = sdoc(\"id\", rootId, \"children\", sdocs(sdoc(\"name_s\", \"Yaz\"), sdoc(\"name_s\", \"Jazz\", childKey, sdoc(\"name_s\", \"Gaz\"))));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = noIdChildren;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n    @SuppressWarnings({\"rawtypes\"})\n    List children = (List) noIdChildren.get(\"children\").getValues();\n    SolrInputDocument idLessChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(childKey).getValue();\n    assertTrue(\"Id less child did not get an Id\", idLessChild.containsKey(\"id\"));\n    assertEquals(\"Id less child was assigned an unexpected id\", expectedId, idLessChild.getFieldValue(\"id\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testDeeplyNestedURPChildrenWoId() throws Exception {\n    final String rootId = \"1\";\n    final String childKey = \"grandChild\";\n    final String expectedId = rootId + \"/children#1/\" + childKey + NUM_SEP_CHAR + SINGLE_VAL_CHAR;\n    SolrInputDocument noIdChildren = sdoc(\"id\", rootId, \"children\", sdocs(sdoc(\"name_s\", \"Yaz\"), sdoc(\"name_s\", \"Jazz\", childKey, sdoc(\"name_s\", \"Gaz\"))));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = noIdChildren;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n    List children = (List) noIdChildren.get(\"children\").getValues();\n    SolrInputDocument idLessChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(childKey).getValue();\n    assertTrue(\"Id less child did not get an Id\", idLessChild.containsKey(\"id\"));\n    assertEquals(\"Id less child was assigned an unexpected id\", expectedId, idLessChild.getFieldValue(\"id\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0734346f2ba692d6dbf402faa9e19f958bbd0fc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0734346f2ba692d6dbf402faa9e19f958bbd0fc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["0734346f2ba692d6dbf402faa9e19f958bbd0fc2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0734346f2ba692d6dbf402faa9e19f958bbd0fc2"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0734346f2ba692d6dbf402faa9e19f958bbd0fc2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0734346f2ba692d6dbf402faa9e19f958bbd0fc2":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e98520789adb1d5ad05afb4956eca0944a929688","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}