{"path":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#UTF16toUTF8(CharSequence,int,int,byte[],int).mjava","commits":[{"id":"1b52553b383e6cf68c783d177daafd0b32d6347a","date":1327690866,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#UTF16toUTF8(CharSequence,int,int,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes UTF8 into the byte array, starting at offset.  The caller should ensure that\n   * there is enough space for the worst-case scenario.\n   * @returns the number of bytes written\n   */\n  public static int UTF16toUTF8(CharSequence s, int offset, int len, byte[] result, int resultOffset) {\n    final int end = offset + len;\n\n    int upto = resultOffset;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        result[upto++] = (byte) code;\n      else if (code < 0x800) {\n        result[upto++] = (byte) (0xC0 | (code >> 6));\n        result[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        result[upto++] = (byte)(0xE0 | (code >> 12));\n        result[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        result[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {\n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            result[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            result[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            result[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            result[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        result[upto++] = (byte) 0xEF;\n        result[upto++] = (byte) 0xBF;\n        result[upto++] = (byte) 0xBD;\n      }\n    }\n\n    return upto - resultOffset;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"532c28866d649dde21af369d1ac11cd55fdc0279","date":1327697595,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#UTF16toUTF8(CharSequence,int,int,byte[],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#UTF16toUTF8(CharSequence,int,int,byte[],int).mjava","sourceNew":"  /** Writes UTF8 into the byte array, starting at offset.  The caller should ensure that\n   * there is enough space for the worst-case scenario.\n   * @return the number of bytes written\n   */\n  public static int UTF16toUTF8(CharSequence s, int offset, int len, byte[] result, int resultOffset) {\n    final int end = offset + len;\n\n    int upto = resultOffset;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        result[upto++] = (byte) code;\n      else if (code < 0x800) {\n        result[upto++] = (byte) (0xC0 | (code >> 6));\n        result[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        result[upto++] = (byte)(0xE0 | (code >> 12));\n        result[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        result[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {\n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            result[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            result[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            result[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            result[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        result[upto++] = (byte) 0xEF;\n        result[upto++] = (byte) 0xBF;\n        result[upto++] = (byte) 0xBD;\n      }\n    }\n\n    return upto - resultOffset;\n  }\n\n","sourceOld":"  /** Writes UTF8 into the byte array, starting at offset.  The caller should ensure that\n   * there is enough space for the worst-case scenario.\n   * @returns the number of bytes written\n   */\n  public static int UTF16toUTF8(CharSequence s, int offset, int len, byte[] result, int resultOffset) {\n    final int end = offset + len;\n\n    int upto = resultOffset;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        result[upto++] = (byte) code;\n      else if (code < 0x800) {\n        result[upto++] = (byte) (0xC0 | (code >> 6));\n        result[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        result[upto++] = (byte)(0xE0 | (code >> 12));\n        result[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        result[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {\n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            result[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            result[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            result[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            result[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        result[upto++] = (byte) 0xEF;\n        result[upto++] = (byte) 0xBF;\n        result[upto++] = (byte) 0xBD;\n      }\n    }\n\n    return upto - resultOffset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#UTF16toUTF8(CharSequence,int,int,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes UTF8 into the byte array, starting at offset.  The caller should ensure that\n   * there is enough space for the worst-case scenario.\n   * @return the number of bytes written\n   */\n  public static int UTF16toUTF8(CharSequence s, int offset, int len, byte[] result, int resultOffset) {\n    final int end = offset + len;\n\n    int upto = resultOffset;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        result[upto++] = (byte) code;\n      else if (code < 0x800) {\n        result[upto++] = (byte) (0xC0 | (code >> 6));\n        result[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        result[upto++] = (byte)(0xE0 | (code >> 12));\n        result[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        result[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {\n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            result[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            result[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            result[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            result[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        result[upto++] = (byte) 0xEF;\n        result[upto++] = (byte) 0xBF;\n        result[upto++] = (byte) 0xBD;\n      }\n    }\n\n    return upto - resultOffset;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#UTF16toUTF8(CharSequence,int,int,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes UTF8 into the byte array, starting at offset.  The caller should ensure that\n   * there is enough space for the worst-case scenario.\n   * @return the number of bytes written\n   */\n  public static int UTF16toUTF8(CharSequence s, int offset, int len, byte[] result, int resultOffset) {\n    final int end = offset + len;\n\n    int upto = resultOffset;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        result[upto++] = (byte) code;\n      else if (code < 0x800) {\n        result[upto++] = (byte) (0xC0 | (code >> 6));\n        result[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        result[upto++] = (byte)(0xE0 | (code >> 12));\n        result[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        result[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {\n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            result[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            result[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            result[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            result[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        result[upto++] = (byte) 0xEF;\n        result[upto++] = (byte) 0xBF;\n        result[upto++] = (byte) 0xBD;\n      }\n    }\n\n    return upto - resultOffset;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b52553b383e6cf68c783d177daafd0b32d6347a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"532c28866d649dde21af369d1ac11cd55fdc0279":["1b52553b383e6cf68c783d177daafd0b32d6347a"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","532c28866d649dde21af369d1ac11cd55fdc0279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["532c28866d649dde21af369d1ac11cd55fdc0279"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","532c28866d649dde21af369d1ac11cd55fdc0279"]},"commit2Childs":{"1b52553b383e6cf68c783d177daafd0b32d6347a":["532c28866d649dde21af369d1ac11cd55fdc0279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b52553b383e6cf68c783d177daafd0b32d6347a","fd92b8bcc88e969302510acf77bd6970da3994c4","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"532c28866d649dde21af369d1ac11cd55fdc0279":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}