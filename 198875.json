{"path":"src/test/org/apache/solr/highlight/HighlighterTest#testTermVecHighlight().mjava","commits":[{"id":"218fde9d650f817f30726670473f41b564398acd","date":1181882189,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testTermVecHighlight().mjava","pathOld":"src/test/org/apache/solr/HighlighterTest#testTermVecHighlight().mjava","sourceNew":"  public void testTermVecHighlight() {\n\n    // do summarization using term vectors\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"tv_text\");\n    args.put(\"hl.snippets\", \"2\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\",0,200,args);\n    \n    assertU(adoc(\"tv_text\", \"a long days night this should be a piece of text which is is is is is is is is is is is is is is is is is is is is is is is is isis is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is sufficiently lengthly to produce multiple fragments which are not concatenated at all--we want two disjoint long fragments.\", \n                 \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"tv_text:long\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\",\n            \"//arr[@name='tv_text']/str[.=' <em>long</em> fragments.']\"\n            );\n  }\n\n","sourceOld":"  public void testTermVecHighlight() {\n\n    // do summarization using term vectors\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"tv_text\");\n    args.put(\"hl.snippets\", \"2\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\",0,200,args);\n    \n    assertU(adoc(\"tv_text\", \"a long days night this should be a piece of text which is is is is is is is is is is is is is is is is is is is is is is is is isis is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is sufficiently lengthly to produce multiple fragments which are not concatenated at all--we want two disjoint long fragments.\", \n                 \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"tv_text:long\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\",\n            \"//arr[@name='tv_text']/str[.=' <em>long</em> fragments.']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1a2d7b9584088df2db62e5e4f42dc23b357de8e","date":1183506271,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testTermVecHighlight().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testTermVecHighlight().mjava","sourceNew":"  public void testTermVecHighlight() {\n\n    // do summarization using term vectors\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"tv_text\");\n    args.put(\"hl.snippets\", \"2\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\",0,200,args);\n    \n    assertU(adoc(\"tv_text\", LONG_TEXT, \n                 \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"tv_text:long\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\",\n            \"//arr[@name='tv_text']/str[.=' <em>long</em> fragments.']\"\n            );\n  }\n\n","sourceOld":"  public void testTermVecHighlight() {\n\n    // do summarization using term vectors\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"tv_text\");\n    args.put(\"hl.snippets\", \"2\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\",0,200,args);\n    \n    assertU(adoc(\"tv_text\", \"a long days night this should be a piece of text which is is is is is is is is is is is is is is is is is is is is is is is is isis is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is is sufficiently lengthly to produce multiple fragments which are not concatenated at all--we want two disjoint long fragments.\", \n                 \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"tv_text:long\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\",\n            \"//arr[@name='tv_text']/str[.=' <em>long</em> fragments.']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5df1793b9dbc0f17ba1d1dddb8a15748fdc3aaf3","date":1263013040,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testTermVecHighlight().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testTermVecHighlight().mjava","sourceNew":"  public void testTermVecHighlight() {\n\n    // do summarization using term vectors\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"tv_text\");\n    args.put(\"hl.snippets\", \"2\");\n    args.put(\"hl.useHighlighter\", \"true\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\",0,200,args);\n    \n    assertU(adoc(\"tv_text\", LONG_TEXT, \n                 \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"tv_text:long\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\",\n            \"//arr[@name='tv_text']/str[.=' <em>long</em> fragments.']\"\n            );\n  }\n\n","sourceOld":"  public void testTermVecHighlight() {\n\n    // do summarization using term vectors\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"tv_text\");\n    args.put(\"hl.snippets\", \"2\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\",0,200,args);\n    \n    assertU(adoc(\"tv_text\", LONG_TEXT, \n                 \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"tv_text:long\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\",\n            \"//arr[@name='tv_text']/str[.=' <em>long</em> fragments.']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aef8916f4d0ccac5fe47730f8de5467a54358eb6","date":1265643975,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testTermVecHighlight().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testTermVecHighlight().mjava","sourceNew":"  public void testTermVecHighlight() {\n\n    // do summarization using term vectors\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"tv_text\");\n    args.put(\"hl.snippets\", \"2\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\",0,200,args);\n    \n    assertU(adoc(\"tv_text\", LONG_TEXT, \n                 \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"tv_text:long\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\",\n            \"//arr[@name='tv_text']/str[.=' <em>long</em> fragments.']\"\n            );\n  }\n\n","sourceOld":"  public void testTermVecHighlight() {\n\n    // do summarization using term vectors\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"tv_text\");\n    args.put(\"hl.snippets\", \"2\");\n    args.put(\"hl.useHighlighter\", \"true\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\",0,200,args);\n    \n    assertU(adoc(\"tv_text\", LONG_TEXT, \n                 \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"tv_text:long\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\",\n            \"//arr[@name='tv_text']/str[.=' <em>long</em> fragments.']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testTermVecHighlight().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testTermVecHighlight().mjava","sourceNew":"  public void testTermVecHighlight() {\n\n    // do summarization using term vectors\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"tv_text\");\n    args.put(\"hl.snippets\", \"2\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\",0,200,args);\n    \n    assertU(adoc(\"tv_text\", LONG_TEXT, \n                 \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"tv_text:long\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\",\n            \"//arr[@name='tv_text']/str[.=' <em>long</em> fragments.']\"\n            );\n  }\n\n","sourceOld":"  public void testTermVecHighlight() {\n\n    // do summarization using term vectors\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fl\", \"tv_text\");\n    args.put(\"hl.snippets\", \"2\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\",0,200,args);\n    \n    assertU(adoc(\"tv_text\", LONG_TEXT, \n                 \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"tv_text:long\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='tv_text']/str[.='a <em>long</em> days night this should be a piece of text which']\",\n            \"//arr[@name='tv_text']/str[.=' <em>long</em> fragments.']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"218fde9d650f817f30726670473f41b564398acd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"aef8916f4d0ccac5fe47730f8de5467a54358eb6":["5df1793b9dbc0f17ba1d1dddb8a15748fdc3aaf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["aef8916f4d0ccac5fe47730f8de5467a54358eb6"],"5df1793b9dbc0f17ba1d1dddb8a15748fdc3aaf3":["f1a2d7b9584088df2db62e5e4f42dc23b357de8e"],"f1a2d7b9584088df2db62e5e4f42dc23b357de8e":["218fde9d650f817f30726670473f41b564398acd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"218fde9d650f817f30726670473f41b564398acd":["f1a2d7b9584088df2db62e5e4f42dc23b357de8e"],"aef8916f4d0ccac5fe47730f8de5467a54358eb6":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["218fde9d650f817f30726670473f41b564398acd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5df1793b9dbc0f17ba1d1dddb8a15748fdc3aaf3":["aef8916f4d0ccac5fe47730f8de5467a54358eb6"],"f1a2d7b9584088df2db62e5e4f42dc23b357de8e":["5df1793b9dbc0f17ba1d1dddb8a15748fdc3aaf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}