{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    assureMatchVersion();\n    dictionaryArg = args.remove(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new IllegalArgumentException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    affixFile = args.remove(PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    strictAffixParsing = getBoolean(args, PARAM_STRICT_AFFIX_PARSING, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dcae30df9fe9300569835aef42ec65802c7c0afb","date":1364859933,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    assureMatchVersion();\n    dictionaryArg = require(args, PARAM_DICTIONARY);\n    affixFile = get(args, PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    strictAffixParsing = getBoolean(args, PARAM_STRICT_AFFIX_PARSING, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    assureMatchVersion();\n    dictionaryArg = args.remove(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new IllegalArgumentException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    affixFile = args.remove(PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    strictAffixParsing = getBoolean(args, PARAM_STRICT_AFFIX_PARSING, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"765dd1af5470eb0ccafa626a8442dec4b7495a19","date":1374166958,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    assureMatchVersion();\n    dictionaryArg = require(args, PARAM_DICTIONARY);\n    affixFile = get(args, PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    strictAffixParsing = getBoolean(args, PARAM_STRICT_AFFIX_PARSING, true);\n    recursionCap = getInt(args, PARAM_RECURSION_CAP, 2);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    assureMatchVersion();\n    dictionaryArg = require(args, PARAM_DICTIONARY);\n    affixFile = get(args, PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    strictAffixParsing = getBoolean(args, PARAM_STRICT_AFFIX_PARSING, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    assureMatchVersion();\n    dictionaryArg = require(args, PARAM_DICTIONARY);\n    affixFile = get(args, PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    strictAffixParsing = getBoolean(args, PARAM_STRICT_AFFIX_PARSING, true);\n    recursionCap = getInt(args, PARAM_RECURSION_CAP, 2);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    assureMatchVersion();\n    dictionaryArg = require(args, PARAM_DICTIONARY);\n    affixFile = get(args, PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    strictAffixParsing = getBoolean(args, PARAM_STRICT_AFFIX_PARSING, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    dictionaryFiles = require(args, PARAM_DICTIONARY);\n    affixFile = get(args, PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    recursionCap = getInt(args, PARAM_RECURSION_CAP, 2);\n    longestOnly = getBoolean(args, PARAM_LONGEST_ONLY, false);\n    // this isnt necessary: we properly load all dictionaries.\n    // but recognize and ignore for back compat\n    getBoolean(args, \"strictAffixParsing\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    assureMatchVersion();\n    dictionaryArg = require(args, PARAM_DICTIONARY);\n    affixFile = get(args, PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    strictAffixParsing = getBoolean(args, PARAM_STRICT_AFFIX_PARSING, true);\n    recursionCap = getInt(args, PARAM_RECURSION_CAP, 2);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    dictionaryFiles = require(args, PARAM_DICTIONARY);\n    affixFile = get(args, PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    recursionCap = getInt(args, PARAM_RECURSION_CAP, 2);\n    longestOnly = getBoolean(args, PARAM_LONGEST_ONLY, false);\n    // this isnt necessary: we properly load all dictionaries.\n    // but recognize and ignore for back compat\n    getBoolean(args, \"strictAffixParsing\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    assureMatchVersion();\n    dictionaryArg = require(args, PARAM_DICTIONARY);\n    affixFile = get(args, PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    strictAffixParsing = getBoolean(args, PARAM_STRICT_AFFIX_PARSING, true);\n    recursionCap = getInt(args, PARAM_RECURSION_CAP, 2);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","dcae30df9fe9300569835aef42ec65802c7c0afb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","date":1393724838,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#HunspellStemFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    dictionaryFiles = require(args, PARAM_DICTIONARY);\n    affixFile = get(args, PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    longestOnly = getBoolean(args, PARAM_LONGEST_ONLY, false);\n    // this isnt necessary: we properly load all dictionaries.\n    // but recognize and ignore for back compat\n    getBoolean(args, \"strictAffixParsing\", true);\n    // this isn't necessary: multi-stage stripping is fixed and \n    // flags like COMPLEXPREFIXES in the data itself control this.\n    // but recognize and ignore for back compat\n    getInt(args, \"recursionCap\", 0);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new HunspellStemFilterFactory */\n  public HunspellStemFilterFactory(Map<String,String> args) {\n    super(args);\n    dictionaryFiles = require(args, PARAM_DICTIONARY);\n    affixFile = get(args, PARAM_AFFIX);\n    ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);\n    recursionCap = getInt(args, PARAM_RECURSION_CAP, 2);\n    longestOnly = getBoolean(args, PARAM_LONGEST_ONLY, false);\n    // this isnt necessary: we properly load all dictionaries.\n    // but recognize and ignore for back compat\n    getBoolean(args, \"strictAffixParsing\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":["765dd1af5470eb0ccafa626a8442dec4b7495a19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["765dd1af5470eb0ccafa626a8442dec4b7495a19","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["765dd1af5470eb0ccafa626a8442dec4b7495a19"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"765dd1af5470eb0ccafa626a8442dec4b7495a19":["dcae30df9fe9300569835aef42ec65802c7c0afb"]},"commit2Childs":{"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","765dd1af5470eb0ccafa626a8442dec4b7495a19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"765dd1af5470eb0ccafa626a8442dec4b7495a19":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}