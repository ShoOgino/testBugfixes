{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusRolesTest().mjava","commits":[{"id":"2434ed0b85e169536d867d4445ae92599339bdad","date":1403868554,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusRolesTest().mjava","pathOld":"/dev/null","sourceNew":"  private void clusterStatusRolesTest() throws Exception  {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Replica replica = client.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDROLE.toString());\n      params.set(\"node\", replica.getNodeName());\n      params.set(\"role\", \"overseer\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n      assertNotNull(\"Role information should not be null\", roles);\n      List<String> overseer = (List<String>) roles.get(\"overseer\");\n      assertNotNull(overseer);\n      assertEquals(1, overseer.size());\n      assertTrue(overseer.contains(replica.getNodeName()));\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusRolesTest().mjava","sourceNew":"  private void clusterStatusRolesTest() throws Exception  {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      client.connect();\n      Replica replica = client.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDROLE.toString());\n      params.set(\"node\", replica.getNodeName());\n      params.set(\"role\", \"overseer\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n      assertNotNull(\"Role information should not be null\", roles);\n      List<String> overseer = (List<String>) roles.get(\"overseer\");\n      assertNotNull(overseer);\n      assertEquals(1, overseer.size());\n      assertTrue(overseer.contains(replica.getNodeName()));\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void clusterStatusRolesTest() throws Exception  {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Replica replica = client.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDROLE.toString());\n      params.set(\"node\", replica.getNodeName());\n      params.set(\"role\", \"overseer\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n      assertNotNull(\"Role information should not be null\", roles);\n      List<String> overseer = (List<String>) roles.get(\"overseer\");\n      assertNotNull(overseer);\n      assertEquals(1, overseer.size());\n      assertTrue(overseer.contains(replica.getNodeName()));\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusRolesTest().mjava","sourceNew":"  private void clusterStatusRolesTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Replica replica = client.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDROLE.toString());\n      params.set(\"node\", replica.getNodeName());\n      params.set(\"role\", \"overseer\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n      assertNotNull(\"Role information should not be null\", roles);\n      List<String> overseer = (List<String>) roles.get(\"overseer\");\n      assertNotNull(overseer);\n      assertEquals(1, overseer.size());\n      assertTrue(overseer.contains(replica.getNodeName()));\n    }\n  }\n\n","sourceOld":"  private void clusterStatusRolesTest() throws Exception  {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      client.connect();\n      Replica replica = client.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDROLE.toString());\n      params.set(\"node\", replica.getNodeName());\n      params.set(\"role\", \"overseer\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n      assertNotNull(\"Role information should not be null\", roles);\n      List<String> overseer = (List<String>) roles.get(\"overseer\");\n      assertNotNull(overseer);\n      assertEquals(1, overseer.size());\n      assertTrue(overseer.contains(replica.getNodeName()));\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusRolesTest().mjava","sourceNew":"  private void clusterStatusRolesTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Replica replica = client.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDROLE.toString());\n      params.set(\"node\", replica.getNodeName());\n      params.set(\"role\", \"overseer\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n      assertNotNull(\"Role information should not be null\", roles);\n      List<String> overseer = (List<String>) roles.get(\"overseer\");\n      assertNotNull(overseer);\n      assertEquals(1, overseer.size());\n      assertTrue(overseer.contains(replica.getNodeName()));\n    }\n  }\n\n","sourceOld":"  private void clusterStatusRolesTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Replica replica = client.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDROLE.toString());\n      params.set(\"node\", replica.getNodeName());\n      params.set(\"role\", \"overseer\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n      assertNotNull(\"Role information should not be null\", roles);\n      List<String> overseer = (List<String>) roles.get(\"overseer\");\n      assertNotNull(overseer);\n      assertEquals(1, overseer.size());\n      assertTrue(overseer.contains(replica.getNodeName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusRolesTest().mjava","sourceNew":"  private void clusterStatusRolesTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Replica replica = client.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDROLE.toString());\n      params.set(\"node\", replica.getNodeName());\n      params.set(\"role\", \"overseer\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n      assertNotNull(\"Role information should not be null\", roles);\n      List<String> overseer = (List<String>) roles.get(\"overseer\");\n      assertNotNull(overseer);\n      assertEquals(1, overseer.size());\n      assertTrue(overseer.contains(replica.getNodeName()));\n    }\n  }\n\n","sourceOld":"  private void clusterStatusRolesTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Replica replica = client.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDROLE.toString());\n      params.set(\"node\", replica.getNodeName());\n      params.set(\"role\", \"overseer\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, Object> roles = (Map<String, Object>) cluster.get(\"roles\");\n      assertNotNull(\"Role information should not be null\", roles);\n      List<String> overseer = (List<String>) roles.get(\"overseer\");\n      assertNotNull(overseer);\n      assertEquals(1, overseer.size());\n      assertTrue(overseer.contains(replica.getNodeName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cc3b13b430571c2e169f98fe38e1e7666f88522d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["2434ed0b85e169536d867d4445ae92599339bdad"],"2434ed0b85e169536d867d4445ae92599339bdad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2434ed0b85e169536d867d4445ae92599339bdad"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"2434ed0b85e169536d867d4445ae92599339bdad":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}