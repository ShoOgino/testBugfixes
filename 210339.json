{"path":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","commits":[{"id":"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0","date":1102865269,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(super.getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db","date":1110223587,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(super.getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","sourceOld":"  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(super.getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e56e16c6c90a7d4b50aead1f331802fc4dabed16","date":1175738806,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","sourceOld":"  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(super.getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List clauses = new ArrayList();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","sourceOld":"  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc138e05008664b5e01dc83f6ad95bd73b91c5","date":1256054789,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","sourceOld":"  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List clauses = new ArrayList();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985","date":1262018769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","sourceOld":"  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","sourceOld":"  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e56e16c6c90a7d4b50aead1f331802fc4dabed16":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["e56e16c6c90a7d4b50aead1f331802fc4dabed16"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"]},"commit2Childs":{"e56e16c6c90a7d4b50aead1f331802fc4dabed16":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["e56e16c6c90a7d4b50aead1f331802fc4dabed16"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}