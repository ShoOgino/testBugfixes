{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","sourceNew":"  static BooleanClause.Occur getOccursValue(Element clauseElem) throws ParserException {\n    String occs = clauseElem.getAttribute(\"occurs\");\n    BooleanClause.Occur occurs = BooleanClause.Occur.SHOULD;\n    if (\"must\".equalsIgnoreCase(occs)) {\n      occurs = BooleanClause.Occur.MUST;\n    } else {\n      if (\"mustNot\".equalsIgnoreCase(occs)) {\n        occurs = BooleanClause.Occur.MUST_NOT;\n      } else {\n        if ((\"should\".equalsIgnoreCase(occs)) || (\"\".equals(occs))) {\n          occurs = BooleanClause.Occur.SHOULD;\n        } else {\n          if (occs != null) {\n            throw new ParserException(\"Invalid value for \\\"occurs\\\" attribute of clause:\" + occs);\n          }\n        }\n      }\n    }\n    return occurs;\n\n  }\n\n","sourceOld":"  static BooleanClause.Occur getOccursValue(Element clauseElem) throws ParserException {\n    String occs = clauseElem.getAttribute(\"occurs\");\n    BooleanClause.Occur occurs = BooleanClause.Occur.SHOULD;\n    if (\"must\".equalsIgnoreCase(occs)) {\n      occurs = BooleanClause.Occur.MUST;\n    } else {\n      if (\"mustNot\".equalsIgnoreCase(occs)) {\n        occurs = BooleanClause.Occur.MUST_NOT;\n      } else {\n        if ((\"should\".equalsIgnoreCase(occs)) || (\"\".equals(occs))) {\n          occurs = BooleanClause.Occur.SHOULD;\n        } else {\n          if (occs != null) {\n            throw new ParserException(\"Invalid value for \\\"occurs\\\" attribute of clause:\" + occs);\n          }\n        }\n      }\n    }\n    return occurs;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","sourceNew":"  static BooleanClause.Occur getOccursValue(Element clauseElem) throws ParserException {\n    String occs = clauseElem.getAttribute(\"occurs\");\n    if (occs == null || \"should\".equalsIgnoreCase(occs)) {\n      return BooleanClause.Occur.SHOULD;\n    } else if (\"must\".equalsIgnoreCase(occs)) {\n      return BooleanClause.Occur.MUST;\n    } else if (\"mustNot\".equalsIgnoreCase(occs)) {\n      return BooleanClause.Occur.MUST_NOT;\n    } else if (\"filter\".equals(occs)) {\n      return BooleanClause.Occur.FILTER;\n    }\n    throw new ParserException(\"Invalid value for \\\"occurs\\\" attribute of clause:\" + occs);\n  }\n\n","sourceOld":"  static BooleanClause.Occur getOccursValue(Element clauseElem) throws ParserException {\n    String occs = clauseElem.getAttribute(\"occurs\");\n    BooleanClause.Occur occurs = BooleanClause.Occur.SHOULD;\n    if (\"must\".equalsIgnoreCase(occs)) {\n      occurs = BooleanClause.Occur.MUST;\n    } else {\n      if (\"mustNot\".equalsIgnoreCase(occs)) {\n        occurs = BooleanClause.Occur.MUST_NOT;\n      } else {\n        if ((\"should\".equalsIgnoreCase(occs)) || (\"\".equals(occs))) {\n          occurs = BooleanClause.Occur.SHOULD;\n        } else {\n          if (occs != null) {\n            throw new ParserException(\"Invalid value for \\\"occurs\\\" attribute of clause:\" + occs);\n          }\n        }\n      }\n    }\n    return occurs;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2042d3e27841c5b60112990fc33559e10ccf6dd"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}