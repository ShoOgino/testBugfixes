{"path":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(TEMP_DIR, \"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(TEMP_DIR, \"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3741149a89925c02f14dbeef8365b896798d91fc","date":1303483574,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(TEMP_DIR, \"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(TEMP_DIR, \"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(TEMP_DIR, \"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = new File(TEMP_DIR, \"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, IOContext.DEFAULT);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, IOContext.DEFAULT);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random));\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random));\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, IOContext.DEFAULT);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, IOContext.DEFAULT);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random));\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random));\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random));\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random));\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname);\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname);\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random));\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random));\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random));\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random));\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","3741149a89925c02f14dbeef8365b896798d91fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9454a6510e2db155fb01faa5c049b06ece95fab9","3741149a89925c02f14dbeef8365b896798d91fc"],"3741149a89925c02f14dbeef8365b896798d91fc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["3741149a89925c02f14dbeef8365b896798d91fc"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["3741149a89925c02f14dbeef8365b896798d91fc","b6f9be74ca7baaef11857ad002cad40419979516"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["9454a6510e2db155fb01faa5c049b06ece95fab9","3741149a89925c02f14dbeef8365b896798d91fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3741149a89925c02f14dbeef8365b896798d91fc":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","ddc4c914be86e34b54f70023f45a60fa7f04e929","d493718201f0d0c54c773fb323d87bbd2fbffe41"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","3741149a89925c02f14dbeef8365b896798d91fc","d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5d004d0e0b3f65bb40da76d476d659d7888270e8","d493718201f0d0c54c773fb323d87bbd2fbffe41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}