{"path":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}