{"path":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Directory,Throwable).mjava","commits":[{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Directory,Throwable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Directory dir, Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9e22bdf0692bfa61e342b04a6ac7078670c1e16","date":1436866730,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Directory,Throwable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Directory,Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Directory dir, Throwable exc) {\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Directory dir, Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Directory,Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    throw new MergePolicy.MergeException(exc);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Directory dir, Throwable exc) {\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["89697e7abc9807639c384eecf5a2a6eef1080426"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}