{"path":"backwards/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}