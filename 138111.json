{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getCoreUrl();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getCoreUrl();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"291857aeee5ec20518ddce131ac4362c0075ebe1","date":1467882201,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      if (!directUpdatesToLeadersOnly) {\n        for (Replica replica : slice.getReplicas()) {\n          if (!replica.getNodeName().equals(leader.getNodeName()) &&\n              !replica.getName().equals(leader.getName())) {\n            ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n            String url1 = zkProps1.getCoreUrl();\n            urls.add(url1);\n          }\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getCoreUrl();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"920b078f38927d1129b28d683b5e89228a27edc0","date":1474295383,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    for (Slice slice : col) {\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      urls.add(leader.getCoreUrl());\n\n      for (Replica replica : slice.getReplicas()) {\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          urls.add(replica.getCoreUrl());\n        }\n      }\n\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      if (!directUpdatesToLeadersOnly) {\n        for (Replica replica : slice.getReplicas()) {\n          if (!replica.getNodeName().equals(leader.getNodeName()) &&\n              !replica.getName().equals(leader.getName())) {\n            ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n            String url1 = zkProps1.getCoreUrl();\n            urls.add(url1);\n          }\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d34a674b360fc9af16fceeb9df37363eceb3484","date":1474378553,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      if (!directUpdatesToLeadersOnly) {\n        for (Replica replica : slice.getReplicas()) {\n          if (!replica.getNodeName().equals(leader.getNodeName()) &&\n              !replica.getName().equals(leader.getName())) {\n            ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n            String url1 = zkProps1.getCoreUrl();\n            urls.add(url1);\n          }\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    for (Slice slice : col) {\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      urls.add(leader.getCoreUrl());\n\n      for (Replica replica : slice.getReplicas()) {\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          urls.add(replica.getCoreUrl());\n        }\n      }\n\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e91774ac3ed0db43b41f92ae954c447e50bdfb","date":1474437614,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      if (!directUpdatesToLeadersOnly) {\n        for (Replica replica : slice.getReplicas()) {\n          if (!replica.getNodeName().equals(leader.getNodeName()) &&\n              !replica.getName().equals(leader.getName())) {\n            ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n            String url1 = zkProps1.getCoreUrl();\n            urls.add(url1);\n          }\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    for (Slice slice : col) {\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      urls.add(leader.getCoreUrl());\n\n      for (Replica replica : slice.getReplicas()) {\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          urls.add(replica.getCoreUrl());\n        }\n      }\n\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      if (!directUpdatesToLeadersOnly) {\n        for (Replica replica : slice.getReplicas()) {\n          if (!replica.getNodeName().equals(leader.getNodeName()) &&\n              !replica.getName().equals(leader.getName())) {\n            ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n            String url1 = zkProps1.getCoreUrl();\n            urls.add(url1);\n          }\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      Collection<Replica> replicas = slice.getReplicas();\n      Iterator<Replica> replicaIterator = replicas.iterator();\n      while (replicaIterator.hasNext()) {\n        Replica replica = replicaIterator.next();\n        if (!replica.getNodeName().equals(leader.getNodeName()) &&\n            !replica.getName().equals(leader.getName())) {\n          ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n          String url1 = zkProps1.getCoreUrl();\n          urls.add(url1);\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffab13814193b42cd50780daa02d4bd9e94ed0d1","date":1509080304,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (directUpdatesToLeadersOnly && leader == null) {\n        for (Replica replica : slice.getReplicas(\n            replica -> replica.isActive(getClusterStateProvider().getLiveNodes())\n                && replica.getType() == Replica.Type.NRT)) {\n          leader = replica;\n          break;\n        }\n      }\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      if (!directUpdatesToLeadersOnly) {\n        for (Replica replica : slice.getReplicas()) {\n          if (!replica.getNodeName().equals(leader.getNodeName()) &&\n              !replica.getName().equals(leader.getName())) {\n            ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n            String url1 = zkProps1.getCoreUrl();\n            urls.add(url1);\n          }\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      if (!directUpdatesToLeadersOnly) {\n        for (Replica replica : slice.getReplicas()) {\n          if (!replica.getNodeName().equals(leader.getNodeName()) &&\n              !replica.getName().equals(leader.getName())) {\n            ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n            String url1 = zkProps1.getCoreUrl();\n            urls.add(url1);\n          }\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Slice[] slices = col.getActiveSlicesArr();\n    for (Slice slice : slices) {\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (directUpdatesToLeadersOnly && leader == null) {\n        for (Replica replica : slice.getReplicas(\n            replica -> replica.isActive(getClusterStateProvider().getLiveNodes())\n                && replica.getType() == Replica.Type.NRT)) {\n          leader = replica;\n          break;\n        }\n      }\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      if (!directUpdatesToLeadersOnly) {\n        for (Replica replica : slice.getReplicas()) {\n          if (!replica.getNodeName().equals(leader.getNodeName()) &&\n              !replica.getName().equals(leader.getName())) {\n            ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n            String url1 = zkProps1.getCoreUrl();\n            urls.add(url1);\n          }\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Collection<Slice> slices = col.getActiveSlices();\n    Iterator<Slice> sliceIterator = slices.iterator();\n    while (sliceIterator.hasNext()) {\n      Slice slice = sliceIterator.next();\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (directUpdatesToLeadersOnly && leader == null) {\n        for (Replica replica : slice.getReplicas(\n            replica -> replica.isActive(getClusterStateProvider().getLiveNodes())\n                && replica.getType() == Replica.Type.NRT)) {\n          leader = replica;\n          break;\n        }\n      }\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      if (!directUpdatesToLeadersOnly) {\n        for (Replica replica : slice.getReplicas()) {\n          if (!replica.getNodeName().equals(leader.getNodeName()) &&\n              !replica.getName().equals(leader.getName())) {\n            ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n            String url1 = zkProps1.getCoreUrl();\n            urls.add(url1);\n          }\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#buildUrlMap(DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildUrlMap(DocCollection).mjava","sourceNew":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Slice[] slices = col.getActiveSlicesArr();\n    for (Slice slice : slices) {\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (directUpdatesToLeadersOnly && leader == null) {\n        for (Replica replica : slice.getReplicas(\n            replica -> replica.isActive(getClusterStateProvider().getLiveNodes())\n                && replica.getType() == Replica.Type.NRT)) {\n          leader = replica;\n          break;\n        }\n      }\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      if (!directUpdatesToLeadersOnly) {\n        for (Replica replica : slice.getReplicas()) {\n          if (!replica.getNodeName().equals(leader.getNodeName()) &&\n              !replica.getName().equals(leader.getName())) {\n            ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n            String url1 = zkProps1.getCoreUrl();\n            urls.add(url1);\n          }\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","sourceOld":"  private Map<String,List<String>> buildUrlMap(DocCollection col) {\n    Map<String, List<String>> urlMap = new HashMap<>();\n    Slice[] slices = col.getActiveSlicesArr();\n    for (Slice slice : slices) {\n      String name = slice.getName();\n      List<String> urls = new ArrayList<>();\n      Replica leader = slice.getLeader();\n      if (directUpdatesToLeadersOnly && leader == null) {\n        for (Replica replica : slice.getReplicas(\n            replica -> replica.isActive(getClusterStateProvider().getLiveNodes())\n                && replica.getType() == Replica.Type.NRT)) {\n          leader = replica;\n          break;\n        }\n      }\n      if (leader == null) {\n        if (directUpdatesToLeadersOnly) {\n          continue;\n        }\n        // take unoptimized general path - we cannot find a leader yet\n        return null;\n      }\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n      String url = zkProps.getCoreUrl();\n      urls.add(url);\n      if (!directUpdatesToLeadersOnly) {\n        for (Replica replica : slice.getReplicas()) {\n          if (!replica.getNodeName().equals(leader.getNodeName()) &&\n              !replica.getName().equals(leader.getName())) {\n            ZkCoreNodeProps zkProps1 = new ZkCoreNodeProps(replica);\n            String url1 = zkProps1.getCoreUrl();\n            urls.add(url1);\n          }\n        }\n      }\n      urlMap.put(name, urls);\n    }\n    return urlMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffab13814193b42cd50780daa02d4bd9e94ed0d1":["291857aeee5ec20518ddce131ac4362c0075ebe1"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["ffab13814193b42cd50780daa02d4bd9e94ed0d1"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"03e91774ac3ed0db43b41f92ae954c447e50bdfb":["920b078f38927d1129b28d683b5e89228a27edc0","7d34a674b360fc9af16fceeb9df37363eceb3484"],"7d34a674b360fc9af16fceeb9df37363eceb3484":["920b078f38927d1129b28d683b5e89228a27edc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["bafca15d8e408346a67f4282ad1143b88023893b"],"920b078f38927d1129b28d683b5e89228a27edc0":["291857aeee5ec20518ddce131ac4362c0075ebe1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bafca15d8e408346a67f4282ad1143b88023893b","291857aeee5ec20518ddce131ac4362c0075ebe1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"ffab13814193b42cd50780daa02d4bd9e94ed0d1":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03e91774ac3ed0db43b41f92ae954c447e50bdfb":[],"7d34a674b360fc9af16fceeb9df37363eceb3484":["03e91774ac3ed0db43b41f92ae954c447e50bdfb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["291857aeee5ec20518ddce131ac4362c0075ebe1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["ffab13814193b42cd50780daa02d4bd9e94ed0d1","920b078f38927d1129b28d683b5e89228a27edc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"920b078f38927d1129b28d683b5e89228a27edc0":["03e91774ac3ed0db43b41f92ae954c447e50bdfb","7d34a674b360fc9af16fceeb9df37363eceb3484"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["03e91774ac3ed0db43b41f92ae954c447e50bdfb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}