{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRef).mjava","commits":[{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRef input) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<T>(startOutput, node, comparator, input);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      //System.out.println(\"add start paths\");\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a81c53232b7a347a2a79b731a0b152059237a4b5","date":1351810824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRef).mjava","sourceNew":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRef input) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<T>(startOutput, node, input);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      //System.out.println(\"add start paths\");\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","sourceOld":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRef input) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<T>(startOutput, node, comparator, input);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      //System.out.println(\"add start paths\");\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRef).mjava","sourceNew":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRef input) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      //System.out.println(\"add start paths\");\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","sourceOld":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRef input) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<T>(startOutput, node, input);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      //System.out.println(\"add start paths\");\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRef).mjava","sourceNew":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRefBuilder input) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      //System.out.println(\"add start paths\");\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","sourceOld":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRef input) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      //System.out.println(\"add start paths\");\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a81c53232b7a347a2a79b731a0b152059237a4b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a81c53232b7a347a2a79b731a0b152059237a4b5":["6ce825e9276493231308229152c48f755ce1a0a5"],"6ce825e9276493231308229152c48f755ce1a0a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ce825e9276493231308229152c48f755ce1a0a5"],"a81c53232b7a347a2a79b731a0b152059237a4b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6ce825e9276493231308229152c48f755ce1a0a5":["a81c53232b7a347a2a79b731a0b152059237a4b5"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}