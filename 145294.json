{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,IndexSearcher,TopDocs,Query,Formatter,boolean).mjava","commits":[{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,IndexSearcher,TopDocs,Query,Formatter,boolean).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,Hits,Query,Formatter,boolean).mjava","sourceNew":"    void doStandardHighlights(Analyzer analyzer, IndexSearcher searcher, TopDocs hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.totalHits; i++) {\n        String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        if (mode == QUERY) {\n          scorer = new QueryScorer(query);\n        } else if (mode == QUERY_TERM) {\n          scorer = new QueryTermScorer(query);\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","sourceOld":"    void doStandardHighlights(Analyzer analyzer, Hits hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.length(); i++) {\n        String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        if (mode == QUERY) {\n          scorer = new QueryScorer(query);\n        } else if (mode == QUERY_TERM) {\n          scorer = new QueryTermScorer(query);\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,IndexSearcher,TopDocs,Query,Formatter,boolean).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,IndexSearcher,TopDocs,Query,Formatter,boolean).mjava","sourceNew":"    void doStandardHighlights(Analyzer analyzer, IndexSearcher searcher, TopDocs hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.totalHits; i++) {\n        String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        if (mode == QUERY) {\n          scorer = new QueryScorer(query);\n        } else if (mode == QUERY_TERM) {\n          scorer = new QueryTermScorer(query);\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        if (HighlighterTest.VERBOSE) System.out.println(\"\\t\" + result);\n      }\n    }\n\n","sourceOld":"    void doStandardHighlights(Analyzer analyzer, IndexSearcher searcher, TopDocs hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.totalHits; i++) {\n        String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        if (mode == QUERY) {\n          scorer = new QueryScorer(query);\n        } else if (mode == QUERY_TERM) {\n          scorer = new QueryTermScorer(query);\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        System.out.println(\"\\t\" + result);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,IndexSearcher,TopDocs,Query,Formatter,boolean).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest].TestHighlightRunner#doStandardHighlights(Analyzer,IndexSearcher,TopDocs,Query,Formatter,boolean).mjava","sourceNew":"    void doStandardHighlights(Analyzer analyzer, IndexSearcher searcher, TopDocs hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.totalHits; i++) {\n        String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        if (mode == QUERY) {\n          scorer = new QueryScorer(query);\n        } else if (mode == QUERY_TERM) {\n          scorer = new QueryTermScorer(query);\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        if (HighlighterTest.VERBOSE) System.out.println(\"\\t\" + result);\n      }\n    }\n\n","sourceOld":"    void doStandardHighlights(Analyzer analyzer, IndexSearcher searcher, TopDocs hits, Query query, Formatter formatter, boolean expandMT)\n        throws Exception {\n\n      for (int i = 0; i < hits.totalHits; i++) {\n        String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n        int maxNumFragmentsRequired = 2;\n        String fragmentSeparator = \"...\";\n        Scorer scorer = null;\n        TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n        if (mode == QUERY) {\n          scorer = new QueryScorer(query);\n        } else if (mode == QUERY_TERM) {\n          scorer = new QueryTermScorer(query);\n        }\n        Highlighter highlighter = new Highlighter(formatter, scorer);\n        highlighter.setTextFragmenter(frag);\n\n        String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n            fragmentSeparator);\n        if (HighlighterTest.VERBOSE) System.out.println(\"\\t\" + result);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42607aa380c892dc1ec0ab26e86a575c28e13618":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}