{"path":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","sourceNew":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","sourceOld":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","sourceNew":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","sourceOld":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","sourceNew":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","sourceOld":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","sourceNew":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","sourceOld":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","sourceNew":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","sourceOld":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7","date":1457008564,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","sourceNew":"  public Object unmarshal(InputStream is) throws IOException {\n    assert !alreadyUnmarshalled;\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    \n    alreadyUnmarshalled = true;\n    return readVal(dis);\n  }\n\n","sourceOld":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","sourceNew":"  public Object unmarshal(InputStream is) throws IOException {\n    assert !alreadyUnmarshalled;\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    \n    alreadyUnmarshalled = true;\n    return readVal(dis);\n  }\n\n","sourceOld":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    return readVal(dis);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8b6cfd1b67b932db9907356935046c4d40d033","date":1479958221,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","sourceNew":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = initRead(is);\n    return readVal(dis);\n  }\n\n","sourceOld":"  public Object unmarshal(InputStream is) throws IOException {\n    assert !alreadyUnmarshalled;\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    \n    alreadyUnmarshalled = true;\n    return readVal(dis);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#unmarshal(InputStream).mjava","sourceNew":"  public Object unmarshal(InputStream is) throws IOException {\n    FastInputStream dis = initRead(is);\n    return readVal(dis);\n  }\n\n","sourceOld":"  public Object unmarshal(InputStream is) throws IOException {\n    assert !alreadyUnmarshalled;\n    FastInputStream dis = FastInputStream.wrap(is);\n    version = dis.readByte();\n    if (version != VERSION) {\n      throw new RuntimeException(\"Invalid version (expected \" + VERSION +\n          \", but \" + version + \") or the data in not in 'javabin' format\");\n    }\n    \n    alreadyUnmarshalled = true;\n    return readVal(dis);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8b6cfd1b67b932db9907356935046c4d40d033":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"727bb765ff2542275f6d31f67be18d7104bae148":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","da8b6cfd1b67b932db9907356935046c4d40d033"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["19275ba31e621f6da1b83bf13af75233876fd3d4","3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7"],"3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da8b6cfd1b67b932db9907356935046c4d40d033"]},"commit2Childs":{"da8b6cfd1b67b932db9907356935046c4d40d033":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cf1a614098b46c9c22afebd7b898ae4d1d2fc273","3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["da8b6cfd1b67b932db9907356935046c4d40d033","727bb765ff2542275f6d31f67be18d7104bae148"],"3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","727bb765ff2542275f6d31f67be18d7104bae148","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}