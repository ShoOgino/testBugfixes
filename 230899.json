{"path":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#toSuggesterResult(Map[String,SimpleOrderedMap[NamedList[Object]]]).mjava","commits":[{"id":"214b8610690edbe7e294594a7bc58a978ef1863c","date":1389376762,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#toSuggesterResult(Map[String,SimpleOrderedMap[NamedList[Object]]]).mjava","pathOld":"/dev/null","sourceNew":"  /** Convert NamedList (suggester response) to {@link SuggesterResult} */\n  private SuggesterResult toSuggesterResult(Map<String, SimpleOrderedMap<NamedList<Object>>> suggestionsMap) {\n    SuggesterResult result = new SuggesterResult();\n    if (suggestionsMap == null) {\n      return result;\n    }\n    // for each token\n    for(Map.Entry<String, SimpleOrderedMap<NamedList<Object>>> entry : suggestionsMap.entrySet()) {\n      String suggesterName = entry.getKey();\n      for (Iterator<Map.Entry<String, NamedList<Object>>> suggestionsIter = entry.getValue().iterator(); suggestionsIter.hasNext();) {\n        Map.Entry<String, NamedList<Object>> suggestions = suggestionsIter.next(); \n        String tokenString = suggestions.getKey();\n        List<LookupResult> lookupResults = new ArrayList<LookupResult>();\n        NamedList<Object> suggestion = suggestions.getValue();\n        // for each suggestion\n        for (int j = 0; j < suggestion.size(); j++) {\n          String property = suggestion.getName(j);\n          if (property.equals(SuggesterResultLabels.SUGGESTIONS)) {\n            @SuppressWarnings(\"unchecked\")\n            List<NamedList<Object>> suggestionEntries = (List<NamedList<Object>>) suggestion.getVal(j);\n            for(NamedList<Object> suggestionEntry : suggestionEntries) {\n              String term = (String) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_TERM);\n              Long weight = (Long) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_WEIGHT);\n              String payload = (String) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_PAYLOAD);\n              LookupResult res = new LookupResult(new CharsRef(term), weight, new BytesRef(payload));\n              lookupResults.add(res);\n            }\n          }\n          result.add(suggesterName, tokenString, lookupResults);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#toSuggesterResult(Map[String,SimpleOrderedMap[NamedList[Object]]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#toSuggesterResult(Map[String,SimpleOrderedMap[NamedList[Object]]]).mjava","sourceNew":"  /** Convert NamedList (suggester response) to {@link SuggesterResult} */\n  private SuggesterResult toSuggesterResult(Map<String, SimpleOrderedMap<NamedList<Object>>> suggestionsMap) {\n    SuggesterResult result = new SuggesterResult();\n    if (suggestionsMap == null) {\n      return result;\n    }\n    // for each token\n    for(Map.Entry<String, SimpleOrderedMap<NamedList<Object>>> entry : suggestionsMap.entrySet()) {\n      String suggesterName = entry.getKey();\n      for (Iterator<Map.Entry<String, NamedList<Object>>> suggestionsIter = entry.getValue().iterator(); suggestionsIter.hasNext();) {\n        Map.Entry<String, NamedList<Object>> suggestions = suggestionsIter.next(); \n        String tokenString = suggestions.getKey();\n        List<LookupResult> lookupResults = new ArrayList<>();\n        NamedList<Object> suggestion = suggestions.getValue();\n        // for each suggestion\n        for (int j = 0; j < suggestion.size(); j++) {\n          String property = suggestion.getName(j);\n          if (property.equals(SuggesterResultLabels.SUGGESTIONS)) {\n            @SuppressWarnings(\"unchecked\")\n            List<NamedList<Object>> suggestionEntries = (List<NamedList<Object>>) suggestion.getVal(j);\n            for(NamedList<Object> suggestionEntry : suggestionEntries) {\n              String term = (String) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_TERM);\n              Long weight = (Long) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_WEIGHT);\n              String payload = (String) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_PAYLOAD);\n              LookupResult res = new LookupResult(new CharsRef(term), weight, new BytesRef(payload));\n              lookupResults.add(res);\n            }\n          }\n          result.add(suggesterName, tokenString, lookupResults);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Convert NamedList (suggester response) to {@link SuggesterResult} */\n  private SuggesterResult toSuggesterResult(Map<String, SimpleOrderedMap<NamedList<Object>>> suggestionsMap) {\n    SuggesterResult result = new SuggesterResult();\n    if (suggestionsMap == null) {\n      return result;\n    }\n    // for each token\n    for(Map.Entry<String, SimpleOrderedMap<NamedList<Object>>> entry : suggestionsMap.entrySet()) {\n      String suggesterName = entry.getKey();\n      for (Iterator<Map.Entry<String, NamedList<Object>>> suggestionsIter = entry.getValue().iterator(); suggestionsIter.hasNext();) {\n        Map.Entry<String, NamedList<Object>> suggestions = suggestionsIter.next(); \n        String tokenString = suggestions.getKey();\n        List<LookupResult> lookupResults = new ArrayList<LookupResult>();\n        NamedList<Object> suggestion = suggestions.getValue();\n        // for each suggestion\n        for (int j = 0; j < suggestion.size(); j++) {\n          String property = suggestion.getName(j);\n          if (property.equals(SuggesterResultLabels.SUGGESTIONS)) {\n            @SuppressWarnings(\"unchecked\")\n            List<NamedList<Object>> suggestionEntries = (List<NamedList<Object>>) suggestion.getVal(j);\n            for(NamedList<Object> suggestionEntry : suggestionEntries) {\n              String term = (String) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_TERM);\n              Long weight = (Long) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_WEIGHT);\n              String payload = (String) suggestionEntry.get(SuggesterResultLabels.SUGGESTION_PAYLOAD);\n              LookupResult res = new LookupResult(new CharsRef(term), weight, new BytesRef(payload));\n              lookupResults.add(res);\n            }\n          }\n          result.add(suggesterName, tokenString, lookupResults);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["214b8610690edbe7e294594a7bc58a978ef1863c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"214b8610690edbe7e294594a7bc58a978ef1863c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["214b8610690edbe7e294594a7bc58a978ef1863c"],"214b8610690edbe7e294594a7bc58a978ef1863c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}