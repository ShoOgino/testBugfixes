{"path":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","commits":[{"id":"e561bdf81b5b983639de610f7c878f3e2382bf24","date":1099437089,"type":0,"author":"David Spencer","isMerge":false,"pathNew":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"/dev/null","sourceNew":"    private static void addGram (String text, Document doc, int ng1, int ng2) {\n        int len=text.length();\n        for (int ng=ng1; ng<=ng2; ng++) {\n            String key=\"gram\"+ng;\n            String end=null;\n            for (int i=0; i<len-ng+1; i++) {\n                String gram=text.substring(i, i+ng);\n                doc.add(Field.Keyword(key, gram));\n                if (i==0) {\n                    doc.add(Field.Keyword(\"start\"+ng, gram));\n                }\n                end=gram;\n            }\n            if (end!=null) { // may not be present if len==ng1\n                doc.add(Field.Keyword(\"end\"+ng, end));\n            }\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"    private static void addGram (String text, Document doc, int ng1, int ng2) {\n        int len=text.length();\n        for (int ng=ng1; ng<=ng2; ng++) {\n            String key=\"gram\"+ng;\n            String end=null;\n            for (int i=0; i<len-ng+1; i++) {\n                String gram=text.substring(i, i+ng);\n                doc.add(Field.Keyword(key, gram));\n                if (i==0) {\n                    doc.add(Field.Keyword(\"start\"+ng, gram));\n                }\n                end=gram;\n            }\n            if (end!=null) { // may not be present if len==ng1\n                doc.add(Field.Keyword(\"end\"+ng, end));\n            }\n        }\n    }\n\n","sourceOld":"    private static void addGram (String text, Document doc, int ng1, int ng2) {\n        int len=text.length();\n        for (int ng=ng1; ng<=ng2; ng++) {\n            String key=\"gram\"+ng;\n            String end=null;\n            for (int i=0; i<len-ng+1; i++) {\n                String gram=text.substring(i, i+ng);\n                doc.add(Field.Keyword(key, gram));\n                if (i==0) {\n                    doc.add(Field.Keyword(\"start\"+ng, gram));\n                }\n                end=gram;\n            }\n            if (end!=null) { // may not be present if len==ng1\n                doc.add(Field.Keyword(\"end\"+ng, end));\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["e561bdf81b5b983639de610f7c878f3e2382bf24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e561bdf81b5b983639de610f7c878f3e2382bf24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"]},"commit2Childs":{"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e561bdf81b5b983639de610f7c878f3e2382bf24"],"e561bdf81b5b983639de610f7c878f3e2382bf24":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}