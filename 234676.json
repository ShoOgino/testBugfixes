{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  /** \n   * Return spans from <code>big</code> that contain at least one spans from <code>little</code>.\n   * The payload is from the spans of <code>big</code>.\n   */\n  @Override\n  public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n    ArrayList<Spans> containerContained = prepareConjunction(context, acceptDocs, termContexts, collector);\n    if (containerContained == null) {\n      return null;\n    }\n    \n    Spans big = containerContained.get(0);\n    Spans little = containerContained.get(1);\n\n    return new ContainSpans(big, little, big) {\n\n      @Override\n      boolean twoPhaseCurrentDocMatches() throws IOException {\n        oneExhaustedInCurrentDoc = false;\n        assert littleSpans.startPosition() == -1;\n        while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n          while (littleSpans.startPosition() < bigSpans.startPosition()) {\n            if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              oneExhaustedInCurrentDoc = true;\n              return false;\n            }\n          }\n          if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n            atFirstInCurrentDoc = true;\n            return true;\n          }\n        } \n        oneExhaustedInCurrentDoc = true;\n        return false;\n      }\n\n      @Override\n      public int nextStartPosition() throws IOException {\n        if (atFirstInCurrentDoc) {\n          atFirstInCurrentDoc = false;\n          return bigSpans.startPosition();\n        }\n        while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n          while (littleSpans.startPosition() < bigSpans.startPosition()) {\n            if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              oneExhaustedInCurrentDoc = true;\n              return NO_MORE_POSITIONS;\n            }\n          }\n          if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n            return bigSpans.startPosition();\n          }\n        }\n        oneExhaustedInCurrentDoc = true;\n        return NO_MORE_POSITIONS;\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Return spans from <code>big</code> that contain at least one spans from <code>little</code>.\n   * The payload is from the spans of <code>big</code>.\n   */\n  @Override\n  public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    ArrayList<Spans> containerContained = prepareConjunction(context, acceptDocs, termContexts);\n    if (containerContained == null) {\n      return null;\n    }\n    \n    Spans big = containerContained.get(0);\n    Spans little = containerContained.get(1);\n\n    return new ContainSpans(big, little, big) {\n\n      @Override\n      boolean twoPhaseCurrentDocMatches() throws IOException {\n        oneExhaustedInCurrentDoc = false;\n        assert littleSpans.startPosition() == -1;\n        while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n          while (littleSpans.startPosition() < bigSpans.startPosition()) {\n            if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              oneExhaustedInCurrentDoc = true;\n              return false;\n            }\n          }\n          if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n            atFirstInCurrentDoc = true;\n            return true;\n          }\n        } \n        oneExhaustedInCurrentDoc = true;\n        return false;\n      }\n\n      @Override\n      public int nextStartPosition() throws IOException {\n        if (atFirstInCurrentDoc) {\n          atFirstInCurrentDoc = false;\n          return bigSpans.startPosition();\n        }\n        while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n          while (littleSpans.startPosition() < bigSpans.startPosition()) {\n            if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              oneExhaustedInCurrentDoc = true;\n              return NO_MORE_POSITIONS;\n            }\n          }\n          if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n            return bigSpans.startPosition();\n          }\n        }\n        oneExhaustedInCurrentDoc = true;\n        return NO_MORE_POSITIONS;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","sourceNew":null,"sourceOld":"  /** \n   * Return spans from <code>big</code> that contain at least one spans from <code>little</code>.\n   * The payload is from the spans of <code>big</code>.\n   */\n  @Override\n  public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n    ArrayList<Spans> containerContained = prepareConjunction(context, acceptDocs, termContexts, collector);\n    if (containerContained == null) {\n      return null;\n    }\n    \n    Spans big = containerContained.get(0);\n    Spans little = containerContained.get(1);\n\n    return new ContainSpans(big, little, big) {\n\n      @Override\n      boolean twoPhaseCurrentDocMatches() throws IOException {\n        oneExhaustedInCurrentDoc = false;\n        assert littleSpans.startPosition() == -1;\n        while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n          while (littleSpans.startPosition() < bigSpans.startPosition()) {\n            if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              oneExhaustedInCurrentDoc = true;\n              return false;\n            }\n          }\n          if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n            atFirstInCurrentDoc = true;\n            return true;\n          }\n        } \n        oneExhaustedInCurrentDoc = true;\n        return false;\n      }\n\n      @Override\n      public int nextStartPosition() throws IOException {\n        if (atFirstInCurrentDoc) {\n          atFirstInCurrentDoc = false;\n          return bigSpans.startPosition();\n        }\n        while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n          while (littleSpans.startPosition() < bigSpans.startPosition()) {\n            if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              oneExhaustedInCurrentDoc = true;\n              return NO_MORE_POSITIONS;\n            }\n          }\n          if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n            return bigSpans.startPosition();\n          }\n        }\n        oneExhaustedInCurrentDoc = true;\n        return NO_MORE_POSITIONS;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}