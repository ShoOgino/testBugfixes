{"path":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#sendRequestToEachServer().mjava","commits":[{"id":"ccd5879f653e621285dee30b556303244d9ec4a3","date":1421795206,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#sendRequestToEachServer().mjava","pathOld":"/dev/null","sourceNew":"  private void sendRequestToEachServer() throws Exception {\n    List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n    for (JettySolrRunner jetty : jettys) {\n      HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString());\n      try {\n        CoreAdminRequest req = new CoreAdminRequest();\n        req.setAction( CoreAdminAction.STATUS );\n        client.request(req);\n      } finally {\n        client.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#sendRequestToEachServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#sendRequestToEachServer().mjava","sourceNew":"  private void sendRequestToEachServer() throws Exception {\n    List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n    for (JettySolrRunner jetty : jettys) {\n      try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString())) {\n        CoreAdminRequest req = new CoreAdminRequest();\n        req.setAction( CoreAdminAction.STATUS );\n        client.request(req);\n      }\n    }\n  }\n\n","sourceOld":"  private void sendRequestToEachServer() throws Exception {\n    List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n    for (JettySolrRunner jetty : jettys) {\n      HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString());\n      try {\n        CoreAdminRequest req = new CoreAdminRequest();\n        req.setAction( CoreAdminAction.STATUS );\n        client.request(req);\n      } finally {\n        client.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#sendRequestToEachServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#sendRequestToEachServer().mjava","sourceNew":"  private void sendRequestToEachServer() throws Exception {\n    List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n    for (JettySolrRunner jetty : jettys) {\n      try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n        CoreAdminRequest req = new CoreAdminRequest();\n        req.setAction( CoreAdminAction.STATUS );\n        client.request(req);\n      }\n    }\n  }\n\n","sourceOld":"  private void sendRequestToEachServer() throws Exception {\n    List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n    for (JettySolrRunner jetty : jettys) {\n      try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString())) {\n        CoreAdminRequest req = new CoreAdminRequest();\n        req.setAction( CoreAdminAction.STATUS );\n        client.request(req);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#sendRequestToEachServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#sendRequestToEachServer().mjava","sourceNew":"  private void sendRequestToEachServer() throws Exception {\n    List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n    for (JettySolrRunner jetty : jettys) {\n      try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n        CoreAdminRequest req = new CoreAdminRequest();\n        req.setAction( CoreAdminAction.STATUS );\n        client.request(req);\n      }\n    }\n  }\n\n","sourceOld":"  private void sendRequestToEachServer() throws Exception {\n    List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n    for (JettySolrRunner jetty : jettys) {\n      try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString())) {\n        CoreAdminRequest req = new CoreAdminRequest();\n        req.setAction( CoreAdminAction.STATUS );\n        client.request(req);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#sendRequestToEachServer().mjava","sourceNew":null,"sourceOld":"  private void sendRequestToEachServer() throws Exception {\n    List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n    for (JettySolrRunner jetty : jettys) {\n      try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n        CoreAdminRequest req = new CoreAdminRequest();\n        req.setAction( CoreAdminAction.STATUS );\n        client.request(req);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#sendRequestToEachServer().mjava","sourceNew":null,"sourceOld":"  private void sendRequestToEachServer() throws Exception {\n    List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n    for (JettySolrRunner jetty : jettys) {\n      try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n        CoreAdminRequest req = new CoreAdminRequest();\n        req.setAction( CoreAdminAction.STATUS );\n        client.request(req);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ccd5879f653e621285dee30b556303244d9ec4a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["ccd5879f653e621285dee30b556303244d9ec4a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","e58bb31b4af6b8eeb1539849575c59df745bc6e6"]},"commit2Childs":{"ccd5879f653e621285dee30b556303244d9ec4a3":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccd5879f653e621285dee30b556303244d9ec4a3"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}