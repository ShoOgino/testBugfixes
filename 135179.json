{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(String,Callable[Pair[byte[],Stat]]).mjava","commits":[{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(String,Callable[Pair[byte[],Stat]]).mjava","pathOld":"/dev/null","sourceNew":"  private void addSecuritynodeWatcher(String path, final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events,\n            // and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                log.info(\"Updating {} ... \", path);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                Stat stat = new Stat();\n                byte[] data = getZkClient().getData(path, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  if (e instanceof KeeperException) throw (KeeperException) e;\n                  if (e instanceof InterruptedException) throw (InterruptedException) e;\n                  log.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"\", e);\n              return;\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(String,Callable[Pair[byte[],Stat]]).mjava","sourceNew":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events,\n            // and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.info(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void addSecuritynodeWatcher(String path, final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events,\n            // and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                log.info(\"Updating {} ... \", path);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                Stat stat = new Stat();\n                byte[] data = getZkClient().getData(path, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  if (e instanceof KeeperException) throw (KeeperException) e;\n                  if (e instanceof InterruptedException) throw (InterruptedException) e;\n                  log.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"\", e);\n              return;\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["6bdcb86c29922edae9a14852e636303bc52df094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bdcb86c29922edae9a14852e636303bc52df094"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}