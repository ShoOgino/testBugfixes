{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","pathOld":"/dev/null","sourceNew":"\t\t/** returns the first few positions (without offsets); debug only */\n\t\tpublic String toString(int stride) {\n\t\t\tint s = size() / stride;\n\t\t\tint len = Math.min(10, s); // avoid printing huge lists\n\t\t\tStringBuffer buf = new StringBuffer(4*len);\n\t\t\tbuf.append(\"[\");\n\t\t\tfor (int i = 0; i < len; i++) {\n\t\t\t\tbuf.append(get(i*stride));\n\t\t\t\tif (i < len-1) buf.append(\", \");\n\t\t\t}\n\t\t\tif (len != s) buf.append(\", ...\"); // and some more...\n\t\t\tbuf.append(\"]\");\n\t\t\treturn buf.toString();\n\t\t}\t\t\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","sourceNew":"\t\t/** returns the first few positions (without offsets); debug only */\r\n\t\tpublic String toString(int stride) {\r\n\t\t\tint s = size() / stride;\r\n\t\t\tint len = Math.min(10, s); // avoid printing huge lists\r\n\t\t\tStringBuffer buf = new StringBuffer(4*len);\r\n\t\t\tbuf.append(\"[\");\r\n\t\t\tfor (int i = 0; i < len; i++) {\r\n\t\t\t\tbuf.append(get(i*stride));\r\n\t\t\t\tif (i < len-1) buf.append(\", \");\r\n\t\t\t}\r\n\t\t\tif (len != s) buf.append(\", ...\"); // and some more...\r\n\t\t\tbuf.append(\"]\");\r\n\t\t\treturn buf.toString();\r\n\t\t}\t\t\r\n\n","sourceOld":"\t\t/** returns the first few positions (without offsets); debug only */\n\t\tpublic String toString(int stride) {\n\t\t\tint s = size() / stride;\n\t\t\tint len = Math.min(10, s); // avoid printing huge lists\n\t\t\tStringBuffer buf = new StringBuffer(4*len);\n\t\t\tbuf.append(\"[\");\n\t\t\tfor (int i = 0; i < len; i++) {\n\t\t\t\tbuf.append(get(i*stride));\n\t\t\t\tif (i < len-1) buf.append(\", \");\n\t\t\t}\n\t\t\tif (len != s) buf.append(\", ...\"); // and some more...\n\t\t\tbuf.append(\"]\");\n\t\t\treturn buf.toString();\n\t\t}\t\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35dd40ede4dd66fa47506858c4a073d295c5a76e","date":1133587328,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","sourceNew":null,"sourceOld":"\t\t/** returns the first few positions (without offsets); debug only */\r\n\t\tpublic String toString(int stride) {\r\n\t\t\tint s = size() / stride;\r\n\t\t\tint len = Math.min(10, s); // avoid printing huge lists\r\n\t\t\tStringBuffer buf = new StringBuffer(4*len);\r\n\t\t\tbuf.append(\"[\");\r\n\t\t\tfor (int i = 0; i < len; i++) {\r\n\t\t\t\tbuf.append(get(i*stride));\r\n\t\t\t\tif (i < len-1) buf.append(\", \");\r\n\t\t\t}\r\n\t\t\tif (len != s) buf.append(\", ...\"); // and some more...\r\n\t\t\tbuf.append(\"]\");\r\n\t\t\treturn buf.toString();\r\n\t\t}\t\t\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a93e1e4a21be8ebb98e53e6933412a363931faa1","date":1133587471,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","pathOld":"/dev/null","sourceNew":"\t\t/** returns the first few positions (without offsets); debug only */\n\t\tpublic String toString(int stride) {\n\t\t\tint s = size() / stride;\n\t\t\tint len = Math.min(10, s); // avoid printing huge lists\n\t\t\tStringBuffer buf = new StringBuffer(4*len);\n\t\t\tbuf.append(\"[\");\n\t\t\tfor (int i = 0; i < len; i++) {\n\t\t\t\tbuf.append(get(i*stride));\n\t\t\t\tif (i < len-1) buf.append(\", \");\n\t\t\t}\n\t\t\tif (len != s) buf.append(\", ...\"); // and some more...\n\t\t\tbuf.append(\"]\");\n\t\t\treturn buf.toString();\n\t\t}\t\t\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","sourceNew":"    /** returns the first few positions (without offsets); debug only */\n    public String toString(int stride) {\n      int s = size() / stride;\n      int len = Math.min(10, s); // avoid printing huge lists\n      StringBuffer buf = new StringBuffer(4*len);\n      buf.append(\"[\");\n      for (int i = 0; i < len; i++) {\n        buf.append(get(i*stride));\n        if (i < len-1) buf.append(\", \");\n      }\n      if (len != s) buf.append(\", ...\"); // and some more...\n      buf.append(\"]\");\n      return buf.toString();\n    }   \n\n","sourceOld":"\t\t/** returns the first few positions (without offsets); debug only */\n\t\tpublic String toString(int stride) {\n\t\t\tint s = size() / stride;\n\t\t\tint len = Math.min(10, s); // avoid printing huge lists\n\t\t\tStringBuffer buf = new StringBuffer(4*len);\n\t\t\tbuf.append(\"[\");\n\t\t\tfor (int i = 0; i < len; i++) {\n\t\t\t\tbuf.append(get(i*stride));\n\t\t\t\tif (i < len-1) buf.append(\", \");\n\t\t\t}\n\t\t\tif (len != s) buf.append(\", ...\"); // and some more...\n\t\t\tbuf.append(\"]\");\n\t\t\treturn buf.toString();\n\t\t}\t\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","sourceNew":"    /** returns the first few positions (without offsets); debug only */\n    public String toString(int stride) {\n      int s = size() / stride;\n      int len = Math.min(10, s); // avoid printing huge lists\n      StringBuilder buf = new StringBuilder(4*len);\n      buf.append(\"[\");\n      for (int i = 0; i < len; i++) {\n        buf.append(get(i*stride));\n        if (i < len-1) buf.append(\", \");\n      }\n      if (len != s) buf.append(\", ...\"); // and some more...\n      buf.append(\"]\");\n      return buf.toString();\n    }   \n\n","sourceOld":"    /** returns the first few positions (without offsets); debug only */\n    public String toString(int stride) {\n      int s = size() / stride;\n      int len = Math.min(10, s); // avoid printing huge lists\n      StringBuffer buf = new StringBuffer(4*len);\n      buf.append(\"[\");\n      for (int i = 0; i < len; i++) {\n        buf.append(get(i*stride));\n        if (i < len-1) buf.append(\", \");\n      }\n      if (len != s) buf.append(\", ...\"); // and some more...\n      buf.append(\"]\");\n      return buf.toString();\n    }   \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.ArrayIntList#toString(int).mjava","sourceNew":"    /** returns the first few positions (without offsets); debug only */\n    public String toString(int stride) {\n      int s = size() / stride;\n      int len = Math.min(10, s); // avoid printing huge lists\n      StringBuilder buf = new StringBuilder(4*len);\n      buf.append(\"[\");\n      for (int i = 0; i < len; i++) {\n        buf.append(get(i*stride));\n        if (i < len-1) buf.append(\", \");\n      }\n      if (len != s) buf.append(\", ...\"); // and some more...\n      buf.append(\"]\");\n      return buf.toString();\n    }   \n\n","sourceOld":"    /** returns the first few positions (without offsets); debug only */\n    public String toString(int stride) {\n      int s = size() / stride;\n      int len = Math.min(10, s); // avoid printing huge lists\n      StringBuilder buf = new StringBuilder(4*len);\n      buf.append(\"[\");\n      for (int i = 0; i < len; i++) {\n        buf.append(get(i*stride));\n        if (i < len-1) buf.append(\", \");\n      }\n      if (len != s) buf.append(\", ...\"); // and some more...\n      buf.append(\"]\");\n      return buf.toString();\n    }   \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}