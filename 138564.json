{"path":"src/test/org/apache/lucene/search/TestPositionIncrement#test().mjava","commits":[{"id":"052d6a9887bbf0e7b3620c505ab07df06740289f","date":1028567700,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#test().mjava","pathOld":"/dev/null","sourceNew":"  public static void test() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n        public TokenStream tokenStream(String fieldName, Reader reader) {\n          return new TokenStream() {\n              private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n              private final int[] INCREMENTS = {1, 2,  1,    0,   1};\n              private int i = 0;\n              public Token next() throws IOException {\n                if (i == TOKENS.length)\n                  return null;\n                Token t = new Token(TOKENS[i], i, i);\n                t.setPositionIncrement(INCREMENTS[i]);\n                i++;\n                return t;\n              }\n            };\n        }\n      };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(Field.Text(\"field\", \"bogus\"));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"1\"));\n    q.add(new Term(\"field\",\"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"2\"));\n    q.add(new Term(\"field\",\"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"3\"));\n    q.add(new Term(\"field\",\"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"2\"));\n    q.add(new Term(\"field\",\"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"3\"));\n    q.add(new Term(\"field\",\"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"4\"));\n    q.add(new Term(\"field\",\"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"2\"));\n    q.add(new Term(\"field\",\"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca","date":1064151933,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#test().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {1, 2, 1, 0, 1};\n          private int i = 0;\n\n          public Token next() throws IOException {\n            if (i == TOKENS.length)\n              return null;\n            Token t = new Token(TOKENS[i], i, i);\n            t.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return t;\n          }\n        };\n      }\n    };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(Field.Text(\"field\", \"bogus\"));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":"  public static void test() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n        public TokenStream tokenStream(String fieldName, Reader reader) {\n          return new TokenStream() {\n              private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n              private final int[] INCREMENTS = {1, 2,  1,    0,   1};\n              private int i = 0;\n              public Token next() throws IOException {\n                if (i == TOKENS.length)\n                  return null;\n                Token t = new Token(TOKENS[i], i, i);\n                t.setPositionIncrement(INCREMENTS[i]);\n                i++;\n                return t;\n              }\n            };\n        }\n      };\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, analyzer, true);\n    Document d = new Document();\n    d.add(Field.Text(\"field\", \"bogus\"));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(store);\n    PhraseQuery q;\n    Hits hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"1\"));\n    q.add(new Term(\"field\",\"2\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"2\"));\n    q.add(new Term(\"field\",\"3\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"3\"));\n    q.add(new Term(\"field\",\"4\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"2\"));\n    q.add(new Term(\"field\",\"4\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"3\"));\n    q.add(new Term(\"field\",\"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"4\"));\n    q.add(new Term(\"field\",\"5\"));\n    hits = searcher.search(q);\n    assertEquals(1, hits.length());\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\",\"2\"));\n    q.add(new Term(\"field\",\"5\"));\n    hits = searcher.search(q);\n    assertEquals(0, hits.length());\n\n  }\n\n","bugFix":null,"bugIntro":["9c576fba1e3c6d11c61fa0802214d5150fb5c633"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"052d6a9887bbf0e7b3620c505ab07df06740289f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca"],"17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca":["052d6a9887bbf0e7b3620c505ab07df06740289f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052d6a9887bbf0e7b3620c505ab07df06740289f"],"052d6a9887bbf0e7b3620c505ab07df06740289f":["17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}