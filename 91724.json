{"path":"solr/core/src/test/org/apache/solr/update/processor/TrackingUpdateProcessorFactory#init(NamedList).mjava","commits":[{"id":"60b45f127b5537b5bf62181784ef28b52f4b6a08","date":1529595959,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TrackingUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    if (args != null && args.indexOf(\"group\",0) >= 0) {\n      group = (String) args.get(\"group\");\n    } else {\n      log.warn(\"TrackingUpdateProcessorFactory initialized without group configuration, using 'default' but this group is shared\" +\n          \"across the entire VM and guaranteed to have unpredictable behavior if used by more than one test\");\n    }\n    // compute if absent to avoid replacing in the case of multiple \"default\"\n    commandQueueMap.computeIfAbsent(group, s -> new ArrayList<>());\n    groupMembership.computeIfAbsent(group,s-> new ConcurrentHashSet<>());\n    groupSerialNums.computeIfAbsent(group,s-> new AtomicInteger(0));\n\n    groupMembership.get(group).add(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TrackingUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    if (args != null && args.indexOf(\"group\",0) >= 0) {\n      group = (String) args.get(\"group\");\n    } else {\n      log.warn(\"TrackingUpdateProcessorFactory initialized without group configuration, using 'default' but this group is shared\" +\n          \"across the entire VM and guaranteed to have unpredictable behavior if used by more than one test\");\n    }\n    // compute if absent to avoid replacing in the case of multiple \"default\"\n    commandQueueMap.computeIfAbsent(group, s -> new ArrayList<>());\n    groupMembership.computeIfAbsent(group,s-> new ConcurrentHashSet<>());\n    groupSerialNums.computeIfAbsent(group,s-> new AtomicInteger(0));\n\n    groupMembership.get(group).add(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TrackingUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    if (args != null && args.indexOf(\"group\",0) >= 0) {\n      group = (String) args.get(\"group\");\n    } else {\n      log.warn(\"TrackingUpdateProcessorFactory initialized without group configuration, using 'default' but this group is shared\" +\n          \"across the entire VM and guaranteed to have unpredictable behavior if used by more than one test\");\n    }\n    // compute if absent to avoid replacing in the case of multiple \"default\"\n    commandQueueMap.computeIfAbsent(group, s -> new ArrayList<>());\n    groupMembership.computeIfAbsent(group,s-> new ConcurrentHashSet<>());\n    groupSerialNums.computeIfAbsent(group,s-> new AtomicInteger(0));\n\n    groupMembership.get(group).add(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849083f8095b1ffaff05a66e0b1e024617b9968d","date":1536291524,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TrackingUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TrackingUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    if (args != null && args.indexOf(\"group\",0) >= 0) {\n      group = (String) args.get(\"group\");\n      log.debug(\"Init URP, group '{}'\", group);\n    } else {\n      log.warn(\"TrackingUpdateProcessorFactory initialized without group configuration, using 'default' but this group is shared\" +\n          \"across the entire VM and guaranteed to have unpredictable behavior if used by more than one test\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    if (args != null && args.indexOf(\"group\",0) >= 0) {\n      group = (String) args.get(\"group\");\n    } else {\n      log.warn(\"TrackingUpdateProcessorFactory initialized without group configuration, using 'default' but this group is shared\" +\n          \"across the entire VM and guaranteed to have unpredictable behavior if used by more than one test\");\n    }\n    // compute if absent to avoid replacing in the case of multiple \"default\"\n    commandQueueMap.computeIfAbsent(group, s -> new ArrayList<>());\n    groupMembership.computeIfAbsent(group,s-> new ConcurrentHashSet<>());\n    groupSerialNums.computeIfAbsent(group,s-> new AtomicInteger(0));\n\n    groupMembership.get(group).add(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TrackingUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TrackingUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    if (args != null && args.indexOf(\"group\",0) >= 0) {\n      group = (String) args.get(\"group\");\n      log.debug(\"Init URP, group '{}'\", group);\n    } else {\n      log.warn(\"TrackingUpdateProcessorFactory initialized without group configuration, using 'default' but this group is shared\" +\n          \"across the entire VM and guaranteed to have unpredictable behavior if used by more than one test\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    if (args != null && args.indexOf(\"group\",0) >= 0) {\n      group = (String) args.get(\"group\");\n      log.debug(\"Init URP, group '{}'\", group);\n    } else {\n      log.warn(\"TrackingUpdateProcessorFactory initialized without group configuration, using 'default' but this group is shared\" +\n          \"across the entire VM and guaranteed to have unpredictable behavior if used by more than one test\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b45f127b5537b5bf62181784ef28b52f4b6a08"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["60b45f127b5537b5bf62181784ef28b52f4b6a08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b45f127b5537b5bf62181784ef28b52f4b6a08"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","60b45f127b5537b5bf62181784ef28b52f4b6a08","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["e98520789adb1d5ad05afb4956eca0944a929688"],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","849083f8095b1ffaff05a66e0b1e024617b9968d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}