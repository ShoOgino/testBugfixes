{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#mergeFieldTypesFromZk(Document,XPath).mjava","commits":[{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#mergeFieldTypesFromZk(Document,XPath).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads FieldType objects defined in the schema.xml document.\n   *\n   * @param document Schema XML document where field types are defined.\n   * @param xpath Used for evaluating xpath expressions to find field types defined in the schema.xml.\n   * @throws javax.xml.xpath.XPathExpressionException if an error occurs when finding field type elements in the document.\n   */\n  protected synchronized void mergeFieldTypesFromZk(Document document, XPath xpath)\n      throws XPathExpressionException\n  {\n    Map<String, FieldType> newFieldTypes = new HashMap<String, FieldType>();\n    FieldTypePluginLoader typeLoader = new FieldTypePluginLoader(this, newFieldTypes, schemaAware);\n    String expression = getFieldTypeXPathExpressions();\n    NodeList nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);\n    typeLoader.load(loader, nodes);\n    for (String newTypeName : newFieldTypes.keySet())\n      fieldTypes.put(newTypeName, newFieldTypes.get(newTypeName));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#mergeFieldTypesFromZk(Document,XPath).mjava","sourceNew":null,"sourceOld":"  /**\n   * Loads FieldType objects defined in the schema.xml document.\n   *\n   * @param document Schema XML document where field types are defined.\n   * @param xpath Used for evaluating xpath expressions to find field types defined in the schema.xml.\n   * @throws javax.xml.xpath.XPathExpressionException if an error occurs when finding field type elements in the document.\n   */\n  protected synchronized void mergeFieldTypesFromZk(Document document, XPath xpath)\n      throws XPathExpressionException\n  {\n    Map<String, FieldType> newFieldTypes = new HashMap<String, FieldType>();\n    FieldTypePluginLoader typeLoader = new FieldTypePluginLoader(this, newFieldTypes, schemaAware);\n    String expression = getFieldTypeXPathExpressions();\n    NodeList nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);\n    typeLoader.load(loader, nodes);\n    for (String newTypeName : newFieldTypes.keySet())\n      fieldTypes.put(newTypeName, newFieldTypes.get(newTypeName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#mergeFieldTypesFromZk(Document,XPath).mjava","sourceNew":null,"sourceOld":"  /**\n   * Loads FieldType objects defined in the schema.xml document.\n   *\n   * @param document Schema XML document where field types are defined.\n   * @param xpath Used for evaluating xpath expressions to find field types defined in the schema.xml.\n   * @throws javax.xml.xpath.XPathExpressionException if an error occurs when finding field type elements in the document.\n   */\n  protected synchronized void mergeFieldTypesFromZk(Document document, XPath xpath)\n      throws XPathExpressionException\n  {\n    Map<String, FieldType> newFieldTypes = new HashMap<String, FieldType>();\n    FieldTypePluginLoader typeLoader = new FieldTypePluginLoader(this, newFieldTypes, schemaAware);\n    String expression = getFieldTypeXPathExpressions();\n    NodeList nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);\n    typeLoader.load(loader, nodes);\n    for (String newTypeName : newFieldTypes.keySet())\n      fieldTypes.put(newTypeName, newFieldTypes.get(newTypeName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bdf16ebe435fc9daea90a73b8683ff001c6d3523","eeeea2295d6355a29e259130a5c48ace73022d7c"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}