{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = (ClusteringEngine) loader.newInstance(className);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = (ClusteringEngine) loader.newInstance(className);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = (ClusteringEngine) loader.newInstance(className);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = (ClusteringEngine) loader.newInstance(className);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = loader.newInstance(className, ClusteringEngine.class);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = (ClusteringEngine) loader.newInstance(className);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = loader.newInstance(className, ClusteringEngine.class);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = loader.newInstance(className, ClusteringEngine.class);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = loader.newInstance(className, ClusteringEngine.class);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = loader.newInstance(className, ClusteringEngine.class);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"788184b02a01588fb0bca602e39018a580397a99","date":1378925127,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n\n      // Our target list of engines, split into search-results and document clustering.\n      SolrResourceLoader loader = core.getResourceLoader();\n  \n      for (Map.Entry<String,Object> entry : initParams) {\n        if (\"engine\".equals(entry.getKey())) {\n          NamedList<Object> engineInitParams = (NamedList<Object>) entry.getValue();\n          \n          String engineClassName = StringUtils.defaultIfBlank( \n              (String) engineInitParams.get(\"classname\"),\n              CarrotClusteringEngine.class.getName()); \n  \n          // Instantiate the clustering engine and split to appropriate map. \n          final ClusteringEngine engine = loader.newInstance(engineClassName, ClusteringEngine.class);\n          final String name = StringUtils.defaultIfBlank(engine.init(engineInitParams, core), \"\");\n          final ClusteringEngine previousEntry;\n          if (engine instanceof SearchClusteringEngine) {\n            previousEntry = searchClusteringEngines.put(name, (SearchClusteringEngine) engine);\n          } else if (engine instanceof DocumentClusteringEngine) {\n            previousEntry = documentClusteringEngines.put(name, (DocumentClusteringEngine) engine);\n          } else {\n            log.warn(\"Unknown type of a clustering engine for class: \" + engineClassName);\n            continue;\n          }\n          if (previousEntry != null) {\n            log.warn(\"Duplicate clustering engine component named '\" + name + \"'.\");\n          }\n        }\n      }\n\n      // Set up the default engine key for both types of engines.\n      setupDefaultEngine(\"search results clustering\", searchClusteringEngines);\n      setupDefaultEngine(\"document clustering\", documentClusteringEngines);\n\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = loader.newInstance(className, ClusteringEngine.class);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5","date":1440505299,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n\n      // Our target list of engines, split into search-results and document clustering.\n      SolrResourceLoader loader = core.getResourceLoader();\n  \n      for (Map.Entry<String,Object> entry : initParams) {\n        if (\"engine\".equals(entry.getKey())) {\n          NamedList<Object> engineInitParams = (NamedList<Object>) entry.getValue();\n          Boolean optional = engineInitParams.getBooleanArg(\"optional\");\n          optional = (optional == null ? Boolean.FALSE : optional);\n\n          String engineClassName = StringUtils.defaultIfBlank( \n              (String) engineInitParams.get(\"classname\"),\n              CarrotClusteringEngine.class.getName()); \n  \n          // Instantiate the clustering engine and split to appropriate map. \n          final ClusteringEngine engine = loader.newInstance(engineClassName, ClusteringEngine.class);\n          final String name = StringUtils.defaultIfBlank(engine.init(engineInitParams, core), \"\");\n\n          if (!engine.isAvailable()) {\n            if (optional) {\n              log.info(\"Optional clustering engine not available: \" + name);\n            } else {\n              throw new SolrException(ErrorCode.SERVER_ERROR, \n                  \"A required clustering engine failed to initialize, check the logs: \" + name);\n            }\n          }\n          \n          final ClusteringEngine previousEntry;\n          if (engine instanceof SearchClusteringEngine) {\n            previousEntry = searchClusteringEngines.put(name, (SearchClusteringEngine) engine);\n          } else if (engine instanceof DocumentClusteringEngine) {\n            previousEntry = documentClusteringEngines.put(name, (DocumentClusteringEngine) engine);\n          } else {\n            log.warn(\"Unknown type of a clustering engine for class: \" + engineClassName);\n            continue;\n          }\n          if (previousEntry != null) {\n            log.warn(\"Duplicate clustering engine component named '\" + name + \"'.\");\n          }\n        }\n      }\n\n      // Set up the default engine key for both types of engines.\n      setupDefaultEngine(\"search results clustering\", searchClusteringEngines);\n      setupDefaultEngine(\"document clustering\", documentClusteringEngines);\n\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n\n      // Our target list of engines, split into search-results and document clustering.\n      SolrResourceLoader loader = core.getResourceLoader();\n  \n      for (Map.Entry<String,Object> entry : initParams) {\n        if (\"engine\".equals(entry.getKey())) {\n          NamedList<Object> engineInitParams = (NamedList<Object>) entry.getValue();\n          \n          String engineClassName = StringUtils.defaultIfBlank( \n              (String) engineInitParams.get(\"classname\"),\n              CarrotClusteringEngine.class.getName()); \n  \n          // Instantiate the clustering engine and split to appropriate map. \n          final ClusteringEngine engine = loader.newInstance(engineClassName, ClusteringEngine.class);\n          final String name = StringUtils.defaultIfBlank(engine.init(engineInitParams, core), \"\");\n          final ClusteringEngine previousEntry;\n          if (engine instanceof SearchClusteringEngine) {\n            previousEntry = searchClusteringEngines.put(name, (SearchClusteringEngine) engine);\n          } else if (engine instanceof DocumentClusteringEngine) {\n            previousEntry = documentClusteringEngines.put(name, (DocumentClusteringEngine) engine);\n          } else {\n            log.warn(\"Unknown type of a clustering engine for class: \" + engineClassName);\n            continue;\n          }\n          if (previousEntry != null) {\n            log.warn(\"Duplicate clustering engine component named '\" + name + \"'.\");\n          }\n        }\n      }\n\n      // Set up the default engine key for both types of engines.\n      setupDefaultEngine(\"search results clustering\", searchClusteringEngines);\n      setupDefaultEngine(\"document clustering\", documentClusteringEngines);\n\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n\n      // Our target list of engines, split into search-results and document clustering.\n      SolrResourceLoader loader = core.getResourceLoader();\n  \n      for (Map.Entry<String,Object> entry : initParams) {\n        if (\"engine\".equals(entry.getKey())) {\n          NamedList<Object> engineInitParams = (NamedList<Object>) entry.getValue();\n          Boolean optional = engineInitParams.getBooleanArg(\"optional\");\n          optional = (optional == null ? Boolean.FALSE : optional);\n\n          String engineClassName = StringUtils.defaultIfBlank( \n              (String) engineInitParams.get(\"classname\"),\n              CarrotClusteringEngine.class.getName()); \n  \n          // Instantiate the clustering engine and split to appropriate map. \n          final ClusteringEngine engine = loader.newInstance(engineClassName, ClusteringEngine.class);\n          final String name = StringUtils.defaultIfBlank(engine.init(engineInitParams, core), \"\");\n\n          if (!engine.isAvailable()) {\n            if (optional) {\n              log.info(\"Optional clustering engine not available: {}\", name);\n            } else {\n              throw new SolrException(ErrorCode.SERVER_ERROR, \n                  \"A required clustering engine failed to initialize, check the logs: \" + name);\n            }\n          }\n          \n          final ClusteringEngine previousEntry;\n          if (engine instanceof SearchClusteringEngine) {\n            previousEntry = searchClusteringEngines.put(name, (SearchClusteringEngine) engine);\n          } else if (engine instanceof DocumentClusteringEngine) {\n            previousEntry = documentClusteringEngines.put(name, (DocumentClusteringEngine) engine);\n          } else {\n            log.warn(\"Unknown type of a clustering engine for class: {}\", engineClassName);\n            continue;\n          }\n          if (previousEntry != null) {\n            log.warn(\"Duplicate clustering engine component named '{}'.\", name);\n          }\n        }\n      }\n\n      // Set up the default engine key for both types of engines.\n      setupDefaultEngine(\"search results clustering\", searchClusteringEngines);\n      setupDefaultEngine(\"document clustering\", documentClusteringEngines);\n\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n\n      // Our target list of engines, split into search-results and document clustering.\n      SolrResourceLoader loader = core.getResourceLoader();\n  \n      for (Map.Entry<String,Object> entry : initParams) {\n        if (\"engine\".equals(entry.getKey())) {\n          NamedList<Object> engineInitParams = (NamedList<Object>) entry.getValue();\n          Boolean optional = engineInitParams.getBooleanArg(\"optional\");\n          optional = (optional == null ? Boolean.FALSE : optional);\n\n          String engineClassName = StringUtils.defaultIfBlank( \n              (String) engineInitParams.get(\"classname\"),\n              CarrotClusteringEngine.class.getName()); \n  \n          // Instantiate the clustering engine and split to appropriate map. \n          final ClusteringEngine engine = loader.newInstance(engineClassName, ClusteringEngine.class);\n          final String name = StringUtils.defaultIfBlank(engine.init(engineInitParams, core), \"\");\n\n          if (!engine.isAvailable()) {\n            if (optional) {\n              log.info(\"Optional clustering engine not available: \" + name);\n            } else {\n              throw new SolrException(ErrorCode.SERVER_ERROR, \n                  \"A required clustering engine failed to initialize, check the logs: \" + name);\n            }\n          }\n          \n          final ClusteringEngine previousEntry;\n          if (engine instanceof SearchClusteringEngine) {\n            previousEntry = searchClusteringEngines.put(name, (SearchClusteringEngine) engine);\n          } else if (engine instanceof DocumentClusteringEngine) {\n            previousEntry = documentClusteringEngines.put(name, (DocumentClusteringEngine) engine);\n          } else {\n            log.warn(\"Unknown type of a clustering engine for class: \" + engineClassName);\n            continue;\n          }\n          if (previousEntry != null) {\n            log.warn(\"Duplicate clustering engine component named '\" + name + \"'.\");\n          }\n        }\n      }\n\n      // Set up the default engine key for both types of engines.\n      setupDefaultEngine(\"search results clustering\", searchClusteringEngines);\n      setupDefaultEngine(\"document clustering\", documentClusteringEngines);\n\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","7530de27b87b961b51f01bd1299b7004d46e8823"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"788184b02a01588fb0bca602e39018a580397a99":["7530de27b87b961b51f01bd1299b7004d46e8823"],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["788184b02a01588fb0bca602e39018a580397a99"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"7530de27b87b961b51f01bd1299b7004d46e8823":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"788184b02a01588fb0bca602e39018a580397a99":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","788184b02a01588fb0bca602e39018a580397a99"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}