{"path":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n\n      public List readIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":null,"sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n\n      public List readIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n\n      public List readIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n\n      public List readIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n\n      public List readIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75ed70ebff903842ce0bf09b37df09f11f89ad4f","date":1276477396,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n\n      public List readIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":["8d0c1d69778439d99fc635727129e99480e64f06"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n\n      public List readIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a3b94b80956124d73f4ba1d13a45e982692f9e8","date":1292957997,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":["8d0c1d69778439d99fc635727129e99480e64f06"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["3a3b94b80956124d73f4ba1d13a45e982692f9e8"],"70ad682703b8585f5d0a637efec044d57ec05efb":["75ed70ebff903842ce0bf09b37df09f11f89ad4f","3a3b94b80956124d73f4ba1d13a45e982692f9e8"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a3b94b80956124d73f4ba1d13a45e982692f9e8":["75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"75ed70ebff903842ce0bf09b37df09f11f89ad4f":["1da8d55113b689b06716246649de6f62430f15c0"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["5f4e87790277826a2aea119328600dfb07761f32","3a3b94b80956124d73f4ba1d13a45e982692f9e8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"3a3b94b80956124d73f4ba1d13a45e982692f9e8":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"75ed70ebff903842ce0bf09b37df09f11f89ad4f":["70ad682703b8585f5d0a637efec044d57ec05efb","3a3b94b80956124d73f4ba1d13a45e982692f9e8","5f4e87790277826a2aea119328600dfb07761f32"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}