{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","commits":[{"id":"0a04035855bf53c50aaef580f2ec794acf73029e","date":1253578101,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    \n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    if(log.isLoggable(Level.FINE)) {\n      log.fine(\"scale \"+scale+\" startX \"+ startX + \" endX \"+endX +\" startY \"+ startY + \" endY \"+ endY +\" tierVert \"+ tierVert);\n    }\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e59cead675ff912b2ffdac41ca1a2fa7d905b8fa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e59cead675ff912b2ffdac41ca1a2fa7d905b8fa","date":1257446961,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","sourceNew":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    \n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","sourceOld":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    \n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    if(log.isLoggable(Level.FINE)) {\n      log.fine(\"scale \"+scale+\" startX \"+ startX + \" endX \"+endX +\" startY \"+ startY + \" endY \"+ endY +\" tierVert \"+ tierVert);\n    }\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","bugFix":["0a04035855bf53c50aaef580f2ec794acf73029e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","sourceNew":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    \n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","sourceOld":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    \n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e59cead675ff912b2ffdac41ca1a2fa7d905b8fa":["0a04035855bf53c50aaef580f2ec794acf73029e"],"0a04035855bf53c50aaef580f2ec794acf73029e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e59cead675ff912b2ffdac41ca1a2fa7d905b8fa"]},"commit2Childs":{"e59cead675ff912b2ffdac41ca1a2fa7d905b8fa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0a04035855bf53c50aaef580f2ec794acf73029e":["e59cead675ff912b2ffdac41ca1a2fa7d905b8fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a04035855bf53c50aaef580f2ec794acf73029e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}