{"path":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","commits":[{"id":"9359ad4a5596673c3154ffa1133458f00e124234","date":1428012026,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final long segmentOrd = values.getOrd(approximationScorer.docID());\n          if (segmentOrd != -1) {\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final long segmentOrd = values.getOrd(approximationScorer.docID());\n          if (segmentOrd != -1) {\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","sourceNew":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final long segmentOrd = values.getOrd(approximationScorer.docID());\n          if (segmentOrd != -1) {\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final long segmentOrd = values.getOrd(approximationScorer.docID());\n          if (segmentOrd != -1) {\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","sourceNew":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final long segmentOrd = values.getOrd(approximation.docID());\n          if (segmentOrd != -1) {\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final long segmentOrd = values.getOrd(approximationScorer.docID());\n          if (segmentOrd != -1) {\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","sourceNew":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          int docID = approximation.docID();\n          if (docID > values.docID()) {\n            values.advance(docID);\n          }\n          if (docID == values.docID()) {\n            final long segmentOrd = values.ordValue();\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final long segmentOrd = values.getOrd(approximation.docID());\n          if (segmentOrd != -1) {\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","sourceNew":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          int docID = approximation.docID();\n          if (docID > values.docID()) {\n            values.advance(docID);\n          }\n          if (docID == values.docID()) {\n            final long segmentOrd = values.ordValue();\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final long segmentOrd = values.getOrd(approximation.docID());\n          if (segmentOrd != -1) {\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","sourceNew":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          int docID = approximation.docID();\n          if (docID > values.docID()) {\n            values.advance(docID);\n          }\n          if (docID == values.docID()) {\n            final long segmentOrd = values.ordValue();\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final long segmentOrd = values.getOrd(approximation.docID());\n          if (segmentOrd != -1) {\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","date":1518443389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","sourceNew":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          if (values.advanceExact(approximation.docID())) {\n            final long segmentOrd = values.ordValue();\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          int docID = approximation.docID();\n          if (docID > values.docID()) {\n            values.advance(docID);\n          }\n          if (docID == values.docID()) {\n            final long segmentOrd = values.ordValue();\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/GlobalOrdinalsQuery.OrdinalMapScorer#createTwoPhaseIterator(DocIdSetIterator).mjava","sourceNew":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          if (values.advanceExact(approximation.docID())) {\n            final long segmentOrd = values.ordValue();\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected TwoPhaseIterator createTwoPhaseIterator(DocIdSetIterator approximation) {\n      return new TwoPhaseIterator(approximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          int docID = approximation.docID();\n          if (docID > values.docID()) {\n            values.advance(docID);\n          }\n          if (docID == values.docID()) {\n            final long segmentOrd = values.ordValue();\n            final long globalOrd = segmentOrdToGlobalOrdLookup.get(segmentOrd);\n            if (foundOrds.get(globalOrd)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        @Override\n        public float matchCost() {\n          return 100; // TODO: use cost of values.getOrd() and foundOrds.get()\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["9359ad4a5596673c3154ffa1133458f00e124234"],"9359ad4a5596673c3154ffa1133458f00e124234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7dd748bb245633a8195281556bb0e68a6ea97d18","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9359ad4a5596673c3154ffa1133458f00e124234"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","81f64a6570bc5d216c5d575c3b29ecb106fa0e6b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"9359ad4a5596673c3154ffa1133458f00e124234":["d277693481ea6007c1d83cd503d0859bb3b64d20","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9359ad4a5596673c3154ffa1133458f00e124234","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","bfcdec9fcf0409223f35c5ec3bc14094314941b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}