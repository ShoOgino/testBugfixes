{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n  }\n\n","sourceOld":"  public SnapPuller(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n    \n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fcfe48dbe89ecd0d0b76f5933dc7f962e10554c","date":1442604740,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HttpClientUtil.PROP_SO_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, connTimeout, readTimeout, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71475d88ea48a7d9a847f209667255318b3ea4c7","date":1461758968,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(\"/replication\")) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the /replication suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":["859081acf00749f5dd462772c571d611d4a4d2db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04ecf884544ff74add5faa452748f160c4af904b","date":1506527215,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnMasterVersionZero = initArgs.get(SKIP_COMMIT_ON_MASTER_VERSION_ZERO);\n    if (skipCommitOnMasterVersionZero != null && skipCommitOnMasterVersionZero instanceof Boolean) {\n      this.skipCommitOnMasterVersionZero = (boolean) skipCommitOnMasterVersionZero;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnMasterVersionZero = initArgs.get(SKIP_COMMIT_ON_MASTER_VERSION_ZERO);\n    if (skipCommitOnMasterVersionZero != null && skipCommitOnMasterVersionZero instanceof Boolean) {\n      this.skipCommitOnMasterVersionZero = (boolean) skipCommitOnMasterVersionZero;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9767eba84e83b05b2a675421e190f4a4c15dad44","date":1508967004,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnMasterVersionZero = initArgs.get(SKIP_COMMIT_ON_MASTER_VERSION_ZERO);\n    if (skipCommitOnMasterVersionZero != null && skipCommitOnMasterVersionZero instanceof Boolean) {\n      this.skipCommitOnMasterVersionZero = (boolean) skipCommitOnMasterVersionZero;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    if (initArgs.getBooleanArg(TLOG_FILES) != null) {\n      downloadTlogFiles = initArgs.getBooleanArg(TLOG_FILES);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnMasterVersionZero = initArgs.get(SKIP_COMMIT_ON_MASTER_VERSION_ZERO);\n    if (skipCommitOnMasterVersionZero != null && skipCommitOnMasterVersionZero instanceof Boolean) {\n      this.skipCommitOnMasterVersionZero = (boolean) skipCommitOnMasterVersionZero;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnMasterVersionZero = initArgs.get(SKIP_COMMIT_ON_MASTER_VERSION_ZERO);\n    if (skipCommitOnMasterVersionZero != null && skipCommitOnMasterVersionZero instanceof Boolean) {\n      this.skipCommitOnMasterVersionZero = (boolean) skipCommitOnMasterVersionZero;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      log.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    if (initArgs.getBooleanArg(TLOG_FILES) != null) {\n      downloadTlogFiles = initArgs.getBooleanArg(TLOG_FILES);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnMasterVersionZero = initArgs.get(SKIP_COMMIT_ON_MASTER_VERSION_ZERO);\n    if (skipCommitOnMasterVersionZero != null && skipCommitOnMasterVersionZero instanceof Boolean) {\n      this.skipCommitOnMasterVersionZero = (boolean) skipCommitOnMasterVersionZero;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      LOG.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    if (initArgs.getBooleanArg(TLOG_FILES) != null) {\n      downloadTlogFiles = initArgs.getBooleanArg(TLOG_FILES);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnMasterVersionZero = initArgs.get(SKIP_COMMIT_ON_MASTER_VERSION_ZERO);\n    if (skipCommitOnMasterVersionZero != null && skipCommitOnMasterVersionZero instanceof Boolean) {\n      this.skipCommitOnMasterVersionZero = (boolean) skipCommitOnMasterVersionZero;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      log.warn(\"'masterUrl' must be specified without the {} suffix\", ReplicationHandler.PATH);\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    if (initArgs.getBooleanArg(TLOG_FILES) != null) {\n      downloadTlogFiles = initArgs.getBooleanArg(TLOG_FILES);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnMasterVersionZero = initArgs.get(SKIP_COMMIT_ON_MASTER_VERSION_ZERO);\n    if (skipCommitOnMasterVersionZero != null && skipCommitOnMasterVersionZero instanceof Boolean) {\n      this.skipCommitOnMasterVersionZero = (boolean) skipCommitOnMasterVersionZero;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      log.warn(\"'masterUrl' must be specified without the \"+ReplicationHandler.PATH+\" suffix\");\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    if (initArgs.getBooleanArg(TLOG_FILES) != null) {\n      downloadTlogFiles = initArgs.getBooleanArg(TLOG_FILES);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(@SuppressWarnings({\"rawtypes\"})final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnMasterVersionZero = initArgs.get(SKIP_COMMIT_ON_MASTER_VERSION_ZERO);\n    if (skipCommitOnMasterVersionZero != null && skipCommitOnMasterVersionZero instanceof Boolean) {\n      this.skipCommitOnMasterVersionZero = (boolean) skipCommitOnMasterVersionZero;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      log.warn(\"'masterUrl' must be specified without the {} suffix\", ReplicationHandler.PATH);\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    if (initArgs.getBooleanArg(TLOG_FILES) != null) {\n      downloadTlogFiles = initArgs.getBooleanArg(TLOG_FILES);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnMasterVersionZero = initArgs.get(SKIP_COMMIT_ON_MASTER_VERSION_ZERO);\n    if (skipCommitOnMasterVersionZero != null && skipCommitOnMasterVersionZero instanceof Boolean) {\n      this.skipCommitOnMasterVersionZero = (boolean) skipCommitOnMasterVersionZero;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      log.warn(\"'masterUrl' must be specified without the {} suffix\", ReplicationHandler.PATH);\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    if (initArgs.getBooleanArg(TLOG_FILES) != null) {\n      downloadTlogFiles = initArgs.getBooleanArg(TLOG_FILES);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(@SuppressWarnings({\"rawtypes\"})final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnLeaderVersionZero = ReplicationHandler.getObjectWithBackwardCompatibility(initArgs, SKIP_COMMIT_ON_LEADER_VERSION_ZERO, LEGACY_SKIP_COMMIT_ON_LEADER_VERSION_ZERO);\n    if (skipCommitOnLeaderVersionZero != null && skipCommitOnLeaderVersionZero instanceof Boolean) {\n      this.skipCommitOnLeaderVersionZero = (boolean) skipCommitOnLeaderVersionZero;\n    }\n    String leaderUrl = ReplicationHandler.getObjectWithBackwardCompatibility(initArgs, LEADER_URL, LEGACY_LEADER_URL);\n    if (leaderUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'leaderUrl' is required for a follower\");\n    if (leaderUrl != null && leaderUrl.endsWith(ReplicationHandler.PATH)) {\n      leaderUrl = leaderUrl.substring(0, leaderUrl.length()-12);\n      log.warn(\"'leaderUrl' must be specified without the {} suffix\", ReplicationHandler.PATH);\n    }\n    this.leaderUrl = leaderUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a leader override for tests - you specify this in /replication follower section of solrconfig and some\n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    if (initArgs.getBooleanArg(TLOG_FILES) != null) {\n      downloadTlogFiles = initArgs.getBooleanArg(TLOG_FILES);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(@SuppressWarnings({\"rawtypes\"})final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnMasterVersionZero = initArgs.get(SKIP_COMMIT_ON_MASTER_VERSION_ZERO);\n    if (skipCommitOnMasterVersionZero != null && skipCommitOnMasterVersionZero instanceof Boolean) {\n      this.skipCommitOnMasterVersionZero = (boolean) skipCommitOnMasterVersionZero;\n    }\n    String masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    if (masterUrl != null && masterUrl.endsWith(ReplicationHandler.PATH)) {\n      masterUrl = masterUrl.substring(0, masterUrl.length()-12);\n      log.warn(\"'masterUrl' must be specified without the {} suffix\", ReplicationHandler.PATH);\n    }\n    this.masterUrl = masterUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a master override for tests - you specify this in /replication slave section of solrconfig and some \n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    if (initArgs.getBooleanArg(TLOG_FILES) != null) {\n      downloadTlogFiles = initArgs.getBooleanArg(TLOG_FILES);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#IndexFetcher(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public IndexFetcher(@SuppressWarnings({\"rawtypes\"})final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnLeaderVersionZero = ReplicationHandler.getObjectWithBackwardCompatibility(initArgs, SKIP_COMMIT_ON_LEADER_VERSION_ZERO, LEGACY_SKIP_COMMIT_ON_LEADER_VERSION_ZERO);\n    if (skipCommitOnLeaderVersionZero != null && skipCommitOnLeaderVersionZero instanceof Boolean) {\n      this.skipCommitOnLeaderVersionZero = (boolean) skipCommitOnLeaderVersionZero;\n    }\n    String leaderUrl = ReplicationHandler.getObjectWithBackwardCompatibility(initArgs, LEADER_URL, LEGACY_LEADER_URL);\n    if (leaderUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'leaderUrl' is required for a follower\");\n    if (leaderUrl != null && leaderUrl.endsWith(ReplicationHandler.PATH)) {\n      leaderUrl = leaderUrl.substring(0, leaderUrl.length()-12);\n      log.warn(\"'leaderUrl' must be specified without the {} suffix\", ReplicationHandler.PATH);\n    }\n    this.leaderUrl = leaderUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a leader override for tests - you specify this in /replication follower section of solrconfig and some\n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","sourceOld":"  public IndexFetcher(@SuppressWarnings({\"rawtypes\"})final NamedList initArgs, final ReplicationHandler handler, final SolrCore sc) {\n    solrCore = sc;\n    Object fetchFromLeader = initArgs.get(FETCH_FROM_LEADER);\n    if (fetchFromLeader != null && fetchFromLeader instanceof Boolean) {\n      this.fetchFromLeader = (boolean) fetchFromLeader;\n    }\n    Object skipCommitOnLeaderVersionZero = ReplicationHandler.getObjectWithBackwardCompatibility(initArgs, SKIP_COMMIT_ON_LEADER_VERSION_ZERO, LEGACY_SKIP_COMMIT_ON_LEADER_VERSION_ZERO);\n    if (skipCommitOnLeaderVersionZero != null && skipCommitOnLeaderVersionZero instanceof Boolean) {\n      this.skipCommitOnLeaderVersionZero = (boolean) skipCommitOnLeaderVersionZero;\n    }\n    String leaderUrl = ReplicationHandler.getObjectWithBackwardCompatibility(initArgs, LEADER_URL, LEGACY_LEADER_URL);\n    if (leaderUrl == null && !this.fetchFromLeader)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'leaderUrl' is required for a follower\");\n    if (leaderUrl != null && leaderUrl.endsWith(ReplicationHandler.PATH)) {\n      leaderUrl = leaderUrl.substring(0, leaderUrl.length()-12);\n      log.warn(\"'leaderUrl' must be specified without the {} suffix\", ReplicationHandler.PATH);\n    }\n    this.leaderUrl = leaderUrl;\n\n    this.replicationHandler = handler;\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternalCompression = INTERNAL.equals(compress);\n    useExternalCompression = EXTERNAL.equals(compress);\n    connTimeout = getParameter(initArgs, HttpClientUtil.PROP_CONNECTION_TIMEOUT, 30000, null);\n    \n    // allow a leader override for tests - you specify this in /replication follower section of solrconfig and some\n    // test don't want to define this\n    soTimeout = Integer.getInteger(\"solr.indexfetcher.sotimeout\", -1);\n    if (soTimeout == -1) {\n      soTimeout = getParameter(initArgs, HttpClientUtil.PROP_SO_TIMEOUT, 120000, null);\n    }\n\n    if (initArgs.getBooleanArg(TLOG_FILES) != null) {\n      downloadTlogFiles = initArgs.getBooleanArg(TLOG_FILES);\n    }\n\n    String httpBasicAuthUser = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    myHttpClient = createHttpClient(solrCore, httpBasicAuthUser, httpBasicAuthPassword, useExternalCompression);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9767eba84e83b05b2a675421e190f4a4c15dad44":["04ecf884544ff74add5faa452748f160c4af904b"],"04ecf884544ff74add5faa452748f160c4af904b":["be320990bdc77e643388fa801e75017f19289c42"],"ad28156288ac00b91352582904d97e6653205757":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"859081acf00749f5dd462772c571d611d4a4d2db":["1fcfe48dbe89ecd0d0b76f5933dc7f962e10554c"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ad28156288ac00b91352582904d97e6653205757"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["ab68488225b6a6c357dda72ed11dedca9914a192","04ecf884544ff74add5faa452748f160c4af904b"],"1fcfe48dbe89ecd0d0b76f5933dc7f962e10554c":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"be320990bdc77e643388fa801e75017f19289c42":["ad28156288ac00b91352582904d97e6653205757"],"ab68488225b6a6c357dda72ed11dedca9914a192":["ad28156288ac00b91352582904d97e6653205757","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["859081acf00749f5dd462772c571d611d4a4d2db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9767eba84e83b05b2a675421e190f4a4c15dad44"]},"commit2Childs":{"9767eba84e83b05b2a675421e190f4a4c15dad44":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"04ecf884544ff74add5faa452748f160c4af904b":["9767eba84e83b05b2a675421e190f4a4c15dad44","6240b74b884c5587f2a4062dd27d6c32bf228889"],"ad28156288ac00b91352582904d97e6653205757":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["1fcfe48dbe89ecd0d0b76f5933dc7f962e10554c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["86290366cefc1b9d4eced13b430858c4a4c0421d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"859081acf00749f5dd462772c571d611d4a4d2db":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"1fcfe48dbe89ecd0d0b76f5933dc7f962e10554c":["859081acf00749f5dd462772c571d611d4a4d2db"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"be320990bdc77e643388fa801e75017f19289c42":["04ecf884544ff74add5faa452748f160c4af904b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["ad28156288ac00b91352582904d97e6653205757"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}