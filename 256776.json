{"path":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#loadMainDataFromFile(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#loadMainDataFromFile(String).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#loadMainDataFromFile(String).mjava","sourceNew":"  /**\n   * Load the datafile into this WordDictionary\n   * \n   * @param dctFilePath path to word dictionary (coredict.dct)\n   * @return number of words read\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  private int loadMainDataFromFile(String dctFilePath)\n      throws FileNotFoundException, IOException, UnsupportedEncodingException {\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.\n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        wordItem_charArrayTable[i] = null;\n        wordItem_frequencyTable[i] = null;\n        continue;\n      }\n      wordItem_charArrayTable[i] = new char[cnt][];\n      wordItem_frequencyTable[i] = new int[cnt];\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        // wordItemTable[i][j] = new WordItem();\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        buffer[2] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// handle\n\n        // wordItemTable[i][j].frequency = buffer[0];\n        wordItem_frequencyTable[i][j] = buffer[0];\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          // indexTable[i].wordItems[j].word = tmpword;\n          // wordItemTable[i][j].charArray = tmpword.toCharArray();\n          wordItem_charArrayTable[i][j] = tmpword.toCharArray();\n        } else {\n          // wordItemTable[i][j].charArray = null;\n          wordItem_charArrayTable[i][j] = null;\n        }\n        // System.out.println(indexTable[i].wordItems[j]);\n        j++;\n      }\n\n      String str = getCCByGB2312Id(i);\n      setTableIndex(str.charAt(0), i);\n    }\n    dctFile.close();\n    return total;\n  }\n\n","sourceOld":"  /**\n   * Load the datafile into this WordDictionary\n   * \n   * @param dctFilePath path to word dictionary (coredict.dct)\n   * @return number of words read\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  private int loadMainDataFromFile(String dctFilePath)\n      throws FileNotFoundException, IOException, UnsupportedEncodingException {\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.\n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        wordItem_charArrayTable[i] = null;\n        wordItem_frequencyTable[i] = null;\n        continue;\n      }\n      wordItem_charArrayTable[i] = new char[cnt][];\n      wordItem_frequencyTable[i] = new int[cnt];\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        // wordItemTable[i][j] = new WordItem();\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        buffer[2] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// handle\n\n        // wordItemTable[i][j].frequency = buffer[0];\n        wordItem_frequencyTable[i][j] = buffer[0];\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          // indexTable[i].wordItems[j].word = tmpword;\n          // wordItemTable[i][j].charArray = tmpword.toCharArray();\n          wordItem_charArrayTable[i][j] = tmpword.toCharArray();\n        } else {\n          // wordItemTable[i][j].charArray = null;\n          wordItem_charArrayTable[i][j] = null;\n        }\n        // System.out.println(indexTable[i].wordItems[j]);\n        j++;\n      }\n\n      String str = getCCByGB2312Id(i);\n      setTableIndex(str.charAt(0), i);\n    }\n    dctFile.close();\n    return total;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#loadMainDataFromFile(String).mjava","pathOld":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#loadMainDataFromFile(String).mjava","sourceNew":"  /**\n   * Load the datafile into this WordDictionary\n   * \n   * @param dctFilePath path to word dictionary (coredict.dct)\n   * @return number of words read\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  private int loadMainDataFromFile(String dctFilePath)\n      throws FileNotFoundException, IOException, UnsupportedEncodingException {\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.\n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        wordItem_charArrayTable[i] = null;\n        wordItem_frequencyTable[i] = null;\n        continue;\n      }\n      wordItem_charArrayTable[i] = new char[cnt][];\n      wordItem_frequencyTable[i] = new int[cnt];\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        // wordItemTable[i][j] = new WordItem();\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        buffer[2] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// handle\n\n        // wordItemTable[i][j].frequency = buffer[0];\n        wordItem_frequencyTable[i][j] = buffer[0];\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          // indexTable[i].wordItems[j].word = tmpword;\n          // wordItemTable[i][j].charArray = tmpword.toCharArray();\n          wordItem_charArrayTable[i][j] = tmpword.toCharArray();\n        } else {\n          // wordItemTable[i][j].charArray = null;\n          wordItem_charArrayTable[i][j] = null;\n        }\n        // System.out.println(indexTable[i].wordItems[j]);\n        j++;\n      }\n\n      String str = getCCByGB2312Id(i);\n      setTableIndex(str.charAt(0), i);\n    }\n    dctFile.close();\n    return total;\n  }\n\n","sourceOld":"  /**\n   * Load the datafile into this WordDictionary\n   * \n   * @param dctFilePath path to word dictionary (coredict.dct)\n   * @return number of words read\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  private int loadMainDataFromFile(String dctFilePath)\n      throws FileNotFoundException, IOException, UnsupportedEncodingException {\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.\n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        wordItem_charArrayTable[i] = null;\n        wordItem_frequencyTable[i] = null;\n        continue;\n      }\n      wordItem_charArrayTable[i] = new char[cnt][];\n      wordItem_frequencyTable[i] = new int[cnt];\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        // wordItemTable[i][j] = new WordItem();\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        buffer[2] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// handle\n\n        // wordItemTable[i][j].frequency = buffer[0];\n        wordItem_frequencyTable[i][j] = buffer[0];\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          // indexTable[i].wordItems[j].word = tmpword;\n          // wordItemTable[i][j].charArray = tmpword.toCharArray();\n          wordItem_charArrayTable[i][j] = tmpword.toCharArray();\n        } else {\n          // wordItemTable[i][j].charArray = null;\n          wordItem_charArrayTable[i][j] = null;\n        }\n        // System.out.println(indexTable[i].wordItems[j]);\n        j++;\n      }\n\n      String str = getCCByGB2312Id(i);\n      setTableIndex(str.charAt(0), i);\n    }\n    dctFile.close();\n    return total;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}