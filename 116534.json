{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c0a9afd33c3744fb720d167693a2c10c5d43a4","date":1351713063,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":["b686ecc52b102b7e9b5bdf760b673b73ac8b634b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b64a893a6d2efaa60e289534b1f8713e4aa2c776","date":1373480880,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrServer client = new HttpSolrServer(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = client.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrServer client = new HttpSolrServer(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = client.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrServer client = new HttpSolrServer(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = client.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrServer client = new HttpSolrServer(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = client.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrServer client = new HttpSolrServer(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = client.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrServer client = new HttpSolrServer(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = client.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34d6e1154051f7cf9aa43efb8c3eae8af58222bc","date":1412531774,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-6589\")\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrServer client = new HttpSolrServer(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = client.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrServer client = new HttpSolrServer(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = client.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["2df7a90a3f428916936e8c0b73bb9c48b0fd92b8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2df7a90a3f428916936e8c0b73bb9c48b0fd92b8","date":1412699689,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrServer client = new HttpSolrServer(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = client.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-6589\")\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrServer client = new HttpSolrServer(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = client.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n      client.shutdown();\n    }\n  }\n\n","bugFix":["34d6e1154051f7cf9aa43efb8c3eae8af58222bc"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrClient adminClient = new HttpSolrClient(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = adminClient.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n      adminClient.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = server.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrServer client = new HttpSolrServer(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = client.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = new HttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      HttpSolrClient adminClient = new HttpSolrClient(url);\n      SolrQuery q = new SolrQuery();\n      q.set(\"qt\", \"/admin/info/system\");\n      QueryResponse rsp = adminClient.query(q);\n      assertNotNull(rsp.getResponse().get(\"mode\"));\n      assertNotNull(rsp.getResponse().get(\"lucene\"));\n      adminClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = new HttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = new HttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b686ecc52b102b7e9b5bdf760b673b73ac8b634b","date":1473446709,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    for (SolrDocument outDoc : response.getResults()) {\n      assertEquals(true, outDoc.getFieldValue(\"inStock\"));\n    }\n    \n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","bugFix":["b0c0a9afd33c3744fb720d167693a2c10c5d43a4","acdd729ace9db5d0803eea4849ddc3c2ba196127"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    for (SolrDocument outDoc : response.getResults()) {\n      assertEquals(true, outDoc.getFieldValue(\"inStock\"));\n    }\n    \n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    for (SolrDocument outDoc : response.getResults()) {\n      assertEquals(true, outDoc.getFieldValue(\"inStock\"));\n    }\n    \n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    for (SolrDocument outDoc : response.getResults()) {\n      assertEquals(true, outDoc.getFieldValue(\"inStock\"));\n    }\n    \n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n\n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID );\n    doc.addField( \"name\", \"my name!\" );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\" );\n    doc2.addField( \"inStock\", true );\n    doc2.addField( \"price\", 2 );\n    doc2.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\" );\n    doc3.addField( \"inStock\", false );\n    doc3.addField( \"price\", 3 );\n    doc3.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\" );\n    doc4.addField( \"inStock\", true );\n    doc4.addField( \"price\", 4 );\n    doc4.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\" );\n    doc5.addField( \"inStock\", false );\n    doc5.addField( \"price\", 5 );\n    doc5.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    for (SolrDocument outDoc : response.getResults()) {\n      assertEquals(true, outDoc.getFieldValue(\"inStock\"));\n    }\n    \n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    for (SolrDocument outDoc : response.getResults()) {\n      assertEquals(true, outDoc.getFieldValue(\"inStock\"));\n    }\n    \n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  @SuppressWarnings({\"rawtypes\"})\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID );\n    doc.addField( \"name\", \"my name!\" );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\" );\n    doc2.addField( \"inStock\", true );\n    doc2.addField( \"price\", 2 );\n    doc2.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\" );\n    doc3.addField( \"inStock\", false );\n    doc3.addField( \"price\", 3 );\n    doc3.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\" );\n    doc4.addField( \"inStock\", true );\n    doc4.addField( \"price\", 4 );\n    doc4.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\" );\n    doc5.addField( \"inStock\", false );\n    doc5.addField( \"price\", 5 );\n    doc5.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    for (SolrDocument outDoc : response.getResults()) {\n      assertEquals(true, outDoc.getFieldValue(\"inStock\"));\n    }\n    \n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID );\n    doc.addField( \"name\", \"my name!\" );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = client.add( doc );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = client.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\" );\n    doc2.addField( \"inStock\", true );\n    doc2.addField( \"price\", 2 );\n    doc2.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\" );\n    doc3.addField( \"inStock\", false );\n    doc3.addField( \"price\", 3 );\n    doc3.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\" );\n    doc4.addField( \"inStock\", true );\n    doc4.addField( \"price\", 4 );\n    doc4.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\" );\n    doc5.addField( \"inStock\", false );\n    doc5.addField( \"price\", 5 );\n    doc5.addField( \"timestamp_dt\", new java.util.Date() );\n    docs.add(doc5);\n    \n    upres = client.add( docs );\n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = client.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = client.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n    response = client.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    for (SolrDocument outDoc : response.getResults()) {\n      assertEquals(true, outDoc.getFieldValue(\"inStock\"));\n    }\n    \n    // sanity check round tripping of params...\n    query = new SolrQuery(\"foo\");\n    query.addFilterQuery(\"{!field f=inStock}true\");\n    query.addFilterQuery(\"{!term f=name}hoss\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n\n    response = client.query( query );\n    assertTrue(\"echoed params are not a NamedList: \" +\n               response.getResponseHeader().get(\"params\").getClass(),\n               response.getResponseHeader().get(\"params\") instanceof NamedList);\n    NamedList echo = (NamedList) response.getResponseHeader().get(\"params\");\n    List values = null;\n    assertEquals(\"foo\", echo.get(\"q\"));\n    assertTrue(\"echoed fq is not a List: \" + echo.get(\"fq\").getClass(),\n               echo.get(\"fq\") instanceof List);\n    values = (List) echo.get(\"fq\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"{!field f=inStock}true\", values.get(0));\n    Assert.assertEquals(\"{!term f=name}hoss\", values.get(1));\n    assertTrue(\"echoed facet.query is not a List: \" + \n               echo.get(\"facet.query\").getClass(),\n               echo.get(\"facet.query\") instanceof List);\n    values = (List) echo.get(\"facet.query\");\n    Assert.assertEquals(2, values.size());\n    Assert.assertEquals(\"price:[* TO 2]\", values.get(0));\n    Assert.assertEquals(\"price:[2 TO 4]\", values.get(1));\n    \n    \n    if (jetty != null) {\n      // check system wide system handler + \"/admin/info/system\"\n      String url = jetty.getBaseUrl().toString();\n      try (HttpSolrClient adminClient = getHttpSolrClient(url)) {\n        SolrQuery q = new SolrQuery();\n        q.set(\"qt\", \"/admin/info/system\");\n        QueryResponse rsp = adminClient.query(q);\n        assertNotNull(rsp.getResponse().get(\"mode\"));\n        assertNotNull(rsp.getResponse().get(\"lucene\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["acd9883560fd89e6448b2b447302fe543040cd4f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b64a893a6d2efaa60e289534b1f8713e4aa2c776"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b0c0a9afd33c3744fb720d167693a2c10c5d43a4","b64a893a6d2efaa60e289534b1f8713e4aa2c776"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bafca15d8e408346a67f4282ad1143b88023893b":["2df7a90a3f428916936e8c0b73bb9c48b0fd92b8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","b686ecc52b102b7e9b5bdf760b673b73ac8b634b"],"b686ecc52b102b7e9b5bdf760b673b73ac8b634b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"b64a893a6d2efaa60e289534b1f8713e4aa2c776":["b0c0a9afd33c3744fb720d167693a2c10c5d43a4"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","89424def13674ea17829b41c5883c54ecc31a132"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"34d6e1154051f7cf9aa43efb8c3eae8af58222bc":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"b0c0a9afd33c3744fb720d167693a2c10c5d43a4":["c26f00b574427b55127e869b935845554afde1fa"],"acd9883560fd89e6448b2b447302fe543040cd4f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"2df7a90a3f428916936e8c0b73bb9c48b0fd92b8":["34d6e1154051f7cf9aa43efb8c3eae8af58222bc"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c26f00b574427b55127e869b935845554afde1fa":["b0c0a9afd33c3744fb720d167693a2c10c5d43a4"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b686ecc52b102b7e9b5bdf760b673b73ac8b634b":["89424def13674ea17829b41c5883c54ecc31a132"],"b64a893a6d2efaa60e289534b1f8713e4aa2c776":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["34d6e1154051f7cf9aa43efb8c3eae8af58222bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","acd9883560fd89e6448b2b447302fe543040cd4f"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132","b686ecc52b102b7e9b5bdf760b673b73ac8b634b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b0c0a9afd33c3744fb720d167693a2c10c5d43a4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b64a893a6d2efaa60e289534b1f8713e4aa2c776"],"34d6e1154051f7cf9aa43efb8c3eae8af58222bc":["2df7a90a3f428916936e8c0b73bb9c48b0fd92b8"],"acd9883560fd89e6448b2b447302fe543040cd4f":["9ba1b632c041956c93c41aa1143d16a567014891"],"2df7a90a3f428916936e8c0b73bb9c48b0fd92b8":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}