{"path":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testContentType().mjava","commits":[{"id":"b4fdbec0369f8e037eba0b9ef41417e7e795a216","date":1420933257,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testContentType().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testContentType() throws Exception {\n    VelocityResponseWriter vrw = new VelocityResponseWriter();\n    NamedList<String> nl = new NamedList<String>();\n    vrw.init(nl);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n\n    // with v.json=wrf, content type should default to application/json\n    assertEquals(\"application/json;charset=UTF-8\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.JSON, \"wrf\"), rsp));\n\n    // with no v.json specified, the default text/html should be returned\n    assertEquals(\"text/html;charset=UTF-8\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\"), rsp));\n\n    // if v.contentType is specified, that should be used, even if v.json is specified\n    assertEquals(\"text/plain\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.CONTENT_TYPE,\"text/plain\"), rsp));\n    assertEquals(\"text/plain\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.JSON,\"wrf\",\n            VelocityResponseWriter.CONTENT_TYPE,\"text/plain\"), rsp));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada1d1c1521680f2ede5f2a7e78c69f077b6caa6","date":1553522324,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testContentType().mjava","pathOld":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testContentType().mjava","sourceNew":"  @Test\n  public void testContentType() {\n    VelocityResponseWriter vrw = new VelocityResponseWriter();\n    NamedList<String> nl = new NamedList<>();\n    vrw.init(nl);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n\n    // with v.json=wrf, content type should default to application/json\n    assertEquals(\"application/json;charset=UTF-8\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.JSON, \"wrf\"), rsp));\n\n    // with no v.json specified, the default text/html should be returned\n    assertEquals(\"text/html;charset=UTF-8\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\"), rsp));\n\n    // if v.contentType is specified, that should be used, even if v.json is specified\n    assertEquals(\"text/plain\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.CONTENT_TYPE,\"text/plain\"), rsp));\n    assertEquals(\"text/plain\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.JSON,\"wrf\",\n            VelocityResponseWriter.CONTENT_TYPE,\"text/plain\"), rsp));\n  }\n\n","sourceOld":"  @Test\n  public void testContentType() throws Exception {\n    VelocityResponseWriter vrw = new VelocityResponseWriter();\n    NamedList<String> nl = new NamedList<String>();\n    vrw.init(nl);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n\n    // with v.json=wrf, content type should default to application/json\n    assertEquals(\"application/json;charset=UTF-8\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.JSON, \"wrf\"), rsp));\n\n    // with no v.json specified, the default text/html should be returned\n    assertEquals(\"text/html;charset=UTF-8\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\"), rsp));\n\n    // if v.contentType is specified, that should be used, even if v.json is specified\n    assertEquals(\"text/plain\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.CONTENT_TYPE,\"text/plain\"), rsp));\n    assertEquals(\"text/plain\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.JSON,\"wrf\",\n            VelocityResponseWriter.CONTENT_TYPE,\"text/plain\"), rsp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b659435fdb2401d91fa87bb3df798ae41a8046cd","date":1600346713,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest#testContentType().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testContentType() {\n    VelocityResponseWriter vrw = new VelocityResponseWriter();\n    NamedList<String> nl = new NamedList<>();\n    vrw.init(nl);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n\n    // with v.json=wrf, content type should default to application/json\n    assertEquals(\"application/json;charset=UTF-8\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.JSON, \"wrf\"), rsp));\n\n    // with no v.json specified, the default text/html should be returned\n    assertEquals(\"text/html;charset=UTF-8\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\"), rsp));\n\n    // if v.contentType is specified, that should be used, even if v.json is specified\n    assertEquals(\"text/plain\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.CONTENT_TYPE,\"text/plain\"), rsp));\n    assertEquals(\"text/plain\",\n        vrw.getContentType(req(VelocityResponseWriter.TEMPLATE, \"numFound\",\n            VelocityResponseWriter.JSON,\"wrf\",\n            VelocityResponseWriter.CONTENT_TYPE,\"text/plain\"), rsp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["ada1d1c1521680f2ede5f2a7e78c69f077b6caa6"],"ada1d1c1521680f2ede5f2a7e78c69f077b6caa6":["b4fdbec0369f8e037eba0b9ef41417e7e795a216"],"b4fdbec0369f8e037eba0b9ef41417e7e795a216":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b659435fdb2401d91fa87bb3df798ae41a8046cd"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4fdbec0369f8e037eba0b9ef41417e7e795a216"],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada1d1c1521680f2ede5f2a7e78c69f077b6caa6":["b659435fdb2401d91fa87bb3df798ae41a8046cd"],"b4fdbec0369f8e037eba0b9ef41417e7e795a216":["ada1d1c1521680f2ede5f2a7e78c69f077b6caa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}