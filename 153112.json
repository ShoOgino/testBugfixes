{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#clear(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#clear(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#clear(boolean).mjava","sourceNew":"  /**\n   * Clears the {@link BytesRef} which maps to the given {@link BytesRef}\n   */\n  public void clear(boolean resetPool) {\n    lastCount = count;\n    count = 0;\n    if (resetPool) {\n      pool.dropBuffersAndReset();\n    }\n    bytesStart = bytesStartArray.clear();\n    if (lastCount != -1 && shrink(lastCount)) {\n      // shrink clears the hash entries\n      return;\n    }\n    Arrays.fill(ords, -1);\n  }\n\n","sourceOld":"  /**\n   * Clears the {@link BytesRef} which maps to the given {@link BytesRef}\n   */\n  public void clear(boolean resetPool) {\n    lastCount = count;\n    count = 0;\n    if (resetPool) {\n      pool.dropBuffersAndReset();\n    }\n    bytesStart = bytesStartArray.clear();\n    if (lastCount != -1 && shrink(lastCount)) {\n      // shrink clears the hash entries\n      return;\n    }\n    Arrays.fill(ords, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#clear(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#clear(boolean).mjava","sourceNew":"  /**\n   * Clears the {@link BytesRef} which maps to the given {@link BytesRef}\n   */\n  public void clear(boolean resetPool) {\n    lastCount = count;\n    count = 0;\n    if (resetPool) {\n      pool.reset(false, false); // we don't need to 0-fill the buffers\n    }\n    bytesStart = bytesStartArray.clear();\n    if (lastCount != -1 && shrink(lastCount)) {\n      // shrink clears the hash entries\n      return;\n    }\n    Arrays.fill(ords, -1);\n  }\n\n","sourceOld":"  /**\n   * Clears the {@link BytesRef} which maps to the given {@link BytesRef}\n   */\n  public void clear(boolean resetPool) {\n    lastCount = count;\n    count = 0;\n    if (resetPool) {\n      pool.dropBuffersAndReset();\n    }\n    bytesStart = bytesStartArray.clear();\n    if (lastCount != -1 && shrink(lastCount)) {\n      // shrink clears the hash entries\n      return;\n    }\n    Arrays.fill(ords, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbccaf0f052c2a25526a56531803c5ebac7c8f41","date":1363510731,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#clear(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#clear(boolean).mjava","sourceNew":"  /**\n   * Clears the {@link BytesRef} which maps to the given {@link BytesRef}\n   */\n  public void clear(boolean resetPool) {\n    lastCount = count;\n    count = 0;\n    if (resetPool) {\n      pool.reset(false, false); // we don't need to 0-fill the buffers\n    }\n    bytesStart = bytesStartArray.clear();\n    if (lastCount != -1 && shrink(lastCount)) {\n      // shrink clears the hash entries\n      return;\n    }\n    Arrays.fill(ids, -1);\n  }\n\n","sourceOld":"  /**\n   * Clears the {@link BytesRef} which maps to the given {@link BytesRef}\n   */\n  public void clear(boolean resetPool) {\n    lastCount = count;\n    count = 0;\n    if (resetPool) {\n      pool.reset(false, false); // we don't need to 0-fill the buffers\n    }\n    bytesStart = bytesStartArray.clear();\n    if (lastCount != -1 && shrink(lastCount)) {\n      // shrink clears the hash entries\n      return;\n    }\n    Arrays.fill(ords, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}