{"path":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","pathOld":"/dev/null","sourceNew":"  synchronized void maybeSyncBackends() {\n    if (closed) {\n      return;\n    }\n    if (!persistent) {\n      return;\n    }\n    if (Thread.interrupted()) {\n      return;\n    }\n    log.debug(\"-- maybe sync backends: \" + backends.keySet());\n    Map<String, byte[]> syncData = new HashMap<>();\n    backends.forEach((path, backend) -> {\n      byte[] data = backend.getSyncData();\n      if (data != null) {\n        syncData.put(backend.getPath(), data);\n      }\n    });\n    if (syncData.isEmpty()) {\n      return;\n    }\n    log.debug(\"-- syncing \" + syncData.keySet());\n    // write updates\n    try {\n      syncData.forEach((path, data) -> {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", ID_PREFIX + ID_SEP + path);\n        doc.addField(CommonParams.TYPE, DOC_TYPE);\n        doc.addField(DATA_FIELD, data);\n        doc.setField(\"timestamp\", new Date(TimeUnit.MILLISECONDS.convert(timeSource.getEpochTimeNs(), TimeUnit.NANOSECONDS)));\n        try {\n          solrClient.add(collection, doc);\n        } catch (SolrServerException | IOException e) {\n          log.warn(\"Error updating RRD data for \" + path, e);\n        }\n      });\n      if (Thread.interrupted()) {\n        return;\n      }\n      try {\n        solrClient.commit(collection);\n      } catch (SolrServerException e) {\n        log.warn(\"Error committing RRD data updates\", e);\n      }\n      syncData.forEach((path, data) -> {\n        SolrRrdBackend backend = backends.get(path);\n        if (backend != null) {\n          backend.markClean();\n        }\n      });\n    } catch (IOException e) {\n      log.warn(\"Error sending RRD data updates\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","sourceNew":"  synchronized void maybeSyncBackends() {\n    if (closed) {\n      return;\n    }\n    if (!persistent) {\n      return;\n    }\n    if (Thread.interrupted()) {\n      return;\n    }\n    log.debug(\"-- maybe sync backends: \" + backends.keySet());\n    Map<String, SolrRrdBackend.SyncData> syncDatas = new HashMap<>();\n    backends.forEach((path, backend) -> {\n      SolrRrdBackend.SyncData syncData = backend.getSyncData();\n      if (syncData != null) {\n        syncDatas.put(backend.getPath(), syncData);\n      }\n    });\n    if (syncDatas.isEmpty()) {\n      return;\n    }\n    log.debug(\"-- syncing \" + syncDatas.keySet());\n    // write updates\n    try {\n      syncDatas.forEach((path, syncData) -> {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", ID_PREFIX + ID_SEP + path);\n        doc.addField(CommonParams.TYPE, DOC_TYPE);\n        doc.addField(DATA_FIELD, syncData.data);\n        doc.setField(\"timestamp_l\", syncData.timestamp);\n        try {\n          solrClient.add(collection, doc);\n        } catch (SolrServerException | IOException e) {\n          log.warn(\"Error updating RRD data for \" + path, e);\n        }\n      });\n      if (Thread.interrupted()) {\n        return;\n      }\n      try {\n        solrClient.commit(collection);\n      } catch (SolrServerException e) {\n        log.warn(\"Error committing RRD data updates\", e);\n      }\n      syncDatas.forEach((path, data) -> {\n        SolrRrdBackend backend = backends.get(path);\n        if (backend != null) {\n          backend.markClean();\n        }\n      });\n    } catch (IOException e) {\n      log.warn(\"Error sending RRD data updates\", e);\n    }\n  }\n\n","sourceOld":"  synchronized void maybeSyncBackends() {\n    if (closed) {\n      return;\n    }\n    if (!persistent) {\n      return;\n    }\n    if (Thread.interrupted()) {\n      return;\n    }\n    log.debug(\"-- maybe sync backends: \" + backends.keySet());\n    Map<String, byte[]> syncData = new HashMap<>();\n    backends.forEach((path, backend) -> {\n      byte[] data = backend.getSyncData();\n      if (data != null) {\n        syncData.put(backend.getPath(), data);\n      }\n    });\n    if (syncData.isEmpty()) {\n      return;\n    }\n    log.debug(\"-- syncing \" + syncData.keySet());\n    // write updates\n    try {\n      syncData.forEach((path, data) -> {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", ID_PREFIX + ID_SEP + path);\n        doc.addField(CommonParams.TYPE, DOC_TYPE);\n        doc.addField(DATA_FIELD, data);\n        doc.setField(\"timestamp\", new Date(TimeUnit.MILLISECONDS.convert(timeSource.getEpochTimeNs(), TimeUnit.NANOSECONDS)));\n        try {\n          solrClient.add(collection, doc);\n        } catch (SolrServerException | IOException e) {\n          log.warn(\"Error updating RRD data for \" + path, e);\n        }\n      });\n      if (Thread.interrupted()) {\n        return;\n      }\n      try {\n        solrClient.commit(collection);\n      } catch (SolrServerException e) {\n        log.warn(\"Error committing RRD data updates\", e);\n      }\n      syncData.forEach((path, data) -> {\n        SolrRrdBackend backend = backends.get(path);\n        if (backend != null) {\n          backend.markClean();\n        }\n      });\n    } catch (IOException e) {\n      log.warn(\"Error sending RRD data updates\", e);\n    }\n  }\n\n","bugFix":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","sourceNew":"  synchronized void maybeSyncBackends() {\n    if (closed) {\n      return;\n    }\n    if (!persistent) {\n      return;\n    }\n    if (Thread.interrupted()) {\n      return;\n    }\n    log.debug(\"-- maybe sync backends: \" + backends.keySet());\n    Map<String, SolrRrdBackend.SyncData> syncDatas = new HashMap<>();\n    backends.forEach((path, backend) -> {\n      SolrRrdBackend.SyncData syncData = backend.getSyncData();\n      if (syncData != null) {\n        syncDatas.put(backend.getPath(), syncData);\n      }\n    });\n    if (syncDatas.isEmpty()) {\n      return;\n    }\n    log.debug(\"-- syncing \" + syncDatas.keySet());\n    // write updates\n    try {\n      syncDatas.forEach((path, syncData) -> {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", ID_PREFIX + ID_SEP + path);\n        doc.addField(CommonParams.TYPE, DOC_TYPE);\n        doc.addField(DATA_FIELD, syncData.data);\n        doc.setField(\"timestamp_l\", syncData.timestamp);\n        try {\n          solrClient.add(collection, doc);\n        } catch (SolrServerException | IOException e) {\n          log.warn(\"Error updating RRD data for \" + path, e);\n        }\n      });\n      if (Thread.interrupted()) {\n        return;\n      }\n      try {\n        solrClient.commit(collection);\n      } catch (SolrServerException e) {\n        log.warn(\"Error committing RRD data updates\", e);\n      }\n      syncDatas.forEach((path, data) -> {\n        SolrRrdBackend backend = backends.get(path);\n        if (backend != null) {\n          backend.markClean();\n        }\n      });\n    } catch (IOException e) {\n      log.warn(\"Error sending RRD data updates\", e);\n    }\n  }\n\n","sourceOld":"  synchronized void maybeSyncBackends() {\n    if (closed) {\n      return;\n    }\n    if (!persistent) {\n      return;\n    }\n    if (Thread.interrupted()) {\n      return;\n    }\n    log.debug(\"-- maybe sync backends: \" + backends.keySet());\n    Map<String, byte[]> syncData = new HashMap<>();\n    backends.forEach((path, backend) -> {\n      byte[] data = backend.getSyncData();\n      if (data != null) {\n        syncData.put(backend.getPath(), data);\n      }\n    });\n    if (syncData.isEmpty()) {\n      return;\n    }\n    log.debug(\"-- syncing \" + syncData.keySet());\n    // write updates\n    try {\n      syncData.forEach((path, data) -> {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", ID_PREFIX + ID_SEP + path);\n        doc.addField(CommonParams.TYPE, DOC_TYPE);\n        doc.addField(DATA_FIELD, data);\n        doc.setField(\"timestamp\", new Date(TimeUnit.MILLISECONDS.convert(timeSource.getEpochTimeNs(), TimeUnit.NANOSECONDS)));\n        try {\n          solrClient.add(collection, doc);\n        } catch (SolrServerException | IOException e) {\n          log.warn(\"Error updating RRD data for \" + path, e);\n        }\n      });\n      if (Thread.interrupted()) {\n        return;\n      }\n      try {\n        solrClient.commit(collection);\n      } catch (SolrServerException e) {\n        log.warn(\"Error committing RRD data updates\", e);\n      }\n      syncData.forEach((path, data) -> {\n        SolrRrdBackend backend = backends.get(path);\n        if (backend != null) {\n          backend.markClean();\n        }\n      });\n    } catch (IOException e) {\n      log.warn(\"Error sending RRD data updates\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","sourceNew":"  synchronized void maybeSyncBackends() {\n    if (closed) {\n      return;\n    }\n    if (!persistent) {\n      return;\n    }\n    if (Thread.interrupted()) {\n      return;\n    }\n    log.debug(\"-- maybe sync backends: \" + backends.keySet());\n    Map<String, SolrRrdBackend.SyncData> syncDatas = new HashMap<>();\n    backends.forEach((path, backend) -> {\n      SolrRrdBackend.SyncData syncData = backend.getSyncData();\n      if (syncData != null) {\n        syncDatas.put(backend.getPath(), syncData);\n      }\n    });\n    if (syncDatas.isEmpty()) {\n      return;\n    }\n    log.debug(\"-- syncing \" + syncDatas.keySet());\n    // write updates\n    try {\n      syncDatas.forEach((path, syncData) -> {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", ID_PREFIX + ID_SEP + path);\n        doc.addField(CommonParams.TYPE, DOC_TYPE);\n        doc.addField(DATA_FIELD, syncData.data);\n        doc.setField(\"timestamp_l\", syncData.timestamp);\n        try {\n          solrClient.add(collection, doc);\n        } catch (SolrServerException | IOException e) {\n          log.warn(\"Error updating RRD data for \" + path, e);\n        }\n      });\n      if (Thread.interrupted()) {\n        return;\n      }\n      try {\n        solrClient.commit(collection);\n      } catch (SolrServerException e) {\n        log.warn(\"Error committing RRD data updates\", e);\n      }\n      syncDatas.forEach((path, data) -> {\n        SolrRrdBackend backend = backends.get(path);\n        if (backend != null) {\n          backend.markClean();\n        }\n      });\n    } catch (IOException e) {\n      log.warn(\"Error sending RRD data updates\", e);\n    }\n  }\n\n","sourceOld":"  synchronized void maybeSyncBackends() {\n    if (closed) {\n      return;\n    }\n    if (!persistent) {\n      return;\n    }\n    if (Thread.interrupted()) {\n      return;\n    }\n    log.debug(\"-- maybe sync backends: \" + backends.keySet());\n    Map<String, byte[]> syncData = new HashMap<>();\n    backends.forEach((path, backend) -> {\n      byte[] data = backend.getSyncData();\n      if (data != null) {\n        syncData.put(backend.getPath(), data);\n      }\n    });\n    if (syncData.isEmpty()) {\n      return;\n    }\n    log.debug(\"-- syncing \" + syncData.keySet());\n    // write updates\n    try {\n      syncData.forEach((path, data) -> {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", ID_PREFIX + ID_SEP + path);\n        doc.addField(CommonParams.TYPE, DOC_TYPE);\n        doc.addField(DATA_FIELD, data);\n        doc.setField(\"timestamp\", new Date(TimeUnit.MILLISECONDS.convert(timeSource.getEpochTimeNs(), TimeUnit.NANOSECONDS)));\n        try {\n          solrClient.add(collection, doc);\n        } catch (SolrServerException | IOException e) {\n          log.warn(\"Error updating RRD data for \" + path, e);\n        }\n      });\n      if (Thread.interrupted()) {\n        return;\n      }\n      try {\n        solrClient.commit(collection);\n      } catch (SolrServerException e) {\n        log.warn(\"Error committing RRD data updates\", e);\n      }\n      syncData.forEach((path, data) -> {\n        SolrRrdBackend backend = backends.get(path);\n        if (backend != null) {\n          backend.markClean();\n        }\n      });\n    } catch (IOException e) {\n      log.warn(\"Error sending RRD data updates\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d29562959e4f9c21557f699a0d964bb0c98f8e","date":1556102028,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","sourceNew":"  synchronized void maybeSyncBackends() {\n    if (closed) {\n      return;\n    }\n    if (!persistent) {\n      return;\n    }\n    if (Thread.interrupted()) {\n      return;\n    }\n    log.debug(\"-- maybe sync backends: \" + backends.keySet());\n    Map<String, SolrRrdBackend.SyncData> syncDatas = new HashMap<>();\n    backends.forEach((path, backend) -> {\n      SolrRrdBackend.SyncData syncData = backend.getSyncDataAndMarkClean();\n      if (syncData != null) {\n        syncDatas.put(backend.getPath(), syncData);\n      }\n    });\n    if (syncDatas.isEmpty()) {\n      return;\n    }\n    log.debug(\"-- syncing \" + syncDatas.keySet());\n    // write updates\n    try {\n      syncDatas.forEach((path, syncData) -> {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", ID_PREFIX + ID_SEP + path);\n        doc.addField(CommonParams.TYPE, DOC_TYPE);\n        doc.addField(DATA_FIELD, syncData.data);\n        doc.setField(\"timestamp_l\", syncData.timestamp);\n        try {\n          solrClient.add(collection, doc);\n        } catch (SolrServerException | IOException e) {\n          log.warn(\"Error updating RRD data for \" + path, e);\n        }\n      });\n      if (Thread.interrupted()) {\n        return;\n      }\n      try {\n        solrClient.commit(collection);\n      } catch (SolrServerException e) {\n        log.warn(\"Error committing RRD data updates\", e);\n      }\n    } catch (IOException e) {\n      log.warn(\"Error sending RRD data updates\", e);\n    }\n  }\n\n","sourceOld":"  synchronized void maybeSyncBackends() {\n    if (closed) {\n      return;\n    }\n    if (!persistent) {\n      return;\n    }\n    if (Thread.interrupted()) {\n      return;\n    }\n    log.debug(\"-- maybe sync backends: \" + backends.keySet());\n    Map<String, SolrRrdBackend.SyncData> syncDatas = new HashMap<>();\n    backends.forEach((path, backend) -> {\n      SolrRrdBackend.SyncData syncData = backend.getSyncData();\n      if (syncData != null) {\n        syncDatas.put(backend.getPath(), syncData);\n      }\n    });\n    if (syncDatas.isEmpty()) {\n      return;\n    }\n    log.debug(\"-- syncing \" + syncDatas.keySet());\n    // write updates\n    try {\n      syncDatas.forEach((path, syncData) -> {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", ID_PREFIX + ID_SEP + path);\n        doc.addField(CommonParams.TYPE, DOC_TYPE);\n        doc.addField(DATA_FIELD, syncData.data);\n        doc.setField(\"timestamp_l\", syncData.timestamp);\n        try {\n          solrClient.add(collection, doc);\n        } catch (SolrServerException | IOException e) {\n          log.warn(\"Error updating RRD data for \" + path, e);\n        }\n      });\n      if (Thread.interrupted()) {\n        return;\n      }\n      try {\n        solrClient.commit(collection);\n      } catch (SolrServerException e) {\n        log.warn(\"Error committing RRD data updates\", e);\n      }\n      syncDatas.forEach((path, data) -> {\n        SolrRrdBackend backend = backends.get(path);\n        if (backend != null) {\n          backend.markClean();\n        }\n      });\n    } catch (IOException e) {\n      log.warn(\"Error sending RRD data updates\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#maybeSyncBackends().mjava","sourceNew":"  synchronized void maybeSyncBackends() {\n    if (closed) {\n      return;\n    }\n    if (!persistent) {\n      return;\n    }\n    if (Thread.interrupted()) {\n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- maybe sync backends: {}\", backends.keySet());\n    }\n    Map<String, SolrRrdBackend.SyncData> syncDatas = new HashMap<>();\n    backends.forEach((path, backend) -> {\n      SolrRrdBackend.SyncData syncData = backend.getSyncDataAndMarkClean();\n      if (syncData != null) {\n        syncDatas.put(backend.getPath(), syncData);\n      }\n    });\n    if (syncDatas.isEmpty()) {\n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- syncing {}\", syncDatas.keySet());\n    }\n    // write updates\n    try {\n      syncDatas.forEach((path, syncData) -> {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", ID_PREFIX + ID_SEP + path);\n        doc.addField(CommonParams.TYPE, DOC_TYPE);\n        doc.addField(DATA_FIELD, syncData.data);\n        doc.setField(\"timestamp_l\", syncData.timestamp);\n        try {\n          solrClient.add(collection, doc);\n        } catch (SolrServerException | IOException e) {\n          log.warn(\"Error updating RRD data for {}\", path, e);\n        }\n      });\n      if (Thread.interrupted()) {\n        return;\n      }\n      try {\n        solrClient.commit(collection);\n      } catch (SolrServerException e) {\n        log.warn(\"Error committing RRD data updates\", e);\n      }\n    } catch (IOException e) {\n      log.warn(\"Error sending RRD data updates\", e);\n    }\n  }\n\n","sourceOld":"  synchronized void maybeSyncBackends() {\n    if (closed) {\n      return;\n    }\n    if (!persistent) {\n      return;\n    }\n    if (Thread.interrupted()) {\n      return;\n    }\n    log.debug(\"-- maybe sync backends: \" + backends.keySet());\n    Map<String, SolrRrdBackend.SyncData> syncDatas = new HashMap<>();\n    backends.forEach((path, backend) -> {\n      SolrRrdBackend.SyncData syncData = backend.getSyncDataAndMarkClean();\n      if (syncData != null) {\n        syncDatas.put(backend.getPath(), syncData);\n      }\n    });\n    if (syncDatas.isEmpty()) {\n      return;\n    }\n    log.debug(\"-- syncing \" + syncDatas.keySet());\n    // write updates\n    try {\n      syncDatas.forEach((path, syncData) -> {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", ID_PREFIX + ID_SEP + path);\n        doc.addField(CommonParams.TYPE, DOC_TYPE);\n        doc.addField(DATA_FIELD, syncData.data);\n        doc.setField(\"timestamp_l\", syncData.timestamp);\n        try {\n          solrClient.add(collection, doc);\n        } catch (SolrServerException | IOException e) {\n          log.warn(\"Error updating RRD data for \" + path, e);\n        }\n      });\n      if (Thread.interrupted()) {\n        return;\n      }\n      try {\n        solrClient.commit(collection);\n      } catch (SolrServerException e) {\n        log.warn(\"Error committing RRD data updates\", e);\n      }\n    } catch (IOException e) {\n      log.warn(\"Error sending RRD data updates\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"58d29562959e4f9c21557f699a0d964bb0c98f8e":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["58d29562959e4f9c21557f699a0d964bb0c98f8e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"]},"commit2Childs":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","58d29562959e4f9c21557f699a0d964bb0c98f8e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"58d29562959e4f9c21557f699a0d964bb0c98f8e":["9df8125ba9193a2e2e285ed92157810b1952a244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}