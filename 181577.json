{"path":"src/test/org/apache/lucene/util/PriorityQueueTest#test(int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/PriorityQueueTest#test(int).mjava","pathOld":"/dev/null","sourceNew":"  public static void test(int count) {\n    PriorityQueue pq = new PriorityQueue(count);\n    Random gen = new Random();\n    int i;\n    \n    Date start = new Date();\n\n    for (i = 0; i < count; i++) {\n      pq.put(new Integer(gen.nextInt()));\n    }\n\n    Date end = new Date();\n\n    System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n    System.out.println(\" microseconds/put\");\n\n    start = new Date();\n\n    int last = Integer.MIN_VALUE;\n    for (i = 0; i < count; i++) {\n      Integer next = (Integer)pq.pop();\n      if (next.intValue() <= last)\n\tthrow new Error(\"out of order\");\n      last = next.intValue();\n    }\n\n    end = new Date();\n\n    System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n    System.out.println(\" microseconds/pop\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c3c367a9a447fbe22b73e7dde652f132e693c5d","date":1004577180,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/PriorityQueueTest#test(int).mjava","pathOld":"src/test/org/apache/lucene/util/PriorityQueueTest#test(int).mjava","sourceNew":"  public static void test(int count) {\n    PriorityQueue pq = new IntegerQueue(count);\n    Random gen = new Random();\n    int i;\n    \n    Date start = new Date();\n\n    for (i = 0; i < count; i++) {\n      pq.put(new Integer(gen.nextInt()));\n    }\n\n    Date end = new Date();\n\n    System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n    System.out.println(\" microseconds/put\");\n\n    start = new Date();\n\n    int last = Integer.MIN_VALUE;\n    for (i = 0; i < count; i++) {\n      Integer next = (Integer)pq.pop();\n      if (next.intValue() <= last)\n\tthrow new Error(\"out of order\");\n      last = next.intValue();\n    }\n\n    end = new Date();\n\n    System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n    System.out.println(\" microseconds/pop\");\n\n  }\n\n","sourceOld":"  public static void test(int count) {\n    PriorityQueue pq = new PriorityQueue(count);\n    Random gen = new Random();\n    int i;\n    \n    Date start = new Date();\n\n    for (i = 0; i < count; i++) {\n      pq.put(new Integer(gen.nextInt()));\n    }\n\n    Date end = new Date();\n\n    System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n    System.out.println(\" microseconds/put\");\n\n    start = new Date();\n\n    int last = Integer.MIN_VALUE;\n    for (i = 0; i < count; i++) {\n      Integer next = (Integer)pq.pop();\n      if (next.intValue() <= last)\n\tthrow new Error(\"out of order\");\n      last = next.intValue();\n    }\n\n    end = new Date();\n\n    System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n    System.out.println(\" microseconds/pop\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"991e6851f11a09864684fd54c6aa1a86b9b32c7e","date":1004753547,"type":4,"author":"Brian Goetz","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/util/PriorityQueueTest#test(int).mjava","sourceNew":null,"sourceOld":"  public static void test(int count) {\n    PriorityQueue pq = new IntegerQueue(count);\n    Random gen = new Random();\n    int i;\n    \n    Date start = new Date();\n\n    for (i = 0; i < count; i++) {\n      pq.put(new Integer(gen.nextInt()));\n    }\n\n    Date end = new Date();\n\n    System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n    System.out.println(\" microseconds/put\");\n\n    start = new Date();\n\n    int last = Integer.MIN_VALUE;\n    for (i = 0; i < count; i++) {\n      Integer next = (Integer)pq.pop();\n      if (next.intValue() <= last)\n\tthrow new Error(\"out of order\");\n      last = next.intValue();\n    }\n\n    end = new Date();\n\n    System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n    System.out.println(\" microseconds/pop\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c3c367a9a447fbe22b73e7dde652f132e693c5d":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"991e6851f11a09864684fd54c6aa1a86b9b32c7e":["4c3c367a9a447fbe22b73e7dde652f132e693c5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["991e6851f11a09864684fd54c6aa1a86b9b32c7e"]},"commit2Childs":{"4c3c367a9a447fbe22b73e7dde652f132e693c5d":["991e6851f11a09864684fd54c6aa1a86b9b32c7e"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["4c3c367a9a447fbe22b73e7dde652f132e693c5d"],"991e6851f11a09864684fd54c6aa1a86b9b32c7e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}