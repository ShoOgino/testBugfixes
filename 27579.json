{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}