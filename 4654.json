{"path":"src/java/org/apache/lucene/search/TimeLimitingCollector#setResolution(long).mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TimeLimitingCollector#setResolution(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the timer resolution.\n   * The default timer resolution is 20 milliseconds. \n   * This means that a search required to take no longer than \n   * 800 milliseconds may be stopped after 780 to 820 milliseconds.\n   * <br>Note that: \n   * <ul>\n   * <li>Finer (smaller) resolution is more accurate but less efficient.</li>\n   * <li>Setting resolution to less than 5 milliseconds will be silently modified to 5 milliseconds.</li>\n   * <li>Setting resolution smaller than current resolution might take effect only after current \n   * resolution. (Assume current resolution of 20 milliseconds is modified to 5 milliseconds, \n   * then it can take up to 20 milliseconds for the change to have effect.</li>\n   * </ul>      \n   */\n  public static void setResolution(long newResolution) {\n    resolution = Math.max(newResolution,5); // 5 milliseconds is about the minimum reasonable time for a Object.wait(long) call.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#setResolution(long).mjava","pathOld":"src/java/org/apache/lucene/search/TimeLimitingCollector#setResolution(long).mjava","sourceNew":"  /**\n   * Set the timer resolution.\n   * The default timer resolution is 20 milliseconds. \n   * This means that a search required to take no longer than \n   * 800 milliseconds may be stopped after 780 to 820 milliseconds.\n   * <br>Note that: \n   * <ul>\n   * <li>Finer (smaller) resolution is more accurate but less efficient.</li>\n   * <li>Setting resolution to less than 5 milliseconds will be silently modified to 5 milliseconds.</li>\n   * <li>Setting resolution smaller than current resolution might take effect only after current \n   * resolution. (Assume current resolution of 20 milliseconds is modified to 5 milliseconds, \n   * then it can take up to 20 milliseconds for the change to have effect.</li>\n   * </ul>      \n   */\n  public static void setResolution(long newResolution) {\n    resolution = Math.max(newResolution,5); // 5 milliseconds is about the minimum reasonable time for a Object.wait(long) call.\n  }\n\n","sourceOld":"  /**\n   * Set the timer resolution.\n   * The default timer resolution is 20 milliseconds. \n   * This means that a search required to take no longer than \n   * 800 milliseconds may be stopped after 780 to 820 milliseconds.\n   * <br>Note that: \n   * <ul>\n   * <li>Finer (smaller) resolution is more accurate but less efficient.</li>\n   * <li>Setting resolution to less than 5 milliseconds will be silently modified to 5 milliseconds.</li>\n   * <li>Setting resolution smaller than current resolution might take effect only after current \n   * resolution. (Assume current resolution of 20 milliseconds is modified to 5 milliseconds, \n   * then it can take up to 20 milliseconds for the change to have effect.</li>\n   * </ul>      \n   */\n  public static void setResolution(long newResolution) {\n    resolution = Math.max(newResolution,5); // 5 milliseconds is about the minimum reasonable time for a Object.wait(long) call.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["64714133cf5ec732e3bbceee63351bb9af0117dc"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}