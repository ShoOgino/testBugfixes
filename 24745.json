{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","commits":[{"id":"33f2d1e8136b83c8ce1ec5a28df9b325b02e3441","date":1274361792,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestKeywordMarkerFilter#testIncrementToken().mjava","sourceNew":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), set)), output);\n    Set<String> jdkSet = new HashSet<String>();\n    jdkSet.add(\"LuceneFox\");\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), jdkSet)), output);\n    Set<?> set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), set2)), output);\n  }\n\n","sourceOld":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), set)), output);\n    Set<String> jdkSet = new HashSet<String>();\n    jdkSet.add(\"LuceneFox\");\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), jdkSet)), output);\n    Set<?> set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), set2)), output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","sourceNew":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set)), output);\n    Set<String> jdkSet = new HashSet<String>();\n    jdkSet.add(\"LuceneFox\");\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), jdkSet)), output);\n    Set<?> set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set2)), output);\n  }\n\n","sourceOld":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), set)), output);\n    Set<String> jdkSet = new HashSet<String>();\n    jdkSet.add(\"LuceneFox\");\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), jdkSet)), output);\n    Set<?> set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), set2)), output);\n  }\n\n","bugFix":["44a4299331195a496d15bce2d588139be10ac77b","b9fc748b8fc4097ccc222bdf2948cc2d20770c54"],"bugIntro":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","sourceNew":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set)), output);\n    Set<String> jdkSet = new HashSet<String>();\n    jdkSet.add(\"LuceneFox\");\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), jdkSet)), output);\n    Set<?> set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set2)), output);\n  }\n\n","sourceOld":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), set)), output);\n    Set<String> jdkSet = new HashSet<String>();\n    jdkSet.add(\"LuceneFox\");\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), jdkSet)), output);\n    Set<?> set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), set2)), output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","sourceNew":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set)), output);\n    Set<String> jdkSet = new HashSet<String>();\n    jdkSet.add(\"LuceneFox\");\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), jdkSet)), output);\n    Set<?> set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set2)), output);\n  }\n\n","sourceOld":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), set)), output);\n    Set<String> jdkSet = new HashSet<String>();\n    jdkSet.add(\"LuceneFox\");\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), jdkSet)), output);\n    Set<?> set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"The quIck browN LuceneFox Jumps\")), set2)), output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","date":1328817590,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","sourceNew":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set)), output);\n    CharArraySet mixedCaseSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"LuceneFox\"), false);\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), mixedCaseSet)), output);\n    CharArraySet set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set2)), output);\n  }\n\n","sourceOld":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set)), output);\n    Set<String> jdkSet = new HashSet<String>();\n    jdkSet.add(\"LuceneFox\");\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), jdkSet)), output);\n    Set<?> set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set2)), output);\n  }\n\n","bugFix":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","b9fc748b8fc4097ccc222bdf2948cc2d20770c54"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeywordMarkerFilter#testIncrementToken().mjava","sourceNew":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set)), output);\n    CharArraySet mixedCaseSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"LuceneFox\"), false);\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), mixedCaseSet)), output);\n    CharArraySet set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set2)), output);\n  }\n\n","sourceOld":"  @Test\n  public void testIncrementToken() throws IOException {\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 5, true);\n    set.add(\"lucenefox\");\n    String[] output = new String[] { \"the\", \"quick\", \"brown\", \"LuceneFox\",\n        \"jumps\" };\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set)), output);\n    CharArraySet mixedCaseSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"LuceneFox\"), false);\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), mixedCaseSet)), output);\n    CharArraySet set2 = set;\n    assertTokenStreamContents(new LowerCaseFilterMock(\n        new KeywordMarkerFilter(new MockTokenizer(new StringReader(\n            \"The quIck browN LuceneFox Jumps\"), MockTokenizer.WHITESPACE, false), set2)), output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["33f2d1e8136b83c8ce1ec5a28df9b325b02e3441"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["33f2d1e8136b83c8ce1ec5a28df9b325b02e3441","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["33f2d1e8136b83c8ce1ec5a28df9b325b02e3441","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33f2d1e8136b83c8ce1ec5a28df9b325b02e3441":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33f2d1e8136b83c8ce1ec5a28df9b325b02e3441"],"33f2d1e8136b83c8ce1ec5a28df9b325b02e3441":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}