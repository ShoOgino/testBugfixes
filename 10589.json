{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","pathOld":"/dev/null","sourceNew":"  private long addTwoDocsInOneRequest(long docId) throws SolrServerException,\n      IOException, Exception {\n    QueryResponse results;\n    UpdateRequest uReq;\n    uReq = new UpdateRequest();\n    //uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    SolrInputDocument doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    SolrInputDocument doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    checkShardConsistency();\n    \n    assertDocCounts(VERBOSE);\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","pathOld":"/dev/null","sourceNew":"  private long addTwoDocsInOneRequest(long docId) throws SolrServerException,\n      IOException, Exception {\n    QueryResponse results;\n    UpdateRequest uReq;\n    uReq = new UpdateRequest();\n    //uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    SolrInputDocument doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    SolrInputDocument doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    checkShardConsistency();\n    \n    assertDocCounts(VERBOSE);\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","pathOld":"/dev/null","sourceNew":"  private long addTwoDocsInOneRequest(long docId) throws SolrServerException,\n      IOException, Exception {\n    QueryResponse results;\n    UpdateRequest uReq;\n    uReq = new UpdateRequest();\n    //uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    SolrInputDocument doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    SolrInputDocument doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    checkShardConsistency();\n    \n    assertDocCounts(VERBOSE);\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","sourceNew":"  private long addTwoDocsInOneRequest(long docId) throws\n      Exception {\n    QueryResponse results;\n    UpdateRequest uReq;\n    uReq = new UpdateRequest();\n    //uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    SolrInputDocument doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    SolrInputDocument doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    checkShardConsistency();\n    \n    assertDocCounts(VERBOSE);\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long addTwoDocsInOneRequest(long docId) throws SolrServerException,\n      IOException, Exception {\n    QueryResponse results;\n    UpdateRequest uReq;\n    uReq = new UpdateRequest();\n    //uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    SolrInputDocument doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    SolrInputDocument doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    checkShardConsistency();\n    \n    assertDocCounts(VERBOSE);\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","sourceNew":"  private long addTwoDocsInOneRequest(long docId) throws\n      Exception {\n    QueryResponse results;\n    UpdateRequest uReq;\n    uReq = new UpdateRequest();\n    //uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    SolrInputDocument doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    SolrInputDocument doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    checkShardConsistency();\n    \n    assertDocCounts(VERBOSE);\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long addTwoDocsInOneRequest(long docId) throws SolrServerException,\n      IOException, Exception {\n    QueryResponse results;\n    UpdateRequest uReq;\n    uReq = new UpdateRequest();\n    //uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    SolrInputDocument doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    SolrInputDocument doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    checkShardConsistency();\n    \n    assertDocCounts(VERBOSE);\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb","date":1390584048,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","sourceNew":"  private long addTwoDocsInOneRequest(long docId) throws\n      Exception {\n    QueryResponse results;\n    UpdateRequest uReq;\n    uReq = new UpdateRequest();\n    docId = addDoc(docId, uReq);\n    docId = addDoc(docId, uReq);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    checkShardConsistency();\n    \n    assertDocCounts(VERBOSE);\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long addTwoDocsInOneRequest(long docId) throws\n      Exception {\n    QueryResponse results;\n    UpdateRequest uReq;\n    uReq = new UpdateRequest();\n    //uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    SolrInputDocument doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    SolrInputDocument doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    checkShardConsistency();\n    \n    assertDocCounts(VERBOSE);\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","sourceNew":null,"sourceOld":"  private long addTwoDocsInOneRequest(long docId) throws\n      Exception {\n    QueryResponse results;\n    UpdateRequest uReq;\n    uReq = new UpdateRequest();\n    docId = addDoc(docId, uReq);\n    docId = addDoc(docId, uReq);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    checkShardConsistency();\n    \n    assertDocCounts(VERBOSE);\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addTwoDocsInOneRequest(long).mjava","sourceNew":null,"sourceOld":"  private long addTwoDocsInOneRequest(long docId) throws\n      Exception {\n    QueryResponse results;\n    UpdateRequest uReq;\n    uReq = new UpdateRequest();\n    docId = addDoc(docId, uReq);\n    docId = addDoc(docId, uReq);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    checkShardConsistency();\n    \n    assertDocCounts(VERBOSE);\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b945b8f5bba0303382bc69d60c0c287714f23328":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb"]},"commit2Childs":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}