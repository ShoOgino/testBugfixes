{"path":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#ensureOpen().mjava","commits":[{"id":"bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c","date":1396634612,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#ensureOpen().mjava","pathOld":"/dev/null","sourceNew":"  private void ensureOpen() throws AlreadyClosedException {\n    if (writer == null) {\n      throw new AlreadyClosedException(\"this IndexWriter is closed\");\n    } else {\n      writer.ensureOpen(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#ensureOpen().mjava","pathOld":"/dev/null","sourceNew":"  private void ensureOpen() throws AlreadyClosedException {\n    if (writer == null) {\n      throw new AlreadyClosedException(\"this IndexWriter is closed\");\n    } else {\n      writer.ensureOpen(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"949847c0040cd70a68222d526cb0da7bf6cbb3c2","date":1410997182,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#ensureOpen().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#ensureOpen().mjava","sourceNew":"  private void ensureOpen() throws AlreadyClosedException {\n    writer.ensureOpen(false);\n    // since we allow 'closing' state, we must still check this, we could be closing because we hit e.g. OOM\n    if (writer.tragedy != null) {\n      throw new AlreadyClosedException(\"refusing to delete any files: this IndexWriter hit an unrecoverable exception\", writer.tragedy);\n    }\n  }\n\n","sourceOld":"  private void ensureOpen() throws AlreadyClosedException {\n    if (writer == null) {\n      throw new AlreadyClosedException(\"this IndexWriter is closed\");\n    } else {\n      writer.ensureOpen(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#ensureOpen().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#ensureOpen().mjava","sourceNew":"  void ensureOpen() throws AlreadyClosedException {\n    writer.ensureOpen(false);\n    // since we allow 'closing' state, we must still check this, we could be closing because we hit e.g. OOM\n    if (writer.tragedy != null) {\n      throw new AlreadyClosedException(\"refusing to delete any files: this IndexWriter hit an unrecoverable exception\", writer.tragedy);\n    }\n  }\n\n","sourceOld":"  private void ensureOpen() throws AlreadyClosedException {\n    writer.ensureOpen(false);\n    // since we allow 'closing' state, we must still check this, we could be closing because we hit e.g. OOM\n    if (writer.tragedy != null) {\n      throw new AlreadyClosedException(\"refusing to delete any files: this IndexWriter hit an unrecoverable exception\", writer.tragedy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"845b760a99e5f369fcd0a5d723a87b8def6a3f56","date":1521117993,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#ensureOpen().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#ensureOpen().mjava","sourceNew":"  void ensureOpen() throws AlreadyClosedException {\n    writer.ensureOpen(false);\n    // since we allow 'closing' state, we must still check this, we could be closing because we hit e.g. OOM\n    if (writer.tragedy.get() != null) {\n      throw new AlreadyClosedException(\"refusing to delete any files: this IndexWriter hit an unrecoverable exception\", writer.tragedy.get());\n    }\n  }\n\n","sourceOld":"  void ensureOpen() throws AlreadyClosedException {\n    writer.ensureOpen(false);\n    // since we allow 'closing' state, we must still check this, we could be closing because we hit e.g. OOM\n    if (writer.tragedy != null) {\n      throw new AlreadyClosedException(\"refusing to delete any files: this IndexWriter hit an unrecoverable exception\", writer.tragedy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#ensureOpen().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#ensureOpen().mjava","sourceNew":"  void ensureOpen() throws AlreadyClosedException {\n    writer.ensureOpen(false);\n    // since we allow 'closing' state, we must still check this, we could be closing because we hit e.g. OOM\n    if (writer.getTragicException() != null) {\n      throw new AlreadyClosedException(\"refusing to delete any files: this IndexWriter hit an unrecoverable exception\", writer.getTragicException());\n    }\n  }\n\n","sourceOld":"  void ensureOpen() throws AlreadyClosedException {\n    writer.ensureOpen(false);\n    // since we allow 'closing' state, we must still check this, we could be closing because we hit e.g. OOM\n    if (writer.tragedy.get() != null) {\n      throw new AlreadyClosedException(\"refusing to delete any files: this IndexWriter hit an unrecoverable exception\", writer.tragedy.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}