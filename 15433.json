{"path":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#doProcess(Record).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#doProcess(Record).mjava","pathOld":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#doProcess(Record).mjava","sourceNew":"    @Override\n    protected boolean doProcess(Record doc) {      \n      long num = recordCounter++;\n      // LOG.debug(\"record #{} id before sanitizing doc: {}\", num, doc);\n      if (uniqueKeyName == null || (preserveExisting && doc.getFields().containsKey(uniqueKeyName))) {\n        ; // we must preserve the existing id\n      } else {\n        Object baseId = doc.getFirstValue(baseIdFieldName);\n        if (baseId == null) {\n          throw new MorphlineRuntimeException(\"Record field \" + baseIdFieldName\n              + \" must not be null as it is needed as a basis for a unique key for solr doc: \" + doc);\n        }\n        doc.replaceValues(uniqueKeyName, baseId.toString() + \"#\" + num);          \n      }\n      \n      // for load testing only; enables adding same document many times with a different unique key\n      if (idPrefix != null) { \n        String id = doc.getFirstValue(uniqueKeyName).toString();\n        id = idPrefix + id;\n        doc.replaceValues(uniqueKeyName, id);\n      } else if (randomIdPrefix != null) {\n        String id = doc.getFirstValue(uniqueKeyName).toString();\n        id = String.valueOf(Math.abs(randomIdPrefix.nextInt())) + \"#\" + id;\n        doc.replaceValues(uniqueKeyName, id);\n      }\n\n      LOG.debug(\"record #{} unique key sanitized to this: {}\", num, doc);\n      \n      return super.doProcess(doc);\n    }\n\n","sourceOld":"    @Override\n    protected boolean doProcess(Record doc) {      \n      long num = recordCounter++;\n      // LOG.debug(\"record #{} id before sanitizing doc: {}\", num, doc);\n      if (uniqueKeyName == null || (preserveExisting && doc.getFields().containsKey(uniqueKeyName))) {\n        ; // we must preserve the existing id\n      } else {\n        Object baseId = doc.getFirstValue(baseIdFieldName);\n        if (baseId == null) {\n          throw new MorphlineRuntimeException(\"Record field \" + baseIdFieldName\n              + \" must not be null as it is needed as a basis for a unique key for solr doc: \" + doc);\n        }\n        doc.replaceValues(uniqueKeyName, baseId.toString() + \"#\" + num);          \n      }\n      \n      // for load testing only; enables adding same document many times with a different unique key\n      if (idPrefix != null) { \n        String id = doc.getFirstValue(uniqueKeyName).toString();\n        id = idPrefix + id;\n        doc.replaceValues(uniqueKeyName, id);\n      } else if (randomIdPrefix != null) {\n        String id = doc.getFirstValue(uniqueKeyName).toString();\n        id = String.valueOf(Math.abs(randomIdPrefix.nextInt())) + \"#\" + id;\n        doc.replaceValues(uniqueKeyName, id);\n      }\n\n      LOG.debug(\"record #{} unique key sanitized to this: {}\", num, doc);\n      \n      return super.doProcess(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#doProcess(Record).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected boolean doProcess(Record doc) {      \n      long num = recordCounter++;\n      // LOG.debug(\"record #{} id before sanitizing doc: {}\", num, doc);\n      if (uniqueKeyName == null || (preserveExisting && doc.getFields().containsKey(uniqueKeyName))) {\n        ; // we must preserve the existing id\n      } else {\n        Object baseId = doc.getFirstValue(baseIdFieldName);\n        if (baseId == null) {\n          throw new MorphlineRuntimeException(\"Record field \" + baseIdFieldName\n              + \" must not be null as it is needed as a basis for a unique key for solr doc: \" + doc);\n        }\n        doc.replaceValues(uniqueKeyName, baseId.toString() + \"#\" + num);          \n      }\n      \n      // for load testing only; enables adding same document many times with a different unique key\n      if (idPrefix != null) { \n        String id = doc.getFirstValue(uniqueKeyName).toString();\n        id = idPrefix + id;\n        doc.replaceValues(uniqueKeyName, id);\n      } else if (randomIdPrefix != null) {\n        String id = doc.getFirstValue(uniqueKeyName).toString();\n        id = String.valueOf(Math.abs(randomIdPrefix.nextInt())) + \"#\" + id;\n        doc.replaceValues(uniqueKeyName, id);\n      }\n\n      LOG.debug(\"record #{} unique key sanitized to this: {}\", num, doc);\n      \n      return super.doProcess(doc);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#doProcess(Record).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected boolean doProcess(Record doc) {      \n      long num = recordCounter++;\n      // LOG.debug(\"record #{} id before sanitizing doc: {}\", num, doc);\n      if (uniqueKeyName == null || (preserveExisting && doc.getFields().containsKey(uniqueKeyName))) {\n        ; // we must preserve the existing id\n      } else {\n        Object baseId = doc.getFirstValue(baseIdFieldName);\n        if (baseId == null) {\n          throw new MorphlineRuntimeException(\"Record field \" + baseIdFieldName\n              + \" must not be null as it is needed as a basis for a unique key for solr doc: \" + doc);\n        }\n        doc.replaceValues(uniqueKeyName, baseId.toString() + \"#\" + num);          \n      }\n      \n      // for load testing only; enables adding same document many times with a different unique key\n      if (idPrefix != null) { \n        String id = doc.getFirstValue(uniqueKeyName).toString();\n        id = idPrefix + id;\n        doc.replaceValues(uniqueKeyName, id);\n      } else if (randomIdPrefix != null) {\n        String id = doc.getFirstValue(uniqueKeyName).toString();\n        id = String.valueOf(Math.abs(randomIdPrefix.nextInt())) + \"#\" + id;\n        doc.replaceValues(uniqueKeyName, id);\n      }\n\n      LOG.debug(\"record #{} unique key sanitized to this: {}\", num, doc);\n      \n      return super.doProcess(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#doProcess(Record).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected boolean doProcess(Record doc) {      \n      long num = recordCounter++;\n      // LOG.debug(\"record #{} id before sanitizing doc: {}\", num, doc);\n      if (uniqueKeyName == null || (preserveExisting && doc.getFields().containsKey(uniqueKeyName))) {\n        ; // we must preserve the existing id\n      } else {\n        Object baseId = doc.getFirstValue(baseIdFieldName);\n        if (baseId == null) {\n          throw new MorphlineRuntimeException(\"Record field \" + baseIdFieldName\n              + \" must not be null as it is needed as a basis for a unique key for solr doc: \" + doc);\n        }\n        doc.replaceValues(uniqueKeyName, baseId.toString() + \"#\" + num);          \n      }\n      \n      // for load testing only; enables adding same document many times with a different unique key\n      if (idPrefix != null) { \n        String id = doc.getFirstValue(uniqueKeyName).toString();\n        id = idPrefix + id;\n        doc.replaceValues(uniqueKeyName, id);\n      } else if (randomIdPrefix != null) {\n        String id = doc.getFirstValue(uniqueKeyName).toString();\n        id = String.valueOf(Math.abs(randomIdPrefix.nextInt())) + \"#\" + id;\n        doc.replaceValues(uniqueKeyName, id);\n      }\n\n      LOG.debug(\"record #{} unique key sanitized to this: {}\", num, doc);\n      \n      return super.doProcess(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["12109b652e9210b8d58fca47f6c4a725d058a58e","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}