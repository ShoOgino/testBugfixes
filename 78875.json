{"path":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      if (delegate.fileExists(fileName)) {\n        throw new IOException(\"cannot uncache file=\\\"\" + fileName + \"\\\": it was separately also created in the delegate directory\");\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = delegate.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      if (delegate.fileExists(fileName)) {\n        throw new IOException(\"cannot uncache file=\\\"\" + fileName + \"\\\": it was separately also created in the delegate directory\");\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = delegate.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66ad5d52334c6be735b490059924589a69b97bd6","date":1347452151,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      if (delegate.fileExists(fileName)) {\n        throw new IOException(\"cannot uncache file=\\\"\" + fileName + \"\\\": it was separately also created in the delegate directory\");\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = delegate.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      if (delegate.fileExists(fileName)) {\n        throw new IOException(\"cannot uncache file=\\\"\" + fileName + \"\\\": it was separately also created in the delegate directory\");\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = delegate.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":["46855a2e3c096d06b604f73733ed9fefa822ba45"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileNameExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = delegate.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileNameExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      if (delegate.fileExists(fileName)) {\n        throw new IOException(\"cannot uncache file=\\\"\" + fileName + \"\\\": it was separately also created in the delegate directory\");\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = delegate.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a04e4daf0316a981f526f447259cbdfb9ecba03","date":1404918762,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileNameExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = in.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileNameExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileNameExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = delegate.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileNameExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4310e21f72d5750be78534560f7f28e2d66bf933","date":1452074177,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileNameExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      assert slowFileExists(in, fileName) == false: \"fileName=\" + fileName + \" exists both in cache and in delegate\";\n\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = in.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileNameExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileNameExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = in.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileNameExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileNameExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      assert slowFileExists(in, fileName) == false: \"fileName=\" + fileName + \" exists both in cache and in delegate\";\n\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = in.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileNameExists(name)) { ... } else { ... }:\n        cache.deleteFiles(Collections.singleton(fileName));\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileNameExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      assert slowFileExists(in, fileName) == false: \"fileName=\" + fileName + \" exists both in cache and in delegate\";\n\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = in.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileNameExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileNameExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      assert slowFileExists(in, fileName) == false: \"fileName=\" + fileName + \" exists both in cache and in delegate\";\n\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = in.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileNameExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileNameExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      assert slowFileExists(in, fileName) == false: \"fileName=\" + fileName + \" exists both in cache and in delegate\";\n\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = in.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileNameExists(name)) { ... } else { ... }:\n        cache.deleteFiles(Collections.singleton(fileName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    // Must sync here because other sync methods have\n    // if (cache.fileNameExists(name)) { ... } else { ... }:\n    synchronized (this) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cacheDirectory.fileExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      assert slowFileExists(in, fileName) == false: \"fileName=\" + fileName + \" exists both in cache and in delegate\";\n\n      in.copyFrom(cacheDirectory, fileName, fileName, IOContext.DEFAULT);\n      cacheSize.addAndGet(-cacheDirectory.fileLength(fileName));\n      cacheDirectory.deleteFile(fileName);\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileNameExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      assert slowFileExists(in, fileName) == false: \"fileName=\" + fileName + \" exists both in cache and in delegate\";\n\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = in.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        out.copyBytes(in, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileNameExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4310e21f72d5750be78534560f7f28e2d66bf933":["3a04e4daf0316a981f526f447259cbdfb9ecba03"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["66ad5d52334c6be735b490059924589a69b97bd6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["4310e21f72d5750be78534560f7f28e2d66bf933"],"3a04e4daf0316a981f526f447259cbdfb9ecba03":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"66ad5d52334c6be735b490059924589a69b97bd6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["4310e21f72d5750be78534560f7f28e2d66bf933"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"4310e21f72d5750be78534560f7f28e2d66bf933":["d77dafd89756a5161d244985903e3487ca109182","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":[],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["3a04e4daf0316a981f526f447259cbdfb9ecba03"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["66ad5d52334c6be735b490059924589a69b97bd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a04e4daf0316a981f526f447259cbdfb9ecba03":["4310e21f72d5750be78534560f7f28e2d66bf933"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"66ad5d52334c6be735b490059924589a69b97bd6":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}