{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/PivotFacetTest#populate().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/PivotFacetTest#populate().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void populate() throws Exception {\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String dtm = (1800+j%DATE + 10) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if ( i != 0 ) {\n        fields.add(\"int_i\"); fields.add(\"\" + i);\n        fields.add(\"int_im\"); fields.add(\"\" + i);\n        fields.add(\"int_im\"); fields.add(\"\" + (i+10));\n      }\n      \n      if ( l != 0l ) {\n        fields.add(\"long_l\"); fields.add(\"\" + l);\n        fields.add(\"long_lm\"); fields.add(\"\" + l);\n        fields.add(\"long_lm\"); fields.add(\"\" + (l+10));\n      }\n      \n      if ( f != 0.0f ) {\n        fields.add(\"float_f\"); fields.add(\"\" + f);\n        fields.add(\"float_fm\"); fields.add(\"\" + f);\n        fields.add(\"float_fm\"); fields.add(\"\" + (f+10));\n      }\n      \n      if ( d != 0.0d ) {\n        fields.add(\"double_d\"); fields.add(\"\" + d);\n        fields.add(\"double_dm\"); fields.add(\"\" + d);\n        fields.add(\"double_dm\"); fields.add(\"\" + (d+10));\n      }\n      \n      if ( (j%DATE) != 0 ) {\n        fields.add(\"date_dt\"); fields.add(dt);\n        fields.add(\"date_dtm\"); fields.add(dt);\n        fields.add(\"date_dtm\"); fields.add(dtm);\n      }\n      \n      if ( (j%STRING) != 0 ) {\n        fields.add(\"string_s\"); fields.add(s);\n        fields.add(\"string_sm\"); fields.add(s);\n        fields.add(\"string_sm\"); fields.add(s + \"_second\");\n      }\n\n      addDoc(fields);\n    }\n    commitDocs();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/PivotFacetTest#populate().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/PivotFacetTest#populate().mjava","sourceNew":"  @BeforeClass\n  public static void populate() throws Exception {\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String dtm = (1800+j%DATE + 10) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if ( i != 0 ) {\n        fields.add(\"int_i\"); fields.add(\"\" + i);\n        fields.add(\"int_im\"); fields.add(\"\" + i);\n        fields.add(\"int_im\"); fields.add(\"\" + (i+10));\n      }\n\n      if ( l != 0l ) {\n        fields.add(\"long_l\"); fields.add(\"\" + l);\n        fields.add(\"long_lm\"); fields.add(\"\" + l);\n        fields.add(\"long_lm\"); fields.add(\"\" + (l+10));\n      }\n\n      if ( f != 0.0f ) {\n        fields.add(\"float_f\"); fields.add(\"\" + f);\n        fields.add(\"float_fm\"); fields.add(\"\" + f);\n        fields.add(\"float_fm\"); fields.add(\"\" + (f+10));\n      }\n\n      if ( d != 0.0d ) {\n        fields.add(\"double_d\"); fields.add(\"\" + d);\n        fields.add(\"double_dm\"); fields.add(\"\" + d);\n        fields.add(\"double_dm\"); fields.add(\"\" + (d+10));\n      }\n\n      if ( (j%DATE) != 0 ) {\n        fields.add(\"date_dt\"); fields.add(dt);\n        fields.add(\"date_dtm\"); fields.add(dt);\n        fields.add(\"date_dtm\"); fields.add(dtm);\n      }\n\n      if ( (j%STRING) != 0 ) {\n        fields.add(\"string_s\"); fields.add(s);\n        fields.add(\"string_sm\"); fields.add(s);\n        fields.add(\"string_sm\"); fields.add(s + \"_second\");\n      }\n\n      addDoc(fields);\n    }\n    commitDocs();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void populate() throws Exception {\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String dtm = (1800+j%DATE + 10) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if ( i != 0 ) {\n        fields.add(\"int_i\"); fields.add(\"\" + i);\n        fields.add(\"int_im\"); fields.add(\"\" + i);\n        fields.add(\"int_im\"); fields.add(\"\" + (i+10));\n      }\n      \n      if ( l != 0l ) {\n        fields.add(\"long_l\"); fields.add(\"\" + l);\n        fields.add(\"long_lm\"); fields.add(\"\" + l);\n        fields.add(\"long_lm\"); fields.add(\"\" + (l+10));\n      }\n      \n      if ( f != 0.0f ) {\n        fields.add(\"float_f\"); fields.add(\"\" + f);\n        fields.add(\"float_fm\"); fields.add(\"\" + f);\n        fields.add(\"float_fm\"); fields.add(\"\" + (f+10));\n      }\n      \n      if ( d != 0.0d ) {\n        fields.add(\"double_d\"); fields.add(\"\" + d);\n        fields.add(\"double_dm\"); fields.add(\"\" + d);\n        fields.add(\"double_dm\"); fields.add(\"\" + (d+10));\n      }\n      \n      if ( (j%DATE) != 0 ) {\n        fields.add(\"date_dt\"); fields.add(dt);\n        fields.add(\"date_dtm\"); fields.add(dt);\n        fields.add(\"date_dtm\"); fields.add(dtm);\n      }\n      \n      if ( (j%STRING) != 0 ) {\n        fields.add(\"string_s\"); fields.add(s);\n        fields.add(\"string_sm\"); fields.add(s);\n        fields.add(\"string_sm\"); fields.add(s + \"_second\");\n      }\n\n      addDoc(fields);\n    }\n    commitDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/PivotFacetTest#populate().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/PivotFacetTest#populate().mjava","sourceNew":"  @BeforeClass\n  public static void populate() throws Exception {\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String dtm = (1800+j%DATE + 10) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if ( i != 0 ) {\n        fields.add(\"int_i\"); fields.add(\"\" + i);\n        fields.add(\"int_im\"); fields.add(\"\" + i);\n        fields.add(\"int_im\"); fields.add(\"\" + (i+10));\n      }\n\n      if ( l != 0l ) {\n        fields.add(\"long_l\"); fields.add(\"\" + l);\n        fields.add(\"long_lm\"); fields.add(\"\" + l);\n        fields.add(\"long_lm\"); fields.add(\"\" + (l+10));\n      }\n\n      if ( f != 0.0f ) {\n        fields.add(\"float_f\"); fields.add(\"\" + f);\n        fields.add(\"float_fm\"); fields.add(\"\" + f);\n        fields.add(\"float_fm\"); fields.add(\"\" + (f+10));\n      }\n\n      if ( d != 0.0d ) {\n        fields.add(\"double_d\"); fields.add(\"\" + d);\n        fields.add(\"double_dm\"); fields.add(\"\" + d);\n        fields.add(\"double_dm\"); fields.add(\"\" + (d+10));\n      }\n\n      if ( (j%DATE) != 0 ) {\n        fields.add(\"date_dt\"); fields.add(dt);\n        fields.add(\"date_dtm\"); fields.add(dt);\n        fields.add(\"date_dtm\"); fields.add(dtm);\n      }\n\n      if ( (j%STRING) != 0 ) {\n        fields.add(\"string_s\"); fields.add(s);\n        fields.add(\"string_sm\"); fields.add(s);\n        fields.add(\"string_sm\"); fields.add(s + \"_second\");\n      }\n\n      addDoc(fields);\n    }\n    commitDocs();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void populate() throws Exception {\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-12-31T23:59:59Z\";\n      String dtm = (1800+j%DATE + 10) + \"-12-31T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if ( i != 0 ) {\n        fields.add(\"int_i\"); fields.add(\"\" + i);\n        fields.add(\"int_im\"); fields.add(\"\" + i);\n        fields.add(\"int_im\"); fields.add(\"\" + (i+10));\n      }\n      \n      if ( l != 0l ) {\n        fields.add(\"long_l\"); fields.add(\"\" + l);\n        fields.add(\"long_lm\"); fields.add(\"\" + l);\n        fields.add(\"long_lm\"); fields.add(\"\" + (l+10));\n      }\n      \n      if ( f != 0.0f ) {\n        fields.add(\"float_f\"); fields.add(\"\" + f);\n        fields.add(\"float_fm\"); fields.add(\"\" + f);\n        fields.add(\"float_fm\"); fields.add(\"\" + (f+10));\n      }\n      \n      if ( d != 0.0d ) {\n        fields.add(\"double_d\"); fields.add(\"\" + d);\n        fields.add(\"double_dm\"); fields.add(\"\" + d);\n        fields.add(\"double_dm\"); fields.add(\"\" + (d+10));\n      }\n      \n      if ( (j%DATE) != 0 ) {\n        fields.add(\"date_dt\"); fields.add(dt);\n        fields.add(\"date_dtm\"); fields.add(dt);\n        fields.add(\"date_dtm\"); fields.add(dtm);\n      }\n      \n      if ( (j%STRING) != 0 ) {\n        fields.add(\"string_s\"); fields.add(s);\n        fields.add(\"string_sm\"); fields.add(s);\n        fields.add(\"string_sm\"); fields.add(s + \"_second\");\n      }\n\n      addDoc(fields);\n    }\n    commitDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}