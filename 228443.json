{"path":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","commits":[{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.StringOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n      if (readerGen[bottom] != currentReaderGen) {\n        convert(bottomSlot);\n      }\n      bottomOrd = ords[bottom];\n      bottomValue = values[bottom];\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n      if (readerGen[bottom] != currentReaderGen) {\n        convert(bottomSlot);\n      }\n      bottomOrd = ords[bottom];\n      assert bottomOrd >= 0;\n      assert bottomOrd < lookup.length;\n      bottomValue = values[bottom];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6","date":1279015205,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (bottomValue == null) {\n        // 0 ord is null for all segments\n        assert ords[bottomSlot] == 0;\n        bottomOrd = 0;\n        bottomSameReader = true;\n      } else {\n        final int index = binarySearch(tempBR, termsIndex, bottomValue);\n        if (index < 0) {\n          bottomOrd = -index - 2;\n          bottomSameReader = false;\n        } else {\n          bottomOrd = index;\n          // exact value match\n          bottomSameReader = true;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n      if (readerGen[bottom] != currentReaderGen) {\n        convert(bottomSlot);\n      }\n      bottomOrd = ords[bottom];\n      bottomValue = values[bottom];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (bottomValue == null) {\n        // 0 ord is null for all segments\n        assert ords[bottomSlot] == 0;\n        bottomOrd = 0;\n        bottomSameReader = true;\n      } else {\n        final int index = binarySearch(tempBR, termsIndex, bottomValue);\n        if (index < 0) {\n          bottomOrd = -index - 2;\n          bottomSameReader = false;\n        } else {\n          bottomOrd = index;\n          // exact value match\n          bottomSameReader = true;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n      if (readerGen[bottom] != currentReaderGen) {\n        convert(bottomSlot);\n      }\n      bottomOrd = ords[bottom];\n      bottomValue = values[bottom];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85dda036bb5a8f3a7207746dd1e4f97b39efa1be","date":1283593758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n          }\n        }\n      }\n      if (bottomSameReader) {\n        readerGen[bottomSlot] = currentReaderGen;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (bottomValue == null) {\n        // 0 ord is null for all segments\n        assert ords[bottomSlot] == 0;\n        bottomOrd = 0;\n        bottomSameReader = true;\n      } else {\n        final int index = binarySearch(tempBR, termsIndex, bottomValue);\n        if (index < 0) {\n          bottomOrd = -index - 2;\n          bottomSameReader = false;\n        } else {\n          bottomOrd = index;\n          // exact value match\n          bottomSameReader = true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fb88f33e6d34835fc7b06b94e2935732ecdfa7f","date":1289846398,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n          }\n          ords[bottomSlot] = bottomOrd;\n        }\n      }\n      if (bottomSameReader) {\n        readerGen[bottomSlot] = currentReaderGen;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n          }\n        }\n      }\n      if (bottomSameReader) {\n        readerGen[bottomSlot] = currentReaderGen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2cb00b9c12554a351efb4c657023c74a6a06734f","date":1289850033,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n          }\n          ords[bottomSlot] = bottomOrd;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n          }\n          ords[bottomSlot] = bottomOrd;\n        }\n      }\n      if (bottomSameReader) {\n        readerGen[bottomSlot] = currentReaderGen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6257a05c4cf2ffb79caf6053a51b0e98f2c577e1","date":1289885511,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n          }\n          ords[bottomSlot] = bottomOrd;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n          }\n        }\n      }\n      if (bottomSameReader) {\n        readerGen[bottomSlot] = currentReaderGen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (bottomValue == null) {\n        // 0 ord is null for all segments\n        assert ords[bottomSlot] == 0;\n        bottomOrd = 0;\n        bottomSameReader = true;\n      } else {\n        final int index = binarySearch(tempBR, termsIndex, bottomValue);\n        if (index < 0) {\n          bottomOrd = -index - 2;\n          bottomSameReader = false;\n        } else {\n          bottomOrd = index;\n          // exact value match\n          bottomSameReader = true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == 0;\n          bottomOrd = 0;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;            \n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"85dda036bb5a8f3a7207746dd1e4f97b39efa1be":["9eb0f2a9f9f67f7b41226f91f0099edecadd99a6"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fb88f33e6d34835fc7b06b94e2935732ecdfa7f":["85dda036bb5a8f3a7207746dd1e4f97b39efa1be"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["85dda036bb5a8f3a7207746dd1e4f97b39efa1be","6257a05c4cf2ffb79caf6053a51b0e98f2c577e1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6257a05c4cf2ffb79caf6053a51b0e98f2c577e1"],"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","9eb0f2a9f9f67f7b41226f91f0099edecadd99a6"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","6257a05c4cf2ffb79caf6053a51b0e98f2c577e1"],"6257a05c4cf2ffb79caf6053a51b0e98f2c577e1":["2cb00b9c12554a351efb4c657023c74a6a06734f"],"2cb00b9c12554a351efb4c657023c74a6a06734f":["8fb88f33e6d34835fc7b06b94e2935732ecdfa7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"85dda036bb5a8f3a7207746dd1e4f97b39efa1be":["8fb88f33e6d34835fc7b06b94e2935732ecdfa7f","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9eb0f2a9f9f67f7b41226f91f0099edecadd99a6","5f4e87790277826a2aea119328600dfb07761f32"],"8fb88f33e6d34835fc7b06b94e2935732ecdfa7f":["2cb00b9c12554a351efb4c657023c74a6a06734f"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6":["85dda036bb5a8f3a7207746dd1e4f97b39efa1be","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"6257a05c4cf2ffb79caf6053a51b0e98f2c577e1":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2cb00b9c12554a351efb4c657023c74a6a06734f":["6257a05c4cf2ffb79caf6053a51b0e98f2c577e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}