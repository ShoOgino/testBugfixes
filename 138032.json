{"path":"modules/spatial/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testRectIntersect().mjava","commits":[{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testRectIntersect().mjava","pathOld":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testRectIntersect().mjava","sourceNew":"  protected void testRectIntersect() {\n    final double INCR = 45;\n    final double Y = 10;\n    for(double left = -180; left <= 180; left += INCR) {\n      for(double right = left; right - left <= 360; right += INCR) {\n        Rectangle r = ctx.makeRect(left,right,-Y,Y);\n\n        //test contains (which also tests within)\n        for(double left2 = left; left2 <= right; left2 += INCR) {\n          for(double right2 = left2; right2 <= right; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.CONTAINS, r, r2);\n          }\n        }\n        //test point contains\n        assertRelation(null, SpatialRelation.CONTAINS, r, ctx.makePoint(left, Y));\n\n        //test disjoint\n        for(double left2 = right+INCR; left2 - left < 360; left2 += INCR) {\n          for(double right2 = left2; right2 - left < 360; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.DISJOINT, r, r2);\n\n            //test point disjoint\n            assertRelation(null, SpatialRelation.DISJOINT, r, ctx.makePoint(left2, Y));\n          }\n        }\n        //test intersect\n        for(double left2 = left+INCR; left2 <= right; left2 += INCR) {\n          for(double right2 = right+INCR; right2 - left < 360; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.INTERSECTS, r, r2);\n          }\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  protected void testRectIntersect() {\n    final double INCR = 45;\n    final double Y = 10;\n    for(double left = -180; left <= 180; left += INCR) {\n      for(double right = left; right - left <= 360; right += INCR) {\n        Rectangle r = ctx.makeRect(left,right,-Y,Y);\n\n        //test contains (which also tests within)\n        for(double left2 = left; left2 <= right; left2 += INCR) {\n          for(double right2 = left2; right2 <= right; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.CONTAINS, r, r2);\n          }\n        }\n        //test point contains\n        assertRelation(null, SpatialRelation.CONTAINS, r, ctx.makePoint(left, Y));\n\n        //test disjoint\n        for(double left2 = right+INCR; left2 - left < 360; left2 += INCR) {\n          for(double right2 = left2; right2 - left < 360; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.DISJOINT, r, r2);\n\n            //test point disjoint\n            assertRelation(null, SpatialRelation.DISJOINT, r, ctx.makePoint(left2, Y));\n          }\n        }\n        //test intersect\n        for(double left2 = left+INCR; left2 <= right; left2 += INCR) {\n          for(double right2 = right+INCR; right2 - left < 360; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.INTERSECTS, r, r2);\n          }\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ee89d976c91275e5be5da438ca0977b1c5b90f","date":1329808149,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testRectIntersect().mjava","pathOld":"modules/spatial/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testRectIntersect().mjava","sourceNew":"  protected void testRectIntersect() {\n    final double INCR = 45;\n    final double Y = 10;\n    for(double left = -180; left <= 180; left += INCR) {\n      for(double right = left; right - left <= 360; right += INCR) {\n        Rectangle r = ctx.makeRect(left,right,-Y,Y);\n\n        //test contains (which also tests within)\n        for(double left2 = left; left2 <= right; left2 += INCR) {\n          for(double right2 = left2; right2 <= right; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.CONTAINS, r, r2);\n          }\n        }\n        //test point contains\n        assertRelation(null, SpatialRelation.CONTAINS, r, ctx.makePoint(left, Y));\n\n        //test disjoint\n        for(double left2 = right+INCR; left2 - left < 360; left2 += INCR) {\n          for(double right2 = left2; right2 - left < 360; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.DISJOINT, r, r2);\n\n            //test point disjoint\n            assertRelation(null, SpatialRelation.DISJOINT, r, ctx.makePoint(left2, Y));\n          }\n        }\n        //test intersect\n        for(double left2 = left+INCR; left2 <= right; left2 += INCR) {\n          for(double right2 = right+INCR; right2 - left < 360; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.INTERSECTS, r, r2);\n          }\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  protected void testRectIntersect() {\n    final double INCR = 45;\n    final double Y = 10;\n    for(double left = -180; left <= 180; left += INCR) {\n      for(double right = left; right - left <= 360; right += INCR) {\n        Rectangle r = ctx.makeRect(left,right,-Y,Y);\n\n        //test contains (which also tests within)\n        for(double left2 = left; left2 <= right; left2 += INCR) {\n          for(double right2 = left2; right2 <= right; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.CONTAINS, r, r2);\n          }\n        }\n        //test point contains\n        assertRelation(null, SpatialRelation.CONTAINS, r, ctx.makePoint(left, Y));\n\n        //test disjoint\n        for(double left2 = right+INCR; left2 - left < 360; left2 += INCR) {\n          for(double right2 = left2; right2 - left < 360; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.DISJOINT, r, r2);\n\n            //test point disjoint\n            assertRelation(null, SpatialRelation.DISJOINT, r, ctx.makePoint(left2, Y));\n          }\n        }\n        //test intersect\n        for(double left2 = left+INCR; left2 <= right; left2 += INCR) {\n          for(double right2 = right+INCR; right2 - left < 360; right2 += INCR) {\n            Rectangle r2 = ctx.makeRect(left2,right2,-Y,Y);\n            assertRelation(null, SpatialRelation.INTERSECTS, r, r2);\n          }\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["33ee89d976c91275e5be5da438ca0977b1c5b90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33ee89d976c91275e5be5da438ca0977b1c5b90f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["33ee89d976c91275e5be5da438ca0977b1c5b90f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}