{"path":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSortField#getComparator(int,int).mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSortField#getComparator(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) throws IOException {\n    switch(type) {\n      case INT:\n        return new FieldComparator.IntComparator(numHits, getField(), (Integer) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case FLOAT:\n        return new FieldComparator.FloatComparator(numHits, getField(), (Float) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case LONG:\n        return new FieldComparator.LongComparator(numHits, getField(), (Long) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          }\n        };\n      case DOUBLE:\n        return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSortField#getComparator(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) throws IOException {\n    switch(type) {\n      case INT:\n        return new FieldComparator.IntComparator(numHits, getField(), (Integer) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case FLOAT:\n        return new FieldComparator.FloatComparator(numHits, getField(), (Float) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case LONG:\n        return new FieldComparator.LongComparator(numHits, getField(), (Long) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          }\n        };\n      case DOUBLE:\n        return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSortField#getComparator(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSortField#getComparator(int,int).mjava","sourceNew":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) throws IOException {\n    switch(type) {\n      case INT:\n        return new FieldComparator.IntComparator(numHits, getField(), (Integer) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case FLOAT:\n        return new FieldComparator.FloatComparator(numHits, getField(), (Float) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case LONG:\n        return new FieldComparator.LongComparator(numHits, getField(), (Long) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          }\n        };\n      case DOUBLE:\n        return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) throws IOException {\n    switch(type) {\n      case INT:\n        return new FieldComparator.IntComparator(numHits, getField(), (Integer) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case FLOAT:\n        return new FieldComparator.FloatComparator(numHits, getField(), (Float) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case LONG:\n        return new FieldComparator.LongComparator(numHits, getField(), (Long) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          }\n        };\n      case DOUBLE:\n        return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(AtomicReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSortField#getComparator(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSortField#getComparator(int,int).mjava","sourceNew":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) {\n    switch(type) {\n      case INT:\n        return new FieldComparator.IntComparator(numHits, getField(), (Integer) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case FLOAT:\n        return new FieldComparator.FloatComparator(numHits, getField(), (Float) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case LONG:\n        return new FieldComparator.LongComparator(numHits, getField(), (Long) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          }\n        };\n      case DOUBLE:\n        return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) throws IOException {\n    switch(type) {\n      case INT:\n        return new FieldComparator.IntComparator(numHits, getField(), (Integer) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case FLOAT:\n        return new FieldComparator.FloatComparator(numHits, getField(), (Float) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case LONG:\n        return new FieldComparator.LongComparator(numHits, getField(), (Long) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          }\n        };\n      case DOUBLE:\n        return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSortField#getComparator(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSortField#getComparator(int,int).mjava","sourceNew":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) {\n    switch(type) {\n      case INT:\n        return new FieldComparator.IntComparator(numHits, getField(), (Integer) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case FLOAT:\n        return new FieldComparator.FloatComparator(numHits, getField(), (Float) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case LONG:\n        return new FieldComparator.LongComparator(numHits, getField(), (Long) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          }\n        };\n      case DOUBLE:\n        return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) throws IOException {\n    switch(type) {\n      case INT:\n        return new FieldComparator.IntComparator(numHits, getField(), (Integer) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case FLOAT:\n        return new FieldComparator.FloatComparator(numHits, getField(), (Float) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case LONG:\n        return new FieldComparator.LongComparator(numHits, getField(), (Long) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          }\n        };\n      case DOUBLE:\n        return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSortField#getComparator(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSortField#getComparator(int,int).mjava","sourceNew":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) {\n    switch(type) {\n      case INT:\n        return new IntComparator(numHits, getField(), (Integer) missingValue, reverse, sortPos) {\n          @Override\n          public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n            return new IntLeafComparator(context) {\n              @Override\n              protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n              }\n            };\n          }\n        };\n      case FLOAT:\n        return new FloatComparator(numHits, getField(), (Float) missingValue, reverse, sortPos) {\n          @Override\n          public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n            return new FloatLeafComparator(context) {\n              @Override\n              protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n              }\n            };\n          }\n        };\n      case LONG:\n        return new LongComparator(numHits, getField(), (Long) missingValue, reverse, sortPos) {\n          @Override\n          public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n            return new LongLeafComparator(context) {\n              @Override\n              protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n              }\n            };\n          }\n        };\n      case DOUBLE:\n        return new DoubleComparator(numHits, getField(), (Double) missingValue, reverse, sortPos) {\n          @Override\n          public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n            return new DoubleLeafComparator(context) {\n              @Override\n              protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n              }\n            };\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) {\n    switch(type) {\n      case INT:\n        return new FieldComparator.IntComparator(numHits, getField(), (Integer) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case FLOAT:\n        return new FieldComparator.FloatComparator(numHits, getField(), (Float) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      case LONG:\n        return new FieldComparator.LongComparator(numHits, getField(), (Long) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          }\n        };\n      case DOUBLE:\n        return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n          @Override\n          protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n            return SortedNumericSelector.wrap(DocValues.getSortedNumeric(context.reader(), field), selector, type);\n          } \n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e38c6374c23083c93e212a9498ff0a9c255476":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["c9fb5f46e264daf5ba3860defe623a89d202dd87","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["03e38c6374c23083c93e212a9498ff0a9c255476"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"03e38c6374c23083c93e212a9498ff0a9c255476":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["03e38c6374c23083c93e212a9498ff0a9c255476","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}