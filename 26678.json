{"path":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","commits":[{"id":"561c2351baf6dd64061addef891359954c1a7faa","date":1462788487,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (!rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        cloudClient.request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (!rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        cloudClient.request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (!rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        cloudClient.request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da83c90417e805f2b355afc2d79f4d2b2ce27469","date":1464346037,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","sourceNew":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    \n    upd.append(\"<delete><query>*:*</query></delete>\");\n    \n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (!rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        client.request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","sourceOld":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (!rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        cloudClient.request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a95b7b666da79218aa9365b9d9adcb42351ee3","date":1464382787,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","sourceNew":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    \n    upd.append(\"<delete><query>*:*</query></delete>\");\n    \n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        cluster.getSolrClient().request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","sourceOld":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    \n    upd.append(\"<delete><query>*:*</query></delete>\");\n    \n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (!rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        client.request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","sourceNew":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    \n    upd.append(\"<delete><query>*:*</query></delete>\");\n    \n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        cluster.getSolrClient().request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","sourceOld":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (!rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        cloudClient.request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","sourceNew":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    \n    upd.append(\"<delete><query>*:*</query></delete>\");\n    \n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        cluster.getSolrClient().request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","sourceOld":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (!rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        cloudClient.request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#addDocs(String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void addDocs(String collection, List<String> docs) throws SolrServerException, IOException {\n    StringBuilder upd = new StringBuilder(\"<update>\");\n    \n    upd.append(\"<delete><query>*:*</query></delete>\");\n    \n    for (Iterator<String> iterator = docs.iterator(); iterator.hasNext();) {\n      String add =  iterator.next();\n      upd.append(add);\n      if (rarely()) {\n        upd.append(commit(\"softCommit\", \"true\"));\n      }\n      if (rarely() || !iterator.hasNext()) {\n        if (!iterator.hasNext()) {\n          upd.append(commit(\"softCommit\", \"false\"));\n        }\n        upd.append(\"</update>\");\n        \n        ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update\");\n        req.addContentStream(new ContentStreamBase.StringStream(upd.toString(),\"text/xml\"));\n        \n        cluster.getSolrClient().request(req, collection);\n        upd.setLength(\"<update>\".length());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8a02bef7458089240404614139b53c9f875ec7":["d470c8182e92b264680e34081b75e70a9f2b3c89","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"],"d6a95b7b666da79218aa9365b9d9adcb42351ee3":["da83c90417e805f2b355afc2d79f4d2b2ce27469"],"561c2351baf6dd64061addef891359954c1a7faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["d470c8182e92b264680e34081b75e70a9f2b3c89","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"]},"commit2Childs":{"da8a02bef7458089240404614139b53c9f875ec7":[],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e66a459d38c1c4a2f97128433dab546f683a9fed","561c2351baf6dd64061addef891359954c1a7faa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"d6a95b7b666da79218aa9365b9d9adcb42351ee3":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"561c2351baf6dd64061addef891359954c1a7faa":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["da8a02bef7458089240404614139b53c9f875ec7","da83c90417e805f2b355afc2d79f4d2b2ce27469","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da8a02bef7458089240404614139b53c9f875ec7","e66a459d38c1c4a2f97128433dab546f683a9fed","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}