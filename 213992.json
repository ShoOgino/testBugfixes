{"path":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetProcessor#addPivotQueriesAndRanges(NamedList[Object],SolrParams,DocSet,List[FacetComponent.FacetBase],List[RangeFacetRequest]).mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetProcessor#addPivotQueriesAndRanges(NamedList[Object],SolrParams,DocSet,List[FacetComponent.FacetBase],List[RangeFacetRequest]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add facet.queries and facet.ranges to the pivot response if needed\n   * \n   * @param pivot\n   *          Pivot in which to inject additional data\n   * @param params\n   *          Query parameters.\n   * @param docs\n   *          DocSet of the current pivot to use for computing sub-counts\n   * @param facetQueries\n   *          Tagged facet queries should have to be included, must not be null\n   * @param facetRanges\n   *          Taged facet ranges should have to be included, must not be null\n   * @throws IOException\n   *           If searcher has issues finding numDocs.\n   */\n  protected void addPivotQueriesAndRanges(NamedList<Object> pivot, SolrParams params, DocSet docs,\n                                          List<FacetComponent.FacetBase> facetQueries,\n                                          List<RangeFacetRequest> facetRanges) throws IOException {\n    assert null != facetQueries;\n    assert null != facetRanges;\n    \n    if ( ! facetQueries.isEmpty()) {\n      SimpleFacets facets = new SimpleFacets(req, docs, params);\n      NamedList<Integer> res = new SimpleOrderedMap<>();\n      for (FacetComponent.FacetBase facetQuery : facetQueries) {\n        try {\n          ParsedParams parsed = getParsedParams(params, docs, facetQuery);\n          facets.getFacetQueryCount(parsed, res);\n        } catch (SyntaxError e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n                                  \"Invalid \" + FacetParams.FACET_QUERY + \" (\" + facetQuery.facetStr +\n                                  \") cause: \" + e.getMessage(), e);\n        }\n      }\n      pivot.add(PivotListEntry.QUERIES.getName(), res);\n    }\n    if ( ! facetRanges.isEmpty()) {\n      RangeFacetProcessor rangeFacetProcessor = new RangeFacetProcessor(req, docs, params, null);\n      NamedList<Object> resOuter = new SimpleOrderedMap<>();\n      for (RangeFacetRequest rangeFacet : facetRanges) {\n        try {\n          rangeFacetProcessor.getFacetRangeCounts(rangeFacet, resOuter);\n        } catch (SyntaxError e) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\n                                  \"Invalid \" + FacetParams.FACET_RANGE + \" (\" + rangeFacet.facetStr +\n                                  \") cause: \" + e.getMessage(), e);\n        }\n      }\n      pivot.add(PivotListEntry.RANGES.getName(), resOuter);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}