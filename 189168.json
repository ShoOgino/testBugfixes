{"path":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"  // enables bulk copies in subclasses per MergeState\n  protected void merge(MergeState state) throws IOException {\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      final ValuesAttribute attr = valEnum.addAttribute(ValuesAttribute.class);\n      setNextAttribute(attr);\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      for (int i = 0; i < docCount; i++) {\n        if (bits == null || !bits.get(i)) {\n          if (valEnum.advance(i) == ValuesEnum.NO_MORE_DOCS)\n            break;\n          add(docID++);\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  // enables bulk copies in subclasses per MergeState\n  @Override\n  protected void merge(MergeState state) throws IOException {\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      final ValuesAttribute attr = valEnum.addAttribute(ValuesAttribute.class);\n      setNextAttribute(attr);\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      for (int i = 0; i < docCount; i++) {\n        if (bits == null || !bits.get(i)) {\n          if (valEnum.advance(i) == ValuesEnum.NO_MORE_DOCS)\n            break;\n          add(docID++);\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":"  // enables bulk copies in subclasses per MergeState\n  protected void merge(MergeState state) throws IOException {\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      final ValuesAttribute attr = valEnum.addAttribute(ValuesAttribute.class);\n      setNextAttribute(attr);\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      for (int i = 0; i < docCount; i++) {\n        if (bits == null || !bits.get(i)) {\n          if (valEnum.advance(i) == ValuesEnum.NO_MORE_DOCS)\n            break;\n          add(docID++);\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  // enables bulk copies in subclasses per MergeState\n  @Override\n  protected void merge(MergeState state) throws IOException {\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      final ValuesAttribute attr = valEnum.addAttribute(ValuesAttribute.class);\n      setNextAttribute(attr);\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":"  // enables bulk copies in subclasses per MergeState\n  @Override\n  protected void merge(MergeState state) throws IOException {\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      final ValuesAttribute attr = valEnum.addAttribute(ValuesAttribute.class);\n      setNextAttribute(attr);\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      for (int i = 0; i < docCount; i++) {\n        if (bits == null || !bits.get(i)) {\n          if (valEnum.advance(i) == ValuesEnum.NO_MORE_DOCS)\n            break;\n          add(docID++);\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  // enables bulk copies in subclasses per MergeState\n  @Override\n  protected void merge(MergeState state) throws IOException {\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum);\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":"  // enables bulk copies in subclasses per MergeState\n  @Override\n  protected void merge(MergeState state) throws IOException {\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      final ValuesAttribute attr = valEnum.addAttribute(ValuesAttribute.class);\n      setNextAttribute(attr);\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2fc2eb37a1f19e90850f787d9e085950ebfa04","date":1291597075,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  // enables bulk copies in subclasses per MergeState\n  @Override\n  protected void merge(MergeState state) throws IOException {\n    final DocValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum);\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != DocValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == DocValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":"  // enables bulk copies in subclasses per MergeState\n  @Override\n  protected void merge(MergeState state) throws IOException {\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum);\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16dc5aef9648bb8fedce2ef55874f52e62c2766d","date":1293994163,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final DocValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != DocValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == DocValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":"  // enables bulk copies in subclasses per MergeState\n  @Override\n  protected void merge(MergeState state) throws IOException {\n    final DocValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum);\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != DocValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == DocValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final DocValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != DocValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == DocValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d99ebe8731bf50d5cb230be452816572bdfd7037","date":1309162035,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              mergeDoc(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              mergeDoc(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits liveDocs = state.liveDocs;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (liveDocs == null || liveDocs.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              mergeDoc(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              mergeDoc(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits liveDocs = state.liveDocs;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (liveDocs == null || liveDocs.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              mergeDoc(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              mergeDoc(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits liveDocs = state.liveDocs;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (liveDocs == null || liveDocs.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              mergeDoc(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits bits = state.bits;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (bits == null || !bits.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              add(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final ValuesEnum valEnum = state.reader.getEnum();\n    assert valEnum != null;\n    try {\n      setNextEnum(valEnum); // set the current enum we are working on - the\n      // impl. will get the correct reference for the type\n      // it supports\n      int docID = state.docBase;\n      final Bits liveDocs = state.liveDocs;\n      final int docCount = state.docCount;\n      int currentDocId;\n      if ((currentDocId = valEnum.advance(0)) != ValuesEnum.NO_MORE_DOCS) {\n        for (int i = 0; i < docCount; i++) {\n          if (liveDocs == null || liveDocs.get(i)) {\n            if (currentDocId < i) {\n              if ((currentDocId = valEnum.advance(i)) == ValuesEnum.NO_MORE_DOCS) {\n                break; // advance can jump over default values\n              }\n            }\n            if (currentDocId == i) { // we are on the doc to merge\n              mergeDoc(docID);\n            }\n            ++docID;\n          }\n        }\n      }\n    } finally {\n      valEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4","date":1318260487,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(SingleSubMergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Writer#merge(MergeState).mjava","sourceNew":"  @Override\n  protected void merge(SingleSubMergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  protected void merge(MergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d99ebe8731bf50d5cb230be452816572bdfd7037"],"d99ebe8731bf50d5cb230be452816572bdfd7037":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d99ebe8731bf50d5cb230be452816572bdfd7037"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["3bb13258feba31ab676502787ab2e1779f129b7a"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","605b061fadf71aa6458c0005eaae83a98350c403"],"605b061fadf71aa6458c0005eaae83a98350c403":["16dc5aef9648bb8fedce2ef55874f52e62c2766d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16dc5aef9648bb8fedce2ef55874f52e62c2766d":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"e128967bca58657bc0039d4bfe631e63e81f1977":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4":["e128967bca58657bc0039d4bfe631e63e81f1977"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"3bb13258feba31ab676502787ab2e1779f129b7a":["2d84736c4614acce6720851cbd2c823d7cd516e4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["32aca6bb0a6aa0a1813e7d035ac0e039f54269f4"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","e128967bca58657bc0039d4bfe631e63e81f1977"],"d99ebe8731bf50d5cb230be452816572bdfd7037":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["16dc5aef9648bb8fedce2ef55874f52e62c2766d"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"2d84736c4614acce6720851cbd2c823d7cd516e4":["3bb13258feba31ab676502787ab2e1779f129b7a"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d99ebe8731bf50d5cb230be452816572bdfd7037","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"605b061fadf71aa6458c0005eaae83a98350c403":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","01f60198ece724a6e96cd0b45f289cf42ff83d4f","2e8d7ba2175f47e280231533f7d3016249cea88b","3bb13258feba31ab676502787ab2e1779f129b7a"],"16dc5aef9648bb8fedce2ef55874f52e62c2766d":["605b061fadf71aa6458c0005eaae83a98350c403"],"e128967bca58657bc0039d4bfe631e63e81f1977":["32aca6bb0a6aa0a1813e7d035ac0e039f54269f4"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}