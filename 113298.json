{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(double[],double[]).mjava","commits":[{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#createTree(double[],double[]).mjava","sourceNew":"  /** \n   * Creates an edge interval tree from a set of polygon vertices.\n   * @return root node of the tree.\n   */\n  private static Edge createTree(double polyLats[], double polyLons[]) {\n    Edge edges[] = new Edge[polyLats.length - 1];\n    for (int i = 1; i < polyLats.length; i++) {\n      double lat1 = polyLats[i-1];\n      double lon1 = polyLons[i-1];\n      double lat2 = polyLats[i];\n      double lon2 = polyLons[i];\n      edges[i - 1] = new Edge(lat1, lon1, lat2, lon2, Math.min(lat1, lat2), Math.max(lat1, lat2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","sourceOld":"  /** \n   * Creates an edge interval tree from a set of polygon vertices.\n   * @return root node of the tree.\n   */\n  private static Edge createTree(double polyLats[], double polyLons[]) {\n    Edge edges[] = new Edge[polyLats.length - 1];\n    for (int i = 1; i < polyLats.length; i++) {\n      double lat1 = polyLats[i-1];\n      double lon1 = polyLons[i-1];\n      double lat2 = polyLats[i];\n      double lon2 = polyLons[i];\n      edges[i - 1] = new Edge(lat1, lon1, lat2, lon2, Math.min(lat1, lat2), Math.max(lat1, lat2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Creates an edge interval tree from a set of polygon vertices.\n   * @return root node of the tree.\n   */\n  private static Edge createTree(double polyLats[], double polyLons[]) {\n    Edge edges[] = new Edge[polyLats.length - 1];\n    for (int i = 1; i < polyLats.length; i++) {\n      double lat1 = polyLats[i-1];\n      double lon1 = polyLons[i-1];\n      double lat2 = polyLats[i];\n      double lon2 = polyLons[i];\n      edges[i - 1] = new Edge(lat1, lon1, lat2, lon2, Math.min(lat1, lat2), Math.max(lat1, lat2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(double[],double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(double[],double[]).mjava","sourceNew":"  /**\n   * Creates an edge interval tree from a set of geometry vertices.\n   * @return root node of the tree.\n   */\n  private static Edge createTree(double[] lats, double[] lons) {\n    Edge edges[] = new Edge[lats.length - 1];\n    for (int i = 1; i < lats.length; i++) {\n      double lat1 = lats[i-1];\n      double lon1 = lons[i-1];\n      double lat2 = lats[i];\n      double lon2 = lons[i];\n      edges[i - 1] = new Edge(lat1, lon1, lat2, lon2, Math.min(lat1, lat2), Math.max(lat1, lat2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","sourceOld":"  /** \n   * Creates an edge interval tree from a set of polygon vertices.\n   * @return root node of the tree.\n   */\n  private static Edge createTree(double polyLats[], double polyLons[]) {\n    Edge edges[] = new Edge[polyLats.length - 1];\n    for (int i = 1; i < polyLats.length; i++) {\n      double lat1 = polyLats[i-1];\n      double lon1 = polyLons[i-1];\n      double lat2 = polyLats[i];\n      double lon2 = polyLons[i];\n      edges[i - 1] = new Edge(lat1, lon1, lat2, lon2, Math.min(lat1, lat2), Math.max(lat1, lat2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","925fce43f3bac029d912b9b7de03c789e258a333"],"e4fccad460342b1af30cb328cc8297751a218d78":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e4fccad460342b1af30cb328cc8297751a218d78"],"925fce43f3bac029d912b9b7de03c789e258a333":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["e4fccad460342b1af30cb328cc8297751a218d78"],"e4fccad460342b1af30cb328cc8297751a218d78":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}