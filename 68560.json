{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsQuery().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsQuery().mjava","sourceNew":"  public void test2TermsQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new TermQuery(new Term(F, \"a\")), BooleanClause.Occur.SHOULD);\n    booleanQuery.add(new TermQuery(new Term(F, \"b\")), BooleanClause.Occur.SHOULD);\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(booleanQuery, \"c d e\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(booleanQuery, \"d b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(b((2,3)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(booleanQuery, \"a b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1))b((2,3)))/2.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","sourceOld":"  public void test2TermsQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new TermQuery(new Term(F, \"a\")), BooleanClause.Occur.SHOULD);\n    booleanQuery.add(new TermQuery(new Term(F, \"b\")), BooleanClause.Occur.SHOULD);\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(booleanQuery, \"c d e\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(booleanQuery, \"d b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(b((2,3)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(booleanQuery, \"a b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1))b((2,3)))/2.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsQuery().mjava","sourceNew":"  public void test2TermsQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(new TermQuery(new Term(F, \"a\")), BooleanClause.Occur.SHOULD);\n    booleanQuery.add(new TermQuery(new Term(F, \"b\")), BooleanClause.Occur.SHOULD);\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(booleanQuery.build(), \"c d e\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(booleanQuery.build(), \"d b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(b((2,3)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(booleanQuery.build(), \"a b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1))b((2,3)))/2.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","sourceOld":"  public void test2TermsQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(new TermQuery(new Term(F, \"a\")), BooleanClause.Occur.SHOULD);\n    booleanQuery.add(new TermQuery(new Term(F, \"b\")), BooleanClause.Occur.SHOULD);\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(booleanQuery, \"c d e\" ), 20 );\n    assertEquals( 0, ffl.getFragInfos().size() );\n\n    ffl = sflb.createFieldFragList( fpl(booleanQuery, \"d b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(b((2,3)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(booleanQuery, \"a b c\" ), 20 );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1))b((2,3)))/2.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}