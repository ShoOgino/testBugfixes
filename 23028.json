{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testMetricsTag().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudTestUtils.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudTestUtils.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudTestUtils.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudTestUtils.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudUtil.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudTestUtils.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudUtil.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudUtil.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testMetricsTag().mjava","sourceNew":null,"sourceOld":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudUtil.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["89948af0461fead48f44ba8fb7866f107ce83f22"],"89948af0461fead48f44ba8fb7866f107ce83f22":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["89948af0461fead48f44ba8fb7866f107ce83f22"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"89948af0461fead48f44ba8fb7866f107ce83f22":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}