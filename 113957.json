{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getActiveReplicaCoreUrls(ZkController,String).mjava","commits":[{"id":"389d072b64597cdcf75c2d536aaec3e8afe3393f","date":1427818698,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getActiveReplicaCoreUrls(ZkController,String).mjava","pathOld":"/dev/null","sourceNew":"  public static List<String> getActiveReplicaCoreUrls(ZkController zkController,\n                                                      String collection) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (ZkStateReader.ACTIVE.equals(replica.getStr(ZkStateReader.STATE_PROP)) &&\n                liveNodes.contains(replica.getNodeName())) {\n              activeReplicaCoreUrls.add(replica.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getActiveReplicaCoreUrls(ZkController,String).mjava","pathOld":"/dev/null","sourceNew":"  public static List<String> getActiveReplicaCoreUrls(ZkController zkController,\n                                                      String collection) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (ZkStateReader.ACTIVE.equals(replica.getStr(ZkStateReader.STATE_PROP)) &&\n                liveNodes.contains(replica.getNodeName())) {\n              activeReplicaCoreUrls.add(replica.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getActiveReplicaCoreUrls(ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getActiveReplicaCoreUrls(ZkController,String).mjava","sourceNew":"  public static List<String> getActiveReplicaCoreUrls(ZkController zkController,\n                                                      String collection) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n              activeReplicaCoreUrls.add(replica.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","sourceOld":"  public static List<String> getActiveReplicaCoreUrls(ZkController zkController,\n                                                      String collection) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (ZkStateReader.ACTIVE.equals(replica.getStr(ZkStateReader.STATE_PROP)) &&\n                liveNodes.contains(replica.getNodeName())) {\n              activeReplicaCoreUrls.add(replica.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getActiveReplicaCoreUrls(ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getActiveReplicaCoreUrls(ZkController,String).mjava","sourceNew":"  public static List<String> getActiveReplicaCoreUrls(ZkController zkController,\n                                                      String collection) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection != null && docCollection.getActiveSlices() != null && docCollection.getActiveSlices().size() > 0) {\n      final Collection<Slice> activeSlices = docCollection.getActiveSlices();\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n              activeReplicaCoreUrls.add(replica.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","sourceOld":"  public static List<String> getActiveReplicaCoreUrls(ZkController zkController,\n                                                      String collection) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n              activeReplicaCoreUrls.add(replica.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","bugFix":["389d072b64597cdcf75c2d536aaec3e8afe3393f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getActiveReplicaCoreUrls(ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getActiveReplicaCoreUrls(ZkController,String).mjava","sourceNew":"  public static List<String> getActiveReplicaCoreUrls(ZkController zkController,\n                                                      String collection) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection != null && docCollection.getActiveSlices() != null && docCollection.getActiveSlices().size() > 0) {\n      final Collection<Slice> activeSlices = docCollection.getActiveSlices();\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n              activeReplicaCoreUrls.add(replica.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","sourceOld":"  public static List<String> getActiveReplicaCoreUrls(ZkController zkController,\n                                                      String collection) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n              activeReplicaCoreUrls.add(replica.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["389d072b64597cdcf75c2d536aaec3e8afe3393f"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a219f1dcad1700e84807666bdbd2b573e8de7021","344b0840364d990b29b97467bfcc766ff8325d11"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"344b0840364d990b29b97467bfcc766ff8325d11":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fab172655716b96f7e42376116235017a922de3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["344b0840364d990b29b97467bfcc766ff8325d11"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["a219f1dcad1700e84807666bdbd2b573e8de7021","fab172655716b96f7e42376116235017a922de3a"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["389d072b64597cdcf75c2d536aaec3e8afe3393f","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}