{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a4469b796ffbb01ca57a182e25a95de21fb4538","date":1331234730,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf795ee457272965bd751f513787065bbf0a650a","date":1385015231,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1002283cfd29923d517db7c33e07bb54aac7acd4","date":1427211199,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      } else if ( \"percentiles\".equals( entry.getKey() ) ){\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>) entry.getValue();\n        percentiles = new LinkedHashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          percentiles.put(Double.parseDouble(ev.getKey()), (Double)ev.getValue());\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      } else if ( \"percentiles\".equals( entry.getKey() ) ){\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>) entry.getValue();\n        percentiles = new LinkedHashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          percentiles.put(Double.parseDouble(ev.getKey()), (Double)ev.getValue());\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a4e2c829188fb99886a64558664d79c9ac0fdf1","date":1431021538,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      } else if ( \"percentiles\".equals( entry.getKey() ) ){\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>) entry.getValue();\n        percentiles = new LinkedHashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          percentiles.put(Double.parseDouble(ev.getKey()), (Double)ev.getValue());\n        }\n      } else if ( \"cardinality\".equals(entry.getKey()) ) {\n        cardinality = (Long)entry.getValue();\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      } else if ( \"percentiles\".equals( entry.getKey() ) ){\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>) entry.getValue();\n        percentiles = new LinkedHashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          percentiles.put(Double.parseDouble(ev.getKey()), (Double)ev.getValue());\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      } else if ( \"percentiles\".equals( entry.getKey() ) ){\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>) entry.getValue();\n        percentiles = new LinkedHashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          percentiles.put(Double.parseDouble(ev.getKey()), (Double)ev.getValue());\n        }\n      } else if ( \"cardinality\".equals(entry.getKey()) ) {\n        cardinality = (Long)entry.getValue();\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if (\"countDistinct\".equals(entry.getKey())) {\n        countDistinct = (Long) entry.getValue();\n      }\n      else if (\"distinctValues\".equals(entry.getKey())) {\n        distinctValues = (Collection<Object>) entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      } else if ( \"percentiles\".equals( entry.getKey() ) ){\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>) entry.getValue();\n        percentiles = new LinkedHashMap<>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          percentiles.put(Double.parseDouble(ev.getKey()), (Double)ev.getValue());\n        }\n      } else if ( \"cardinality\".equals(entry.getKey()) ) {\n        cardinality = (Long)entry.getValue();\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["c26f00b574427b55127e869b935845554afde1fa","1a4469b796ffbb01ca57a182e25a95de21fb4538"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bf795ee457272965bd751f513787065bbf0a650a"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"bf795ee457272965bd751f513787065bbf0a650a":["1a4469b796ffbb01ca57a182e25a95de21fb4538"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1002283cfd29923d517db7c33e07bb54aac7acd4"],"1a4469b796ffbb01ca57a182e25a95de21fb4538":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["1a4469b796ffbb01ca57a182e25a95de21fb4538","bf795ee457272965bd751f513787065bbf0a650a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1002283cfd29923d517db7c33e07bb54aac7acd4","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"c26f00b574427b55127e869b935845554afde1fa":["38e3b736c7ca086d61b7dbb841c905ee115490da","1a4469b796ffbb01ca57a182e25a95de21fb4538"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf795ee457272965bd751f513787065bbf0a650a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["4a4e2c829188fb99886a64558664d79c9ac0fdf1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1a4469b796ffbb01ca57a182e25a95de21fb4538":["38e3b736c7ca086d61b7dbb841c905ee115490da","bf795ee457272965bd751f513787065bbf0a650a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}