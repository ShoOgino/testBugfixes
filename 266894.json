{"path":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/servlet/TestAbstractGdataServlet#testServiceHttpServletRequestHttpServletResponsePOST().mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/servlet/TestAbstractGdataServlet#testServiceHttpServletRequestHttpServletResponsePOST().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/servlet/TestAbstractGdataServlet#testServiceHttpServletRequestHttpServletResponsePOST().mjava","sourceNew":"    /** \n     * Test method for \n     * 'org.apache.lucene.gdata.servlet.AbstractGdataServlet.service(HttpServletRequest, \n     * HttpServletResponse)' \n     */ \n    public void testServiceHttpServletRequestHttpServletResponsePOST() { \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getMethod(), METHOD_POST); \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getHeader(METHOD_HEADER_NAME), METHOD_POST); \n        this.requestMockControl.replay(); \n \n        try { \n            this.servletInstance.service(this.mockRequest, this.mockResponse); \n        } catch (ServletException e) { \n            fail(\"ServeltExpception not expected\"); \n        } catch (IOException e) { \n            fail(\"IOExpception not expected\"); \n        } \n \n        this.requestMockControl.verify(); \n        this.requestMockControl.reset(); \n \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getMethod(), METHOD_PUT); \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getHeader(METHOD_HEADER_NAME), METHOD_POST); \n        this.requestMockControl.replay(); \n \n        try { \n            this.servletInstance.service(this.mockRequest, this.mockResponse); \n        } catch (ServletException e) { \n            fail(\"ServeltExpception not expected\"); \n        } catch (IOException e) { \n            fail(\"IOExpception not expected\"); \n        } \n \n        this.requestMockControl.verify(); \n    } \n\n","sourceOld":"    /** \n     * Test method for \n     * 'org.apache.lucene.gdata.servlet.AbstractGdataServlet.service(HttpServletRequest, \n     * HttpServletResponse)' \n     */ \n    public void testServiceHttpServletRequestHttpServletResponsePOST() { \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getMethod(), METHOD_POST); \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getHeader(METHOD_HEADER_NAME), METHOD_POST); \n        this.requestMockControl.replay(); \n \n        try { \n            this.servletInstance.service(this.mockRequest, this.mockResponse); \n        } catch (ServletException e) { \n            fail(\"ServeltExpception not expected\"); \n        } catch (IOException e) { \n            fail(\"IOExpception not expected\"); \n        } \n \n        this.requestMockControl.verify(); \n        this.requestMockControl.reset(); \n \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getMethod(), METHOD_PUT); \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getHeader(METHOD_HEADER_NAME), METHOD_POST); \n        this.requestMockControl.replay(); \n \n        try { \n            this.servletInstance.service(this.mockRequest, this.mockResponse); \n        } catch (ServletException e) { \n            fail(\"ServeltExpception not expected\"); \n        } catch (IOException e) { \n            fail(\"IOExpception not expected\"); \n        } \n \n        this.requestMockControl.verify(); \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/servlet/TestAbstractGdataServlet#testServiceHttpServletRequestHttpServletResponsePOST().mjava","sourceNew":null,"sourceOld":"    /** \n     * Test method for \n     * 'org.apache.lucene.gdata.servlet.AbstractGdataServlet.service(HttpServletRequest, \n     * HttpServletResponse)' \n     */ \n    public void testServiceHttpServletRequestHttpServletResponsePOST() { \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getMethod(), METHOD_POST); \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getHeader(METHOD_HEADER_NAME), METHOD_POST); \n        this.requestMockControl.replay(); \n \n        try { \n            this.servletInstance.service(this.mockRequest, this.mockResponse); \n        } catch (ServletException e) { \n            fail(\"ServeltExpception not expected\"); \n        } catch (IOException e) { \n            fail(\"IOExpception not expected\"); \n        } \n \n        this.requestMockControl.verify(); \n        this.requestMockControl.reset(); \n \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getMethod(), METHOD_PUT); \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getHeader(METHOD_HEADER_NAME), METHOD_POST); \n        this.requestMockControl.replay(); \n \n        try { \n            this.servletInstance.service(this.mockRequest, this.mockResponse); \n        } catch (ServletException e) { \n            fail(\"ServeltExpception not expected\"); \n        } catch (IOException e) { \n            fail(\"IOExpception not expected\"); \n        } \n \n        this.requestMockControl.verify(); \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}