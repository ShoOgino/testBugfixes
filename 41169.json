{"path":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"083989a09fa84d64a9c05af07775ff9cec83c4bd","date":1366649056,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    \n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    \n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    \n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7947ef57ebadfb891b1c694f0772d616987e57c8","date":1412445663,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    \n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ba0abe4039f82ecf2e5f879913f512e941dde81","date":1412520276,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    \n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d72e80cee24be385c713864a9f1f90be3744482","date":1417420925,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", RequestHandlers.normalize(path) );\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da41004e1997059b4d0549fbeb56bf0858d14689","date":1425425090,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams, getRequestTimer(req) );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", RequestHandlers.normalize(path) );\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", RequestHandlers.normalize(path) );\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams, getRequestTimer(req) );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", RequestHandlers.normalize(path) );\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", RequestHandlers.normalize(path) );\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams, getRequestTimer(req) );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put(PATH, RequestHandlers.normalize(path));\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams, getRequestTimer(req) );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", RequestHandlers.normalize(path) );\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams, getRequestTimer(req) );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put(PATH, RequestHandlers.normalize(path));\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams, getRequestTimer(req) );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", RequestHandlers.normalize(path) );\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom(core, params, streams, getRequestTimer(req), req);\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put(PATH, RequestHandlers.normalize(path));\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams, getRequestTimer(req) );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put(PATH, RequestHandlers.normalize(path));\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbaf96cfda5422c42955ce34344f0e01839894ea","date":1559675051,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    if (GlobalTracer.get().tracing()) {\n      GlobalTracer.get().getTracer().activeSpan().setTag(\"params\", params.toString());\n    }\n    SolrQueryRequest sreq = buildRequestFrom(core, params, streams, getRequestTimer(req), req);\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put(PATH, RequestHandlers.normalize(path));\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom(core, params, streams, getRequestTimer(req), req);\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put(PATH, RequestHandlers.normalize(path));\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd6cf7e1b30a14801c9e290183b875c6801bbe9","date":1591734817,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    if (GlobalTracer.get().tracing()) {\n      GlobalTracer.getTracer().activeSpan().setTag(\"params\", params.toString());\n    }\n    SolrQueryRequest sreq = buildRequestFrom(core, params, streams, getRequestTimer(req), req);\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put(PATH, RequestHandlers.normalize(path));\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    if (GlobalTracer.get().tracing()) {\n      GlobalTracer.get().getTracer().activeSpan().setTag(\"params\", params.toString());\n    }\n    SolrQueryRequest sreq = buildRequestFrom(core, params, streams, getRequestTimer(req), req);\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put(PATH, RequestHandlers.normalize(path));\n    sreq.getContext().put(\"httpMethod\", req.getMethod());\n\n    if(addHttpRequestToContext) {\n      sreq.getContext().put(\"httpRequest\", req);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["083989a09fa84d64a9c05af07775ff9cec83c4bd"],"7d72e80cee24be385c713864a9f1f90be3744482":["7947ef57ebadfb891b1c694f0772d616987e57c8"],"083989a09fa84d64a9c05af07775ff9cec83c4bd":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"da41004e1997059b4d0549fbeb56bf0858d14689":["7d72e80cee24be385c713864a9f1f90be3744482"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"5ba0abe4039f82ecf2e5f879913f512e941dde81":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7947ef57ebadfb891b1c694f0772d616987e57c8"],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["cbaf96cfda5422c42955ce34344f0e01839894ea"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7d72e80cee24be385c713864a9f1f90be3744482","da41004e1997059b4d0549fbeb56bf0858d14689"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbaf96cfda5422c42955ce34344f0e01839894ea":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["da41004e1997059b4d0549fbeb56bf0858d14689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"7947ef57ebadfb891b1c694f0772d616987e57c8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5ba0abe4039f82ecf2e5f879913f512e941dde81","7947ef57ebadfb891b1c694f0772d616987e57c8"],"083989a09fa84d64a9c05af07775ff9cec83c4bd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7d72e80cee24be385c713864a9f1f90be3744482":["da41004e1997059b4d0549fbeb56bf0858d14689","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c26f00b574427b55127e869b935845554afde1fa":["083989a09fa84d64a9c05af07775ff9cec83c4bd"],"da41004e1997059b4d0549fbeb56bf0858d14689":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["cbaf96cfda5422c42955ce34344f0e01839894ea"],"5ba0abe4039f82ecf2e5f879913f512e941dde81":[],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["b3a34dae868734612eb6329aa0ef754f30bd2036","d2638f781be724518ff6c2263d14a48cf6e68017"],"cbaf96cfda5422c42955ce34344f0e01839894ea":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7947ef57ebadfb891b1c694f0772d616987e57c8":["7d72e80cee24be385c713864a9f1f90be3744482","5ba0abe4039f82ecf2e5f879913f512e941dde81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5ba0abe4039f82ecf2e5f879913f512e941dde81","d2638f781be724518ff6c2263d14a48cf6e68017","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}