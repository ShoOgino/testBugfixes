{"path":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","commits":[{"id":"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","date":1500994164,"type":1,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#collect(int).mjava","sourceNew":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","sourceOld":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (!leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#collect(int).mjava","sourceNew":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","sourceOld":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (!leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"487de3f55283f58d7e02a16993f8be55bbe32061","date":1502123368,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","sourceNew":"  public void collect(int segDoc) throws IOException {\n    int doc = segDoc + base;\n    if (skipSet != null && skipSet.exists(doc)) {\n      // when skipSet == all nodes visited so far, then this represents a cycle and we can\n      // keep track of that here in the future if we need to.\n      return;\n    }\n\n    if (bits != null) bits.set(doc);\n    // increment the hit count so we know how many docs we traversed this time.\n    numHits++;\n\n    // Optimization to not look up edges for a document that is a leaf node (i.e. has no outgoing edges)\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(segDoc);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n  }\n\n","sourceOld":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","bugFix":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  public void collect(int segDoc) throws IOException {\n    int doc = segDoc + base;\n    if (skipSet != null && skipSet.exists(doc)) {\n      // when skipSet == all nodes visited so far, then this represents a cycle and we can\n      // keep track of that here in the future if we need to.\n      return;\n    }\n\n    if (bits != null) bits.set(doc);\n    // increment the hit count so we know how many docs we traversed this time.\n    numHits++;\n\n    // Optimization to not look up edges for a document that is a leaf node (i.e. has no outgoing edges)\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(segDoc);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","sourceNew":"  public void collect(int segDoc) throws IOException {\n    int doc = segDoc + base;\n    if (skipSet != null && skipSet.exists(doc)) {\n      // when skipSet == all nodes visited so far, then this represents a cycle and we can\n      // keep track of that here in the future if we need to.\n      return;\n    }\n\n    if (bits != null) bits.set(doc);\n    // increment the hit count so we know how many docs we traversed this time.\n    numHits++;\n\n    // Optimization to not look up edges for a document that is a leaf node (i.e. has no outgoing edges)\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(segDoc);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n  }\n\n","sourceOld":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","sourceNew":"  public void collect(int segDoc) throws IOException {\n    int doc = segDoc + base;\n    if (skipSet != null && skipSet.exists(doc)) {\n      // when skipSet == all nodes visited so far, then this represents a cycle and we can\n      // keep track of that here in the future if we need to.\n      return;\n    }\n\n    if (bits != null) bits.set(doc);\n    // increment the hit count so we know how many docs we traversed this time.\n    numHits++;\n\n    // Optimization to not look up edges for a document that is a leaf node (i.e. has no outgoing edges)\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(segDoc);\n    }\n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n  }\n\n","sourceOld":"  public void collect(int segDoc) throws IOException {\n    int doc = segDoc + base;\n    if (skipSet != null && skipSet.exists(doc)) {\n      // when skipSet == all nodes visited so far, then this represents a cycle and we can\n      // keep track of that here in the future if we need to.\n      return;\n    }\n\n    if (bits != null) bits.set(doc);\n    // increment the hit count so we know how many docs we traversed this time.\n    numHits++;\n\n    // Optimization to not look up edges for a document that is a leaf node (i.e. has no outgoing edges)\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(segDoc);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["a52341299179de5479672f7cf518bf4b173f34b3","487de3f55283f58d7e02a16993f8be55bbe32061"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","487de3f55283f58d7e02a16993f8be55bbe32061"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"487de3f55283f58d7e02a16993f8be55bbe32061":["a52341299179de5479672f7cf518bf4b173f34b3"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["487de3f55283f58d7e02a16993f8be55bbe32061"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["58884af1f68e9d61c217c753fbd6266d86a63b14","487de3f55283f58d7e02a16993f8be55bbe32061"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","a52341299179de5479672f7cf518bf4b173f34b3","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"487de3f55283f58d7e02a16993f8be55bbe32061":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","ba33781da68babcaa5828121b443d3eb5c9d8480"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}