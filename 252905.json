{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.PredicateValueSourceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"1068799b5537c6408504cf7e15cb90ba57491440","date":1392577122,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.PredicateValueSourceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          throw new UnsupportedOperationException(\n              \"Iteration is too slow; instead try FilteredQuery.QUERY_FIRST_FILTER_STRATEGY\");\n          //Note that if you're truly bent on doing this, then see FunctionValues.getRangeScorer\n        }\n\n        @Override\n        public Bits bits() throws IOException {\n          //null Map context -- we simply don't have one. That's ok.\n          final FunctionValues predFuncValues = predicateValueSource.getValues(null, context);\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int index) {\n              if (acceptDocs != null && !acceptDocs.get(index))\n                return false;\n              return predFuncValues.boolVal(index);\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","date":1402659583,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.PredicateValueSourceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.PredicateValueSourceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          throw new UnsupportedOperationException(\n              \"Iteration is too slow; instead try FilteredQuery.QUERY_FIRST_FILTER_STRATEGY\");\n          //Note that if you're truly bent on doing this, then see FunctionValues.getRangeScorer\n        }\n\n        @Override\n        public Bits bits() throws IOException {\n          //null Map context -- we simply don't have one. That's ok.\n          final FunctionValues predFuncValues = predicateValueSource.getValues(null, context);\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int index) {\n              if (acceptDocs != null && !acceptDocs.get(index))\n                return false;\n              return predFuncValues.boolVal(index);\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n          };\n        }\n\n        @Override\n        public long ramBytesUsed() {\n          return 0L;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          throw new UnsupportedOperationException(\n              \"Iteration is too slow; instead try FilteredQuery.QUERY_FIRST_FILTER_STRATEGY\");\n          //Note that if you're truly bent on doing this, then see FunctionValues.getRangeScorer\n        }\n\n        @Override\n        public Bits bits() throws IOException {\n          //null Map context -- we simply don't have one. That's ok.\n          final FunctionValues predFuncValues = predicateValueSource.getValues(null, context);\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int index) {\n              if (acceptDocs != null && !acceptDocs.get(index))\n                return false;\n              return predFuncValues.boolVal(index);\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.PredicateValueSourceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.PredicateValueSourceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          throw new UnsupportedOperationException(\n              \"Iteration is too slow; instead try FilteredQuery.QUERY_FIRST_FILTER_STRATEGY\");\n          //Note that if you're truly bent on doing this, then see FunctionValues.getRangeScorer\n        }\n\n        @Override\n        public Bits bits() throws IOException {\n          //null Map context -- we simply don't have one. That's ok.\n          final FunctionValues predFuncValues = predicateValueSource.getValues(null, context);\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int index) {\n              if (acceptDocs != null && !acceptDocs.get(index))\n                return false;\n              return predFuncValues.boolVal(index);\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n          };\n        }\n\n        @Override\n        public long ramBytesUsed() {\n          return 0L;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          throw new UnsupportedOperationException(\n              \"Iteration is too slow; instead try FilteredQuery.QUERY_FIRST_FILTER_STRATEGY\");\n          //Note that if you're truly bent on doing this, then see FunctionValues.getRangeScorer\n        }\n\n        @Override\n        public Bits bits() throws IOException {\n          //null Map context -- we simply don't have one. That's ok.\n          final FunctionValues predFuncValues = predicateValueSource.getValues(null, context);\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int index) {\n              if (acceptDocs != null && !acceptDocs.get(index))\n                return false;\n              return predFuncValues.boolVal(index);\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/serialized/SerializedDVStrategy.PredicateValueSourceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          throw new UnsupportedOperationException(\n              \"Iteration is too slow; instead try FilteredQuery.QUERY_FIRST_FILTER_STRATEGY\");\n          //Note that if you're truly bent on doing this, then see FunctionValues.getRangeScorer\n        }\n\n        @Override\n        public Bits bits() throws IOException {\n          //null Map context -- we simply don't have one. That's ok.\n          final FunctionValues predFuncValues = predicateValueSource.getValues(null, context);\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int index) {\n              if (acceptDocs != null && !acceptDocs.get(index))\n                return false;\n              return predFuncValues.boolVal(index);\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n          };\n        }\n\n        @Override\n        public long ramBytesUsed() {\n          return 0L;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1068799b5537c6408504cf7e15cb90ba57491440":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["1068799b5537c6408504cf7e15cb90ba57491440"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["1068799b5537c6408504cf7e15cb90ba57491440","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"1068799b5537c6408504cf7e15cb90ba57491440":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1068799b5537c6408504cf7e15cb90ba57491440"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}