{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","commits":[{"id":"917e62f3497c83634a13edd833e8e21dd6cc6496","date":1490728467,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    for (boolean withAuthorization: Arrays.asList(false, true)) {\n      String suffix;\n      if (withAuthorization) {\n        suffix = \"-trusted\";\n        protectConfigsHandler();\n        uploadConfigSet(\"with-script-processor\", suffix, \"solr\", \"SolrRocks\");\n      } else {\n        suffix = \"-untrusted\";\n        uploadConfigSet(\"with-script-processor\", suffix, null, null);\n      }\n      // try to create a collection with the uploaded configset\n      CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\"+suffix,\n          1, 1, solrCluster.getSolrClient());\n      \n      if (withAuthorization) {\n        scriptRequest(\"newcollection2\");\n      } else {\n        log.info(\"Client saw errors: \"+resp.getErrorMessages());\n        assertTrue(resp.getErrorMessages() != null && resp.getErrorMessages().size() > 0);\n        assertTrue(resp.getErrorMessages().getVal(0).\n            contains(\"The configset for this collection was uploaded without any authentication\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3732e34f27916e98704736cc6924a34fffca249a","date":1490873946,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    for (boolean withAuthorization: Arrays.asList(false, true)) {\n      String suffix;\n      if (withAuthorization) {\n        suffix = \"-trusted\";\n        protectConfigsHandler();\n        uploadConfigSet(\"with-script-processor\", suffix, \"solr\", \"SolrRocks\");\n      } else {\n        suffix = \"-untrusted\";\n        uploadConfigSet(\"with-script-processor\", suffix, null, null);\n      }\n      // try to create a collection with the uploaded configset\n      CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\"+suffix,\n          1, 1, solrCluster.getSolrClient());\n      \n      if (withAuthorization) {\n        scriptRequest(\"newcollection2\");\n      } else {\n        log.info(\"Client saw errors: \"+resp.getErrorMessages());\n        assertTrue(resp.getErrorMessages() != null && resp.getErrorMessages().size() > 0);\n        assertTrue(resp.getErrorMessages().getVal(0).\n            contains(\"The configset for this collection was uploaded without any authentication\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c944148a761a75ff64169148c3ff7b6432aed85","date":1530279727,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","sourceNew":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    for (boolean withAuthorization: Arrays.asList(false, true)) {\n      String suffix;\n      if (withAuthorization) {\n        suffix = \"-trusted\";\n        protectConfigsHandler();\n        uploadConfigSetWithAssertions(\"with-script-processor\", suffix, \"solr\", \"SolrRocks\");\n      } else {\n        suffix = \"-untrusted\";\n        uploadConfigSetWithAssertions(\"with-script-processor\", suffix, null, null);\n      }\n      // try to create a collection with the uploaded configset\n      CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\"+suffix,\n          1, 1, solrCluster.getSolrClient());\n      \n      if (withAuthorization) {\n        scriptRequest(\"newcollection2\");\n      } else {\n        log.info(\"Client saw errors: \"+resp.getErrorMessages());\n        assertTrue(resp.getErrorMessages() != null && resp.getErrorMessages().size() > 0);\n        assertTrue(resp.getErrorMessages().getVal(0).\n            contains(\"The configset for this collection was uploaded without any authentication\"));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    for (boolean withAuthorization: Arrays.asList(false, true)) {\n      String suffix;\n      if (withAuthorization) {\n        suffix = \"-trusted\";\n        protectConfigsHandler();\n        uploadConfigSet(\"with-script-processor\", suffix, \"solr\", \"SolrRocks\");\n      } else {\n        suffix = \"-untrusted\";\n        uploadConfigSet(\"with-script-processor\", suffix, null, null);\n      }\n      // try to create a collection with the uploaded configset\n      CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\"+suffix,\n          1, 1, solrCluster.getSolrClient());\n      \n      if (withAuthorization) {\n        scriptRequest(\"newcollection2\");\n      } else {\n        log.info(\"Client saw errors: \"+resp.getErrorMessages());\n        assertTrue(resp.getErrorMessages() != null && resp.getErrorMessages().size() > 0);\n        assertTrue(resp.getErrorMessages().getVal(0).\n            contains(\"The configset for this collection was uploaded without any authentication\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","sourceNew":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    for (boolean withAuthorization: Arrays.asList(false, true)) {\n      String suffix;\n      if (withAuthorization) {\n        suffix = \"-trusted\";\n        protectConfigsHandler();\n        uploadConfigSetWithAssertions(\"with-script-processor\", suffix, \"solr\", \"SolrRocks\");\n      } else {\n        suffix = \"-untrusted\";\n        uploadConfigSetWithAssertions(\"with-script-processor\", suffix, null, null);\n      }\n      // try to create a collection with the uploaded configset\n      CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\"+suffix,\n          1, 1, solrCluster.getSolrClient());\n      \n      if (withAuthorization) {\n        scriptRequest(\"newcollection2\");\n      } else {\n        log.info(\"Client saw errors: \"+resp.getErrorMessages());\n        assertTrue(resp.getErrorMessages() != null && resp.getErrorMessages().size() > 0);\n        assertTrue(resp.getErrorMessages().getVal(0).\n            contains(\"The configset for this collection was uploaded without any authentication\"));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    for (boolean withAuthorization: Arrays.asList(false, true)) {\n      String suffix;\n      if (withAuthorization) {\n        suffix = \"-trusted\";\n        protectConfigsHandler();\n        uploadConfigSet(\"with-script-processor\", suffix, \"solr\", \"SolrRocks\");\n      } else {\n        suffix = \"-untrusted\";\n        uploadConfigSet(\"with-script-processor\", suffix, null, null);\n      }\n      // try to create a collection with the uploaded configset\n      CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\"+suffix,\n          1, 1, solrCluster.getSolrClient());\n      \n      if (withAuthorization) {\n        scriptRequest(\"newcollection2\");\n      } else {\n        log.info(\"Client saw errors: \"+resp.getErrorMessages());\n        assertTrue(resp.getErrorMessages() != null && resp.getErrorMessages().size() > 0);\n        assertTrue(resp.getErrorMessages().getVal(0).\n            contains(\"The configset for this collection was uploaded without any authentication\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","sourceNew":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    for (boolean withAuthorization: Arrays.asList(false, true)) {\n      String suffix;\n      if (withAuthorization) {\n        suffix = \"-trusted\";\n        protectConfigsHandler();\n        uploadConfigSetWithAssertions(\"with-script-processor\", suffix, \"solr\", \"SolrRocks\");\n      } else {\n        suffix = \"-untrusted\";\n        uploadConfigSetWithAssertions(\"with-script-processor\", suffix, null, null);\n      }\n      // try to create a collection with the uploaded configset\n      CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\"+suffix,\n          1, 1, solrCluster.getSolrClient());\n      \n      if (withAuthorization) {\n        scriptRequest(\"newcollection2\");\n      } else {\n        log.info(\"Client saw errors: \"+resp.getErrorMessages());\n        assertTrue(resp.getErrorMessages() != null && resp.getErrorMessages().size() > 0);\n        assertTrue(resp.getErrorMessages().getVal(0).\n            contains(\"The configset for this collection was uploaded without any authentication\"));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    for (boolean withAuthorization: Arrays.asList(false, true)) {\n      String suffix;\n      if (withAuthorization) {\n        suffix = \"-trusted\";\n        protectConfigsHandler();\n        uploadConfigSet(\"with-script-processor\", suffix, \"solr\", \"SolrRocks\");\n      } else {\n        suffix = \"-untrusted\";\n        uploadConfigSet(\"with-script-processor\", suffix, null, null);\n      }\n      // try to create a collection with the uploaded configset\n      CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\"+suffix,\n          1, 1, solrCluster.getSolrClient());\n      \n      if (withAuthorization) {\n        scriptRequest(\"newcollection2\");\n      } else {\n        log.info(\"Client saw errors: \"+resp.getErrorMessages());\n        assertTrue(resp.getErrorMessages() != null && resp.getErrorMessages().size() > 0);\n        assertTrue(resp.getErrorMessages().getVal(0).\n            contains(\"The configset for this collection was uploaded without any authentication\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95cd5a38a855e021b63ce0a52cd6e43d358c8c61","date":1556473589,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","sourceNew":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n      // Authorization off\n      final String untrustedSuffix = \"-untrusted\";\n      uploadConfigSetWithAssertions(\"with-script-processor\", untrustedSuffix, null, null);\n      // try to create a collection with the uploaded configset\n      Throwable thrown = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        createCollection(\"newcollection2\", \"with-script-processor\" + untrustedSuffix,\n      1, 1, solrCluster.getSolrClient());\n      });\n\n    assertThat(thrown.getMessage(), containsString(\"Underlying core creation failed\"));\n\n    // Authorization on\n    final String trustedSuffix = \"-trusted\";\n    protectConfigsHandler();\n    uploadConfigSetWithAssertions(\"with-script-processor\", trustedSuffix, \"solr\", \"SolrRocks\");\n    // try to create a collection with the uploaded configset\n    CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\" + trustedSuffix,\n    1, 1, solrCluster.getSolrClient());\n    scriptRequest(\"newcollection2\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    for (boolean withAuthorization: Arrays.asList(false, true)) {\n      String suffix;\n      if (withAuthorization) {\n        suffix = \"-trusted\";\n        protectConfigsHandler();\n        uploadConfigSetWithAssertions(\"with-script-processor\", suffix, \"solr\", \"SolrRocks\");\n      } else {\n        suffix = \"-untrusted\";\n        uploadConfigSetWithAssertions(\"with-script-processor\", suffix, null, null);\n      }\n      // try to create a collection with the uploaded configset\n      CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\"+suffix,\n          1, 1, solrCluster.getSolrClient());\n      \n      if (withAuthorization) {\n        scriptRequest(\"newcollection2\");\n      } else {\n        log.info(\"Client saw errors: \"+resp.getErrorMessages());\n        assertTrue(resp.getErrorMessages() != null && resp.getErrorMessages().size() > 0);\n        assertTrue(resp.getErrorMessages().getVal(0).\n            contains(\"The configset for this collection was uploaded without any authentication\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96","date":1576143009,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","sourceNew":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n      // Authorization off\n      // unprotectConfigsHandler(); // TODO Enable this back when testUploadWithLibDirective() is re-enabled\n      final String untrustedSuffix = \"-untrusted\";\n      uploadConfigSetWithAssertions(\"with-script-processor\", untrustedSuffix, null, null);\n      // try to create a collection with the uploaded configset\n      Throwable thrown = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        createCollection(\"newcollection2\", \"with-script-processor\" + untrustedSuffix,\n      1, 1, solrCluster.getSolrClient());\n      });\n\n    assertThat(thrown.getMessage(), containsString(\"Underlying core creation failed\"));\n\n    // Authorization on\n    final String trustedSuffix = \"-trusted\";\n    protectConfigsHandler();\n    uploadConfigSetWithAssertions(\"with-script-processor\", trustedSuffix, \"solr\", \"SolrRocks\");\n    // try to create a collection with the uploaded configset\n    CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\" + trustedSuffix,\n    1, 1, solrCluster.getSolrClient());\n    scriptRequest(\"newcollection2\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n      // Authorization off\n      final String untrustedSuffix = \"-untrusted\";\n      uploadConfigSetWithAssertions(\"with-script-processor\", untrustedSuffix, null, null);\n      // try to create a collection with the uploaded configset\n      Throwable thrown = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        createCollection(\"newcollection2\", \"with-script-processor\" + untrustedSuffix,\n      1, 1, solrCluster.getSolrClient());\n      });\n\n    assertThat(thrown.getMessage(), containsString(\"Underlying core creation failed\"));\n\n    // Authorization on\n    final String trustedSuffix = \"-trusted\";\n    protectConfigsHandler();\n    uploadConfigSetWithAssertions(\"with-script-processor\", trustedSuffix, \"solr\", \"SolrRocks\");\n    // try to create a collection with the uploaded configset\n    CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\" + trustedSuffix,\n    1, 1, solrCluster.getSolrClient());\n    scriptRequest(\"newcollection2\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","sourceNew":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n      // Authorization off\n      // unprotectConfigsHandler(); // TODO Enable this back when testUploadWithLibDirective() is re-enabled\n      final String untrustedSuffix = \"-untrusted\";\n      uploadConfigSetWithAssertions(\"with-script-processor\", untrustedSuffix, null, null);\n      // try to create a collection with the uploaded configset\n      Throwable thrown = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        createCollection(\"newcollection2\", \"with-script-processor\" + untrustedSuffix,\n      1, 1, solrCluster.getSolrClient());\n      });\n\n    assertThat(thrown.getMessage(), containsString(\"Underlying core creation failed\"));\n\n    // Authorization on\n    final String trustedSuffix = \"-trusted\";\n    protectConfigsHandler();\n    uploadConfigSetWithAssertions(\"with-script-processor\", trustedSuffix, \"solr\", \"SolrRocks\");\n    // try to create a collection with the uploaded configset\n    CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\" + trustedSuffix,\n    1, 1, solrCluster.getSolrClient());\n    scriptRequest(\"newcollection2\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n      // Authorization off\n      final String untrustedSuffix = \"-untrusted\";\n      uploadConfigSetWithAssertions(\"with-script-processor\", untrustedSuffix, null, null);\n      // try to create a collection with the uploaded configset\n      Throwable thrown = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        createCollection(\"newcollection2\", \"with-script-processor\" + untrustedSuffix,\n      1, 1, solrCluster.getSolrClient());\n      });\n\n    assertThat(thrown.getMessage(), containsString(\"Underlying core creation failed\"));\n\n    // Authorization on\n    final String trustedSuffix = \"-trusted\";\n    protectConfigsHandler();\n    uploadConfigSetWithAssertions(\"with-script-processor\", trustedSuffix, \"solr\", \"SolrRocks\");\n    // try to create a collection with the uploaded configset\n    CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\" + trustedSuffix,\n    1, 1, solrCluster.getSolrClient());\n    scriptRequest(\"newcollection2\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","sourceNew":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n      // Authorization off\n      // unprotectConfigsHandler(); // TODO Enable this back when testUploadWithLibDirective() is re-enabled\n      final String untrustedSuffix = \"-untrusted\";\n      uploadConfigSetWithAssertions(\"with-script-processor\", untrustedSuffix, null, null);\n      // try to create a collection with the uploaded configset\n      Throwable thrown = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        createCollection(\"newcollection2\", \"with-script-processor\" + untrustedSuffix,\n      1, 1, solrCluster.getSolrClient());\n      });\n\n    assertThat(thrown.getMessage(), containsString(\"Underlying core creation failed\"));\n\n    // Authorization on\n    final String trustedSuffix = \"-trusted\";\n    protectConfigsHandler();\n    uploadConfigSetWithAssertions(\"with-script-processor\", trustedSuffix, \"solr\", \"SolrRocks\");\n    // try to create a collection with the uploaded configset\n    CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\" + trustedSuffix,\n    1, 1, solrCluster.getSolrClient());\n    scriptRequest(\"newcollection2\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n      // Authorization off\n      // unprotectConfigsHandler(); // TODO Enable this back when testUploadWithLibDirective() is re-enabled\n      final String untrustedSuffix = \"-untrusted\";\n      uploadConfigSetWithAssertions(\"with-script-processor\", untrustedSuffix, null, null);\n      // try to create a collection with the uploaded configset\n      Throwable thrown = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        createCollection(\"newcollection2\", \"with-script-processor\" + untrustedSuffix,\n      1, 1, solrCluster.getSolrClient());\n      });\n\n    assertThat(thrown.getMessage(), containsString(\"Underlying core creation failed\"));\n\n    // Authorization on\n    final String trustedSuffix = \"-trusted\";\n    protectConfigsHandler();\n    uploadConfigSetWithAssertions(\"with-script-processor\", trustedSuffix, \"solr\", \"SolrRocks\");\n    // try to create a collection with the uploaded configset\n    CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\" + trustedSuffix,\n    1, 1, solrCluster.getSolrClient());\n    scriptRequest(\"newcollection2\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d6d5db7a40cf44e066aab28d51aca2aff7c9785","date":1591382387,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","sourceNew":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    Assume.assumeNotNull((new ScriptEngineManager()).getEngineByExtension(\"js\"));\n    Assume.assumeNotNull((new ScriptEngineManager()).getEngineByName(\"JavaScript\"));\n    \n      // Authorization off\n      // unprotectConfigsHandler(); // TODO Enable this back when testUploadWithLibDirective() is re-enabled\n      final String untrustedSuffix = \"-untrusted\";\n      uploadConfigSetWithAssertions(\"with-script-processor\", untrustedSuffix, null, null);\n      // try to create a collection with the uploaded configset\n      Throwable thrown = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        createCollection(\"newcollection2\", \"with-script-processor\" + untrustedSuffix,\n      1, 1, solrCluster.getSolrClient());\n      });\n\n    assertThat(thrown.getMessage(), containsString(\"Underlying core creation failed\"));\n\n    // Authorization on\n    final String trustedSuffix = \"-trusted\";\n    protectConfigsHandler();\n    uploadConfigSetWithAssertions(\"with-script-processor\", trustedSuffix, \"solr\", \"SolrRocks\");\n    // try to create a collection with the uploaded configset\n    CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\" + trustedSuffix,\n    1, 1, solrCluster.getSolrClient());\n    scriptRequest(\"newcollection2\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n      // Authorization off\n      // unprotectConfigsHandler(); // TODO Enable this back when testUploadWithLibDirective() is re-enabled\n      final String untrustedSuffix = \"-untrusted\";\n      uploadConfigSetWithAssertions(\"with-script-processor\", untrustedSuffix, null, null);\n      // try to create a collection with the uploaded configset\n      Throwable thrown = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        createCollection(\"newcollection2\", \"with-script-processor\" + untrustedSuffix,\n      1, 1, solrCluster.getSolrClient());\n      });\n\n    assertThat(thrown.getMessage(), containsString(\"Underlying core creation failed\"));\n\n    // Authorization on\n    final String trustedSuffix = \"-trusted\";\n    protectConfigsHandler();\n    uploadConfigSetWithAssertions(\"with-script-processor\", trustedSuffix, \"solr\", \"SolrRocks\");\n    // try to create a collection with the uploaded configset\n    CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\" + trustedSuffix,\n    1, 1, solrCluster.getSolrClient());\n    scriptRequest(\"newcollection2\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUploadWithScriptUpdateProcessor().mjava","sourceNew":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    Assume.assumeNotNull((new ScriptEngineManager()).getEngineByExtension(\"js\"));\n    Assume.assumeNotNull((new ScriptEngineManager()).getEngineByName(\"JavaScript\"));\n\n    // Authorization off\n    final String untrustedSuffix = \"-untrusted\";\n    uploadConfigSetWithAssertions(\"with-script-processor\", untrustedSuffix, null);\n    // try to create a collection with the uploaded configset\n    ignoreException(\"uploaded without any authentication in place\");\n    Throwable thrown = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n      createCollection(\"newcollection2\", \"with-script-processor\" + untrustedSuffix,\n              1, 1, cluster.getSolrClient());\n    });\n    unIgnoreException(\"uploaded without any authentication in place\");\n\n    assertThat(thrown.getMessage(), containsString(\"Underlying core creation failed\"));\n\n    // Authorization on\n    final String trustedSuffix = \"-trusted\";\n    uploadConfigSetWithAssertions(\"with-script-processor\", trustedSuffix, \"solr\");\n    // try to create a collection with the uploaded configset\n    CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\" + trustedSuffix,\n            1, 1, cluster.getSolrClient());\n    scriptRequest(\"newcollection2\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testUploadWithScriptUpdateProcessor() throws Exception {\n    Assume.assumeNotNull((new ScriptEngineManager()).getEngineByExtension(\"js\"));\n    Assume.assumeNotNull((new ScriptEngineManager()).getEngineByName(\"JavaScript\"));\n    \n      // Authorization off\n      // unprotectConfigsHandler(); // TODO Enable this back when testUploadWithLibDirective() is re-enabled\n      final String untrustedSuffix = \"-untrusted\";\n      uploadConfigSetWithAssertions(\"with-script-processor\", untrustedSuffix, null, null);\n      // try to create a collection with the uploaded configset\n      Throwable thrown = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        createCollection(\"newcollection2\", \"with-script-processor\" + untrustedSuffix,\n      1, 1, solrCluster.getSolrClient());\n      });\n\n    assertThat(thrown.getMessage(), containsString(\"Underlying core creation failed\"));\n\n    // Authorization on\n    final String trustedSuffix = \"-trusted\";\n    protectConfigsHandler();\n    uploadConfigSetWithAssertions(\"with-script-processor\", trustedSuffix, \"solr\", \"SolrRocks\");\n    // try to create a collection with the uploaded configset\n    CollectionAdminResponse resp = createCollection(\"newcollection2\", \"with-script-processor\" + trustedSuffix,\n    1, 1, solrCluster.getSolrClient());\n    scriptRequest(\"newcollection2\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["3d6d5db7a40cf44e066aab28d51aca2aff7c9785"],"2c944148a761a75ff64169148c3ff7b6432aed85":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"3d6d5db7a40cf44e066aab28d51aca2aff7c9785":["db96734b79e26d948b59f68bd4564c4836a71acf"],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["95cd5a38a855e021b63ce0a52cd6e43d358c8c61"],"df724d84dab24a0cc54bec95a8680867adc7f171":["95cd5a38a855e021b63ce0a52cd6e43d358c8c61","ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["917e62f3497c83634a13edd833e8e21dd6cc6496","2c944148a761a75ff64169148c3ff7b6432aed85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"3732e34f27916e98704736cc6924a34fffca249a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"95cd5a38a855e021b63ce0a52cd6e43d358c8c61":["2c944148a761a75ff64169148c3ff7b6432aed85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7612891097d4751617c396cdd7a092833799147"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["917e62f3497c83634a13edd833e8e21dd6cc6496","2c944148a761a75ff64169148c3ff7b6432aed85"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c944148a761a75ff64169148c3ff7b6432aed85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","95cd5a38a855e021b63ce0a52cd6e43d358c8c61","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3d6d5db7a40cf44e066aab28d51aca2aff7c9785":["c7612891097d4751617c396cdd7a092833799147"],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["df724d84dab24a0cc54bec95a8680867adc7f171","db96734b79e26d948b59f68bd4564c4836a71acf"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"917e62f3497c83634a13edd833e8e21dd6cc6496":["2c944148a761a75ff64169148c3ff7b6432aed85","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["917e62f3497c83634a13edd833e8e21dd6cc6496","3732e34f27916e98704736cc6924a34fffca249a"],"db96734b79e26d948b59f68bd4564c4836a71acf":["3d6d5db7a40cf44e066aab28d51aca2aff7c9785"],"3732e34f27916e98704736cc6924a34fffca249a":[],"95cd5a38a855e021b63ce0a52cd6e43d358c8c61":["ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96","df724d84dab24a0cc54bec95a8680867adc7f171"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3732e34f27916e98704736cc6924a34fffca249a","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}