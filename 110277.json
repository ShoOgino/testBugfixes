{"path":"solr/core/src/test/org/apache/solr/util/TestTestInjection#testBasics().mjava","commits":[{"id":"536b47681314488eb94706248be6047a3f142841","date":1450372090,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestTestInjection#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() {\n    TestInjection.failReplicaRequests = \"true:100\";\n    \n    try {\n      TestInjection.injectFailReplicaRequests();\n      fail(\"should fail 100%\");\n    } catch (Throwable e) {\n      assertFalse(\"Should not fail based on bad syntax\",\n          e.getMessage().toLowerCase(Locale.ENGLISH).contains(\"bad syntax\"));\n\n      // good\n      \n      // assertTrue(\"Should fail with * based error: \" + e.getClass().getName(), (e instanceof *));\n    }\n    \n    TestInjection.failReplicaRequests = \"true:00\";\n    for (int i = 0; i < 100; i++) {\n      // should never fail\n      TestInjection.injectFailReplicaRequests();\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestTestInjection#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestTestInjection#testBasics().mjava","sourceNew":"  public void testBasics() {\n    TestInjection.failReplicaRequests = \"true:100\";\n\n    Exception e = expectThrows(Exception.class, TestInjection::injectFailReplicaRequests);\n    assertFalse(\"Should not fail based on bad syntax\",\n        e.getMessage().toLowerCase(Locale.ENGLISH).contains(\"bad syntax\"));\n    \n    TestInjection.failReplicaRequests = \"true:00\";\n    for (int i = 0; i < 100; i++) {\n      // should never fail\n      TestInjection.injectFailReplicaRequests();\n      \n    }\n  }\n\n","sourceOld":"  public void testBasics() {\n    TestInjection.failReplicaRequests = \"true:100\";\n    \n    try {\n      TestInjection.injectFailReplicaRequests();\n      fail(\"should fail 100%\");\n    } catch (Throwable e) {\n      assertFalse(\"Should not fail based on bad syntax\",\n          e.getMessage().toLowerCase(Locale.ENGLISH).contains(\"bad syntax\"));\n\n      // good\n      \n      // assertTrue(\"Should fail with * based error: \" + e.getClass().getName(), (e instanceof *));\n    }\n    \n    TestInjection.failReplicaRequests = \"true:00\";\n    for (int i = 0; i < 100; i++) {\n      // should never fail\n      TestInjection.injectFailReplicaRequests();\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestTestInjection#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestTestInjection#testBasics().mjava","sourceNew":"  public void testBasics() {\n    TestInjection.failReplicaRequests = \"true:100\";\n\n    Exception e = expectThrows(Exception.class, TestInjection::injectFailReplicaRequests);\n    assertFalse(\"Should not fail based on bad syntax\",\n        e.getMessage().toLowerCase(Locale.ENGLISH).contains(\"bad syntax\"));\n    \n    TestInjection.failReplicaRequests = \"true:00\";\n    for (int i = 0; i < 100; i++) {\n      // should never fail\n      TestInjection.injectFailReplicaRequests();\n      \n    }\n  }\n\n","sourceOld":"  public void testBasics() {\n    TestInjection.failReplicaRequests = \"true:100\";\n    \n    try {\n      TestInjection.injectFailReplicaRequests();\n      fail(\"should fail 100%\");\n    } catch (Throwable e) {\n      assertFalse(\"Should not fail based on bad syntax\",\n          e.getMessage().toLowerCase(Locale.ENGLISH).contains(\"bad syntax\"));\n\n      // good\n      \n      // assertTrue(\"Should fail with * based error: \" + e.getClass().getName(), (e instanceof *));\n    }\n    \n    TestInjection.failReplicaRequests = \"true:00\";\n    for (int i = 0; i < 100; i++) {\n      // should never fail\n      TestInjection.injectFailReplicaRequests();\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestTestInjection#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestTestInjection#testBasics().mjava","sourceNew":"  public void testBasics() {\n    TestInjection.failReplicaRequests = \"true:100\";\n\n    Exception e = expectThrows(Exception.class, TestInjection::injectFailReplicaRequests);\n    assertFalse(\"Should not fail based on bad syntax\",\n        e.getMessage().toLowerCase(Locale.ENGLISH).contains(\"bad syntax\"));\n    \n    TestInjection.failReplicaRequests = \"true:00\";\n    for (int i = 0; i < 100; i++) {\n      // should never fail\n      TestInjection.injectFailReplicaRequests();\n      \n    }\n  }\n\n","sourceOld":"  public void testBasics() {\n    TestInjection.failReplicaRequests = \"true:100\";\n    \n    try {\n      TestInjection.injectFailReplicaRequests();\n      fail(\"should fail 100%\");\n    } catch (Throwable e) {\n      assertFalse(\"Should not fail based on bad syntax\",\n          e.getMessage().toLowerCase(Locale.ENGLISH).contains(\"bad syntax\"));\n\n      // good\n      \n      // assertTrue(\"Should fail with * based error: \" + e.getClass().getName(), (e instanceof *));\n    }\n    \n    TestInjection.failReplicaRequests = \"true:00\";\n    for (int i = 0; i < 100; i++) {\n      // should never fail\n      TestInjection.injectFailReplicaRequests();\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"536b47681314488eb94706248be6047a3f142841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["536b47681314488eb94706248be6047a3f142841"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["536b47681314488eb94706248be6047a3f142841","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["536b47681314488eb94706248be6047a3f142841","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"536b47681314488eb94706248be6047a3f142841":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["536b47681314488eb94706248be6047a3f142841"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}