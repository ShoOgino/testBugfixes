{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#test().mjava","commits":[{"id":"dd5dd283c3d9f22e186699bf823c9d1e67f49152","date":1339431132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene40\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b","b485ce675d4e8b9dbfafd122ca9b7b33a883be7b","b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene41\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene40\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene41\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene40\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestAllFilesHaveCodecHeader#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene41\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(Codec.forName(\"Lucene40\"));\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkHeaders(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["dd5dd283c3d9f22e186699bf823c9d1e67f49152","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["dd5dd283c3d9f22e186699bf823c9d1e67f49152","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}