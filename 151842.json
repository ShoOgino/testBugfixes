{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","commits":[{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.rewrite(query).visit(QueryVisitor.termCollector(nonWeightedTerms));\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["2dfdf766e55e943d942055d7de53c7ad6bc45283","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}