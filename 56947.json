{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#testHashCodeEquals().mjava","commits":[{"id":"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c","date":1373406544,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#testHashCodeEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testHashCodeEquals() {\n    long[] values = new long[] {5,8,8,15,32};\n    EliasFanoEncoder efEncoder1 = makeEncoder(values);\n    EliasFanoEncoder efEncoder2 = makeEncoder(values);\n    assertEquals(efEncoder1, efEncoder2);\n    assertEquals(efEncoder1.hashCode(), efEncoder2.hashCode());\n\n    EliasFanoEncoder efEncoder3 = makeEncoder(new long[] {1,2,3});\n    assertFalse(efEncoder1.equals(efEncoder3));\n    assertFalse(efEncoder3.equals(efEncoder1));\n    assertFalse(efEncoder1.hashCode() == efEncoder3.hashCode()); // implementation ok for these.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#testHashCodeEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testHashCodeEquals() {\n    long[] values = new long[] {5,8,8,15,32};\n    EliasFanoEncoder efEncoder1 = makeEncoder(values);\n    EliasFanoEncoder efEncoder2 = makeEncoder(values);\n    assertEquals(efEncoder1, efEncoder2);\n    assertEquals(efEncoder1.hashCode(), efEncoder2.hashCode());\n\n    EliasFanoEncoder efEncoder3 = makeEncoder(new long[] {1,2,3});\n    assertFalse(efEncoder1.equals(efEncoder3));\n    assertFalse(efEncoder3.equals(efEncoder1));\n    assertFalse(efEncoder1.hashCode() == efEncoder3.hashCode()); // implementation ok for these.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423470dff9e19aa0db92590e282e2ca12e34d65a","date":1381851051,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#testHashCodeEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#testHashCodeEquals().mjava","sourceNew":"  public void testHashCodeEquals() {\n    long[] values = new long[] {5,8,8,15,32};\n    EliasFanoEncoder efEncoder1 = makeEncoder(values, EliasFanoEncoder.DEFAULT_INDEX_INTERVAL);\n    EliasFanoEncoder efEncoder2 = makeEncoder(values, EliasFanoEncoder.DEFAULT_INDEX_INTERVAL);\n    assertEquals(efEncoder1, efEncoder2);\n    assertEquals(efEncoder1.hashCode(), efEncoder2.hashCode());\n\n    EliasFanoEncoder efEncoder3 = makeEncoder(new long[] {1,2,3}, EliasFanoEncoder.DEFAULT_INDEX_INTERVAL);\n    assertFalse(efEncoder1.equals(efEncoder3));\n    assertFalse(efEncoder3.equals(efEncoder1));\n    assertFalse(efEncoder1.hashCode() == efEncoder3.hashCode()); // implementation ok for these.\n  }\n\n","sourceOld":"  public void testHashCodeEquals() {\n    long[] values = new long[] {5,8,8,15,32};\n    EliasFanoEncoder efEncoder1 = makeEncoder(values);\n    EliasFanoEncoder efEncoder2 = makeEncoder(values);\n    assertEquals(efEncoder1, efEncoder2);\n    assertEquals(efEncoder1.hashCode(), efEncoder2.hashCode());\n\n    EliasFanoEncoder efEncoder3 = makeEncoder(new long[] {1,2,3});\n    assertFalse(efEncoder1.equals(efEncoder3));\n    assertFalse(efEncoder3.equals(efEncoder1));\n    assertFalse(efEncoder1.hashCode() == efEncoder3.hashCode()); // implementation ok for these.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556259cdb46d4f7fb27f4688c4efcb3eaee4a550","date":1432028057,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#testHashCodeEquals().mjava","sourceNew":null,"sourceOld":"  public void testHashCodeEquals() {\n    long[] values = new long[] {5,8,8,15,32};\n    EliasFanoEncoder efEncoder1 = makeEncoder(values, EliasFanoEncoder.DEFAULT_INDEX_INTERVAL);\n    EliasFanoEncoder efEncoder2 = makeEncoder(values, EliasFanoEncoder.DEFAULT_INDEX_INTERVAL);\n    assertEquals(efEncoder1, efEncoder2);\n    assertEquals(efEncoder1.hashCode(), efEncoder2.hashCode());\n\n    EliasFanoEncoder efEncoder3 = makeEncoder(new long[] {1,2,3}, EliasFanoEncoder.DEFAULT_INDEX_INTERVAL);\n    assertFalse(efEncoder1.equals(efEncoder3));\n    assertFalse(efEncoder3.equals(efEncoder1));\n    assertFalse(efEncoder1.hashCode() == efEncoder3.hashCode()); // implementation ok for these.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["423470dff9e19aa0db92590e282e2ca12e34d65a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"]},"commit2Childs":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","423470dff9e19aa0db92590e282e2ca12e34d65a"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}