{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","commits":[{"id":"c533b201163bd7b15aa8881f922f9289a7668187","date":1452268593,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","pathOld":"/dev/null","sourceNew":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      \n      final int columnNumber = columnIdx + 1; // cause it starts at 1        \n      final String columnName = metadata.getColumnName(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Short.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Integer.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Float.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc6d877f6edd34437292e3f144919ceb9cd7221d","date":1467224876,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","sourceNew":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      \n      final int columnNumber = columnIdx + 1; // cause it starts at 1        \n      final String columnName = metadata.getColumnName(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Short.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Integer.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Float.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else{\n        throw new SQLException(String.format(Locale.ROOT, \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\", columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","sourceOld":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      \n      final int columnNumber = columnIdx + 1; // cause it starts at 1        \n      final String columnName = metadata.getColumnName(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Short.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Integer.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Float.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","sourceNew":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      \n      final int columnNumber = columnIdx + 1; // cause it starts at 1        \n      final String columnName = metadata.getColumnName(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Short.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Integer.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Float.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else{\n        throw new SQLException(String.format(Locale.ROOT, \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\", columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","sourceOld":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      \n      final int columnNumber = columnIdx + 1; // cause it starts at 1        \n      final String columnName = metadata.getColumnName(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Short.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Integer.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Float.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2949fdbea8a919ae2a2a426aea695cf6e116719","date":1477601698,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","sourceNew":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      \n      final int columnNumber = columnIdx + 1; // cause it starts at 1        \n      final String columnName = metadata.getColumnLabel(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Short.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Integer.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Float.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else{\n        throw new SQLException(String.format(Locale.ROOT, \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\", columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","sourceOld":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      \n      final int columnNumber = columnIdx + 1; // cause it starts at 1        \n      final String columnName = metadata.getColumnName(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Short.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Integer.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Float.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else{\n        throw new SQLException(String.format(Locale.ROOT, \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\", columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb7c01f80e536140839f2b15359fe04106b0eced","date":1479265585,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","sourceNew":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      \n      final int columnNumber = columnIdx + 1; // cause it starts at 1\n      // Use getColumnLabel instead of getColumnName to make sure fields renamed with AS as picked up properly\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Short.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Integer.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Float.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else {\n        throw new SQLException(String.format(Locale.ROOT,\n            \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\",\n            columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","sourceOld":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      \n      final int columnNumber = columnIdx + 1; // cause it starts at 1        \n      final String columnName = metadata.getColumnName(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Short.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Integer.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Float.class.getName() == className){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else{\n        throw new SQLException(String.format(Locale.ROOT, \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\", columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","sourceNew":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      final int columnNumber = columnIdx + 1; // cause it starts at 1\n      // Use getColumnLabel instead of getColumnName to make sure fields renamed with AS as picked up properly\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Short.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Integer.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Float.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else {\n        throw new SQLException(String.format(Locale.ROOT,\n            \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\",\n            columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","sourceOld":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      \n      final int columnNumber = columnIdx + 1; // cause it starts at 1        \n      final String columnName = metadata.getColumnLabel(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Short.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Integer.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else if(Float.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n      else{\n        throw new SQLException(String.format(Locale.ROOT, \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\", columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f20deebda1cf327549c84cb60464135abd31c71","date":1487004368,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","sourceNew":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      final int columnNumber = columnIdx + 1; // cause it starts at 1\n      // Use getColumnLabel instead of getColumnName to make sure fields renamed with AS as picked up properly\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n      \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            if(obj instanceof String) {\n              String s = (String)obj;\n              if(s.indexOf(sep) > -1) {\n                s = s.substring(1);\n                return s.split(sep);\n              }\n            }\n\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Short.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Integer.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Float.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Array.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object o = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            if(o instanceof Array) {\n              Array array = (Array)o;\n              return array.getArray();\n            } else {\n              return o;\n            }\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else {\n        throw new SQLException(String.format(Locale.ROOT,\n            \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\",\n            columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","sourceOld":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      final int columnNumber = columnIdx + 1; // cause it starts at 1\n      // Use getColumnLabel instead of getColumnName to make sure fields renamed with AS as picked up properly\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Short.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Integer.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Float.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else {\n        throw new SQLException(String.format(Locale.ROOT,\n            \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\",\n            columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","sourceNew":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      final int columnNumber = columnIdx + 1; // cause it starts at 1\n      // Use getColumnLabel instead of getColumnName to make sure fields renamed with AS as picked up properly\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n      \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            if(obj instanceof String) {\n              String s = (String)obj;\n              if(s.indexOf(sep) > -1) {\n                s = s.substring(1);\n                return s.split(sep);\n              }\n            }\n\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Short.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Integer.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Float.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Array.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object o = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            if(o instanceof Array) {\n              Array array = (Array)o;\n              return array.getArray();\n            } else {\n              return o;\n            }\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else {\n        throw new SQLException(String.format(Locale.ROOT,\n            \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\",\n            columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","sourceOld":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      \n      final int columnNumber = columnIdx + 1; // cause it starts at 1\n      // Use getColumnLabel instead of getColumnName to make sure fields renamed with AS as picked up properly\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n            \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Short.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Integer.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Float.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else {\n        throw new SQLException(String.format(Locale.ROOT,\n            \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\",\n            columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17361387c1023c3b72fb3bcf3d258318ab54deb7","date":1494596656,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","sourceNew":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];    \n    for (int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx) {      \n      ResultSetValueSelector valueSelector = determineValueSelector(columnIdx, metadata);\n      if(valueSelector==null) {\n        int columnNumber = columnIdx + 1;\n        String columnName = metadata.getColumnLabel(columnNumber);\n        String className = metadata.getColumnClassName(columnNumber);\n        String typeName = metadata.getColumnTypeName(columnNumber);\n        throw new SQLException(String.format(Locale.ROOT,\n            \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\",\n            columnName, columnNumber, className, typeName));\n      }\n      valueSelectors[columnIdx] = valueSelector;\n    }        \n    return valueSelectors;\n  }\n\n","sourceOld":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      final int columnNumber = columnIdx + 1; // cause it starts at 1\n      // Use getColumnLabel instead of getColumnName to make sure fields renamed with AS as picked up properly\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n      \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            if(obj instanceof String) {\n              String s = (String)obj;\n              if(s.indexOf(sep) > -1) {\n                s = s.substring(1);\n                return s.split(sep);\n              }\n            }\n\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Short.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Integer.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Float.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Array.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object o = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            if(o instanceof Array) {\n              Array array = (Array)o;\n              return array.getArray();\n            } else {\n              return o;\n            }\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else {\n        throw new SQLException(String.format(Locale.ROOT,\n            \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\",\n            columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#constructValueSelectors(ResultSetMetaData).mjava","sourceNew":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];    \n    for (int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx) {      \n      ResultSetValueSelector valueSelector = determineValueSelector(columnIdx, metadata);\n      if(valueSelector==null) {\n        int columnNumber = columnIdx + 1;\n        String columnName = metadata.getColumnLabel(columnNumber);\n        String className = metadata.getColumnClassName(columnNumber);\n        String typeName = metadata.getColumnTypeName(columnNumber);\n        throw new SQLException(String.format(Locale.ROOT,\n            \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\",\n            columnName, columnNumber, className, typeName));\n      }\n      valueSelectors[columnIdx] = valueSelector;\n    }        \n    return valueSelectors;\n  }\n\n","sourceOld":"  private ResultSetValueSelector[] constructValueSelectors(ResultSetMetaData metadata) throws SQLException{\n    ResultSetValueSelector[] valueSelectors = new ResultSetValueSelector[metadata.getColumnCount()];\n    \n    for(int columnIdx = 0; columnIdx < metadata.getColumnCount(); ++columnIdx){\n      final int columnNumber = columnIdx + 1; // cause it starts at 1\n      // Use getColumnLabel instead of getColumnName to make sure fields renamed with AS as picked up properly\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      String className = metadata.getColumnClassName(columnNumber);\n      String typeName = metadata.getColumnTypeName(columnNumber);\n      \n      if(directSupportedTypes.contains(className)){\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object obj = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            if(obj instanceof String) {\n              String s = (String)obj;\n              if(s.indexOf(sep) > -1) {\n                s = s.substring(1);\n                return s.split(sep);\n              }\n            }\n\n            return obj;\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Short.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Short obj = resultSet.getShort(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Integer.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Integer obj = resultSet.getInt(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.longValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Float.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Float obj = resultSet.getFloat(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            return obj.doubleValue();\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else if(Array.class.getName().equals(className)) {\n        valueSelectors[columnIdx] = new ResultSetValueSelector() {\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object o = resultSet.getObject(columnNumber);\n            if(resultSet.wasNull()){ return null; }\n            if(o instanceof Array) {\n              Array array = (Array)o;\n              return array.getArray();\n            } else {\n              return o;\n            }\n          }\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } else {\n        throw new SQLException(String.format(Locale.ROOT,\n            \"Unable to determine the valueSelector for column '%s' (col #%d) of java class '%s' and type '%s'\",\n            columnName, columnNumber, className, typeName));\n      }\n    }\n    \n    return valueSelectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17361387c1023c3b72fb3bcf3d258318ab54deb7":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"bc6d877f6edd34437292e3f144919ceb9cd7221d":["c533b201163bd7b15aa8881f922f9289a7668187"],"f2949fdbea8a919ae2a2a426aea695cf6e116719":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","17361387c1023c3b72fb3bcf3d258318ab54deb7"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["bb7c01f80e536140839f2b15359fe04106b0eced","3f20deebda1cf327549c84cb60464135abd31c71"],"bb7c01f80e536140839f2b15359fe04106b0eced":["bc6d877f6edd34437292e3f144919ceb9cd7221d"],"c533b201163bd7b15aa8881f922f9289a7668187":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["f2949fdbea8a919ae2a2a426aea695cf6e116719","bb7c01f80e536140839f2b15359fe04106b0eced"],"3f20deebda1cf327549c84cb60464135abd31c71":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c533b201163bd7b15aa8881f922f9289a7668187","bc6d877f6edd34437292e3f144919ceb9cd7221d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17361387c1023c3b72fb3bcf3d258318ab54deb7"]},"commit2Childs":{"17361387c1023c3b72fb3bcf3d258318ab54deb7":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc6d877f6edd34437292e3f144919ceb9cd7221d":["bb7c01f80e536140839f2b15359fe04106b0eced","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f2949fdbea8a919ae2a2a426aea695cf6e116719":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["17361387c1023c3b72fb3bcf3d258318ab54deb7","e9017cf144952056066919f1ebc7897ff9bd71b1"],"bb7c01f80e536140839f2b15359fe04106b0eced":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"c533b201163bd7b15aa8881f922f9289a7668187":["bc6d877f6edd34437292e3f144919ceb9cd7221d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c533b201163bd7b15aa8881f922f9289a7668187"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["3f20deebda1cf327549c84cb60464135abd31c71"],"3f20deebda1cf327549c84cb60464135abd31c71":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f2949fdbea8a919ae2a2a426aea695cf6e116719"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}