{"path":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#docs(Random,IndexReader,String,BytesRef,Bits,DocsEnum,boolean).mjava","commits":[{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#docs(Random,IndexReader,String,BytesRef,Bits,DocsEnum,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Returns a DocsEnum, but randomly sometimes uses a\n  // DocsAndFreqsEnum, DocsAndPositionsEnum.  Returns null\n  // if field/term doesn't exist:\n  public static DocsEnum docs(Random random, IndexReader r, String field, BytesRef term, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    final Terms terms = MultiFields.getTerms(r, field);\n    if (terms == null) {\n      return null;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term, random.nextBoolean())) {\n      return null;\n    }\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        // TODO: cast re-use to D&PE if we can...?\n        final DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, reuse, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, reuse, needsFreqs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#docs(Random,IndexReader,String,BytesRef,Bits,DocsEnum,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Returns a DocsEnum, but randomly sometimes uses a\n  // DocsAndFreqsEnum, DocsAndPositionsEnum.  Returns null\n  // if field/term doesn't exist:\n  public static DocsEnum docs(Random random, IndexReader r, String field, BytesRef term, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    final Terms terms = MultiFields.getTerms(r, field);\n    if (terms == null) {\n      return null;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term, random.nextBoolean())) {\n      return null;\n    }\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        // TODO: cast re-use to D&PE if we can...?\n        final DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, reuse, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, reuse, needsFreqs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#docs(Random,IndexReader,String,BytesRef,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#docs(Random,IndexReader,String,BytesRef,Bits,DocsEnum,boolean).mjava","sourceNew":"  // Returns a DocsEnum, but randomly sometimes uses a\n  // DocsAndFreqsEnum, DocsAndPositionsEnum.  Returns null\n  // if field/term doesn't exist:\n  public static DocsEnum docs(Random random, IndexReader r, String field, BytesRef term, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    final Terms terms = MultiFields.getTerms(r, field);\n    if (terms == null) {\n      return null;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term, random.nextBoolean())) {\n      return null;\n    }\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        // TODO: cast re-use to D&PE if we can...?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, true);\n        if (docsAndPositions == null) {\n          docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, false);\n        }\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, reuse, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, reuse, needsFreqs);\n  }\n\n","sourceOld":"  // Returns a DocsEnum, but randomly sometimes uses a\n  // DocsAndFreqsEnum, DocsAndPositionsEnum.  Returns null\n  // if field/term doesn't exist:\n  public static DocsEnum docs(Random random, IndexReader r, String field, BytesRef term, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    final Terms terms = MultiFields.getTerms(r, field);\n    if (terms == null) {\n      return null;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term, random.nextBoolean())) {\n      return null;\n    }\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        // TODO: cast re-use to D&PE if we can...?\n        final DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, reuse, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, reuse, needsFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,IndexReader,String,BytesRef,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#docs(Random,IndexReader,String,BytesRef,Bits,DocsEnum,boolean).mjava","sourceNew":"  // Returns a DocsEnum, but randomly sometimes uses a\n  // DocsAndFreqsEnum, DocsAndPositionsEnum.  Returns null\n  // if field/term doesn't exist:\n  public static DocsEnum docs(Random random, IndexReader r, String field, BytesRef term, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    final Terms terms = MultiFields.getTerms(r, field);\n    if (terms == null) {\n      return null;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term, random.nextBoolean())) {\n      return null;\n    }\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        // TODO: cast re-use to D&PE if we can...?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, true);\n        if (docsAndPositions == null) {\n          docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, false);\n        }\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, reuse, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, reuse, needsFreqs);\n  }\n\n","sourceOld":"  // Returns a DocsEnum, but randomly sometimes uses a\n  // DocsAndFreqsEnum, DocsAndPositionsEnum.  Returns null\n  // if field/term doesn't exist:\n  public static DocsEnum docs(Random random, IndexReader r, String field, BytesRef term, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    final Terms terms = MultiFields.getTerms(r, field);\n    if (terms == null) {\n      return null;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term, random.nextBoolean())) {\n      return null;\n    }\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        // TODO: cast re-use to D&PE if we can...?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, true);\n        if (docsAndPositions == null) {\n          docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, false);\n        }\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, reuse, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, reuse, needsFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["872cff1d3a554e0cd64014cd97f88d3002b0f491"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}