{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#UpdateStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"a027750b86452a8dcd054ac993d54b203dae9102","date":1451953949,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#UpdateStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public UpdateStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    String collectionName = factory.getValueOperand(expression, 0);\n    verifyCollectionName(collectionName, expression);\n    \n    String zkHost = findZkHost(factory, collectionName, expression);\n    verifyZkHost(zkHost, collectionName, expression);\n    \n    int updateBatchSize = extractBatchSize(expression, factory);\n\n    //Extract underlying TupleStream.\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    if (1 != streamExpressions.size()) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    StreamExpression sourceStreamExpression = streamExpressions.get(0);\n    \n    init(collectionName, factory.constructStream(sourceStreamExpression), zkHost, updateBatchSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140a95988ddfbe87c2376f5fed6acae475ea11fc","date":1580924964,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#UpdateStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#UpdateStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public UpdateStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    String collectionName = factory.getValueOperand(expression, 0);\n    verifyCollectionName(collectionName, expression);\n    \n    String zkHost = findZkHost(factory, collectionName, expression);\n    verifyZkHost(zkHost, collectionName, expression);\n    \n    int updateBatchSize = extractBatchSize(expression, factory);\n    pruneVersionField = factory.getBooleanOperand(expression, \"pruneVersionField\", defaultPruneVersionField());\n\n    //Extract underlying TupleStream.\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    if (1 != streamExpressions.size()) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    StreamExpression sourceStreamExpression = streamExpressions.get(0);\n    init(collectionName, factory.constructStream(sourceStreamExpression), zkHost, updateBatchSize);\n  }\n\n","sourceOld":"  public UpdateStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    String collectionName = factory.getValueOperand(expression, 0);\n    verifyCollectionName(collectionName, expression);\n    \n    String zkHost = findZkHost(factory, collectionName, expression);\n    verifyZkHost(zkHost, collectionName, expression);\n    \n    int updateBatchSize = extractBatchSize(expression, factory);\n\n    //Extract underlying TupleStream.\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    if (1 != streamExpressions.size()) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    StreamExpression sourceStreamExpression = streamExpressions.get(0);\n    \n    init(collectionName, factory.constructStream(sourceStreamExpression), zkHost, updateBatchSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"140a95988ddfbe87c2376f5fed6acae475ea11fc":["a027750b86452a8dcd054ac993d54b203dae9102"],"a027750b86452a8dcd054ac993d54b203dae9102":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140a95988ddfbe87c2376f5fed6acae475ea11fc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a027750b86452a8dcd054ac993d54b203dae9102"],"140a95988ddfbe87c2376f5fed6acae475ea11fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a027750b86452a8dcd054ac993d54b203dae9102":["140a95988ddfbe87c2376f5fed6acae475ea11fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}