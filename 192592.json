{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int,List[GeoPolygon]).mjava","commits":[{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int,List[GeoPolygon]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex,\n    final List<GeoPolygon> holes) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false,\n        holes,\n        null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int,List[GeoPolygon]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex,\n    final List<GeoPolygon> holes) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false,\n        holes,\n        null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a75c862521bb895a29958e7bc5cb188597205a08","date":1459977470,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int,List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int,List[GeoPolygon]).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex,\n    final List<GeoPolygon> holes) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(new GeoCompositePolygon(),\n        planetModel, pointList, new BitSet(),\n        convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        holes,\n        null);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex,\n    final List<GeoPolygon> holes) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(planetModel, pointList, convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        false,\n        holes,\n        null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbb12e3e731744399ac2b3429316a721561ccc4e","date":1460029207,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int,List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int,List[GeoPolygon]).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex,\n    final List<GeoPolygon> holes) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    final GeoCompositePolygon rval = new GeoCompositePolygon();\n    if (buildPolygonShape(rval,\n        planetModel, pointList, new BitSet(),\n        convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        holes,\n        null) == false) {\n      return null;\n    }\n    return rval;\n  }\n\n","sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex,\n    final List<GeoPolygon> holes) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    return buildPolygonShape(new GeoCompositePolygon(),\n        planetModel, pointList, new BitSet(),\n        convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        holes,\n        null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aee30f7d7f332597ff2830aff7397d714ff7be42","date":1460489833,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int,List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int,List[GeoPolygon]).mjava","sourceNew":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex,\n    final List<GeoPolygon> holes) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    //System.out.println(\"Initial point list = \"+pointList+\"; convexPointIndex = \"+convexPointIndex+\"; holes = \"+holes);\n    final GeoCompositePolygon rval = new GeoCompositePolygon();\n    if (buildPolygonShape(rval,\n        planetModel, pointList, new BitSet(),\n        convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        holes,\n        null) == false) {\n      return null;\n    }\n    return rval;\n  }\n\n","sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex,\n    final List<GeoPolygon> holes) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    final GeoCompositePolygon rval = new GeoCompositePolygon();\n    if (buildPolygonShape(rval,\n        planetModel, pointList, new BitSet(),\n        convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        holes,\n        null) == false) {\n      return null;\n    }\n    return rval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"414425421ced68c7064f08c9da6a2c95399226d9","date":1460921822,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],int,List[GeoPolygon]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a GeoMembershipShape of the right kind given the specified bounds.\n   *\n   * @param pointList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param convexPointIndex is the index of a single convex point whose conformation with\n   *                         its neighbors determines inside/outside for the entire polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex,\n    final List<GeoPolygon> holes) {\n    // The basic operation uses a set of points, two points determining one particular edge, and a sided plane\n    // describing membership.\n    //System.out.println(\"Initial point list = \"+pointList+\"; convexPointIndex = \"+convexPointIndex+\"; holes = \"+holes);\n    final GeoCompositePolygon rval = new GeoCompositePolygon();\n    if (buildPolygonShape(rval,\n        planetModel, pointList, new BitSet(),\n        convexPointIndex, getLegalIndex(convexPointIndex + 1, pointList.size()),\n        new SidedPlane(pointList.get(getLegalIndex(convexPointIndex - 1, pointList.size())),\n            pointList.get(convexPointIndex), pointList.get(getLegalIndex(convexPointIndex + 1, pointList.size()))),\n        holes,\n        null) == false) {\n      return null;\n    }\n    return rval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40aa98241c87d86a0077beb8023713d93a0becfe"],"fbb12e3e731744399ac2b3429316a721561ccc4e":["a75c862521bb895a29958e7bc5cb188597205a08"],"414425421ced68c7064f08c9da6a2c95399226d9":["aee30f7d7f332597ff2830aff7397d714ff7be42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aee30f7d7f332597ff2830aff7397d714ff7be42":["fbb12e3e731744399ac2b3429316a721561ccc4e"],"40aa98241c87d86a0077beb8023713d93a0becfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["414425421ced68c7064f08c9da6a2c95399226d9"],"a75c862521bb895a29958e7bc5cb188597205a08":["40aa98241c87d86a0077beb8023713d93a0becfe"]},"commit2Childs":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"fbb12e3e731744399ac2b3429316a721561ccc4e":["aee30f7d7f332597ff2830aff7397d714ff7be42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"414425421ced68c7064f08c9da6a2c95399226d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aee30f7d7f332597ff2830aff7397d714ff7be42":["414425421ced68c7064f08c9da6a2c95399226d9"],"40aa98241c87d86a0077beb8023713d93a0becfe":["09af2c9610ce53a4b25fd99344299b40318a4a1a","a75c862521bb895a29958e7bc5cb188597205a08"],"a75c862521bb895a29958e7bc5cb188597205a08":["fbb12e3e731744399ac2b3429316a721561ccc4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}