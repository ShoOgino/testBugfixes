{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a371aa649cc243e82cb8677ca960a1e0232ecedf","date":1393605574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRefBuilder lastTerm = new BytesRefBuilder();\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.get().equals(END) || StringHelper.startsWith(scratch.get(), FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch.get(), DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n        } else if (StringHelper.startsWith(scratch.get(), TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length() - TERM.length;\n          lastTerm.grow(len);\n          System.arraycopy(scratch.bytes(), TERM.length, lastTerm.bytes(), 0, len);\n          lastTerm.setLength(len);\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","a0c458270f1e988872a1a65df55c5ec6ee0dab78","2b2d719eaefc9684ff00084555da5f61a7f32aef","1ec890fad2ea96317f4429e0aa0085bb25673641","61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n          outputsInner);\n      b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRefBuilder lastTerm = new BytesRefBuilder();\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.get().equals(END) || StringHelper.startsWith(scratch.get(), FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),\n                outputs.newPair(lastDocsStart,\n                    outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch.get(), DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n        } else if (StringHelper.startsWith(scratch.get(), TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,\n                outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length() - TERM.length;\n          lastTerm.grow(len);\n          System.arraycopy(scratch.bytes(), TERM.length, lastTerm.bytes(), 0, len);\n          lastTerm.setLength(len);\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRefBuilder lastTerm = new BytesRefBuilder();\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.get().equals(END) || StringHelper.startsWith(scratch.get(), FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch.get(), DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n        } else if (StringHelper.startsWith(scratch.get(), TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length() - TERM.length;\n          lastTerm.grow(len);\n          System.arraycopy(scratch.bytes(), TERM.length, lastTerm.bytes(), 0, len);\n          lastTerm.setLength(len);\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n          outputsInner);\n      b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRefBuilder lastTerm = new BytesRefBuilder();\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.get().equals(END) || StringHelper.startsWith(scratch.get(), FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),\n                outputs.newPair(lastDocsStart,\n                    outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch.get(), DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          totalTermFreq++;\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length()) - 1;\n        } else if (StringHelper.startsWith(scratch.get(), TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,\n                outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length() - TERM.length;\n          lastTerm.grow(len);\n          System.arraycopy(scratch.bytes(), TERM.length, lastTerm.bytes(), 0, len);\n          lastTerm.setLength(len);\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n          outputsInner);\n      b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRefBuilder lastTerm = new BytesRefBuilder();\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.get().equals(END) || StringHelper.startsWith(scratch.get(), FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),\n                outputs.newPair(lastDocsStart,\n                    outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch.get(), DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n        } else if (StringHelper.startsWith(scratch.get(), TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,\n                outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length() - TERM.length;\n          lastTerm.grow(len);\n          System.arraycopy(scratch.bytes(), TERM.length, lastTerm.bytes(), 0, len);\n          lastTerm.setLength(len);\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n          outputsInner);\n      b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRefBuilder lastTerm = new BytesRefBuilder();\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.get().equals(END) || StringHelper.startsWith(scratch.get(), FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),\n                outputs.newPair(lastDocsStart,\n                    outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch.get(), DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          totalTermFreq++;\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length()) - 1;\n        } else if (StringHelper.startsWith(scratch.get(), TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,\n                outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length() - TERM.length;\n          lastTerm.grow(len);\n          System.arraycopy(scratch.bytes(), TERM.length, lastTerm.bytes(), 0, len);\n          lastTerm.setLength(len);\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n          outputsInner);\n      b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRefBuilder lastTerm = new BytesRefBuilder();\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.get().equals(END) || StringHelper.startsWith(scratch.get(), FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),\n                outputs.newPair(lastDocsStart,\n                    outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch.get(), DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n        } else if (StringHelper.startsWith(scratch.get(), TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,\n                outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length() - TERM.length;\n          lastTerm.grow(len);\n          System.arraycopy(scratch.bytes(), TERM.length, lastTerm.bytes(), 0, len);\n          lastTerm.setLength(len);\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final FSTCompiler<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> fstCompiler;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n          outputsInner);\n      fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRefBuilder lastTerm = new BytesRefBuilder();\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.get().equals(END) || StringHelper.startsWith(scratch.get(), FIELD)) {\n          if (lastDocsStart != -1) {\n            fstCompiler.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),\n                outputs.newPair(lastDocsStart,\n                    outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch.get(), DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          totalTermFreq++;\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length()) - 1;\n        } else if (StringHelper.startsWith(scratch.get(), TERM)) {\n          if (lastDocsStart != -1) {\n            fstCompiler.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,\n                outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length() - TERM.length;\n          lastTerm.grow(len);\n          System.arraycopy(scratch.bytes(), TERM.length, lastTerm.bytes(), 0, len);\n          lastTerm.setLength(len);\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = fstCompiler.compile();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n          outputsInner);\n      b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRefBuilder lastTerm = new BytesRefBuilder();\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.get().equals(END) || StringHelper.startsWith(scratch.get(), FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),\n                outputs.newPair(lastDocsStart,\n                    outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch.get(), DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          totalTermFreq++;\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length()) - 1;\n        } else if (StringHelper.startsWith(scratch.get(), TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,\n                outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length() - TERM.length;\n          lastTerm.grow(len);\n          System.arraycopy(scratch.bytes(), TERM.length, lastTerm.bytes(), 0, len);\n          lastTerm.setLength(len);\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final FSTCompiler<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> fstCompiler;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n          outputsInner);\n      fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRefBuilder lastTerm = new BytesRefBuilder();\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.get().equals(END) || StringHelper.startsWith(scratch.get(), FIELD)) {\n          if (lastDocsStart != -1) {\n            fstCompiler.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),\n                outputs.newPair(lastDocsStart,\n                    outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch.get(), DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          totalTermFreq++;\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length()) - 1;\n        } else if (StringHelper.startsWith(scratch.get(), TERM)) {\n          if (lastDocsStart != -1) {\n            fstCompiler.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,\n                outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length() - TERM.length;\n          lastTerm.grow(len);\n          System.arraycopy(scratch.bytes(), TERM.length, lastTerm.bytes(), 0, len);\n          lastTerm.setLength(len);\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = fstCompiler.compile();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton();\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<>(posIntOutputs,\n          outputsInner);\n      b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRefBuilder lastTerm = new BytesRefBuilder();\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      FixedBitSet visitedDocs = new FixedBitSet(maxDoc);\n      final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.get().equals(END) || StringHelper.startsWith(scratch.get(), FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef),\n                outputs.newPair(lastDocsStart,\n                    outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch.get(), DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          totalTermFreq++;\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), DOC.length, scratch.length()-DOC.length);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length());\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch.get(), FREQ)) {\n          scratchUTF16.copyUTF8Bytes(scratch.bytes(), FREQ.length, scratch.length()-FREQ.length);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars(), 0, scratchUTF16.length()) - 1;\n        } else if (StringHelper.startsWith(scratch.get(), TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm.get(), scratchIntsRef), outputs.newPair(lastDocsStart,\n                outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length() - TERM.length;\n          lastTerm.grow(len);\n          System.arraycopy(scratch.bytes(), TERM.length, lastTerm.bytes(), 0, len);\n          lastTerm.setLength(len);\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["51f5280f31484820499077f41fcdfe92d527d9dc","086ffe31d8fba0110227db122974163709ecc1b4"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["3995f83351082af8ae83bb017e63c56818fc1568"],"51f5280f31484820499077f41fcdfe92d527d9dc":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"086ffe31d8fba0110227db122974163709ecc1b4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"3995f83351082af8ae83bb017e63c56818fc1568":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","086ffe31d8fba0110227db122974163709ecc1b4"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["3995f83351082af8ae83bb017e63c56818fc1568"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3995f83351082af8ae83bb017e63c56818fc1568":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}