{"path":"lucene/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(Object).mjava","commits":[{"id":"3d6fab7f6f1764d4188770425328173d9f264128","date":1309912114,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(Object).mjava","pathOld":"modules/common/src/java/org/apache/lucene/common/mutable/MutableValue#compareTo(Object).mjava","sourceNew":"  public int compareTo(Object other) {\n    Class c1 = this.getClass();\n    Class c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","sourceOld":"  public int compareTo(Object other) {\n    Class c1 = this.getClass();\n    Class c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(Object).mjava","pathOld":"modules/common/src/java/org/apache/lucene/common/mutable/MutableValue#compareTo(Object).mjava","sourceNew":"  public int compareTo(Object other) {\n    Class c1 = this.getClass();\n    Class c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","sourceOld":"  public int compareTo(Object other) {\n    Class c1 = this.getClass();\n    Class c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/MutableValue#compareTo(Object).mjava","sourceNew":"  public int compareTo(Object other) {\n    Class c1 = this.getClass();\n    Class c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","sourceOld":"  public int compareTo(Object other) {\n    Class c1 = this.getClass();\n    Class c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c11e605f31ad1dd958113638483a8239de86c49d","date":1319635982,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(Object).mjava","sourceNew":"  public int compareTo(MutableValue other) {\n    Class<? extends MutableValue> c1 = this.getClass();\n    Class<? extends MutableValue> c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","sourceOld":"  public int compareTo(Object other) {\n    Class c1 = this.getClass();\n    Class c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d6fab7f6f1764d4188770425328173d9f264128":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c11e605f31ad1dd958113638483a8239de86c49d":["3d6fab7f6f1764d4188770425328173d9f264128"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d6fab7f6f1764d4188770425328173d9f264128"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d6fab7f6f1764d4188770425328173d9f264128"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c11e605f31ad1dd958113638483a8239de86c49d"]},"commit2Childs":{"3d6fab7f6f1764d4188770425328173d9f264128":["c11e605f31ad1dd958113638483a8239de86c49d","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"c11e605f31ad1dd958113638483a8239de86c49d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d6fab7f6f1764d4188770425328173d9f264128","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}