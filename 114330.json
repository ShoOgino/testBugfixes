{"path":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","commits":[{"id":"bb3e075eaa5788b2762ec235bf72b069cefe3f50","date":1548244981,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        filterChain.doFilter(request, response);\n        numPassThrough.inc();;\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    switch(authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return authResponse.getPrincipal();\n          }\n        };\n        if (!(authResponse.getPrincipal() instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        filterChain.doFilter(wrapper, response);\n        numAuthenticated.inc();\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        filterChain.doFilter(request, response);\n        numPassThrough.inc();\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        numErrors.mark();\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        if (authResponse.getJwtException() != null) {\n          log.warn(\"Exception: {}\", authResponse.getJwtException().getMessage());\n        }\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        numWrongCredentials.inc();\n        return false;\n\n      case SCOPE_MISSING:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        numWrongCredentials.inc();\n        return false;\n        \n      case NO_AUTZ_HEADER:\n      default:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        numMissingCredentials.inc();\n        return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        filterChain.doFilter(request, response);\n        numPassThrough.inc();;\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    switch(authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return authResponse.getPrincipal();\n          }\n        };\n        if (!(authResponse.getPrincipal() instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        filterChain.doFilter(wrapper, response);\n        numAuthenticated.inc();\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        filterChain.doFilter(request, response);\n        numPassThrough.inc();\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        numErrors.mark();\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        if (authResponse.getJwtException() != null) {\n          log.warn(\"Exception: {}\", authResponse.getJwtException().getMessage());\n        }\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        numWrongCredentials.inc();\n        return false;\n\n      case SCOPE_MISSING:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        numWrongCredentials.inc();\n        return false;\n        \n      case NO_AUTZ_HEADER:\n      default:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        numMissingCredentials.inc();\n        return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f67fad1a752e06d753afa1c41bcc27141d258f5","date":1555055351,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        filterChain.doFilter(request, response);\n        numPassThrough.inc();\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode()) && httpsJkws != null) {\n      log.warn(\"Signature validation failed. Refreshing JWKs from IdP before trying again: {}\",\n          authResponse.getJwtException() == null ? \"\" : authResponse.getJwtException().getMessage());\n      httpsJkws.refresh();\n      authResponse = authenticate(header);\n    }\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        filterChain.doFilter(wrapper, response);\n        numAuthenticated.inc();\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        filterChain.doFilter(request, response);\n        numPassThrough.inc();\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        numErrors.mark();\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        numWrongCredentials.inc();\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        numWrongCredentials.inc();\n        return false;\n\n      case SCOPE_MISSING:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        numWrongCredentials.inc();\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        numMissingCredentials.inc();\n        return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        filterChain.doFilter(request, response);\n        numPassThrough.inc();;\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    switch(authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return authResponse.getPrincipal();\n          }\n        };\n        if (!(authResponse.getPrincipal() instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        filterChain.doFilter(wrapper, response);\n        numAuthenticated.inc();\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        filterChain.doFilter(request, response);\n        numPassThrough.inc();\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        numErrors.mark();\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        if (authResponse.getJwtException() != null) {\n          log.warn(\"Exception: {}\", authResponse.getJwtException().getMessage());\n        }\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        numWrongCredentials.inc();\n        return false;\n\n      case SCOPE_MISSING:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        numWrongCredentials.inc();\n        return false;\n        \n      case NO_AUTZ_HEADER:\n      default:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        numMissingCredentials.inc();\n        return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":["1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63","date":1566156051,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode()) && httpsJkws != null) {\n      log.warn(\"Signature validation failed. Refreshing JWKs from IdP before trying again: {}\",\n          authResponse.getJwtException() == null ? \"\" : authResponse.getJwtException().getMessage());\n      httpsJkws.refresh();\n      authResponse = authenticate(header);\n    }\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(wrapper, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        filterChain.doFilter(request, response);\n        numPassThrough.inc();\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode()) && httpsJkws != null) {\n      log.warn(\"Signature validation failed. Refreshing JWKs from IdP before trying again: {}\",\n          authResponse.getJwtException() == null ? \"\" : authResponse.getJwtException().getMessage());\n      httpsJkws.refresh();\n      authResponse = authenticate(header);\n    }\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        filterChain.doFilter(wrapper, response);\n        numAuthenticated.inc();\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        filterChain.doFilter(request, response);\n        numPassThrough.inc();\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        numErrors.mark();\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        numWrongCredentials.inc();\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        numWrongCredentials.inc();\n        return false;\n\n      case SCOPE_MISSING:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        numWrongCredentials.inc();\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        numMissingCredentials.inc();\n        return false;\n    }\n  }\n\n","bugFix":["bb3e075eaa5788b2762ec235bf72b069cefe3f50","3f67fad1a752e06d753afa1c41bcc27141d258f5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b93409dee3306c3446b1f24bced7b660398bd3","date":1568113307,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode()) && issuerConfig.usesHttpsJwk()) {\n      log.warn(\"Signature validation failed. Refreshing JWKs from IdP before trying again: {}\",\n          authResponse.getJwtException() == null ? \"\" : authResponse.getJwtException().getMessage());\n      for (HttpsJwks httpsJwks : issuerConfig.getHttpsJwks()) {\n        httpsJwks.refresh();\n      }\n      authResponse = authenticate(header);\n    }\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(wrapper, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode()) && httpsJkws != null) {\n      log.warn(\"Signature validation failed. Refreshing JWKs from IdP before trying again: {}\",\n          authResponse.getJwtException() == null ? \"\" : authResponse.getJwtException().getMessage());\n      httpsJkws.refresh();\n      authResponse = authenticate(header);\n    }\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(wrapper, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ac780c217504f0ca673ac5dcb98768984267c60","date":1568879420,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode())) {\n      String issuer = jwtConsumer.processToClaims(header).getIssuer();\n      if (issuer != null) {\n        Optional<JWTIssuerConfig> issuerConfig = issuerConfigs.stream().filter(ic -> issuer.equals(ic.getIss())).findFirst();\n        if (issuerConfig.isPresent() && issuerConfig.get().usesHttpsJwk()) {\n          log.info(\"Signature validation failed for issuer {}. Refreshing JWKs from IdP before trying again: {}\",\n              issuer, exceptionMessage);\n          for (HttpsJwks httpsJwks : issuerConfig.get().getHttpsJwks()) {\n            httpsJwks.refresh();\n          }\n          authResponse = authenticate(header); // Retry\n          exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n        }\n      }\n    }\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(wrapper, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode()) && issuerConfig.usesHttpsJwk()) {\n      log.warn(\"Signature validation failed. Refreshing JWKs from IdP before trying again: {}\",\n          authResponse.getJwtException() == null ? \"\" : authResponse.getJwtException().getMessage());\n      for (HttpsJwks httpsJwks : issuerConfig.getHttpsJwks()) {\n        httpsJwks.refresh();\n      }\n      authResponse = authenticate(header);\n    }\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(wrapper, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4581306d6bfea0c805da045fbab70c7ff759a99","date":1579787496,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode())) {\n      String issuer = jwtConsumer.processToClaims(header).getIssuer();\n      if (issuer != null) {\n        Optional<JWTIssuerConfig> issuerConfig = issuerConfigs.stream().filter(ic -> issuer.equals(ic.getIss())).findFirst();\n        if (issuerConfig.isPresent() && issuerConfig.get().usesHttpsJwk()) {\n          log.info(\"Signature validation failed for issuer {}. Refreshing JWKs from IdP before trying again: {}\",\n              issuer, exceptionMessage);\n          for (HttpsJwks httpsJwks : issuerConfig.get().getHttpsJwks()) {\n            httpsJwks.refresh();\n          }\n          authResponse = authenticate(header); // Retry\n          exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n        }\n      }\n    }\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(wrapper, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(null, null));\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode())) {\n      String issuer = jwtConsumer.processToClaims(header).getIssuer();\n      if (issuer != null) {\n        Optional<JWTIssuerConfig> issuerConfig = issuerConfigs.stream().filter(ic -> issuer.equals(ic.getIss())).findFirst();\n        if (issuerConfig.isPresent() && issuerConfig.get().usesHttpsJwk()) {\n          log.info(\"Signature validation failed for issuer {}. Refreshing JWKs from IdP before trying again: {}\",\n              issuer, exceptionMessage);\n          for (HttpsJwks httpsJwks : issuerConfig.get().getHttpsJwks()) {\n            httpsJwks.refresh();\n          }\n          authResponse = authenticate(header); // Retry\n          exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n        }\n      }\n    }\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(wrapper, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode())) {\n      String issuer = jwtConsumer.processToClaims(header).getIssuer();\n      if (issuer != null) {\n        Optional<JWTIssuerConfig> issuerConfig = issuerConfigs.stream().filter(ic -> issuer.equals(ic.getIss())).findFirst();\n        if (issuerConfig.isPresent() && issuerConfig.get().usesHttpsJwk()) {\n          log.info(\"Signature validation failed for issuer {}. Refreshing JWKs from IdP before trying again: {}\",\n              issuer, exceptionMessage);\n          for (HttpsJwks httpsJwks : issuerConfig.get().getHttpsJwks()) {\n            httpsJwks.refresh();\n          }\n          authResponse = authenticate(header); // Retry\n          exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n        }\n      }\n    }\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(wrapper, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(null, null));\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        }\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        }\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode())) {\n      String issuer = jwtConsumer.processToClaims(header).getIssuer();\n      if (issuer != null) {\n        Optional<JWTIssuerConfig> issuerConfig = issuerConfigs.stream().filter(ic -> issuer.equals(ic.getIss())).findFirst();\n        if (issuerConfig.isPresent() && issuerConfig.get().usesHttpsJwk()) {\n          log.info(\"Signature validation failed for issuer {}. Refreshing JWKs from IdP before trying again: {}\",\n              issuer, exceptionMessage);\n          for (HttpsJwks httpsJwks : issuerConfig.get().getHttpsJwks()) {\n            httpsJwks.refresh();\n          }\n          authResponse = authenticate(header); // Retry\n          exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n        }\n      }\n    }\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(wrapper, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(null, null));\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":5,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception {\n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode())) {\n      String issuer = jwtConsumer.processToClaims(header).getIssuer();\n      if (issuer != null) {\n        Optional<JWTIssuerConfig> issuerConfig = issuerConfigs.stream().filter(ic -> issuer.equals(ic.getIss())).findFirst();\n        if (issuerConfig.isPresent() && issuerConfig.get().usesHttpsJwk()) {\n          log.info(\"Signature validation failed for issuer {}. Refreshing JWKs from IdP before trying again: {}\",\n              issuer, exceptionMessage);\n          for (HttpsJwks httpsJwks : issuerConfig.get().getHttpsJwks()) {\n            httpsJwks.refresh();\n          }\n          authResponse = authenticate(header); // Retry\n          exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n        }\n      }\n    }\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        request = wrapWithPrincipal(request, principal);\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(request, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(null, null));\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        }\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        }\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Main authentication method that looks for correct JWT token in the Authorization header\n   */\n  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n    \n    String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n    if (jwtConsumer == null) {\n      if (header == null && !blockUnknown) {\n        log.info(\"JWTAuth not configured, but allowing anonymous access since {}==false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      // Retry config\n      if (lastInitTime.plusSeconds(RETRY_INIT_DELAY_SECONDS).isAfter(Instant.now())) {\n        log.info(\"Retrying JWTAuthPlugin initialization (retry delay={}s)\", RETRY_INIT_DELAY_SECONDS);\n        init(pluginConfig);\n      }\n      if (jwtConsumer == null) {\n        log.warn(\"JWTAuth not configured\");\n        numErrors.mark();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin not correctly configured\");\n      }\n    }\n\n    JWTAuthenticationResponse authResponse = authenticate(header);\n    String exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n    if (AuthCode.SIGNATURE_INVALID.equals(authResponse.getAuthCode())) {\n      String issuer = jwtConsumer.processToClaims(header).getIssuer();\n      if (issuer != null) {\n        Optional<JWTIssuerConfig> issuerConfig = issuerConfigs.stream().filter(ic -> issuer.equals(ic.getIss())).findFirst();\n        if (issuerConfig.isPresent() && issuerConfig.get().usesHttpsJwk()) {\n          log.info(\"Signature validation failed for issuer {}. Refreshing JWKs from IdP before trying again: {}\",\n              issuer, exceptionMessage);\n          for (HttpsJwks httpsJwks : issuerConfig.get().getHttpsJwks()) {\n            httpsJwks.refresh();\n          }\n          authResponse = authenticate(header); // Retry\n          exceptionMessage = authResponse.getJwtException() != null ? authResponse.getJwtException().getMessage() : \"\";\n        }\n      }\n    }\n\n    switch (authResponse.getAuthCode()) {\n      case AUTHENTICATED:\n        final Principal principal = authResponse.getPrincipal();\n        HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            return principal;\n          }\n        };\n        if (!(principal instanceof JWTPrincipal)) {\n          numErrors.mark();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuth plugin says AUTHENTICATED but no token extracted\");\n        }\n        if (log.isDebugEnabled())\n          log.debug(\"Authentication SUCCESS\");\n        numAuthenticated.inc();\n        filterChain.doFilter(wrapper, response);\n        return true;\n\n      case PASS_THROUGH:\n        if (log.isDebugEnabled())\n          log.debug(\"Unknown user, but allow due to {}=false\", PARAM_BLOCK_UNKNOWN);\n        numPassThrough.inc();\n        request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(null, null));\n        filterChain.doFilter(request, response);\n        return true;\n\n      case AUTZ_HEADER_PROBLEM:\n      case JWT_PARSE_ERROR:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), authResponse.getAuthCode().getMsg());\n        }\n        numErrors.mark();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_BAD_REQUEST, BearerWwwAuthErrorCode.invalid_request);\n        return false;\n\n      case CLAIM_MISMATCH:\n      case JWT_EXPIRED:\n      case JWT_VALIDATION_EXCEPTION:\n      case PRINCIPAL_MISSING:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Authentication failed. {}, {}\", authResponse.getAuthCode(), exceptionMessage);\n        }\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SIGNATURE_INVALID:\n        log.warn(\"Signature validation failed: {}\", exceptionMessage);\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.invalid_token);\n        return false;\n\n      case SCOPE_MISSING:\n        numWrongCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, BearerWwwAuthErrorCode.insufficient_scope);\n        return false;\n\n      case NO_AUTZ_HEADER:\n      default:\n        numMissingCredentials.inc();\n        authenticationFailure(response, authResponse.getAuthCode().getMsg(), HttpServletResponse.SC_UNAUTHORIZED, null);\n        return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["f4581306d6bfea0c805da045fbab70c7ff759a99"],"1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63":["3f67fad1a752e06d753afa1c41bcc27141d258f5"],"23b436ffee26b67f87efef6a3bab24697332b6b2":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"1ac780c217504f0ca673ac5dcb98768984267c60":["43b93409dee3306c3446b1f24bced7b660398bd3"],"43b93409dee3306c3446b1f24bced7b660398bd3":["1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4581306d6bfea0c805da045fbab70c7ff759a99":["1ac780c217504f0ca673ac5dcb98768984267c60"],"3f67fad1a752e06d753afa1c41bcc27141d258f5":["bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb3e075eaa5788b2762ec235bf72b069cefe3f50"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63":["43b93409dee3306c3446b1f24bced7b660398bd3"],"23b436ffee26b67f87efef6a3bab24697332b6b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1ac780c217504f0ca673ac5dcb98768984267c60":["f4581306d6bfea0c805da045fbab70c7ff759a99"],"43b93409dee3306c3446b1f24bced7b660398bd3":["1ac780c217504f0ca673ac5dcb98768984267c60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb3e075eaa5788b2762ec235bf72b069cefe3f50","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"f4581306d6bfea0c805da045fbab70c7ff759a99":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"3f67fad1a752e06d753afa1c41bcc27141d258f5":["1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["3f67fad1a752e06d753afa1c41bcc27141d258f5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}