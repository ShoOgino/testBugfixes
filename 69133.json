{"path":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + cloudState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + cloudState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + cloudState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + clusterState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + cloudState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + clusterState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + cloudState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + clusterState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + cloudState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> shards = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + clusterState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n          ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + clusterState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader()\n        .getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> replicasMap = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : replicasMap.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n      // System.out.println(\"state:\"\n      // + state\n      // + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n      // + \" live: \"\n      // + clusterState.liveNodesContain(shard.getValue().get(\n      // ZkStateReader.NODE_NAME_PROP)));\n      if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> shards = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + clusterState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n          ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["fa64435b5902ce266c23755a4a00691a3285dab8"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6378064655e76cd7b908b1cab4ce425b384b508"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a6378064655e76cd7b908b1cab4ce425b384b508":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa64435b5902ce266c23755a4a00691a3285dab8":["a6378064655e76cd7b908b1cab4ce425b384b508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["3f767f8c99eaedb984df754fe61f21c5de260f94","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}