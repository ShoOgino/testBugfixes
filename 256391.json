{"path":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","sourceNew":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","sourceOld":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","sourceNew":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n    }\n  }\n\n","sourceOld":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","sourceNew":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n    }\n  }\n\n","sourceOld":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}