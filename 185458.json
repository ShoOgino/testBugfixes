{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(50);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // Force many merges to happen\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes3().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes without waiting, when\n  // many adjacent merges are required\n  public void testExpungeDeletes3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).\n            setMergePolicy(newLogMergePolicy(50))\n    );\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(3))\n    );\n    writer.expungeDeletes(false);\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}