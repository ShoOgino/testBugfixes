{"path":"src/test/org/apache/lucene/search/TestBasics#testSpanOr().mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBasics#testSpanOr().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanOr() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"seven\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanOrQuery query = new SpanOrQuery(new SpanQuery[] {near1, near2});\n\n    checkHits(query, new int[]\n      {33, 47, 133, 147, 233, 247, 333, 347, 433, 447, 533, 547, 633, 647, 733,\n       747, 833, 847, 933, 947});\n\n    //System.out.println(searcher.explain(query, 33));\n    //System.out.println(searcher.explain(query, 947));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3f7c6f227c99761a334d89dab830930117876b","date":1076365551,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBasics#testSpanOr().mjava","pathOld":"src/test/org/apache/lucene/search/TestBasics#testSpanOr().mjava","sourceNew":"  public void testSpanOr() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"seven\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanOrQuery query = new SpanOrQuery(new SpanQuery[] {near1, near2});\n\n    checkHits(query, new int[]\n      {33, 47, 133, 147, 233, 247, 333, 347, 433, 447, 533, 547, 633, 647, 733,\n       747, 833, 847, 933, 947});\n\n    assertTrue(searcher.explain(query, 33).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 947).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanOr() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"seven\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanOrQuery query = new SpanOrQuery(new SpanQuery[] {near1, near2});\n\n    checkHits(query, new int[]\n      {33, 47, 133, 147, 233, 247, 333, 347, 433, 447, 533, 547, 633, 647, 733,\n       747, 833, 847, 933, 947});\n\n    //System.out.println(searcher.explain(query, 33));\n    //System.out.println(searcher.explain(query, 947));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c6ad49171d39d4831b1593ee88741b7b38b042","date":1085506498,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestBasics#testSpanOr().mjava","pathOld":"src/test/org/apache/lucene/search/TestBasics#testSpanOr().mjava","sourceNew":"  public void testSpanOr() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"seven\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanOrQuery query = new SpanOrQuery(new SpanQuery[] {near1, near2});\n\n    checkHits(query, new int[]\n      {33, 47, 133, 147, 233, 247, 333, 347, 433, 447, 533, 547, 633, 647, 733,\n       747, 833, 847, 933, 947});\n\n    assertTrue(searcher.explain(query, 33).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 947).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanOr() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"thirty\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"three\"));\n    SpanNearQuery near1 = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n    SpanTermQuery term4 = new SpanTermQuery(new Term(\"field\", \"seven\"));\n    SpanNearQuery near2 = new SpanNearQuery(new SpanQuery[] {term3, term4},\n                                            0, true);\n\n    SpanOrQuery query = new SpanOrQuery(new SpanQuery[] {near1, near2});\n\n    checkHits(query, new int[]\n      {33, 47, 133, 147, 233, 247, 333, 347, 433, 447, 533, 547, 633, 647, 733,\n       747, 833, 847, 933, 947});\n\n    assertTrue(searcher.explain(query, 33).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 947).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9c6ad49171d39d4831b1593ee88741b7b38b042":["0e3f7c6f227c99761a334d89dab830930117876b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b9c6ad49171d39d4831b1593ee88741b7b38b042"],"0e3f7c6f227c99761a334d89dab830930117876b":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"]},"commit2Childs":{"b9c6ad49171d39d4831b1593ee88741b7b38b042":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["0e3f7c6f227c99761a334d89dab830930117876b"],"0e3f7c6f227c99761a334d89dab830930117876b":["b9c6ad49171d39d4831b1593ee88741b7b38b042"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}