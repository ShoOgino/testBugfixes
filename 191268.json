{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","commits":[{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc","date":1507866341,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","sourceNew":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        log.info(\"cdcr: numDocs in waitForTargetToSync: \" + response.getResults().getNumFound());\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786","date":1508967813,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","sourceNew":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        log.info(\"cdcr: numDocs in waitForTargetToSync: \" + response.getResults().getNumFound());\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","sourceNew":"  public static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        clusterSolrClient.commit();\n        response = clusterSolrClient.query(new SolrQuery(query));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on cluster. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","sourceNew":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":"  public static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        clusterSolrClient.commit();\n        response = clusterSolrClient.query(new SolrQuery(query));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on cluster. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","sourceNew":"  protected static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws Exception {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      clusterSolrClient.commit();\n      response = clusterSolrClient.query(new SolrQuery(query));\n      if (response.getResults().getNumFound() == numDocs) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":null,"bugIntro":["11f21773085db637873ba6e0bcd4265b2b4c7730","11f21773085db637873ba6e0bcd4265b2b4c7730"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","sourceNew":"  protected static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws Exception {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      clusterSolrClient.commit();\n      response = clusterSolrClient.query(new SolrQuery(query));\n      if (response.getResults().getNumFound() == numDocs) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786":["3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786":["e7da9d8536c11576df10e348efa79d2739170936"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc":["0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}