{"path":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e","date":1313005033,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"beeb6f9229f10f30b2dae1d16b54985392095121","date":1328125056,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a5469a71486c4c1e313c7fcb08188d7111195c2","date":1333407337,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bad6d9c88746be4a83822ab420b8c2398257cfb8","date":1341520565,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08bcaef9e931052e4ca24133a89cc6aefaf61829","date":1342469326,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2) core\n        .getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy) iw\n          .get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2) core\n        .getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy) iw\n          .get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2) core\n        .getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy) iw\n          .get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eafe65017ee691866644025d85b041b4880c5e3","date":1355253547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    // and for rate limited settings\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iwr = ((DirectUpdateHandler2) core\n        .getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      IndexWriter iw = iwr.get();\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy) iw.getConfig().getMergePolicy()).getMergeFactor());\n      \n      Directory dir = iw.getDirectory();\n      \n      if (dir instanceof MockDirectoryWrapper) {\n        dir = ((MockDirectoryWrapper)dir).getDelegate();\n      }\n      \n      assertTrue(dir.getClass().getName(), dir instanceof RateLimitedDirectoryWrapper);\n      assertEquals(Double.valueOf(1000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.DEFAULT));\n      assertEquals(Double.valueOf(2000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.FLUSH));\n      assertEquals(Double.valueOf(3000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.MERGE));\n      assertEquals(Double.valueOf(4000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.READ));\n    } finally {\n      iwr.decref();\n    }\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2) core\n        .getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy) iw\n          .get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    // and for rate limited settings\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iwr = ((DirectUpdateHandler2) core\n        .getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      IndexWriter iw = iwr.get();\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy) iw.getConfig().getMergePolicy()).getMergeFactor());\n      \n      Directory dir = iw.getDirectory();\n      \n      if (dir instanceof MockDirectoryWrapper) {\n        dir = ((MockDirectoryWrapper)dir).getDelegate();\n      }\n      \n      assertTrue(dir.getClass().getName(), dir instanceof RateLimitedDirectoryWrapper);\n      assertEquals(Double.valueOf(1000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.DEFAULT));\n      assertEquals(Double.valueOf(2000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.FLUSH));\n      assertEquals(Double.valueOf(3000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.MERGE));\n      assertEquals(Double.valueOf(4000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.READ));\n    } finally {\n      iwr.decref();\n    }\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2) core\n        .getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy) iw\n          .get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc","date":1363618369,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    // and for rate limited settings\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iwr = ((DirectUpdateHandler2) core\n        .getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      IndexWriter iw = iwr.get();\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy) iw.getConfig().getMergePolicy()).getMergeFactor());\n      \n      Directory dir = iw.getDirectory();\n      \n      if (dir instanceof MockDirectoryWrapper) {\n        dir = ((MockDirectoryWrapper)dir).getDelegate();\n      }\n      \n      assertTrue(dir.getClass().getName(), dir instanceof RateLimitedDirectoryWrapper);\n      assertEquals(Double.valueOf(1000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.DEFAULT));\n      assertEquals(Double.valueOf(2000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.FLUSH));\n      assertEquals(Double.valueOf(3000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.MERGE));\n      assertEquals(Double.valueOf(4000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.READ));\n    } finally {\n      iwr.decref();\n    }\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    // and for rate limited settings\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iwr = ((DirectUpdateHandler2) core\n        .getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      IndexWriter iw = iwr.get();\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy) iw.getConfig().getMergePolicy()).getMergeFactor());\n      \n      Directory dir = iw.getDirectory();\n      \n      if (dir instanceof MockDirectoryWrapper) {\n        dir = ((MockDirectoryWrapper)dir).getDelegate();\n      }\n      \n      assertTrue(dir.getClass().getName(), dir instanceof RateLimitedDirectoryWrapper);\n      assertEquals(Double.valueOf(1000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.DEFAULT));\n      assertEquals(Double.valueOf(2000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.FLUSH));\n      assertEquals(Double.valueOf(3000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.MERGE));\n      assertEquals(Double.valueOf(4000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.READ));\n    } finally {\n      iwr.decref();\n    }\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f5ecef308279cfa6c2c6e98487f14646b458839","date":1375744659,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    // and for rate limited settings\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iwr = ((DirectUpdateHandler2) core\n        .getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      IndexWriter iw = iwr.get();\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy) iw.getConfig().getMergePolicy()).getMergeFactor());\n      \n      Directory dir = iw.getDirectory();\n      \n      if (dir instanceof MockDirectoryWrapper) {\n        dir = ((MockDirectoryWrapper)dir).getDelegate();\n      }\n      \n      assertTrue(dir.getClass().getName(), dir instanceof RateLimitedDirectoryWrapper);\n      assertEquals(Double.valueOf(1000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.DEFAULT));\n      assertEquals(Double.valueOf(2000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.FLUSH));\n      assertEquals(Double.valueOf(3000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.MERGE));\n      assertEquals(Double.valueOf(4000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.READ));\n    } finally {\n      iwr.decref();\n    }\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    // test merge factor picked up\n    // and for rate limited settings\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iwr = ((DirectUpdateHandler2) core\n        .getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      IndexWriter iw = iwr.get();\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy) iw.getConfig().getMergePolicy()).getMergeFactor());\n      \n      Directory dir = iw.getDirectory();\n      \n      if (dir instanceof MockDirectoryWrapper) {\n        dir = ((MockDirectoryWrapper)dir).getDelegate();\n      }\n      \n      assertTrue(dir.getClass().getName(), dir instanceof RateLimitedDirectoryWrapper);\n      assertEquals(Double.valueOf(1000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.DEFAULT));\n      assertEquals(Double.valueOf(2000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.FLUSH));\n      assertEquals(Double.valueOf(3000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.MERGE));\n      assertEquals(Double.valueOf(4000000), ((RateLimitedDirectoryWrapper)dir).getMaxWriteMBPerSec(Context.READ));\n    } finally {\n      iwr.decref();\n    }\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertTrue(stats.get(\"refCount\") != null);\n    \n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd6cf7e1b30a14801c9e290183b875c6801bbe9","date":1591734817,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(BaseTestHarness.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(h.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    @SuppressWarnings({\"unchecked\"})\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(BaseTestHarness.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    clearIndex();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    // test stats call\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    Map<String, Metric> metrics = manager.registry(registry).getMetrics();\n    assertTrue(metrics.containsKey(\"CORE.coreName\"));\n    assertTrue(metrics.containsKey(\"CORE.refCount\"));\n    Gauge<Number> g = (Gauge<Number>)metrics.get(\"CORE.refCount\");\n    assertTrue(g.getValue().intValue() > 0);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    assertU(BaseTestHarness.simpleTag(\"rollback\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1eafe65017ee691866644025d85b041b4880c5e3":["08bcaef9e931052e4ca24133a89cc6aefaf61829"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["1f5ecef308279cfa6c2c6e98487f14646b458839"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["08bcaef9e931052e4ca24133a89cc6aefaf61829","1eafe65017ee691866644025d85b041b4880c5e3"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"bad6d9c88746be4a83822ab420b8c2398257cfb8":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc":["1eafe65017ee691866644025d85b041b4880c5e3"],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["28288370235ed02234a64753cdbf0c6ec096304a"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"aba371508186796cc6151d8223a5b4e16d02e26e":["bad6d9c88746be4a83822ab420b8c2398257cfb8","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc","1f5ecef308279cfa6c2c6e98487f14646b458839"],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["c26f00b574427b55127e869b935845554afde1fa"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"30c8e5574b55d57947e989443dfde611646530ee":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","28288370235ed02234a64753cdbf0c6ec096304a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["1f5ecef308279cfa6c2c6e98487f14646b458839"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","5ff704ef91e9ae30ca59babb23ece85720701b60"],"1f5ecef308279cfa6c2c6e98487f14646b458839":["8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc"],"beeb6f9229f10f30b2dae1d16b54985392095121":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["beeb6f9229f10f30b2dae1d16b54985392095121"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a5469a71486c4c1e313c7fcb08188d7111195c2","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["bad6d9c88746be4a83822ab420b8c2398257cfb8"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["a71f63026529f3c1f03cfdd664910873ab2369ae"]},"commit2Childs":{"1eafe65017ee691866644025d85b041b4880c5e3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c26f00b574427b55127e869b935845554afde1fa":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","5ff704ef91e9ae30ca59babb23ece85720701b60"],"bad6d9c88746be4a83822ab420b8c2398257cfb8":["aba371508186796cc6151d8223a5b4e16d02e26e","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1f5ecef308279cfa6c2c6e98487f14646b458839"],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"30c8e5574b55d57947e989443dfde611646530ee":[],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9","30c8e5574b55d57947e989443dfde611646530ee"],"816521ebaad5add9cb96bb88c577394e2938c40b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"1f5ecef308279cfa6c2c6e98487f14646b458839":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","816521ebaad5add9cb96bb88c577394e2938c40b"],"beeb6f9229f10f30b2dae1d16b54985392095121":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["bad6d9c88746be4a83822ab420b8c2398257cfb8","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","beeb6f9229f10f30b2dae1d16b54985392095121"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["1eafe65017ee691866644025d85b041b4880c5e3","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["30c8e5574b55d57947e989443dfde611646530ee"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","30c8e5574b55d57947e989443dfde611646530ee","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}