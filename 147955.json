{"path":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSpanQuery().mjava","commits":[{"id":"165c3432cb3c4fcfc8e859af24323bbbd12084af","date":1532292166,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSpanQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanQuery() throws IOException {\n    SpanQuery subq = SpanNearQuery.newOrderedNearQuery(FIELD_WITH_OFFSETS)\n        .addClause(new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"with\")))\n        .addClause(new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"many\")))\n        .build();\n    Query q = SpanNearQuery.newOrderedNearQuery(FIELD_WITH_OFFSETS)\n        .addClause(new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"sentence\")))\n        .addClause(new SpanOrQuery(subq, new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"iterations\"))))\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0 }, { 1 }, { 2 }, { 3 },\n        { 4, 2, 4, 9, 27, 6, 7, 35, 54 }\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 0, 0, 0, 0, 1 });\n    checkTermMatches(q, FIELD_WITH_OFFSETS, new TermMatch[][][]{\n        {}, {}, {}, {},\n        {\n            {\n                new TermMatch(2, 9, 17),\n                new TermMatch(3, 18, 22),\n                new TermMatch(4, 23, 27)\n            }, {\n              new TermMatch(6, 35, 43), new TermMatch(7, 44, 54)\n        }\n        }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ba8124694976baa3b03705351de238ec5d4352","date":1532295406,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSpanQuery().mjava","sourceNew":null,"sourceOld":"  public void testSpanQuery() throws IOException {\n    SpanQuery subq = SpanNearQuery.newOrderedNearQuery(FIELD_WITH_OFFSETS)\n        .addClause(new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"with\")))\n        .addClause(new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"many\")))\n        .build();\n    Query q = SpanNearQuery.newOrderedNearQuery(FIELD_WITH_OFFSETS)\n        .addClause(new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"sentence\")))\n        .addClause(new SpanOrQuery(subq, new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"iterations\"))))\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0 }, { 1 }, { 2 }, { 3 },\n        { 4, 2, 4, 9, 27, 6, 7, 35, 54 }\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 0, 0, 0, 0, 1 });\n    checkTermMatches(q, FIELD_WITH_OFFSETS, new TermMatch[][][]{\n        {}, {}, {}, {},\n        {\n            {\n                new TermMatch(2, 9, 17),\n                new TermMatch(3, 18, 22),\n                new TermMatch(4, 23, 27)\n            }, {\n              new TermMatch(6, 35, 43), new TermMatch(7, 44, 54)\n        }\n        }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testSpanQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanQuery() throws IOException {\n    SpanQuery subq = SpanNearQuery.newOrderedNearQuery(FIELD_WITH_OFFSETS)\n        .addClause(new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"with\")))\n        .addClause(new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"many\")))\n        .build();\n    Query q = SpanNearQuery.newOrderedNearQuery(FIELD_WITH_OFFSETS)\n        .addClause(new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"sentence\")))\n        .addClause(new SpanOrQuery(subq, new SpanTermQuery(new Term(FIELD_WITH_OFFSETS, \"iterations\"))))\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0 }, { 1 }, { 2 }, { 3 },\n        { 4, 2, 4, 9, 27, 6, 7, 35, 54 }\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 0, 0, 0, 0, 1 });\n    checkTermMatches(q, FIELD_WITH_OFFSETS, new TermMatch[][][]{\n        {}, {}, {}, {},\n        {\n            {\n                new TermMatch(2, 9, 17),\n                new TermMatch(3, 18, 22),\n                new TermMatch(4, 23, 27)\n            }, {\n              new TermMatch(6, 35, 43), new TermMatch(7, 44, 54)\n        }\n        }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"165c3432cb3c4fcfc8e859af24323bbbd12084af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62ba8124694976baa3b03705351de238ec5d4352":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["62ba8124694976baa3b03705351de238ec5d4352"]},"commit2Childs":{"165c3432cb3c4fcfc8e859af24323bbbd12084af":["62ba8124694976baa3b03705351de238ec5d4352"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"62ba8124694976baa3b03705351de238ec5d4352":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}