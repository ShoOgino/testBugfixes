{"path":"lucene/core/src/java/org/apache/lucene/store/IndexInput#clone().mjava","commits":[{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/IndexInput#clone().mjava","pathOld":"/dev/null","sourceNew":"  /** {@inheritDoc}\n   * <p><b>Warning:</b> Lucene never closes cloned\n   * {@code IndexInput}s, it will only do this on the original one.\n   * The original instance must take care that cloned instances throw\n   * {@link AlreadyClosedException} when the original one is closed.\n   */\n  @Override\n  public IndexInput clone() {\n    return (IndexInput) super.clone();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/IndexInput#clone().mjava","pathOld":"/dev/null","sourceNew":"  /** {@inheritDoc}\n   * <p><b>Warning:</b> Lucene never closes cloned\n   * {@code IndexInput}s, it will only do this on the original one.\n   * The original instance must take care that cloned instances throw\n   * {@link AlreadyClosedException} when the original one is closed.\n   */\n  @Override\n  public IndexInput clone() {\n    return (IndexInput) super.clone();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bd074ae12a9bd27ae2897c474d182e2cffa8b57","date":1437382633,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/IndexInput#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/IndexInput#clone().mjava","sourceNew":"  /** {@inheritDoc}\n   * \n   * <p><b>Warning:</b> Lucene never closes cloned\n   * {@code IndexInput}s, it will only call {@link #close()} on the original object.\n   * \n   * <p>If you access the cloned IndexInput after closing the original object,\n   * any <code>readXXX</code> methods will throw {@link AlreadyClosedException}.\n   */\n  @Override\n  public IndexInput clone() {\n    return (IndexInput) super.clone();\n  }\n\n","sourceOld":"  /** {@inheritDoc}\n   * <p><b>Warning:</b> Lucene never closes cloned\n   * {@code IndexInput}s, it will only do this on the original one.\n   * The original instance must take care that cloned instances throw\n   * {@link AlreadyClosedException} when the original one is closed.\n   */\n  @Override\n  public IndexInput clone() {\n    return (IndexInput) super.clone();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b28c8c24efe925d64d643c57b569d4fdf8616e9","date":1440170643,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/IndexInput#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/IndexInput#clone().mjava","sourceNew":"  /** {@inheritDoc}\n   * \n   * <p><b>Warning:</b> Lucene never closes cloned\n   * {@code IndexInput}s, it will only call {@link #close()} on the original object.\n   * \n   * <p>If you access the cloned IndexInput after closing the original object,\n   * any <code>readXXX</code> methods will throw {@link AlreadyClosedException}.\n   *\n   * <p>This method is NOT thread safe, so if the current {@code IndexInput}\n   * is being used by one thread while {@code clone} is called by another,\n   * disaster could strike.\n   */\n  @Override\n  public IndexInput clone() {\n    return (IndexInput) super.clone();\n  }\n\n","sourceOld":"  /** {@inheritDoc}\n   * \n   * <p><b>Warning:</b> Lucene never closes cloned\n   * {@code IndexInput}s, it will only call {@link #close()} on the original object.\n   * \n   * <p>If you access the cloned IndexInput after closing the original object,\n   * any <code>readXXX</code> methods will throw {@link AlreadyClosedException}.\n   */\n  @Override\n  public IndexInput clone() {\n    return (IndexInput) super.clone();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7460755aa94143153400f49c8ac2746f5d092e1a"],"0b28c8c24efe925d64d643c57b569d4fdf8616e9":["9bd074ae12a9bd27ae2897c474d182e2cffa8b57"],"9bd074ae12a9bd27ae2897c474d182e2cffa8b57":["7460755aa94143153400f49c8ac2746f5d092e1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7460755aa94143153400f49c8ac2746f5d092e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b28c8c24efe925d64d643c57b569d4fdf8616e9"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"0b28c8c24efe925d64d643c57b569d4fdf8616e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9bd074ae12a9bd27ae2897c474d182e2cffa8b57":["0b28c8c24efe925d64d643c57b569d4fdf8616e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","7460755aa94143153400f49c8ac2746f5d092e1a"],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","9bd074ae12a9bd27ae2897c474d182e2cffa8b57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}