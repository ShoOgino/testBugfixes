{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n    List<IndexableField> fields = doc.getFields();\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.stored()) {\n        out.add(f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["57273019d2938b9b30faae55f6983a2e71a56ec5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n    List<IndexableField> fields = doc.getFields();\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n    List<IndexableField> fields = doc.getFields();\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.stored()) {\n        out.add(f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":["c9578f99a6012b38cadca42a29f0bc79cdd5f3c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n    List<IndexableField> fields = doc.getFields();\n\n    // copy the stored fields only\n    StoredDocument out = new StoredDocument();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add((StorableField) f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n    List<IndexableField> fields = doc.getFields();\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    StoredDocument out = new StoredDocument();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add((StorableField) f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n    List<IndexableField> fields = doc.getFields();\n\n    // copy the stored fields only\n    StoredDocument out = new StoredDocument();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add((StorableField) f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9578f99a6012b38cadca42a29f0bc79cdd5f3c6","date":1345436530,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n    List<IndexableField> fields = doc.getFields();\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored() ) {\n        out.add(f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n    List<IndexableField> fields = doc.getFields();\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"bugIntro":["4346940138bc1085f62b4535467e6724d604bc50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67588aedbc6edbcce873bd0c3c7b4199fbf0987c","date":1345506207,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n    List<IndexableField> fields = doc.getFields();\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored() ) {\n        out.add(f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n    List<IndexableField> fields = doc.getFields();\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    StoredDocument out = new StoredDocument();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored() ) {\n        out.add((StorableField) f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    StoredDocument out = new StoredDocument();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add((StorableField) f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbb99676a68bd056726c87b20f1854ee4d740a29","date":1346421532,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored() ) {\n        out.add(f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n    List<IndexableField> fields = doc.getFields();\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored() ) {\n        out.add(f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    StoredDocument out = new StoredDocument();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored() ) {\n        out.add((StorableField) f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored() ) {\n        out.add(f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored() ) {\n        out.add((IndexableField) f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    StoredDocument out = new StoredDocument();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored() ) {\n        out.add((StorableField) f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":["57273019d2938b9b30faae55f6983a2e71a56ec5","4346940138bc1085f62b4535467e6724d604bc50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4346940138bc1085f62b4535467e6724d604bc50","date":1458915511,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field \" + f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored() ) {\n        out.add((IndexableField) f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":["c9578f99a6012b38cadca42a29f0bc79cdd5f3c6","6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"bugIntro":["57273019d2938b9b30faae55f6983a2e71a56ec5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, false);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field \" + f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field \" + f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, false);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field \" + f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field \" + f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e48b8c80bafe48768f89e52365e6434282b3657","date":1492601295,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, false);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, false);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field \" + f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":["57273019d2938b9b30faae55f6983a2e71a56ec5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, false);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, false);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field \" + f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ce7c704ca874aa623a99f2669737b52ec71cfc","date":1528728510,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO what about child / nested docs?\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, false);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":["57273019d2938b9b30faae55f6983a2e71a56ec5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO what about child / nested docs?\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, false);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO what about child / nested docs?\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, false);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57273019d2938b9b30faae55f6983a2e71a56ec5","date":1550480608,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema).mjava","sourceNew":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    return toSolrDoc(sdoc, schema, false);\n  }\n\n","sourceOld":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance. \n   * @lucene.experimental\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema) {\n    // TODO what about child / nested docs?\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":["c5ce7c704ca874aa623a99f2669737b52ec71cfc","7e48b8c80bafe48768f89e52365e6434282b3657","4346940138bc1085f62b4535467e6724d604bc50","6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","bd0ef6574805f3cb9880e0983b7548a6aa933508"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["4346940138bc1085f62b4535467e6724d604bc50"],"409324b31a1419d7c05a38211168cf317e39be77":["a7e4907084808af8fdb14b9809e6dceaccf6867b"],"001b25b42373b22a52f399dbf072f1224632e8e6":["409324b31a1419d7c05a38211168cf317e39be77","c9578f99a6012b38cadca42a29f0bc79cdd5f3c6"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["4346940138bc1085f62b4535467e6724d604bc50","415bbbe7da8065dd3c477bdc3c703c6425622998"],"7e48b8c80bafe48768f89e52365e6434282b3657":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"4346940138bc1085f62b4535467e6724d604bc50":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c9578f99a6012b38cadca42a29f0bc79cdd5f3c6":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"1d028314cced5858683a1bb4741423d0f934257b":["fbb99676a68bd056726c87b20f1854ee4d740a29","001b25b42373b22a52f399dbf072f1224632e8e6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["7e48b8c80bafe48768f89e52365e6434282b3657","c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57273019d2938b9b30faae55f6983a2e71a56ec5":["c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5","c9578f99a6012b38cadca42a29f0bc79cdd5f3c6"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["7e48b8c80bafe48768f89e52365e6434282b3657"],"fbb99676a68bd056726c87b20f1854ee4d740a29":["c9578f99a6012b38cadca42a29f0bc79cdd5f3c6"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57273019d2938b9b30faae55f6983a2e71a56ec5"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["7e48b8c80bafe48768f89e52365e6434282b3657","c5ce7c704ca874aa623a99f2669737b52ec71cfc"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","598b5d23aa7c9732bf473c21a9cd309c44599394","7e48b8c80bafe48768f89e52365e6434282b3657"],"409324b31a1419d7c05a38211168cf317e39be77":["001b25b42373b22a52f399dbf072f1224632e8e6"],"001b25b42373b22a52f399dbf072f1224632e8e6":["1d028314cced5858683a1bb4741423d0f934257b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"7e48b8c80bafe48768f89e52365e6434282b3657":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c5ce7c704ca874aa623a99f2669737b52ec71cfc","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["c9578f99a6012b38cadca42a29f0bc79cdd5f3c6","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"4346940138bc1085f62b4535467e6724d604bc50":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"c9578f99a6012b38cadca42a29f0bc79cdd5f3c6":["001b25b42373b22a52f399dbf072f1224632e8e6","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","fbb99676a68bd056726c87b20f1854ee4d740a29"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"57273019d2938b9b30faae55f6983a2e71a56ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":[],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["409324b31a1419d7c05a38211168cf317e39be77"],"fbb99676a68bd056726c87b20f1854ee4d740a29":["1d028314cced5858683a1bb4741423d0f934257b"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","57273019d2938b9b30faae55f6983a2e71a56ec5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["4346940138bc1085f62b4535467e6724d604bc50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","598b5d23aa7c9732bf473c21a9cd309c44599394","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}