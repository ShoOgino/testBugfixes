{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask#reportSumByPrefixRound(List[TaskStats]).mjava","commits":[{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask#reportSumByPrefixRound(List[TaskStats]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask#reportSumByPrefixRound(List).mjava","sourceNew":"  protected Report reportSumByPrefixRound(List<TaskStats> taskStats) {\n    // aggregate by task name and by round\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        String rname = stat1.getRound()+\".\"+name; // group by round\n        TaskStats stat2 = p2.get(rname);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(rname,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSumByPrefixRound(List taskStats) {\n    // aggregate by task name and by round\n    int reported = 0;\n    LinkedHashMap p2 = new LinkedHashMap();\n    for (Iterator it = taskStats.iterator(); it.hasNext();) {\n      TaskStats stat1 = (TaskStats) it.next();\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        String rname = stat1.getRound()+\".\"+name; // group by round\n        TaskStats stat2 = (TaskStats) p2.get(rname);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(rname,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask#reportSumByPrefixRound(List[TaskStats]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefRoundTask#reportSumByPrefixRound(List[TaskStats]).mjava","sourceNew":"  protected Report reportSumByPrefixRound(List<TaskStats> taskStats) {\n    // aggregate by task name and by round\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        String rname = stat1.getRound()+\".\"+name; // group by round\n        TaskStats stat2 = p2.get(rname);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(rname,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSumByPrefixRound(List<TaskStats> taskStats) {\n    // aggregate by task name and by round\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        String rname = stat1.getRound()+\".\"+name; // group by round\n        TaskStats stat2 = p2.get(rname);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(rname,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}