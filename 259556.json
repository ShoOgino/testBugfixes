{"path":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testExclusion().mjava","commits":[{"id":"244d15187e7f59974b9c7cc38eb17236903bdc06","date":1424161968,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testExclusion().mjava","pathOld":"/dev/null","sourceNew":"  public void testExclusion() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(q1, Occur.MUST);\n    bq1.add(q2, Occur.MUST_NOT);\n\n    BooleanQuery bq2 = new BooleanQuery();\n    bq2.add(new RandomApproximationQuery(q1, random()), Occur.MUST);\n    bq2.add(new RandomApproximationQuery(q2, random()), Occur.MUST_NOT);\n\n    assertSameScores(bq1, bq2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testExclusion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testExclusion().mjava","sourceNew":"  public void testExclusion() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    bq1.add(q1, Occur.MUST);\n    bq1.add(q2, Occur.MUST_NOT);\n\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(new RandomApproximationQuery(q1, random()), Occur.MUST);\n    bq2.add(new RandomApproximationQuery(q2, random()), Occur.MUST_NOT);\n\n    assertSameScores(bq1.build(), bq2.build());\n  }\n\n","sourceOld":"  public void testExclusion() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(q1, Occur.MUST);\n    bq1.add(q2, Occur.MUST_NOT);\n\n    BooleanQuery bq2 = new BooleanQuery();\n    bq2.add(new RandomApproximationQuery(q1, random()), Occur.MUST);\n    bq2.add(new RandomApproximationQuery(q2, random()), Occur.MUST_NOT);\n\n    assertSameScores(bq1, bq2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"691063d8af7c07ae189d64517ce2582b4ccf5e91","date":1602011448,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testExclusion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testExclusion().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-9566\")\n  public void testExclusion() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    bq1.add(q1, Occur.MUST);\n    bq1.add(q2, Occur.MUST_NOT);\n\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(new RandomApproximationQuery(q1, random()), Occur.MUST);\n    bq2.add(new RandomApproximationQuery(q2, random()), Occur.MUST_NOT);\n\n    assertSameScores(bq1.build(), bq2.build());\n  }\n\n","sourceOld":"  public void testExclusion() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    bq1.add(q1, Occur.MUST);\n    bq1.add(q2, Occur.MUST_NOT);\n\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(new RandomApproximationQuery(q1, random()), Occur.MUST);\n    bq2.add(new RandomApproximationQuery(q2, random()), Occur.MUST_NOT);\n\n    assertSameScores(bq1.build(), bq2.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82f88f01593b859697b54aeaddf31c554b8b9215","date":1602068566,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testExclusion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testExclusion().mjava","sourceNew":"  public void testExclusion() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    bq1.add(q1, Occur.MUST);\n    bq1.add(q2, Occur.MUST_NOT);\n\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(new RandomApproximationQuery(q1, random()), Occur.MUST);\n    bq2.add(new RandomApproximationQuery(q2, random()), Occur.MUST_NOT);\n\n    assertSameScores(bq1.build(), bq2.build());\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-9566\")\n  public void testExclusion() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    bq1.add(q1, Occur.MUST);\n    bq1.add(q2, Occur.MUST_NOT);\n\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(new RandomApproximationQuery(q1, random()), Occur.MUST);\n    bq2.add(new RandomApproximationQuery(q2, random()), Occur.MUST_NOT);\n\n    assertSameScores(bq1.build(), bq2.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["244d15187e7f59974b9c7cc38eb17236903bdc06"],"244d15187e7f59974b9c7cc38eb17236903bdc06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"691063d8af7c07ae189d64517ce2582b4ccf5e91":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"82f88f01593b859697b54aeaddf31c554b8b9215":["691063d8af7c07ae189d64517ce2582b4ccf5e91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82f88f01593b859697b54aeaddf31c554b8b9215"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["691063d8af7c07ae189d64517ce2582b4ccf5e91"],"244d15187e7f59974b9c7cc38eb17236903bdc06":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"691063d8af7c07ae189d64517ce2582b4ccf5e91":["82f88f01593b859697b54aeaddf31c554b8b9215"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["244d15187e7f59974b9c7cc38eb17236903bdc06"],"82f88f01593b859697b54aeaddf31c554b8b9215":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}