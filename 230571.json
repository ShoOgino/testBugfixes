{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/servlet/TestAbstractGdataServlet#testServiceNullOverrideHeader().mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/servlet/TestAbstractGdataServlet#testServiceNullOverrideHeader().mjava","pathOld":"/dev/null","sourceNew":"    /** \n     *  \n     */ \n    public void testServiceNullOverrideHeader() { \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getMethod(), METHOD_POST); \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getHeader(METHOD_HEADER_NAME), null); \n        this.requestMockControl.replay(); \n \n        try { \n            this.servletInstance.service(this.mockRequest, this.mockResponse); \n        } catch (ServletException e) { \n            fail(\"ServeltExpception not expected\"); \n        } catch (IOException e) { \n            fail(\"IOExpception not expected\"); \n        } \n \n        this.requestMockControl.verify(); \n        this.requestMockControl.reset(); \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/servlet/TestAbstractGdataServlet#testServiceNullOverrideHeader().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/servlet/TestAbstractGdataServlet#testServiceNullOverrideHeader().mjava","sourceNew":"    /** \n     *  \n     */ \n    public void testServiceNullOverrideHeader() { \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getMethod(), METHOD_POST); \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getHeader(METHOD_HEADER_NAME), null); \n        this.requestMockControl.replay(); \n \n        try { \n            this.servletInstance.service(this.mockRequest, this.mockResponse); \n        } catch (ServletException e) { \n            fail(\"ServeltExpception not expected\"); \n        } catch (IOException e) { \n            fail(\"IOExpception not expected\"); \n        } \n \n        this.requestMockControl.verify(); \n        this.requestMockControl.reset(); \n    } \n\n","sourceOld":"    /** \n     *  \n     */ \n    public void testServiceNullOverrideHeader() { \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getMethod(), METHOD_POST); \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getHeader(METHOD_HEADER_NAME), null); \n        this.requestMockControl.replay(); \n \n        try { \n            this.servletInstance.service(this.mockRequest, this.mockResponse); \n        } catch (ServletException e) { \n            fail(\"ServeltExpception not expected\"); \n        } catch (IOException e) { \n            fail(\"IOExpception not expected\"); \n        } \n \n        this.requestMockControl.verify(); \n        this.requestMockControl.reset(); \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}