{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","date":1459379660,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(PointVectorStrategy.newInstance(ctx, \"pointvector\"));\n    strategies.add(PointVectorStrategy.newLegacyInstance(ctx, \"pointvector_legacy\"));\n    strategies.add(BBoxStrategy.newInstance(ctx, \"bbox\"));\n    strategies.add(BBoxStrategy.newLegacyInstance(ctx, \"bbox_legacy\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","bugFix":["1068799b5537c6408504cf7e15cb90ba57491440"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(PointVectorStrategy.newInstance(ctx, \"pointvector\"));\n    strategies.add(BBoxStrategy.newInstance(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(PointVectorStrategy.newInstance(ctx, \"pointvector\"));\n    strategies.add(PointVectorStrategy.newLegacyInstance(ctx, \"pointvector_legacy\"));\n    strategies.add(BBoxStrategy.newInstance(ctx, \"bbox\"));\n    strategies.add(BBoxStrategy.newLegacyInstance(ctx, \"bbox_legacy\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(PointVectorStrategy.newInstance(ctx, \"pointvector\"));\n    strategies.add(BBoxStrategy.newInstance(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(PointVectorStrategy.newInstance(ctx, \"pointvector\"));\n    strategies.add(PointVectorStrategy.newLegacyInstance(ctx, \"pointvector_legacy\"));\n    strategies.add(BBoxStrategy.newInstance(ctx, \"bbox\"));\n    strategies.add(BBoxStrategy.newLegacyInstance(ctx, \"bbox_legacy\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(PointVectorStrategy.newInstance(ctx, \"pointvector\"));\n    strategies.add(BBoxStrategy.newInstance(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(PointVectorStrategy.newInstance(ctx, \"pointvector\"));\n    strategies.add(PointVectorStrategy.newLegacyInstance(ctx, \"pointvector_legacy\"));\n    strategies.add(BBoxStrategy.newInstance(ctx, \"bbox\"));\n    strategies.add(BBoxStrategy.newLegacyInstance(ctx, \"bbox_legacy\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["af2638813028b254a88b418ebeafb541afb49653"],"a178ac3dec643551e66363c457a9074f55545f86":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"af2638813028b254a88b418ebeafb541afb49653":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}