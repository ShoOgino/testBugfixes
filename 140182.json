{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OscillateEvaluator#doWork(Object...).mjava","commits":[{"id":"96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b","date":1538583935,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OscillateEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... objects) throws IOException{\n\n    if(objects.length != 3) {\n      throw new IOException(\"The oscillate function takes 3 arguments.\");\n    }\n\n    double amp = ((Number)objects[0]).doubleValue();\n    double om = ((Number)objects[1]).doubleValue();\n    double phase = ((Number)objects[2]).doubleValue();\n\n\n    HarmonicOscillator pf = new HarmonicOscillator(amp, om, phase);\n\n    List list = new ArrayList();\n    for(int i=0; i<128; i++) {\n      double yvalue= pf.value(i);\n      list.add(yvalue);\n    }\n\n    return new VectorFunction(pf, list);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd9e2fa8ad30b74135a08f2ffa79e635b8255be3","date":1548008374,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OscillateEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OscillateEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... objects) throws IOException{\n\n    if(objects.length != 3) {\n      throw new IOException(\"The oscillate function takes 3 arguments.\");\n    }\n\n    double amp = ((Number)objects[0]).doubleValue();\n    double om = ((Number)objects[1]).doubleValue();\n    double phase = ((Number)objects[2]).doubleValue();\n\n\n    HarmonicOscillator pf = new HarmonicOscillator(amp, om, phase);\n    double[] x = new double[128];\n\n    List list = new ArrayList();\n    for(int i=0; i<128; i++) {\n      double yvalue= pf.value(i);\n      list.add(yvalue);\n      x[i] = i;\n    }\n\n    VectorFunction func = new VectorFunction(pf, list);\n    func.addToContext(\"x\", x);\n    return func;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... objects) throws IOException{\n\n    if(objects.length != 3) {\n      throw new IOException(\"The oscillate function takes 3 arguments.\");\n    }\n\n    double amp = ((Number)objects[0]).doubleValue();\n    double om = ((Number)objects[1]).doubleValue();\n    double phase = ((Number)objects[2]).doubleValue();\n\n\n    HarmonicOscillator pf = new HarmonicOscillator(amp, om, phase);\n\n    List list = new ArrayList();\n    for(int i=0; i<128; i++) {\n      double yvalue= pf.value(i);\n      list.add(yvalue);\n    }\n\n    return new VectorFunction(pf, list);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OscillateEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OscillateEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... objects) throws IOException{\n\n    if(objects.length != 3) {\n      throw new IOException(\"The oscillate function takes 3 arguments.\");\n    }\n\n    double amp = ((Number)objects[0]).doubleValue();\n    double om = ((Number)objects[1]).doubleValue();\n    double phase = ((Number)objects[2]).doubleValue();\n\n\n    HarmonicOscillator pf = new HarmonicOscillator(amp, om, phase);\n    double[] x = new double[128];\n\n    List list = new ArrayList();\n    for(int i=0; i<128; i++) {\n      double yvalue= pf.value(i);\n      list.add(yvalue);\n      x[i] = i;\n    }\n\n    VectorFunction func = new VectorFunction(pf, list);\n    func.addToContext(\"x\", x);\n    return func;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... objects) throws IOException{\n\n    if(objects.length != 3) {\n      throw new IOException(\"The oscillate function takes 3 arguments.\");\n    }\n\n    double amp = ((Number)objects[0]).doubleValue();\n    double om = ((Number)objects[1]).doubleValue();\n    double phase = ((Number)objects[2]).doubleValue();\n\n\n    HarmonicOscillator pf = new HarmonicOscillator(amp, om, phase);\n\n    List list = new ArrayList();\n    for(int i=0; i<128; i++) {\n      double yvalue= pf.value(i);\n      list.add(yvalue);\n    }\n\n    return new VectorFunction(pf, list);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OscillateEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OscillateEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object... objects) throws IOException{\n\n    if(objects.length != 3) {\n      throw new IOException(\"The oscillate function takes 3 arguments.\");\n    }\n\n    double amp = ((Number)objects[0]).doubleValue();\n    double om = ((Number)objects[1]).doubleValue();\n    double phase = ((Number)objects[2]).doubleValue();\n\n\n    HarmonicOscillator pf = new HarmonicOscillator(amp, om, phase);\n    double[] x = new double[128];\n\n    @SuppressWarnings({\"rawtypes\"})\n    List list = new ArrayList();\n    for(int i=0; i<128; i++) {\n      double yvalue= pf.value(i);\n      list.add(yvalue);\n      x[i] = i;\n    }\n\n    VectorFunction func = new VectorFunction(pf, list);\n    func.addToContext(\"x\", x);\n    return func;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... objects) throws IOException{\n\n    if(objects.length != 3) {\n      throw new IOException(\"The oscillate function takes 3 arguments.\");\n    }\n\n    double amp = ((Number)objects[0]).doubleValue();\n    double om = ((Number)objects[1]).doubleValue();\n    double phase = ((Number)objects[2]).doubleValue();\n\n\n    HarmonicOscillator pf = new HarmonicOscillator(amp, om, phase);\n    double[] x = new double[128];\n\n    List list = new ArrayList();\n    for(int i=0; i<128; i++) {\n      double yvalue= pf.value(i);\n      list.add(yvalue);\n      x[i] = i;\n    }\n\n    VectorFunction func = new VectorFunction(pf, list);\n    func.addToContext(\"x\", x);\n    return func;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["dd9e2fa8ad30b74135a08f2ffa79e635b8255be3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd9e2fa8ad30b74135a08f2ffa79e635b8255be3":["96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b","dd9e2fa8ad30b74135a08f2ffa79e635b8255be3"]},"commit2Childs":{"96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b":["dd9e2fa8ad30b74135a08f2ffa79e635b8255be3","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b"],"dd9e2fa8ad30b74135a08f2ffa79e635b8255be3":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}