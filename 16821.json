{"path":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testQueryDoubleValuesSource().mjava","commits":[{"id":"beb75ce8f8a8d60aeddc199c67f14ef327e1a1c8","date":1510832356,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testQueryDoubleValuesSource().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryDoubleValuesSource() throws Exception {\n    Query q = new TermQuery(new Term(\"english\", \"two\"));\n    DoubleValuesSource vs = DoubleValuesSource.fromQuery(q).rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      Scorer scorer;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n        this.v = vs.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        assertTrue(v.advanceExact(doc));\n        assertEquals(scorer.score(), v.doubleValue(), 0.00001);\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testQueryDoubleValuesSource().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testQueryDoubleValuesSource().mjava","sourceNew":"  public void testQueryDoubleValuesSource() throws Exception {\n    Query q = new TermQuery(new Term(\"english\", \"two\"));\n    DoubleValuesSource vs = DoubleValuesSource.fromQuery(q).rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      Scorer scorer;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n        this.v = vs.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        assertTrue(v.advanceExact(doc));\n        assertEquals(scorer.score(), v.doubleValue(), 0.00001);\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n  }\n\n","sourceOld":"  public void testQueryDoubleValuesSource() throws Exception {\n    Query q = new TermQuery(new Term(\"english\", \"two\"));\n    DoubleValuesSource vs = DoubleValuesSource.fromQuery(q).rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      Scorer scorer;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n        this.v = vs.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        assertTrue(v.advanceExact(doc));\n        assertEquals(scorer.score(), v.doubleValue(), 0.00001);\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testQueryDoubleValuesSource().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testQueryDoubleValuesSource().mjava","sourceNew":"  public void testQueryDoubleValuesSource() throws Exception {\n    Query q = new TermQuery(new Term(\"english\", \"two\"));\n    DoubleValuesSource vs = DoubleValuesSource.fromQuery(q).rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      Scorer scorer;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n        this.v = vs.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        assertTrue(v.advanceExact(doc));\n        assertEquals(scorer.score(), v.doubleValue(), 0.00001);\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n  }\n\n","sourceOld":"  public void testQueryDoubleValuesSource() throws Exception {\n    Query q = new TermQuery(new Term(\"english\", \"two\"));\n    DoubleValuesSource vs = DoubleValuesSource.fromQuery(q).rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      Scorer scorer;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n        this.v = vs.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        assertTrue(v.advanceExact(doc));\n        assertEquals(scorer.score(), v.doubleValue(), 0.00001);\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testQueryDoubleValuesSource().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testQueryDoubleValuesSource().mjava","sourceNew":"  public void testQueryDoubleValuesSource() throws Exception {\n    Query q = new TermQuery(new Term(\"english\", \"two\"));\n    DoubleValuesSource vs = DoubleValuesSource.fromQuery(q).rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      Scorable scorer;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorable scorer) throws IOException {\n        this.scorer = scorer;\n        this.v = vs.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        assertTrue(v.advanceExact(doc));\n        assertEquals(scorer.score(), v.doubleValue(), 0.00001);\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n  }\n\n","sourceOld":"  public void testQueryDoubleValuesSource() throws Exception {\n    Query q = new TermQuery(new Term(\"english\", \"two\"));\n    DoubleValuesSource vs = DoubleValuesSource.fromQuery(q).rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      Scorer scorer;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n        this.v = vs.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        assertTrue(v.advanceExact(doc));\n        assertEquals(scorer.score(), v.doubleValue(), 0.00001);\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec20178021a8555c9e59c580e877af139a162aa","date":1584287445,"type":3,"author":"Michele Palmia","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testQueryDoubleValuesSource().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testQueryDoubleValuesSource().mjava","sourceNew":"  public void testQueryDoubleValuesSource() throws Exception {\n    Query iteratingQuery = new TermQuery(new Term(\"english\", \"two\"));\n    Query approximatingQuery = new PhraseQuery.Builder()\n      .add(new Term(\"english\", \"hundred\"), 0)\n      .add(new Term(\"english\", \"one\"), 1)\n      .build();\n\n    doTestQueryDoubleValuesSources(iteratingQuery);\n    doTestQueryDoubleValuesSources(approximatingQuery);\n  }\n\n","sourceOld":"  public void testQueryDoubleValuesSource() throws Exception {\n    Query q = new TermQuery(new Term(\"english\", \"two\"));\n    DoubleValuesSource vs = DoubleValuesSource.fromQuery(q).rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      Scorable scorer;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorable scorer) throws IOException {\n        this.scorer = scorer;\n        this.v = vs.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        assertTrue(v.advanceExact(doc));\n        assertEquals(scorer.score(), v.doubleValue(), 0.00001);\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285244982ce6aa163d1e60a707f0e6e121736ce5":["417142ff08fda9cf0b72d5133e63097a166c6458"],"beb75ce8f8a8d60aeddc199c67f14ef327e1a1c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ec20178021a8555c9e59c580e877af139a162aa":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["beb75ce8f8a8d60aeddc199c67f14ef327e1a1c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ec20178021a8555c9e59c580e877af139a162aa"],"417142ff08fda9cf0b72d5133e63097a166c6458":["beb75ce8f8a8d60aeddc199c67f14ef327e1a1c8","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"285244982ce6aa163d1e60a707f0e6e121736ce5":["2ec20178021a8555c9e59c580e877af139a162aa"],"beb75ce8f8a8d60aeddc199c67f14ef327e1a1c8":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["beb75ce8f8a8d60aeddc199c67f14ef327e1a1c8"],"2ec20178021a8555c9e59c580e877af139a162aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}