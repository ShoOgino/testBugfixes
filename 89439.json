{"path":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","commits":[{"id":"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab","date":1235909556,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeletes2() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    createIndex(dir, false);\n    // Get delete bitVector\n    modifyIndex(0, dir);\n    IndexReader r1 = IndexReader.open(dir);\n\n    // Add doc:\n    modifyIndex(5, dir);\n\n    IndexReader r2 = r1.reopen();\n    assertTrue(r1 != r2);\n\n    IndexReader[] rs2 = r2.getSequentialSubReaders();\n\n    SegmentReader sr1 = (SegmentReader) r1;\n    SegmentReader sr2 = (SegmentReader) rs2[0];\n\n    // At this point they share the same BitVector\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    r1.close();\n\n    r2.deleteDocument(0);\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["95ea004a2bef3f964ba2e0d26e94325213909526"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","sourceNew":"  public void testDeletes2() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    createIndex(dir, false);\n    // Get delete bitVector\n    modifyIndex(0, dir);\n    IndexReader r1 = IndexReader.open(dir);\n\n    // Add doc:\n    modifyIndex(5, dir);\n\n    IndexReader r2 = r1.reopen();\n    assertTrue(r1 != r2);\n\n    IndexReader[] rs2 = r2.getSequentialSubReaders();\n\n    SegmentReader sr1 = SegmentReader.getOnlySegmentReader(r1);\n    SegmentReader sr2 = (SegmentReader) rs2[0];\n\n    // At this point they share the same BitVector\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    r1.close();\n\n    r2.deleteDocument(0);\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletes2() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    createIndex(dir, false);\n    // Get delete bitVector\n    modifyIndex(0, dir);\n    IndexReader r1 = IndexReader.open(dir);\n\n    // Add doc:\n    modifyIndex(5, dir);\n\n    IndexReader r2 = r1.reopen();\n    assertTrue(r1 != r2);\n\n    IndexReader[] rs2 = r2.getSequentialSubReaders();\n\n    SegmentReader sr1 = (SegmentReader) r1;\n    SegmentReader sr2 = (SegmentReader) rs2[0];\n\n    // At this point they share the same BitVector\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    r1.close();\n\n    r2.deleteDocument(0);\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95ea004a2bef3f964ba2e0d26e94325213909526","date":1245927336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","sourceNew":"  public void testDeletes2() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    createIndex(dir, false);\n    // Get delete bitVector\n    modifyIndex(0, dir);\n    IndexReader r1 = IndexReader.open(dir);\n\n    // Add doc:\n    modifyIndex(5, dir);\n\n    IndexReader r2 = r1.reopen();\n    assertTrue(r1 != r2);\n\n    IndexReader[] rs2 = r2.getSequentialSubReaders();\n\n    SegmentReader sr1 = SegmentReader.getOnlySegmentReader(r1);\n    SegmentReader sr2 = (SegmentReader) rs2[0];\n\n    // At this point they share the same BitVector\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    final BitVector delDocs = sr1.deletedDocs;\n    r1.close();\n\n    r2.deleteDocument(0);\n    assertTrue(delDocs==sr2.deletedDocs);\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletes2() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    createIndex(dir, false);\n    // Get delete bitVector\n    modifyIndex(0, dir);\n    IndexReader r1 = IndexReader.open(dir);\n\n    // Add doc:\n    modifyIndex(5, dir);\n\n    IndexReader r2 = r1.reopen();\n    assertTrue(r1 != r2);\n\n    IndexReader[] rs2 = r2.getSequentialSubReaders();\n\n    SegmentReader sr1 = SegmentReader.getOnlySegmentReader(r1);\n    SegmentReader sr2 = (SegmentReader) rs2[0];\n\n    // At this point they share the same BitVector\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    r1.close();\n\n    r2.deleteDocument(0);\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":["cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","sourceNew":"  public void testDeletes2() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    createIndex(dir, false);\n    // Get delete bitVector\n    modifyIndex(0, dir);\n    IndexReader r1 = IndexReader.open(dir, false);\n\n    // Add doc:\n    modifyIndex(5, dir);\n\n    IndexReader r2 = r1.reopen();\n    assertTrue(r1 != r2);\n\n    IndexReader[] rs2 = r2.getSequentialSubReaders();\n\n    SegmentReader sr1 = SegmentReader.getOnlySegmentReader(r1);\n    SegmentReader sr2 = (SegmentReader) rs2[0];\n\n    // At this point they share the same BitVector\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    final BitVector delDocs = sr1.deletedDocs;\n    r1.close();\n\n    r2.deleteDocument(0);\n    assertTrue(delDocs==sr2.deletedDocs);\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletes2() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    createIndex(dir, false);\n    // Get delete bitVector\n    modifyIndex(0, dir);\n    IndexReader r1 = IndexReader.open(dir);\n\n    // Add doc:\n    modifyIndex(5, dir);\n\n    IndexReader r2 = r1.reopen();\n    assertTrue(r1 != r2);\n\n    IndexReader[] rs2 = r2.getSequentialSubReaders();\n\n    SegmentReader sr1 = SegmentReader.getOnlySegmentReader(r1);\n    SegmentReader sr2 = (SegmentReader) rs2[0];\n\n    // At this point they share the same BitVector\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    final BitVector delDocs = sr1.deletedDocs;\n    r1.close();\n\n    r2.deleteDocument(0);\n    assertTrue(delDocs==sr2.deletedDocs);\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","sourceNew":"  public void testDeletes2() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    createIndex(dir, false);\n    // Get delete bitVector\n    modifyIndex(0, dir);\n    IndexReader r1 = IndexReader.open(dir, false);\n\n    // Add doc:\n    modifyIndex(5, dir);\n\n    IndexReader r2 = r1.reopen();\n    assertTrue(r1 != r2);\n\n    IndexReader[] rs2 = r2.getSequentialSubReaders();\n\n    SegmentReader sr1 = SegmentReader.getOnlySegmentReader(r1);\n    SegmentReader sr2 = (SegmentReader) rs2[0];\n\n    // At this point they share the same BitVector\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    final BitVector delDocs = sr1.deletedDocs;\n    r1.close();\n\n    r2.deleteDocument(0);\n    assertTrue(delDocs==sr2.deletedDocs);\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletes2() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    createIndex(dir, false);\n    // Get delete bitVector\n    modifyIndex(0, dir);\n    IndexReader r1 = IndexReader.open(dir);\n\n    // Add doc:\n    modifyIndex(5, dir);\n\n    IndexReader r2 = r1.reopen();\n    assertTrue(r1 != r2);\n\n    IndexReader[] rs2 = r2.getSequentialSubReaders();\n\n    SegmentReader sr1 = SegmentReader.getOnlySegmentReader(r1);\n    SegmentReader sr2 = (SegmentReader) rs2[0];\n\n    // At this point they share the same BitVector\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    final BitVector delDocs = sr1.deletedDocs;\n    r1.close();\n\n    r2.deleteDocument(0);\n    assertTrue(delDocs==sr2.deletedDocs);\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testDeletes2().mjava","sourceNew":"  public void testDeletes2() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    createIndex(dir, false);\n    // Get delete bitVector\n    modifyIndex(0, dir);\n    IndexReader r1 = IndexReader.open(dir, false);\n\n    // Add doc:\n    modifyIndex(5, dir);\n\n    IndexReader r2 = r1.reopen();\n    assertTrue(r1 != r2);\n\n    IndexReader[] rs2 = r2.getSequentialSubReaders();\n\n    SegmentReader sr1 = SegmentReader.getOnlySegmentReader(r1);\n    SegmentReader sr2 = (SegmentReader) rs2[0];\n\n    // At this point they share the same BitVector\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    final BitVector delDocs = sr1.deletedDocs;\n    r1.close();\n\n    r2.deleteDocument(0);\n    assertTrue(delDocs==sr2.deletedDocs);\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletes2() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    createIndex(dir, false);\n    // Get delete bitVector\n    modifyIndex(0, dir);\n    IndexReader r1 = IndexReader.open(dir, false);\n\n    // Add doc:\n    modifyIndex(5, dir);\n\n    IndexReader r2 = r1.reopen();\n    assertTrue(r1 != r2);\n\n    IndexReader[] rs2 = r2.getSequentialSubReaders();\n\n    SegmentReader sr1 = SegmentReader.getOnlySegmentReader(r1);\n    SegmentReader sr2 = (SegmentReader) rs2[0];\n\n    // At this point they share the same BitVector\n    assertTrue(sr1.deletedDocs==sr2.deletedDocs);\n    final BitVector delDocs = sr1.deletedDocs;\n    r1.close();\n\n    r2.deleteDocument(0);\n    assertTrue(delDocs==sr2.deletedDocs);\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab"],"95ea004a2bef3f964ba2e0d26e94325213909526":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["95ea004a2bef3f964ba2e0d26e94325213909526"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["95ea004a2bef3f964ba2e0d26e94325213909526","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["95ea004a2bef3f964ba2e0d26e94325213909526"],"95ea004a2bef3f964ba2e0d26e94325213909526":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}