{"path":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec.MockIntStreamFactory#createOutput(Directory,String).mjava","commits":[{"id":"08bd82f9f7ac6b7ae532616311b08252338e335d","date":1297527663,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec.MockIntStreamFactory#createOutput(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName) throws IOException {\n      final IntStreamFactory f = delegates.get((Math.abs(salt ^ getExtension(fileName).hashCode())) % delegates.size());\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: write using int factory \" + f + \" to fileName=\" + fileName);\n      }\n      return f.createOutput(dir, fileName);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec.MockIntStreamFactory#createOutput(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName) throws IOException {\n      final IntStreamFactory f = delegates.get((Math.abs(salt ^ getExtension(fileName).hashCode())) % delegates.size());\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: write using int factory \" + f + \" to fileName=\" + fileName);\n      }\n      return f.createOutput(dir, fileName);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec.MockIntStreamFactory#createOutput(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName) throws IOException {\n      final IntStreamFactory f = delegates.get((Math.abs(salt ^ getExtension(fileName).hashCode())) % delegates.size());\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: write using int factory \" + f + \" to fileName=\" + fileName);\n      }\n      return f.createOutput(dir, fileName);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec.MockIntStreamFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec.MockIntStreamFactory#createOutput(Directory,String).mjava","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IntStreamFactory f = delegates.get((Math.abs(salt ^ getExtension(fileName).hashCode())) % delegates.size());\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: write using int factory \" + f + \" to fileName=\" + fileName);\n      }\n      return f.createOutput(dir, fileName, context);\n    }\n\n","sourceOld":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName) throws IOException {\n      final IntStreamFactory f = delegates.get((Math.abs(salt ^ getExtension(fileName).hashCode())) % delegates.size());\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: write using int factory \" + f + \" to fileName=\" + fileName);\n      }\n      return f.createOutput(dir, fileName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec.MockIntStreamFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec.MockIntStreamFactory#createOutput(Directory,String).mjava","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IntStreamFactory f = delegates.get((Math.abs(salt ^ getExtension(fileName).hashCode())) % delegates.size());\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: write using int factory \" + f + \" to fileName=\" + fileName);\n      }\n      return f.createOutput(dir, fileName, context);\n    }\n\n","sourceOld":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName) throws IOException {\n      final IntStreamFactory f = delegates.get((Math.abs(salt ^ getExtension(fileName).hashCode())) % delegates.size());\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: write using int factory \" + f + \" to fileName=\" + fileName);\n      }\n      return f.createOutput(dir, fileName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec.MockIntStreamFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec.MockIntStreamFactory#createOutput(Directory,String).mjava","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IntStreamFactory f = delegates.get((Math.abs(salt ^ getExtension(fileName).hashCode())) % delegates.size());\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: write using int factory \" + f + \" to fileName=\" + fileName);\n      }\n      return f.createOutput(dir, fileName, context);\n    }\n\n","sourceOld":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName) throws IOException {\n      final IntStreamFactory f = delegates.get((Math.abs(salt ^ getExtension(fileName).hashCode())) % delegates.size());\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: write using int factory \" + f + \" to fileName=\" + fileName);\n      }\n      return f.createOutput(dir, fileName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08bd82f9f7ac6b7ae532616311b08252338e335d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08bd82f9f7ac6b7ae532616311b08252338e335d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["08bd82f9f7ac6b7ae532616311b08252338e335d"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["08bd82f9f7ac6b7ae532616311b08252338e335d","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["08bd82f9f7ac6b7ae532616311b08252338e335d","b6f9be74ca7baaef11857ad002cad40419979516"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08bd82f9f7ac6b7ae532616311b08252338e335d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"]},"commit2Childs":{"08bd82f9f7ac6b7ae532616311b08252338e335d":["f1bdbf92da222965b46c0a942c3857ba56e5c638","b6f9be74ca7baaef11857ad002cad40419979516","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08bd82f9f7ac6b7ae532616311b08252338e335d","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","5d004d0e0b3f65bb40da76d476d659d7888270e8","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}