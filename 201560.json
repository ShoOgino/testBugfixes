{"path":"src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","commits":[{"id":"65b5c1fd5fa6357d1ab6681080073a45c2e87962","date":1203480393,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.finest(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new NamedList<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","sourceNew":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.finest(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.finest(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new NamedList<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","sourceNew":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.finest(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","sourceNew":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0acfe5ceed804451d76c8f887855b3d060e132":["65b5c1fd5fa6357d1ab6681080073a45c2e87962"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["da0acfe5ceed804451d76c8f887855b3d060e132"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"65b5c1fd5fa6357d1ab6681080073a45c2e87962":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"da0acfe5ceed804451d76c8f887855b3d060e132":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["65b5c1fd5fa6357d1ab6681080073a45c2e87962"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"65b5c1fd5fa6357d1ab6681080073a45c2e87962":["da0acfe5ceed804451d76c8f887855b3d060e132"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}