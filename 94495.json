{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","sourceOld":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"/dev/null","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","sourceOld":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"275019a81d0883a1db4560391b072d1fbe272ec4","date":1432741049,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","bugFix":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat(),\n              ZkStateReader.REALTIME_REPLICAS, getRealtimeReplicas())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat(),\n              ZkStateReader.REALTIME_REPLICAS, getRealtimeReplicas())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat(),\n              ZkStateReader.REALTIME_REPLICAS, getRealtimeReplicas())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating \" + DEFAULT_COLLECTION + \" with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \n              \"name\", DEFAULT_COLLECTION, \n              \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat(),\n              ZkStateReader.NRT_REPLICAS, useTlogReplicas()?\"0\":\"1\",\n              ZkStateReader.TLOG_REPLICAS, useTlogReplicas()?\"1\":\"0\",\n              ZkStateReader.PULL_REPLICAS, String.valueOf(getPullReplicaCount()))));\n      zkClient.close();\n    }\n    \n    int numPullReplicas = getPullReplicaCount() * sliceCount;\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n      \n      if (numPullReplicas > 0) {\n        numPullReplicas--;\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n      } else if (useTlogReplicas()) {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, null);\n      }\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat(),\n              ZkStateReader.REALTIME_REPLICAS, getRealtimeReplicas())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating \" + DEFAULT_COLLECTION + \" with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \n              \"name\", DEFAULT_COLLECTION, \n              \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat(),\n              ZkStateReader.NRT_REPLICAS, useTlogReplicas()?\"0\":\"1\",\n              ZkStateReader.TLOG_REPLICAS, useTlogReplicas()?\"1\":\"0\",\n              ZkStateReader.PULL_REPLICAS, String.valueOf(getPullReplicaCount()))));\n      zkClient.close();\n    }\n    \n    int numPullReplicas = getPullReplicaCount() * sliceCount;\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n      \n      if (numPullReplicas > 0) {\n        numPullReplicas--;\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n      } else if (useTlogReplicas()) {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, null);\n      }\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat(),\n              ZkStateReader.REALTIME_REPLICAS, getRealtimeReplicas())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numShards != getShardCount()) {\n      numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numShards == getShardCount()) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Shards in the state does not match what we set:\" + numShards + \" vs \" + getShardCount());\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.TLOG)\n              .process(cloudClient).isSuccess());\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, null);\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.NRT)\n              .process(cloudClient).isSuccess());\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n            .setNode(j.getNodeName())\n            .setType(Replica.Type.PULL)\n            .process(cloudClient).isSuccess());\n      }\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating \" + DEFAULT_COLLECTION + \" with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \n              \"name\", DEFAULT_COLLECTION, \n              \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat(),\n              ZkStateReader.NRT_REPLICAS, useTlogReplicas()?\"0\":\"1\",\n              ZkStateReader.TLOG_REPLICAS, useTlogReplicas()?\"1\":\"0\",\n              ZkStateReader.PULL_REPLICAS, String.valueOf(getPullReplicaCount()))));\n      zkClient.close();\n    }\n    \n    int numPullReplicas = getPullReplicaCount() * sliceCount;\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n      \n      if (numPullReplicas > 0) {\n        numPullReplicas--;\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n      } else if (useTlogReplicas()) {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, null);\n      }\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","e8c738236bd9fd6a12493d60844585ce125af35c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5","date":1498283633,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n\n      CollectionAdminResponse response;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.TLOG)\n              .process(cloudClient);\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, null);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.NRT)\n              .process(cloudClient);\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n        response = CollectionAdminRequest\n            .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n            .setNode(j.getNodeName())\n            .setType(Replica.Type.PULL)\n            .process(cloudClient);\n      }\n      jettys.add(j);\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.TLOG)\n              .process(cloudClient).isSuccess());\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, null);\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.NRT)\n              .process(cloudClient).isSuccess());\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n            .setNode(j.getNodeName())\n            .setType(Replica.Type.PULL)\n            .process(cloudClient).isSuccess());\n      }\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n\n      CollectionAdminResponse response;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.TLOG)\n              .process(cloudClient);\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, null);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.NRT)\n              .process(cloudClient);\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n        response = CollectionAdminRequest\n            .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n            .setNode(j.getNodeName())\n            .setType(Replica.Type.PULL)\n            .process(cloudClient);\n      }\n      jettys.add(j);\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating \" + DEFAULT_COLLECTION + \" with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \n              \"name\", DEFAULT_COLLECTION, \n              \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat(),\n              ZkStateReader.NRT_REPLICAS, useTlogReplicas()?\"0\":\"1\",\n              ZkStateReader.TLOG_REPLICAS, useTlogReplicas()?\"1\":\"0\",\n              ZkStateReader.PULL_REPLICAS, String.valueOf(getPullReplicaCount()))));\n      zkClient.close();\n    }\n    \n    int numPullReplicas = getPullReplicaCount() * sliceCount;\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n      \n      if (numPullReplicas > 0) {\n        numPullReplicas--;\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n      } else if (useTlogReplicas()) {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, null);\n      }\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n\n      CollectionAdminResponse response;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.TLOG)\n              .process(cloudClient);\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, null);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.NRT)\n              .process(cloudClient);\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n        response = CollectionAdminRequest\n            .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n            .setNode(j.getNodeName())\n            .setType(Replica.Type.PULL)\n            .process(cloudClient);\n      }\n      jettys.add(j);\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n\n      CollectionAdminResponse response;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.TLOG)\n              .process(cloudClient);\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, null);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.NRT)\n              .process(cloudClient);\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n        response = CollectionAdminRequest\n            .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n            .setNode(j.getNodeName())\n            .setType(Replica.Type.PULL)\n            .process(cloudClient);\n      }\n      jettys.add(j);\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":["e8c738236bd9fd6a12493d60844585ce125af35c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n\n      CollectionAdminResponse response;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.TLOG)\n              .process(cloudClient);\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, null);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.NRT)\n              .process(cloudClient);\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n        response = CollectionAdminRequest\n            .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n            .setNode(j.getNodeName())\n            .setType(Replica.Type.PULL)\n            .process(cloudClient);\n      }\n      jettys.add(j);\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n\n      CollectionAdminResponse response;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.TLOG)\n              .process(cloudClient);\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, null);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.NRT)\n              .process(cloudClient);\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n        response = CollectionAdminRequest\n            .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n            .setNode(j.getNodeName())\n            .setType(Replica.Type.PULL)\n            .process(cloudClient);\n      }\n      jettys.add(j);\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n\n      CollectionAdminResponse response;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.TLOG)\n              .process(cloudClient);\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, null);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.NRT)\n              .process(cloudClient);\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n        response = CollectionAdminRequest\n            .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n            .setNode(j.getNodeName())\n            .setType(Replica.Type.PULL)\n            .process(cloudClient);\n      }\n      jettys.add(j);\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating \" + DEFAULT_COLLECTION + \" with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getStateUpdateQueue(zkClient).offer(\n          Utils.toJSON(Utils.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \n              \"name\", DEFAULT_COLLECTION, \n              \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat(),\n              ZkStateReader.NRT_REPLICAS, useTlogReplicas()?\"0\":\"1\",\n              ZkStateReader.TLOG_REPLICAS, useTlogReplicas()?\"1\":\"0\",\n              ZkStateReader.PULL_REPLICAS, String.valueOf(getPullReplicaCount()))));\n      zkClient.close();\n    }\n    \n    int numPullReplicas = getPullReplicaCount() * sliceCount;\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n      \n      if (numPullReplicas > 0) {\n        numPullReplicas--;\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n      } else if (useTlogReplicas()) {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, null);\n      }\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS, (l,c) -> c != null && c.getSlices().size() == sliceCount);\n    \n    ForkJoinPool customThreadPool = new ForkJoinPool(12);\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> Collections.singleton(controlClient).parallelStream().forEach(c -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }));\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> Collections.singleton(controlClient).parallelStream().forEach(c -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }));\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> Collections.singleton(controlClient).parallelStream().forEach(c -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }));\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = new ForkJoinPool(12);\n    customThreadPool.submit(() -> createReplicaRequests.parallelStream().forEach(r -> {\n      CollectionAdminResponse response;\n      try {\n        response = (CollectionAdminResponse) r.process(cloudClient);\n      } catch (SolrServerException | IOException e) {\n        throw new RuntimeException(e);\n      }\n\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n    }));\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = new ForkJoinPool(12);\n    customThreadPool.submit(() -> createPullReplicaRequests.parallelStream().forEach(r -> {\n      CollectionAdminResponse response;\n      try {\n        response = (CollectionAdminResponse) r.process(cloudClient);\n      } catch (SolrServerException | IOException e) {\n        throw new RuntimeException(e);\n      }\n\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n    }));\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j;\n\n      CollectionAdminResponse response;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.TLOG);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.TLOG)\n              .process(cloudClient);\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT);\n          j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n              + cnt) : null, null, \"solrconfig.xml\", null, null);\n          response = CollectionAdminRequest\n              .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n              .setNode(j.getNodeName())\n              .setType(Replica.Type.NRT)\n              .process(cloudClient);\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL);\n        j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n            + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n        response = CollectionAdminRequest\n            .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((i%sliceCount)+1))\n            .setNode(j.getNodeName())\n            .setType(Replica.Type.PULL)\n            .process(cloudClient);\n      }\n      jettys.add(j);\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n    int expectedNumReplicas = numJettys;\n\n    // now wait until we see that the number of shards in the cluster state\n    // matches what we expect\n    int retries = 0;\n    while (numReplicas != expectedNumReplicas) {\n      numReplicas = getTotalReplicas(DEFAULT_COLLECTION);\n      if (numReplicas == expectedNumReplicas) break;\n      if (retries++ == 60) {\n        printLayoutOnTearDown = true;\n        fail(\"Number of replicas in the state does not match what we set:\" + numReplicas + \" vs \" + expectedNumReplicas);\n      }\n      Thread.sleep(500);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (numReplicas > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":["c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5","a9b4296bd51ca61b482138791478afdd0f7d3a3d","275019a81d0883a1db4560391b072d1fbe272ec4","61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18","date":1543645562,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS, (l,c) -> c != null && c.getSlices().size() == sliceCount);\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS, (l,c) -> c != null && c.getSlices().size() == sliceCount);\n    \n    ForkJoinPool customThreadPool = new ForkJoinPool(12);\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> Collections.singleton(controlClient).parallelStream().forEach(c -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }));\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> Collections.singleton(controlClient).parallelStream().forEach(c -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }));\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> Collections.singleton(controlClient).parallelStream().forEach(c -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }));\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = new ForkJoinPool(12);\n    customThreadPool.submit(() -> createReplicaRequests.parallelStream().forEach(r -> {\n      CollectionAdminResponse response;\n      try {\n        response = (CollectionAdminResponse) r.process(cloudClient);\n      } catch (SolrServerException | IOException e) {\n        throw new RuntimeException(e);\n      }\n\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n    }));\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = new ForkJoinPool(12);\n    customThreadPool.submit(() -> createPullReplicaRequests.parallelStream().forEach(r -> {\n      CollectionAdminResponse response;\n      try {\n        response = (CollectionAdminResponse) r.process(cloudClient);\n      } catch (SolrServerException | IOException e) {\n        throw new RuntimeException(e);\n      }\n\n      assertTrue(response.isSuccess());\n      String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n    }));\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS, (c) -> c != null && c.getSlices().size() == sliceCount);\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS, (l,c) -> c != null && c.getSlices().size() == sliceCount);\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":["e8c738236bd9fd6a12493d60844585ce125af35c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8c738236bd9fd6a12493d60844585ce125af35c","date":1564506878,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setStateFormat(Integer.parseInt(getStateFormat()))\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS, (c) -> c != null && c.getSlices().size() == sliceCount);\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","197bbedf08450ade98a11f4a0001448059666bec","7b366e7dd3172289251a86be96031af4002cd19c"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setStateFormat(Integer.parseInt(getStateFormat()))\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    assertEquals(0, CollectionAdminRequest\n        .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1)\n        .setStateFormat(Integer.parseInt(getStateFormat()))\n        .setCreateNodeSet(\"\")\n        .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS, (c) -> c != null && c.getSlices().size() == sliceCount);\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6afb0ba86024b96e8b34cfc2e15562239dc36360","date":1579768208,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setStateFormat(Integer.parseInt(getStateFormat()))\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setStateFormat(Integer.parseInt(getStateFormat()))\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setStateFormat(Integer.parseInt(getStateFormat()))\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setStateFormat(Integer.parseInt(getStateFormat()))\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setStateFormat(Integer.parseInt(getStateFormat()))\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\"\n          , getPullReplicaCount(), numOtherReplicas);\n    }\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} in shard {}\"\n                , i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1)); // logOk\n          }\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} for shard{}\"\n                , i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1)); // logOk\n          }\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1)); // logOk\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setStateFormat(Integer.parseInt(getStateFormat()))\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n    \n    log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\", getPullReplicaCount(), numOtherReplicas);\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          log.info(\"create jetty {} in directory {} of type {} in shard {}\", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\"\n          , getPullReplicaCount(), numOtherReplicas);\n    }\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} in shard {}\"\n                , i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1)); // logOk\n          }\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} for shard{}\"\n                , i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1)); // logOk\n          }\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1)); // logOk\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setStateFormat(Integer.parseInt(getStateFormat()))\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\"\n          , getPullReplicaCount(), numOtherReplicas);\n    }\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} in shard {}\"\n                , i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1)); // logOk\n          }\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} for shard{}\"\n                , i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1)); // logOk\n          }\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1)); // logOk\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":["e8c738236bd9fd6a12493d60844585ce125af35c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6809a6d7924df2c864d6a5863944aff9dfeb372c","date":1591826750,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    @SuppressWarnings({\"rawtypes\"})\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    @SuppressWarnings({\"rawtypes\"})\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\"\n          , getPullReplicaCount(), numOtherReplicas);\n    }\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} in shard {}\"\n                , i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1)); // logOk\n          }\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} for shard{}\"\n                , i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1)); // logOk\n          }\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1)); // logOk\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (@SuppressWarnings({\"rawtypes\"})CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (@SuppressWarnings({\"rawtypes\"})CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\"\n          , getPullReplicaCount(), numOtherReplicas);\n    }\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} in shard {}\"\n                , i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1)); // logOk\n          }\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} for shard{}\"\n                , i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1)); // logOk\n          }\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1)); // logOk\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    @SuppressWarnings({\"rawtypes\"})\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    @SuppressWarnings({\"rawtypes\"})\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\"\n          , getPullReplicaCount(), numOtherReplicas);\n    }\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} in shard {}\"\n                , i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1)); // nowarn\n          }\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} for shard{}\"\n                , i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1)); // nowarn\n          }\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1)); // nowarn\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (@SuppressWarnings({\"rawtypes\"})CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (@SuppressWarnings({\"rawtypes\"})CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());\n    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());\n    @SuppressWarnings({\"rawtypes\"})\n    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    @SuppressWarnings({\"rawtypes\"})\n    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());\n    StringBuilder sb = new StringBuilder();\n\n    // HACK: Don't be fooled by the replication factor of '1'...\n    //\n    // This CREATE command asks for a repFactor of 1, but uses an empty nodeSet.\n    // This allows this method to create a collection with numShards == sliceCount,\n    // but no actual cores ... yet.  The actual replicas are added later (once the actual\n    // jetty instances are started)\n    assertEquals(0, CollectionAdminRequest\n                 .createCollection(DEFAULT_COLLECTION, \"conf1\", sliceCount, 1) // not real rep factor!\n                 .setCreateNodeSet(\"\") // empty node set prevents creation of cores\n                 .process(cloudClient).getStatus());\n    \n    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS,\n                             // expect sliceCount active shards, but no active replicas\n                             SolrCloudTestCase.activeClusterShape(sliceCount, 0));\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating jetty instances pullReplicaCount={} numOtherReplicas={}\"\n          , getPullReplicaCount(), numOtherReplicas);\n    }\n    \n    int addedReplicas = 0;\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      int currentI = i;\n      if (numOtherReplicas > 0) {\n        numOtherReplicas--;\n        if (useTlogReplicas()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} in shard {}\"\n                , i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1)); // logOk\n          }\n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.TLOG);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\" + ((currentI % sliceCount) + 1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.TLOG));\n\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n\n          addedReplicas++;\n        } else {\n          if (log.isInfoEnabled()) {\n            log.info(\"create jetty {} in directory {} of type {} for shard{}\"\n                , i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1)); // logOk\n          }\n          \n          customThreadPool.submit(() -> {\n            try {\n              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                  + cnt) : null, null, \"solrconfig.xml\", null, null);\n              j.start();\n              jettys.add(j);\n              waitForLiveNode(j);\n              createReplicaRequests.add(CollectionAdminRequest\n                  .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                  .setNode(j.getNodeName())\n                  .setType(Replica.Type.NRT));\n              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n              SolrClient client = createNewSolrClient(j.getLocalPort());\n              clients.add(client);\n            } catch (IOException e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            } catch (Exception e) {\n              e.printStackTrace();\n              throw new RuntimeException(e);\n            }\n          });\n          \n          addedReplicas++;\n        }\n      } else {\n        log.info(\"create jetty {} in directory {} of type {} for shard{}\", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1)); // logOk\n        customThreadPool.submit(() -> {\n          try {\n            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n                + cnt) : null, null, \"solrconfig.xml\", null, Replica.Type.PULL);\n            j.start();\n            jettys.add(j);\n            waitForLiveNode(j);\n            createPullReplicaRequests.add(CollectionAdminRequest\n                .addReplicaToShard(DEFAULT_COLLECTION, \"shard\"+((currentI%sliceCount)+1))\n                .setNode(j.getNodeName())\n                .setType(Replica.Type.PULL));\n            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));\n            SolrClient client = createNewSolrClient(j.getLocalPort());\n            clients.add(client);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        });\n        addedReplicas++;\n      }\n\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createReplicaRequests\"));\n    \n    for (@SuppressWarnings({\"rawtypes\"})CollectionAdminRequest r : createReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n   \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil\n        .newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"createPullReplicaRequests\"));\n    for (@SuppressWarnings({\"rawtypes\"})CollectionAdminRequest r : createPullReplicaRequests) {\n      customThreadPool.submit(() -> {\n        CollectionAdminResponse response;\n        try {\n          response = (CollectionAdminResponse) r.process(cloudClient);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        assertTrue(response.isSuccess());\n        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();\n      });\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    // make sure we have a leader for each shard\n    for (int i = 1; i <= sliceCount; i++) {\n      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n    }\n\n    if (sliceCount > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["b693a83132c9e45afcd564fd65a25b60ed80388b","19498030e0adab22f604f935cae3c03dcf0952a6"],"197bbedf08450ade98a11f4a0001448059666bec":["c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["28288370235ed02234a64753cdbf0c6ec096304a"],"7b366e7dd3172289251a86be96031af4002cd19c":["0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"e8c738236bd9fd6a12493d60844585ce125af35c":["7b366e7dd3172289251a86be96031af4002cd19c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","61c45e99cf6676da48f19d7511c73712ad39402b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","197bbedf08450ade98a11f4a0001448059666bec"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"be320990bdc77e643388fa801e75017f19289c42":["af2638813028b254a88b418ebeafb541afb49653"],"ab68488225b6a6c357dda72ed11dedca9914a192":["af2638813028b254a88b418ebeafb541afb49653","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6809a6d7924df2c864d6a5863944aff9dfeb372c":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["be320990bdc77e643388fa801e75017f19289c42"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["61c45e99cf6676da48f19d7511c73712ad39402b"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["275019a81d0883a1db4560391b072d1fbe272ec4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"28288370235ed02234a64753cdbf0c6ec096304a":["61c45e99cf6676da48f19d7511c73712ad39402b","197bbedf08450ade98a11f4a0001448059666bec"],"f8061ddd97f3352007d927dae445884a6f3d857b":["7b366e7dd3172289251a86be96031af4002cd19c","e8c738236bd9fd6a12493d60844585ce125af35c"],"19498030e0adab22f604f935cae3c03dcf0952a6":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["af2638813028b254a88b418ebeafb541afb49653"],"6afb0ba86024b96e8b34cfc2e15562239dc36360":["e8c738236bd9fd6a12493d60844585ce125af35c"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"275019a81d0883a1db4560391b072d1fbe272ec4":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["197bbedf08450ade98a11f4a0001448059666bec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18"],"7b366e7dd3172289251a86be96031af4002cd19c":["e8c738236bd9fd6a12493d60844585ce125af35c","f8061ddd97f3352007d927dae445884a6f3d857b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"e8c738236bd9fd6a12493d60844585ce125af35c":["f8061ddd97f3352007d927dae445884a6f3d857b","6afb0ba86024b96e8b34cfc2e15562239dc36360"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18":["7b366e7dd3172289251a86be96031af4002cd19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","2c30e4c1cee08b3b229a77991882594fe7250b66","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"be320990bdc77e643388fa801e75017f19289c42":["61c45e99cf6676da48f19d7511c73712ad39402b"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","275019a81d0883a1db4560391b072d1fbe272ec4"],"6809a6d7924df2c864d6a5863944aff9dfeb372c":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"28288370235ed02234a64753cdbf0c6ec096304a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"6afb0ba86024b96e8b34cfc2e15562239dc36360":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"275019a81d0883a1db4560391b072d1fbe272ec4":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","f8061ddd97f3352007d927dae445884a6f3d857b","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}