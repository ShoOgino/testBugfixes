{"path":"solr/core/src/java/org/apache/solr/util/DOMUtil#toMapExcept(NamedNodeMap,String...).mjava","commits":[{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DOMUtil#toMapExcept(NamedNodeMap,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#toMapExcept(NamedNodeMap,String...).mjava","sourceNew":"  public static Map<String,String> toMapExcept(NamedNodeMap attrs, String... exclusions) {\n    Map<String,String> args = new HashMap<String,String>();\n    outer: for (int j=0; j<attrs.getLength(); j++) {\n      Node attr = attrs.item(j);\n      String attrName = attr.getNodeName();\n      for (String ex : exclusions)\n        if (ex.equals(attrName)) continue outer;\n      String val = attr.getNodeValue();\n      args.put(attrName, val);\n    }\n    return args;\n  }\n\n","sourceOld":"  public static Map<String,String> toMapExcept(NamedNodeMap attrs, String... exclusions) {\n    Map<String,String> args = new HashMap<String,String>();\n    outer: for (int j=0; j<attrs.getLength(); j++) {\n      Node attr = attrs.item(j);\n      String attrName = attr.getNodeName();\n      for (String ex : exclusions)\n        if (ex.equals(attrName)) continue outer;\n      String val = attr.getNodeValue();\n      args.put(attrName, val);\n    }\n    return args;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01d76482f7852933b2bd5e38ada012a2f2578b1c","date":1348090450,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DOMUtil#toMapExcept(NamedNodeMap,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DOMUtil#toMapExcept(NamedNodeMap,String...).mjava","sourceNew":"  public static Map<String,String> toMapExcept(NamedNodeMap attrs, String... exclusions) {\n    Map<String,String> args = new HashMap<String,String>();\n    outer: for (int j=0; j<attrs.getLength(); j++) {\n      Node attr = attrs.item(j);\n\n      // automaticly exclude things in the xml namespace, ie: xml:base\n      if (XML_RESERVED_PREFIX.equals(attr.getPrefix())) continue outer;\n\n      String attrName = attr.getNodeName();\n      for (String ex : exclusions)\n        if (ex.equals(attrName)) continue outer;\n      String val = attr.getNodeValue();\n      args.put(attrName, val);\n    }\n    return args;\n  }\n\n","sourceOld":"  public static Map<String,String> toMapExcept(NamedNodeMap attrs, String... exclusions) {\n    Map<String,String> args = new HashMap<String,String>();\n    outer: for (int j=0; j<attrs.getLength(); j++) {\n      Node attr = attrs.item(j);\n      String attrName = attr.getNodeName();\n      for (String ex : exclusions)\n        if (ex.equals(attrName)) continue outer;\n      String val = attr.getNodeValue();\n      args.put(attrName, val);\n    }\n    return args;\n  }\n\n","bugFix":null,"bugIntro":["7602e63987582091a0e432f8d8f7619d2206fab7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7602e63987582091a0e432f8d8f7619d2206fab7","date":1361393626,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DOMUtil#toMapExcept(NamedNodeMap,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DOMUtil#toMapExcept(NamedNodeMap,String...).mjava","sourceNew":"  public static Map<String,String> toMapExcept(NamedNodeMap attrs, String... exclusions) {\n    Map<String,String> args = new HashMap<String,String>();\n    outer: for (int j=0; j<attrs.getLength(); j++) {\n      Node attr = attrs.item(j);\n\n      // automatically exclude things in the xml namespace, ie: xml:base\n      if (XML_RESERVED_PREFIX.equals(attr.getPrefix())) continue outer;\n\n      String attrName = attr.getNodeName();\n      for (String ex : exclusions)\n        if (ex.equals(attrName)) continue outer;\n      String val = attr.getNodeValue();\n      args.put(attrName, val);\n    }\n    return args;\n  }\n\n","sourceOld":"  public static Map<String,String> toMapExcept(NamedNodeMap attrs, String... exclusions) {\n    Map<String,String> args = new HashMap<String,String>();\n    outer: for (int j=0; j<attrs.getLength(); j++) {\n      Node attr = attrs.item(j);\n\n      // automaticly exclude things in the xml namespace, ie: xml:base\n      if (XML_RESERVED_PREFIX.equals(attr.getPrefix())) continue outer;\n\n      String attrName = attr.getNodeName();\n      for (String ex : exclusions)\n        if (ex.equals(attrName)) continue outer;\n      String val = attr.getNodeValue();\n      args.put(attrName, val);\n    }\n    return args;\n  }\n\n","bugFix":["01d76482f7852933b2bd5e38ada012a2f2578b1c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DOMUtil#toMapExcept(NamedNodeMap,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DOMUtil#toMapExcept(NamedNodeMap,String...).mjava","sourceNew":"  public static Map<String,String> toMapExcept(NamedNodeMap attrs, String... exclusions) {\n    Map<String,String> args = new HashMap<>();\n    outer: for (int j=0; j<attrs.getLength(); j++) {\n      Node attr = attrs.item(j);\n\n      // automatically exclude things in the xml namespace, ie: xml:base\n      if (XML_RESERVED_PREFIX.equals(attr.getPrefix())) continue outer;\n\n      String attrName = attr.getNodeName();\n      for (String ex : exclusions)\n        if (ex.equals(attrName)) continue outer;\n      String val = attr.getNodeValue();\n      args.put(attrName, val);\n    }\n    return args;\n  }\n\n","sourceOld":"  public static Map<String,String> toMapExcept(NamedNodeMap attrs, String... exclusions) {\n    Map<String,String> args = new HashMap<String,String>();\n    outer: for (int j=0; j<attrs.getLength(); j++) {\n      Node attr = attrs.item(j);\n\n      // automatically exclude things in the xml namespace, ie: xml:base\n      if (XML_RESERVED_PREFIX.equals(attr.getPrefix())) continue outer;\n\n      String attrName = attr.getNodeName();\n      for (String ex : exclusions)\n        if (ex.equals(attrName)) continue outer;\n      String val = attr.getNodeValue();\n      args.put(attrName, val);\n    }\n    return args;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23a18981fcc2648fd6e83e9e84e8fa023eb0484b","date":1602334330,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#toMapExcept(NamedNodeMap,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DOMUtil#toMapExcept(NamedNodeMap,String...).mjava","sourceNew":"  public static Map<String,String> toMapExcept(NamedNodeMap attrs, String... exclusions) {\n    Map<String,String> args = new HashMap<>();\n    outer: for (int j=0; j<attrs.getLength(); j++) {\n      Node attr = attrs.item(j);\n\n      // automatically exclude things in the xml namespace, ie: xml:base\n      if (XML_RESERVED_PREFIX.equals(attr.getPrefix())) continue outer;\n\n      String attrName = attr.getNodeName();\n      for (String ex : exclusions)\n        if (ex.equals(attrName)) continue outer;\n      String val = attr.getNodeValue();\n      args.put(attrName, val);\n    }\n    return args;\n  }\n\n","sourceOld":"  public static Map<String,String> toMapExcept(NamedNodeMap attrs, String... exclusions) {\n    Map<String,String> args = new HashMap<>();\n    outer: for (int j=0; j<attrs.getLength(); j++) {\n      Node attr = attrs.item(j);\n\n      // automatically exclude things in the xml namespace, ie: xml:base\n      if (XML_RESERVED_PREFIX.equals(attr.getPrefix())) continue outer;\n\n      String attrName = attr.getNodeName();\n      for (String ex : exclusions)\n        if (ex.equals(attrName)) continue outer;\n      String val = attr.getNodeValue();\n      args.put(attrName, val);\n    }\n    return args;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7602e63987582091a0e432f8d8f7619d2206fab7"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"01d76482f7852933b2bd5e38ada012a2f2578b1c":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"7602e63987582091a0e432f8d8f7619d2206fab7":["01d76482f7852933b2bd5e38ada012a2f2578b1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"]},"commit2Childs":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["01d76482f7852933b2bd5e38ada012a2f2578b1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"01d76482f7852933b2bd5e38ada012a2f2578b1c":["7602e63987582091a0e432f8d8f7619d2206fab7"],"7602e63987582091a0e432f8d8f7619d2206fab7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}