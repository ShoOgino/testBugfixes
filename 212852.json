{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersAndScoreRTG().mjava","commits":[{"id":"934e1c7ca2823f3ec2758cc0f0912eac404856f2","date":1467837741,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersAndScoreRTG().mjava","pathOld":"/dev/null","sourceNew":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-9286\")\n  public void testAugmentersAndScoreRTG() throws Exception {\n    // if we use RTG (committed or otherwise) score should be ignored\n    for (String id : Arrays.asList(\"42\",\"99\")) {\n      // NOTE: once testDocIdAugmenterRTG can pass, [docid] should be tested here as well.\n      SolrDocument doc = getRandClient(random()).getById(id, params(\"fl\",\"x_alias:[value v=10 t=int],score\"));\n      String msg = id + \" => \" + doc;\n      \n      assertEquals(msg, 1, doc.size());\n      // assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer); // TODO\n      assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n      assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n\n      for (SolrParams p : Arrays.asList(params(\"fl\",\"x_alias:[value v=10 t=int],[explain],score\"),\n                                        params(\"fl\",\"x_alias:[value v=10 t=int],[explain]\",\"fl\",\"score\"),\n                                        params(\"fl\",\"x_alias:[value v=10 t=int]\",\"fl\",\"[explain]\",\"fl\",\"score\"))) {\n        \n        doc = getRandClient(random()).getById(id, p);\n        msg = id + \": \" + p + \" => \" + doc;\n        \n        assertEquals(msg, 1, doc.size());\n        assertTrue(msg, doc.getFieldValue(\"id\") instanceof String);\n        // assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer); // TODO\n        assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n        assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n        // RTG: [explain] and score should be missing (ignored)\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["76b65cf789129cacd84e977b8f1538aec29e0281"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76b65cf789129cacd84e977b8f1538aec29e0281","date":1470165799,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersAndScoreRTG().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersAndScoreRTG().mjava","sourceNew":"  public void testAugmentersAndScoreRTG() throws Exception {\n    // if we use RTG (committed or otherwise) score should be ignored\n    for (String id : Arrays.asList(\"42\",\"99\")) {\n      SolrDocument doc = getRandClient(random()).getById(id, params(\"fl\",\"x_alias:[value v=10 t=int],score\"));\n      String msg = id + \" => \" + doc;\n      \n      assertEquals(msg, 1, doc.size());\n      assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n      assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n\n      for (SolrParams p : Arrays.asList(params(\"fl\",\"d_alias:[docid],x_alias:[value v=10 t=int],[explain],score\"),\n                                        params(\"fl\",\"d_alias:[docid],x_alias:[value v=10 t=int],[explain]\",\"fl\",\"score\"),\n                                        params(\"fl\",\"d_alias:[docid]\",\"fl\",\"x_alias:[value v=10 t=int]\",\"fl\",\"[explain]\",\"fl\",\"score\"))) {\n        \n        doc = getRandClient(random()).getById(id, p);\n        msg = id + \": \" + p + \" => \" + doc;\n        \n        assertEquals(msg, 2, doc.size());\n        assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n        assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n        // RTG: [explain] and score should be missing (ignored)\n        assertTrue(msg, doc.getFieldValue(\"d_alias\") instanceof Integer);\n        assertTrue(msg, -1 <= ((Integer)doc.getFieldValue(\"d_alias\")).intValue());\n      }\n    }\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-9286\")\n  public void testAugmentersAndScoreRTG() throws Exception {\n    // if we use RTG (committed or otherwise) score should be ignored\n    for (String id : Arrays.asList(\"42\",\"99\")) {\n      // NOTE: once testDocIdAugmenterRTG can pass, [docid] should be tested here as well.\n      SolrDocument doc = getRandClient(random()).getById(id, params(\"fl\",\"x_alias:[value v=10 t=int],score\"));\n      String msg = id + \" => \" + doc;\n      \n      assertEquals(msg, 1, doc.size());\n      // assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer); // TODO\n      assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n      assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n\n      for (SolrParams p : Arrays.asList(params(\"fl\",\"x_alias:[value v=10 t=int],[explain],score\"),\n                                        params(\"fl\",\"x_alias:[value v=10 t=int],[explain]\",\"fl\",\"score\"),\n                                        params(\"fl\",\"x_alias:[value v=10 t=int]\",\"fl\",\"[explain]\",\"fl\",\"score\"))) {\n        \n        doc = getRandClient(random()).getById(id, p);\n        msg = id + \": \" + p + \" => \" + doc;\n        \n        assertEquals(msg, 1, doc.size());\n        assertTrue(msg, doc.getFieldValue(\"id\") instanceof String);\n        // assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer); // TODO\n        assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n        assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n        // RTG: [explain] and score should be missing (ignored)\n      }\n    }\n  }\n\n","bugFix":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersAndScoreRTG().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersAndScoreRTG().mjava","sourceNew":"  public void testAugmentersAndScoreRTG() throws Exception {\n    // if we use RTG (committed or otherwise) score should be ignored\n    for (String id : Arrays.asList(\"42\",\"99\")) {\n      SolrDocument doc = getRandClient(random()).getById(id, params(\"fl\",\"x_alias:[value v=10 t=int],score\"));\n      String msg = id + \" => \" + doc;\n      \n      assertEquals(msg, 1, doc.size());\n      assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n      assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n\n      for (SolrParams p : Arrays.asList(params(\"fl\",\"d_alias:[docid],x_alias:[value v=10 t=int],[explain],score\"),\n                                        params(\"fl\",\"d_alias:[docid],x_alias:[value v=10 t=int],[explain]\",\"fl\",\"score\"),\n                                        params(\"fl\",\"d_alias:[docid]\",\"fl\",\"x_alias:[value v=10 t=int]\",\"fl\",\"[explain]\",\"fl\",\"score\"))) {\n        \n        doc = getRandClient(random()).getById(id, p);\n        msg = id + \": \" + p + \" => \" + doc;\n        \n        assertEquals(msg, 2, doc.size());\n        assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n        assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n        // RTG: [explain] and score should be missing (ignored)\n        assertTrue(msg, doc.getFieldValue(\"d_alias\") instanceof Integer);\n        assertTrue(msg, -1 <= ((Integer)doc.getFieldValue(\"d_alias\")).intValue());\n      }\n    }\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-9286\")\n  public void testAugmentersAndScoreRTG() throws Exception {\n    // if we use RTG (committed or otherwise) score should be ignored\n    for (String id : Arrays.asList(\"42\",\"99\")) {\n      // NOTE: once testDocIdAugmenterRTG can pass, [docid] should be tested here as well.\n      SolrDocument doc = getRandClient(random()).getById(id, params(\"fl\",\"x_alias:[value v=10 t=int],score\"));\n      String msg = id + \" => \" + doc;\n      \n      assertEquals(msg, 1, doc.size());\n      // assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer); // TODO\n      assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n      assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n\n      for (SolrParams p : Arrays.asList(params(\"fl\",\"x_alias:[value v=10 t=int],[explain],score\"),\n                                        params(\"fl\",\"x_alias:[value v=10 t=int],[explain]\",\"fl\",\"score\"),\n                                        params(\"fl\",\"x_alias:[value v=10 t=int]\",\"fl\",\"[explain]\",\"fl\",\"score\"))) {\n        \n        doc = getRandClient(random()).getById(id, p);\n        msg = id + \": \" + p + \" => \" + doc;\n        \n        assertEquals(msg, 1, doc.size());\n        assertTrue(msg, doc.getFieldValue(\"id\") instanceof String);\n        // assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer); // TODO\n        assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n        assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n        // RTG: [explain] and score should be missing (ignored)\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersAndScoreRTG().mjava","pathOld":"/dev/null","sourceNew":"  public void testAugmentersAndScoreRTG() throws Exception {\n    // if we use RTG (committed or otherwise) score should be ignored\n    for (String id : Arrays.asList(\"42\",\"99\")) {\n      SolrDocument doc = getRandClient(random()).getById(id, params(\"fl\",\"x_alias:[value v=10 t=int],score\"));\n      String msg = id + \" => \" + doc;\n      \n      assertEquals(msg, 1, doc.size());\n      assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n      assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n\n      for (SolrParams p : Arrays.asList(params(\"fl\",\"d_alias:[docid],x_alias:[value v=10 t=int],[explain],score\"),\n                                        params(\"fl\",\"d_alias:[docid],x_alias:[value v=10 t=int],[explain]\",\"fl\",\"score\"),\n                                        params(\"fl\",\"d_alias:[docid]\",\"fl\",\"x_alias:[value v=10 t=int]\",\"fl\",\"[explain]\",\"fl\",\"score\"))) {\n        \n        doc = getRandClient(random()).getById(id, p);\n        msg = id + \": \" + p + \" => \" + doc;\n        \n        assertEquals(msg, 2, doc.size());\n        assertTrue(msg, doc.getFieldValue(\"x_alias\") instanceof Integer);\n        assertEquals(msg, 10, doc.getFieldValue(\"x_alias\"));\n        // RTG: [explain] and score should be missing (ignored)\n        assertTrue(msg, doc.getFieldValue(\"d_alias\") instanceof Integer);\n        assertTrue(msg, -1 <= ((Integer)doc.getFieldValue(\"d_alias\")).intValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","76b65cf789129cacd84e977b8f1538aec29e0281"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["934e1c7ca2823f3ec2758cc0f0912eac404856f2","76b65cf789129cacd84e977b8f1538aec29e0281"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76b65cf789129cacd84e977b8f1538aec29e0281"],"76b65cf789129cacd84e977b8f1538aec29e0281":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"]},"commit2Childs":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","76b65cf789129cacd84e977b8f1538aec29e0281"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["934e1c7ca2823f3ec2758cc0f0912eac404856f2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"76b65cf789129cacd84e977b8f1538aec29e0281":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}