{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<10;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      // We expect disk full exceptions in the merge threads\n      cms.setSuppressExceptions();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(4);\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}