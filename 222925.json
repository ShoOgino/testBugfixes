{"path":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","commits":[{"id":"441e4370677ea6e64691231510de2a90b67dd2fb","date":1227656336,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","pathOld":"/dev/null","sourceNew":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    PayloadSpans spans = snq.getPayloadSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set payloadSet = new HashSet();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection payloads = spans.getPayload();\n\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          payloadSet.add(new String((byte[]) it.next()));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      Iterator pit = payloadSet.iterator();\n      while (pit.hasNext()) {\n        System.out.println(\"match:\" + pit.next());\n      }\n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set payloadSet = new HashSet();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection payloads = spans.getPayload();\n\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          payloadSet.add(new String((byte[]) it.next()));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      Iterator pit = payloadSet.iterator();\n      while (pit.hasNext()) {\n        System.out.println(\"match:\" + pit.next());\n      }\n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    PayloadSpans spans = snq.getPayloadSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set payloadSet = new HashSet();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection payloads = spans.getPayload();\n\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          payloadSet.add(new String((byte[]) it.next()));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      Iterator pit = payloadSet.iterator();\n      while (pit.hasNext()) {\n        System.out.println(\"match:\" + pit.next());\n      }\n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set payloadSet = new HashSet();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection payloads = spans.getPayload();\n\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          payloadSet.add(new String((byte[]) it.next()));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      Iterator pit = payloadSet.iterator();\n      while (pit.hasNext()) {\n        System.out.println(\"match:\" + pit.next());\n      }\n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set payloadSet = new HashSet();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection payloads = spans.getPayload();\n\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          payloadSet.add(new String((byte[]) it.next()));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      Iterator pit = payloadSet.iterator();\n      while (pit.hasNext()) {\n        System.out.println(\"match:\" + pit.next());\n      }\n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set payloadSet = new HashSet();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection payloads = spans.getPayload();\n\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          payloadSet.add(new String((byte[]) it.next()));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      Iterator pit = payloadSet.iterator();\n      while (pit.hasNext()) {\n        System.out.println(\"match:\" + pit.next());\n      }\n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set payloadSet = new HashSet();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection payloads = spans.getPayload();\n\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          payloadSet.add(new String((byte[]) it.next()));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      Iterator pit = payloadSet.iterator();\n      while (pit.hasNext()) {\n        System.out.println(\"match:\" + pit.next());\n      }\n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      for (final String payload : payloadSet)\n        System.out.println(\"match:\" +  payload);\n      \n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set payloadSet = new HashSet();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection payloads = spans.getPayload();\n\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          payloadSet.add(new String((byte[]) it.next()));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      Iterator pit = payloadSet.iterator();\n      while (pit.hasNext()) {\n        System.out.println(\"match:\" + pit.next());\n      }\n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      for (final String payload : payloadSet)\n        System.out.println(\"match:\" +  payload);\n      \n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      for (final String payload : payloadSet)\n        System.out.println(\"match:\" +  payload);\n      \n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      for (final String payload : payloadSet)\n        System.out.println(\"match:\" +  payload);\n      \n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      for (final String payload : payloadSet)\n        System.out.println(\"match:\" +  payload);\n      \n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      for (final String payload : payloadSet)\n        System.out.println(\"match:\" +  payload);\n      \n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new TestPayloadAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      for (final String payload : payloadSet)\n        System.out.println(\"match:\" +  payload);\n      \n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(VERBOSE) {\n      for (final String payload : payloadSet)\n        System.out.println(\"match:\" +  payload);\n      \n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(DEBUG) {\n      for (final String payload : payloadSet)\n        System.out.println(\"match:\" +  payload);\n      \n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch3().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(VERBOSE) {\n      for (final String payload : payloadSet)\n        System.out.println(\"match:\" +  payload);\n      \n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"j k a l f k k p a t a k l k t a\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    if(VERBOSE) {\n      for (final String payload : payloadSet)\n        System.out.println(\"match:\" +  payload);\n      \n    }\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"441e4370677ea6e64691231510de2a90b67dd2fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["ff93c6759a7da468c20c64fb459f85bccd0af370","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["441e4370677ea6e64691231510de2a90b67dd2fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"441e4370677ea6e64691231510de2a90b67dd2fb":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["441e4370677ea6e64691231510de2a90b67dd2fb"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}