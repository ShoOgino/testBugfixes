{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDoubleOffsetCounting().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void xxxtestDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoubleOffsetCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDoubleOffsetCounting().mjava","sourceNew":"  // LUCENE-1442\n  public void testDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1442\n  public void xxxtestDoubleOffsetCounting() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"abcd\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(4, termOffsets[1].getStartOffset());\n    assertEquals(8, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}