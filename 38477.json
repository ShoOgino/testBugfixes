{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#docs(Bits,DocsEnum,boolean).mjava","commits":[{"id":"172cf08877d0e6738a51edd238c4dc5ffc088345","date":1342794823,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n        if (needsFreqs && !hasFreq) {\n          return null;\n        }\n\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n        if (needsFreqs && !hasFreq) {\n          return null;\n        }\n\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n        if (needsFreqs && !hasFreq) {\n          return null;\n        }\n\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n        if (needsFreqs && !hasFreq) {\n          return null;\n        }\n\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":null,"sourceOld":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n        if (needsFreqs && !hasFreq) {\n          return null;\n        }\n\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":null,"sourceOld":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n        if (needsFreqs && !hasFreq) {\n          return null;\n        }\n\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","172cf08877d0e6738a51edd238c4dc5ffc088345"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","02331260bb246364779cb6f04919ca47900d01bb"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","172cf08877d0e6738a51edd238c4dc5ffc088345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["172cf08877d0e6738a51edd238c4dc5ffc088345"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","172cf08877d0e6738a51edd238c4dc5ffc088345","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","02331260bb246364779cb6f04919ca47900d01bb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}