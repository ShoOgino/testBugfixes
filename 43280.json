{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#findEndTag().mjava","commits":[{"id":"9b31138e7b06f84b96de212b2102103cb629ee68","date":1272962032,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#findEndTag().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#findEndTag().mjava","sourceNew":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#findEndTag().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#findEndTag().mjava","sourceNew":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b31138e7b06f84b96de212b2102103cb629ee68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9b31138e7b06f84b96de212b2102103cb629ee68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"9b31138e7b06f84b96de212b2102103cb629ee68":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b31138e7b06f84b96de212b2102103cb629ee68"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}