{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        v.stateWatchers.clear();\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        watcher.onStateChanged(liveNodes, collectionState);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        v.stateWatchers.clear();\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        watcher.onStateChanged(liveNodes, collectionState);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cd4080fba20c774e4183c2ceb96ede05e5fb779","date":1463477646,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","sourceNew":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        v.stateWatchers.clear();\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        if (watcher.onStateChanged(liveNodes, collectionState) == false) {\n          registerCollectionStateWatcher(collection, watcher);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        v.stateWatchers.clear();\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        watcher.onStateChanged(liveNodes, collectionState);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77ce1a4cb826c58d16a217558a9b746368d1351b","date":1463665766,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","sourceNew":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        if (watcher.onStateChanged(liveNodes, collectionState)) {\n          removeCollectionStateWatcher(collection, watcher);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        v.stateWatchers.clear();\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        if (watcher.onStateChanged(liveNodes, collectionState) == false) {\n          registerCollectionStateWatcher(collection, watcher);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        if (watcher.onStateChanged(liveNodes, collectionState)) {\n          removeCollectionStateWatcher(collection, watcher);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        if (watcher.onStateChanged(liveNodes, collectionState)) {\n          removeCollectionStateWatcher(collection, watcher);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28ba172425e443e0f08a49de6d73586c418d7251","date":1523970991,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","sourceNew":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        try {\n          if (watcher.onStateChanged(liveNodes, collectionState)) {\n            removeCollectionStateWatcher(collection, watcher);\n          }\n        } catch (Throwable throwable) {\n          LOG.warn(\"Error on calling watcher\", throwable);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        if (watcher.onStateChanged(liveNodes, collectionState)) {\n          removeCollectionStateWatcher(collection, watcher);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec9197593be550388d24a9ff242fbe19f90cce61","date":1524015606,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","sourceNew":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        try {\n          if (watcher.onStateChanged(liveNodes, collectionState)) {\n            removeCollectionStateWatcher(collection, watcher);\n          }\n        } catch (Exception exception) {\n          LOG.warn(\"Error on calling watcher\", exception);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        try {\n          if (watcher.onStateChanged(liveNodes, collectionState)) {\n            removeCollectionStateWatcher(collection, watcher);\n          }\n        } catch (Throwable throwable) {\n          LOG.warn(\"Error on calling watcher\", throwable);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","sourceNew":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        try {\n          if (watcher.onStateChanged(liveNodes, collectionState)) {\n            removeCollectionStateWatcher(collection, watcher);\n          }\n        } catch (Exception exception) {\n          log.warn(\"Error on calling watcher\", exception);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        try {\n          if (watcher.onStateChanged(liveNodes, collectionState)) {\n            removeCollectionStateWatcher(collection, watcher);\n          }\n        } catch (Exception exception) {\n          LOG.warn(\"Error on calling watcher\", exception);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.Notification#run().mjava","sourceNew":"    @Override\n    public void run() {\n      List<DocCollectionWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (DocCollectionWatcher watcher : watchers) {\n        try {\n          if (watcher.onStateChanged(collectionState)) {\n            removeDocCollectionWatcher(collection, watcher);\n          }\n        } catch (Exception exception) {\n          log.warn(\"Error on calling watcher\", exception);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        try {\n          if (watcher.onStateChanged(liveNodes, collectionState)) {\n            removeCollectionStateWatcher(collection, watcher);\n          }\n        } catch (Exception exception) {\n          log.warn(\"Error on calling watcher\", exception);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec9197593be550388d24a9ff242fbe19f90cce61":["28ba172425e443e0f08a49de6d73586c418d7251"],"77ce1a4cb826c58d16a217558a9b746368d1351b":["5cd4080fba20c774e4183c2ceb96ede05e5fb779"],"7b366e7dd3172289251a86be96031af4002cd19c":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"28ba172425e443e0f08a49de6d73586c418d7251":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["ec9197593be550388d24a9ff242fbe19f90cce61"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","77ce1a4cb826c58d16a217558a9b746368d1351b"]},"commit2Childs":{"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["77ce1a4cb826c58d16a217558a9b746368d1351b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ec9197593be550388d24a9ff242fbe19f90cce61":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"77ce1a4cb826c58d16a217558a9b746368d1351b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["5cd4080fba20c774e4183c2ceb96ede05e5fb779"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28ba172425e443e0f08a49de6d73586c418d7251":["ec9197593be550388d24a9ff242fbe19f90cce61"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["7b366e7dd3172289251a86be96031af4002cd19c"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["28ba172425e443e0f08a49de6d73586c418d7251","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}