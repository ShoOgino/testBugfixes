{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","sourceNew":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean maybeMerge) throws IOException {\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n    if (flushingDWPT != null) {\n      maybeMerge |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        maybeMerge |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return maybeMerge;\n  }\n\n","sourceOld":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean maybeMerge) throws IOException {\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n    if (flushingDWPT != null) {\n      maybeMerge |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        maybeMerge |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return maybeMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","sourceNew":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","sourceOld":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean maybeMerge) throws IOException {\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n    if (flushingDWPT != null) {\n      maybeMerge |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        maybeMerge |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return maybeMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","sourceNew":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","sourceOld":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean maybeMerge) throws IOException {\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n    if (flushingDWPT != null) {\n      maybeMerge |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        maybeMerge |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return maybeMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","sourceNew":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","sourceOld":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean maybeMerge) throws IOException {\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n    if (flushingDWPT != null) {\n      maybeMerge |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        maybeMerge |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return maybeMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","sourceNew":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException, AbortingException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","sourceOld":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1ea5763a93795952100d48e19c48f19777c552c","date":1512660172,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","sourceNew":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException, AbortingException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else if (config.checkPendingFlushOnUpdate) {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","sourceOld":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException, AbortingException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","sourceNew":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException, AbortingException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else if (config.checkPendingFlushOnUpdate) {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","sourceOld":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException, AbortingException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"845b760a99e5f369fcd0a5d723a87b8def6a3f56","date":1521117993,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","sourceNew":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else if (config.checkPendingFlushOnUpdate) {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","sourceOld":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException, AbortingException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else if (config.checkPendingFlushOnUpdate) {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34067df01cbbefc83d0b316037fe4e10d89ba6a3","date":1559054674,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","sourceNew":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException {\n    hasEvents |= applyAllDeletes();\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else if (config.checkPendingFlushOnUpdate) {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","sourceOld":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else if (config.checkPendingFlushOnUpdate) {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","date":1559371943,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#postUpdate(DocumentsWriterPerThread,boolean).mjava","sourceNew":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException {\n    hasEvents |= applyAllDeletes();\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else if (config.checkPendingFlushOnUpdate) {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","sourceOld":"  private boolean postUpdate(DocumentsWriterPerThread flushingDWPT, boolean hasEvents) throws IOException {\n    hasEvents |= applyAllDeletes(deleteQueue);\n    if (flushingDWPT != null) {\n      hasEvents |= doFlush(flushingDWPT);\n    } else if (config.checkPendingFlushOnUpdate) {\n      final DocumentsWriterPerThread nextPendingFlush = flushControl.nextPendingFlush();\n      if (nextPendingFlush != null) {\n        hasEvents |= doFlush(nextPendingFlush);\n      }\n    }\n\n    return hasEvents;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f1ea5763a93795952100d48e19c48f19777c552c":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["845b760a99e5f369fcd0a5d723a87b8def6a3f56","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["7af110b00ea8df9429309d83e38e0533d82e144f"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"],"417142ff08fda9cf0b72d5133e63097a166c6458":["9299079153fd7895bf3cf6835cf7019af2ba89b3","f1ea5763a93795952100d48e19c48f19777c552c"]},"commit2Childs":{"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","9299079153fd7895bf3cf6835cf7019af2ba89b3"],"f1ea5763a93795952100d48e19c48f19777c552c":["417142ff08fda9cf0b72d5133e63097a166c6458"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["f1ea5763a93795952100d48e19c48f19777c552c","417142ff08fda9cf0b72d5133e63097a166c6458"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"],"417142ff08fda9cf0b72d5133e63097a166c6458":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}