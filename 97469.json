{"path":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","commits":[{"id":"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","date":1437181221,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointTermQuery(String field, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.minLat = minLat;\n    this.maxLon = maxLon;\n    this.maxLat = maxLat;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a02003eb48495b52b8483703e1b6b48c099ec7d","date":1438767858,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointTermQuery(String field, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.minLat = minLat;\n    this.maxLon = maxLon;\n    this.maxLat = maxLat;\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointTermQuery(String field, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.minLat = minLat;\n    this.maxLon = maxLon;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointTermQuery(String field, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.minLat = minLat;\n    this.maxLon = maxLon;\n    this.maxLat = maxLat;\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointTermQuery(String field, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.minLat = minLat;\n    this.maxLon = maxLon;\n    this.maxLat = maxLat;\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n\n    final long minHash = GeoEncodingUtils.mortonHash(minLon, minLat);\n    final long maxHash = GeoEncodingUtils.mortonHash(maxLon, maxLat);\n    this.minLon = GeoEncodingUtils.mortonUnhashLon(minHash);\n    this.minLat = GeoEncodingUtils.mortonUnhashLat(minHash);\n    this.maxLon = GeoEncodingUtils.mortonUnhashLon(maxHash);\n    this.maxLat = GeoEncodingUtils.mortonUnhashLat(maxHash);\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointTermQuery(String field, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.minLat = minLat;\n    this.maxLon = maxLon;\n    this.maxLat = maxLat;\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["7a02003eb48495b52b8483703e1b6b48c099ec7d","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["7a02003eb48495b52b8483703e1b6b48c099ec7d"],"7a02003eb48495b52b8483703e1b6b48c099ec7d":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["7a02003eb48495b52b8483703e1b6b48c099ec7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a02003eb48495b52b8483703e1b6b48c099ec7d":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}