{"path":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy));\n      lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy));\n      lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy));\n      lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    Random random = newRandom();\n    \n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    Random random = newRandom();\n    \n    Directory dir = new MockRAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    Random random = newRandom();\n    \n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    Random random = newRandom();\n    \n    Directory dir = newDirectory(random);\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    Random random = newRandom();\n    \n    Directory dir = new MockRAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"caada1d700c39415a1749fafa2d2b4088fecd90b","date":1282604066,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    Random random = newRandom();\n    \n    Directory dir = newDirectory(random);\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 8;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    Random random = newRandom();\n    \n    Directory dir = newDirectory(random);\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3175fb6363194488599ef2d7708024d7797b149","date":1282735099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    Random random = newRandom();\n    \n    Directory dir = newDirectory(random);\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    Random random = newRandom();\n    \n    Directory dir = newDirectory(random);\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 8;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    \n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    Random random = newRandom();\n    \n    Directory dir = newDirectory(random);\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(true);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(true);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    \n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(true);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(true);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n    \n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    lmp.setUseCompoundDocStore(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(true);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(true);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n\n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    boolean useCompoundFile = true;\n\n    Directory dir = new RAMDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(useCompoundFile);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<7;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      // Make sure to sleep long enough so that some commit\n      // points will be deleted:\n      Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n        long modTime = dir.fileModified(fileName);\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted\", lastDeleteTime - modTime <= (SECONDS*1000));\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(true);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(true);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(true);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(true);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n\n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n    lmp.setUseCompoundFile(true);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(true);\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n\n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n\n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n\n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"commitTime\", String.valueOf(System.currentTimeMillis()));\n    writer.commit(commitData);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      commitData = new HashMap<String,String>();\n      commitData.put(\"commitTime\", String.valueOf(System.currentTimeMillis()));\n      writer.commit(commitData);\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir, fileName);\n        long modTime = Long.parseLong(sis.getUserData().get(\"commitTime\"));\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":["8b6187898fc4413ccd18229711786550a280383c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"commitTime\", String.valueOf(System.currentTimeMillis()));\n    writer.commit(commitData);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      commitData = new HashMap<String,String>();\n      commitData.put(\"commitTime\", String.valueOf(System.currentTimeMillis()));\n      writer.commit(commitData);\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir, fileName);\n        long modTime = Long.parseLong(sis.getUserData().get(\"commitTime\"));\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"commitTime\", String.valueOf(System.currentTimeMillis()));\n    writer.commit(commitData);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      commitData = new HashMap<String,String>();\n      commitData.put(\"commitTime\", String.valueOf(System.currentTimeMillis()));\n      writer.commit(commitData);\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir, fileName);\n        long modTime = Long.parseLong(sis.getUserData().get(\"commitTime\"));\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        long modTime = dir.fileModified(fileName);\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testExpirationTimeDeletionPolicy().mjava","sourceNew":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"commitTime\", String.valueOf(System.currentTimeMillis()));\n    writer.commit(commitData);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      commitData = new HashMap<String,String>();\n      commitData.put(\"commitTime\", String.valueOf(System.currentTimeMillis()));\n      writer.commit(commitData);\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir, fileName);\n        long modTime = Long.parseLong(sis.getUserData().get(\"commitTime\"));\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test \"by time expiration\" deletion policy:\n   */\n  public void testExpirationTimeDeletionPolicy() throws IOException, InterruptedException {\n\n    final double SECONDS = 2.0;\n\n    Directory dir = newDirectory();\n    ExpirationTimeDeletionPolicy policy = new ExpirationTimeDeletionPolicy(dir, SECONDS);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy);\n    MergePolicy mp = conf.getMergePolicy();\n    if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setUseCompoundFile(true);\n    }\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"commitTime\", String.valueOf(System.currentTimeMillis()));\n    writer.commit(commitData);\n    writer.close();\n\n    final int ITER = 9;\n\n    long lastDeleteTime = 0;\n    for(int i=0;i<ITER;i++) {\n      // Record last time when writer performed deletes of\n      // past commits\n      lastDeleteTime = System.currentTimeMillis();\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(true);\n      }\n      writer = new IndexWriter(dir, conf);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      commitData = new HashMap<String,String>();\n      commitData.put(\"commitTime\", String.valueOf(System.currentTimeMillis()));\n      writer.commit(commitData);\n      writer.close();\n\n      if (i < ITER-1) {\n        // Make sure to sleep long enough so that some commit\n        // points will be deleted:\n        Thread.sleep((int) (1000.0*(SECONDS/5.0)));\n      }\n    }\n\n    // First, make sure the policy in fact deleted something:\n    assertTrue(\"no commits were deleted\", policy.numDelete > 0);\n\n    // Then simplistic check: just verify that the\n    // segments_N's that still exist are in fact within SECONDS\n    // seconds of the last one's mod time, and, that I can\n    // open a reader on each:\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                            \"\",\n                                                            gen);\n    dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n\n    boolean oneSecondResolution = true;\n\n    while(gen > 0) {\n      try {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                         \"\",\n                                                         gen);\n\n        // if we are on a filesystem that seems to have only\n        // 1 second resolution, allow +1 second in commit\n        // age tolerance:\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir, fileName);\n        long modTime = Long.parseLong(sis.getUserData().get(\"commitTime\"));\n        oneSecondResolution &= (modTime % 1000) == 0;\n        final long leeway = (long) ((SECONDS + (oneSecondResolution ? 1.0:0.0))*1000);\n\n        assertTrue(\"commit point was older than \" + SECONDS + \" seconds (\" + (lastDeleteTime - modTime) + \" msec) but did not get deleted \", lastDeleteTime - modTime <= leeway);\n      } catch (IOException e) {\n        // OK\n        break;\n      }\n      \n      dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n      gen--;\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["f2c5f0cb44df114db4228c8f77861714b5cabaea","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c19f985e36a65cc969e8e564fe337a0d41512075":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["d3175fb6363194488599ef2d7708024d7797b149"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"caada1d700c39415a1749fafa2d2b4088fecd90b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["3615ce4a1f785ae1b779244de52c6a7d99227e60","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["3615ce4a1f785ae1b779244de52c6a7d99227e60","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d3175fb6363194488599ef2d7708024d7797b149":["caada1d700c39415a1749fafa2d2b4088fecd90b"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["f2c5f0cb44df114db4228c8f77861714b5cabaea","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33","817882884229bace7dc5d1b75f6b0e4aa1e47122"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"caada1d700c39415a1749fafa2d2b4088fecd90b":["d3175fb6363194488599ef2d7708024d7797b149"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["caada1d700c39415a1749fafa2d2b4088fecd90b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"d572389229127c297dd1fa5ce4758e1cec41e799":["b21422ff1d1d56499dec481f193b402e5e8def5b","8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"962d04139994fce5193143ef35615499a9a96d78":[],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5b6fdfce35d0adb18836cf8711abe487a934df33","817882884229bace7dc5d1b75f6b0e4aa1e47122"],"d3175fb6363194488599ef2d7708024d7797b149":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5b6fdfce35d0adb18836cf8711abe487a934df33","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","817882884229bace7dc5d1b75f6b0e4aa1e47122","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}