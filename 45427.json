{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newDirectoryImpl(Random,String).mjava","commits":[{"id":"deb4fe59e35ea6bac0ee825142d40a04846fe573","date":1282737351,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newDirectoryImpl(String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      try {\n        // try empty ctor\n        return clazz.newInstance();\n      } catch (Exception e) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        try {\n          Constructor<? extends Directory> ctor = clazz.getConstructor(File.class);\n          Directory d = ctor.newInstance(tmpFile);\n          // try not to enable this hack unless we must.\n          if (d instanceof MMapDirectory && Constants.WINDOWS && MMapDirectory.UNMAP_SUPPORTED)\n            ((MMapDirectory)d).setUseUnmap(true);\n          return d;\n        } catch (Exception e2) {\n          // try .open(File)\n          Method method = clazz.getMethod(\"open\", new Class[] { File.class });\n          return (Directory) method.invoke(null, tmpFile);\n        }\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(String clazzName) {\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      try {\n        // try empty ctor\n        return clazz.newInstance();\n      } catch (Exception e) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        try {\n          Constructor<? extends Directory> ctor = clazz.getConstructor(File.class);\n          return ctor.newInstance(tmpFile);\n        } catch (Exception e2) {\n          // try .open(File)\n          Method method = clazz.getMethod(\"open\", new Class[] { File.class });\n          return (Directory) method.invoke(null, tmpFile);\n        }\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      try {\n        // try empty ctor\n        return clazz.newInstance();\n      } catch (Exception e) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        try {\n          Constructor<? extends Directory> ctor = clazz.getConstructor(File.class);\n          Directory d = ctor.newInstance(tmpFile);\n          // try not to enable this hack unless we must.\n          if (d instanceof MMapDirectory && Constants.WINDOWS && MMapDirectory.UNMAP_SUPPORTED)\n            ((MMapDirectory)d).setUseUnmap(true);\n          return d;\n        } catch (Exception e2) {\n          // try .open(File)\n          Method method = clazz.getMethod(\"open\", new Class[] { File.class });\n          return (Directory) method.invoke(null, tmpFile);\n        }\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      try {\n        // try empty ctor\n        return clazz.newInstance();\n      } catch (Exception e) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        try {\n          Constructor<? extends Directory> ctor = clazz.getConstructor(File.class);\n          Directory d = ctor.newInstance(tmpFile);\n          // try not to enable this hack unless we must.\n          if (d instanceof MMapDirectory && Constants.WINDOWS && MMapDirectory.UNMAP_SUPPORTED)\n            ((MMapDirectory)d).setUseUnmap(true);\n          return d;\n        } catch (Exception e2) {\n          // try .open(File)\n          Method method = clazz.getMethod(\"open\", new Class[] { File.class });\n          return (Directory) method.invoke(null, tmpFile);\n        }\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"deb4fe59e35ea6bac0ee825142d40a04846fe573":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43b04c27924fe393e38e9f0986e32c634f261859":["deb4fe59e35ea6bac0ee825142d40a04846fe573"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43b04c27924fe393e38e9f0986e32c634f261859"]},"commit2Childs":{"deb4fe59e35ea6bac0ee825142d40a04846fe573":["43b04c27924fe393e38e9f0986e32c634f261859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["deb4fe59e35ea6bac0ee825142d40a04846fe573"],"43b04c27924fe393e38e9f0986e32c634f261859":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}