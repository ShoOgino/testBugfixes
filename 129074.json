{"path":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions)\n      field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions)\n      field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","date":1269379515,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    currentTermID = termIDs[postingUpto];\n    docID = 0;\n\n    final int textStart = postings.textStarts[currentTermID];\n    text = charPool.buffers[textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, currentTermID, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions)\n      field.termsHashPerField.initReader(prox, currentTermID, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions)\n      field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings) {\n      return false;\n    }\n\n    currentTermID = termIDs[postingUpto];\n    docID = 0;\n\n    // Get BytesRef\n    final int textStart = postings.textStarts[currentTermID];\n    bytePool.setBytesRef(text, textStart);\n\n    field.termsHashPerField.initReader(freq, currentTermID, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions) {\n      field.termsHashPerField.initReader(prox, currentTermID, 1);\n    }\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    currentTermID = termIDs[postingUpto];\n    docID = 0;\n\n    final int textStart = postings.textStarts[currentTermID];\n    text = charPool.buffers[textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, currentTermID, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions)\n      field.termsHashPerField.initReader(prox, currentTermID, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":null,"sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings) {\n      return false;\n    }\n\n    currentTermID = termIDs[postingUpto];\n    docID = 0;\n\n    // Get BytesRef\n    final int textStart = postings.textStarts[currentTermID];\n    bytePool.setBytesRef(text, textStart);\n\n    field.termsHashPerField.initReader(freq, currentTermID, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions) {\n      field.termsHashPerField.initReader(prox, currentTermID, 1);\n    }\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":null,"sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings) {\n      return false;\n    }\n\n    currentTermID = termIDs[postingUpto];\n    docID = 0;\n\n    // Get BytesRef\n    final int textStart = postings.textStarts[currentTermID];\n    bytePool.setBytesRef(text, textStart);\n\n    field.termsHashPerField.initReader(freq, currentTermID, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions) {\n      field.termsHashPerField.initReader(prox, currentTermID, 1);\n    }\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":null,"sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings) {\n      return false;\n    }\n\n    currentTermID = termIDs[postingUpto];\n    docID = 0;\n\n    // Get BytesRef\n    final int textStart = postings.textStarts[currentTermID];\n    bytePool.setBytesRef(text, textStart);\n\n    field.termsHashPerField.initReader(freq, currentTermID, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions) {\n      field.termsHashPerField.initReader(prox, currentTermID, 1);\n    }\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":null,"sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings) {\n      return false;\n    }\n\n    currentTermID = termIDs[postingUpto];\n    docID = 0;\n\n    // Get BytesRef\n    final int textStart = postings.textStarts[currentTermID];\n    bytePool.setBytesRef(text, textStart);\n\n    field.termsHashPerField.initReader(freq, currentTermID, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions) {\n      field.termsHashPerField.initReader(prox, currentTermID, 1);\n    }\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a3776dccca01c11e7046323cfad46a3b4a471233":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}