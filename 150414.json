{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#performDefaultTests(TestReopen).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#performDefaultTests(TestReopen).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#performDefaultTests(TestReopen).mjava","sourceNew":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestIndexReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestIndexReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestIndexReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","sourceOld":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestIndexReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestIndexReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestIndexReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#performDefaultTests(TestReopen).mjava","sourceNew":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","sourceOld":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestIndexReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestIndexReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestIndexReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}