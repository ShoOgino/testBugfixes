{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","commits":[{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","pathOld":"/dev/null","sourceNew":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    row.forEachReplica(replica -> {\n      if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n      if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n      if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n      if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n        return;\n      ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","pathOld":"/dev/null","sourceNew":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    row.forEachReplica(replica -> {\n      if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n      if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n      if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n      if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n        return;\n      ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","sourceNew":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    if (ctx.clause.tag.varType.isPerNodeValue) {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.collection.isPass(replica.getCollection()) && ctx.clause.getShard().isPass(replica.getShard())) {\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica)\n              .withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        }\n      });\n    } else {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n        if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n        if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n        if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n          return;\n        ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n      });\n\n    }\n\n\n  }\n\n","sourceOld":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    row.forEachReplica(replica -> {\n      if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n      if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n      if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n      if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n        return;\n      ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","sourceNew":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    row.forEachReplica(replica -> {\n      if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n      if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n      if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n      if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n        return;\n      ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n    });\n  }\n\n","sourceOld":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    if (ctx.clause.tag.varType.isPerNodeValue) {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.collection.isPass(replica.getCollection()) && ctx.clause.getShard().isPass(replica.getShard())) {\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica)\n              .withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        }\n      });\n    } else {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n        if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n        if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n        if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n          return;\n        ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n      });\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","sourceNew":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    if (ctx.clause.tag.varType.isPerNodeValue) {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.collection.isPass(replica.getCollection()) && ctx.clause.getShard().isPass(replica.getShard())) {\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica)\n              .withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        }\n      });\n    } else {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n        if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n        if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n        if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n          return;\n        ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n      });\n\n    }\n\n\n  }\n\n","sourceOld":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    row.forEachReplica(replica -> {\n      if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n      if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n      if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n      if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n        return;\n      ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","pathOld":"/dev/null","sourceNew":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    if (ctx.clause.tag.varType.isPerNodeValue) {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.collection.isPass(replica.getCollection()) && ctx.clause.getShard().isPass(replica.getShard())) {\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica)\n              .withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        }\n      });\n    } else {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n        if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n        if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n        if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n          return;\n        ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n      });\n\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","sourceNew":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    if (ctx.clause.tag.varType.meta.isNodeSpecificVal()) {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.collection.isPass(replica.getCollection()) && ctx.clause.getShard().isPass(replica.getShard())) {\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica)\n              .withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        }\n      });\n    } else {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n        if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n        if(!ctx.currentViolation.getClause().matchShard(replica.getShard(), ctx.currentViolation.shard)) return;\n        if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n          return;\n        ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n      });\n\n    }\n\n\n  }\n\n","sourceOld":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    if (ctx.clause.tag.varType.isPerNodeValue) {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.collection.isPass(replica.getCollection()) && ctx.clause.getShard().isPass(replica.getShard())) {\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica)\n              .withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        }\n      });\n    } else {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n        if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n        if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n        if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n          return;\n        ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n      });\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Violation#collectViolatingReplicas(Ctx,Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#collectViolatingReplicas(ViolationCtx,Row).mjava","sourceNew":"  static void collectViolatingReplicas(Ctx ctx, Row row) {\n    if (ctx.clause.tag.varType.meta.isNodeSpecificVal()) {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.collection.isPass(replica.getCollection()) && ctx.clause.getShard().isPass(replica.getShard())) {\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica)\n              .withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        }\n      });\n    } else {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n        if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n        if(!ctx.currentViolation.getClause().matchShard(replica.getShard(), ctx.currentViolation.shard)) return;\n        if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n          return;\n        ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n      });\n\n    }\n\n\n  }\n\n","sourceOld":"  private static void collectViolatingReplicas(ViolationCtx ctx, Row row) {\n    if (ctx.clause.tag.varType.meta.isNodeSpecificVal()) {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.collection.isPass(replica.getCollection()) && ctx.clause.getShard().isPass(replica.getShard())) {\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica)\n              .withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        }\n      });\n    } else {\n      row.forEachReplica(replica -> {\n        if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n        if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n        if(!ctx.currentViolation.getClause().matchShard(replica.getShard(), ctx.currentViolation.shard)) return;\n        if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n          return;\n        ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n      });\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78231225260fb5b3bf9920f203d71477d5501c65":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7d6bec22994bec86702ad05304ae983f7be5b5a7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["78231225260fb5b3bf9920f203d71477d5501c65","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}