{"path":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: NumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: NumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testLongExtremeValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testLongExtremeValues().mjava","sourceNew":"  /** LUCENE-2541: LegacyNumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","sourceOld":"  /** LUCENE-2541: NumericRangeQuery errors with endpoints near long min and max values */\n  public void testLongExtremeValues() throws Exception {\n    // upper end extremes\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 1, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 2, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 6, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 8, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE, Long.MAX_VALUE, 64, true, Arrays.asList(\n      0xffffffffffffffffL,0xffffffffffffffffL\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MAX_VALUE-0xfL, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MAX_VALUE-0x10L, Long.MAX_VALUE, 4, true, Arrays.asList(\n      0xffffffffffffffefL,0xffffffffffffffefL,\n      0xfffffffffffffffL,0xfffffffffffffffL\n    ), Arrays.asList(\n      0, 4\n    ));\n\n    // lower end extremes\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 1, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 2, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 4, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 6, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 8, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE, 64, true, Arrays.asList(\n      0x0000000000000000L,0x0000000000000000L\n    ), Arrays.asList(\n      0\n    ));\n\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0xfL, 4, true, Arrays.asList(\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      4\n    ));\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MIN_VALUE+0x10L, 4, true, Arrays.asList(\n      0x0000000000000010L,0x0000000000000010L,\n      0x000000000000000L,0x000000000000000L\n    ), Arrays.asList(\n      0, 4\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}