{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (!field.omitTermFreqAndPositions) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      \n      builder.add(text, new BytesRef(spare));\n      termCount++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (!field.omitTermFreqAndPositions) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      \n      builder.add(text, new BytesRef(spare));\n      termCount++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0f277693790b6ff2e44509d1b5a1ca5a18f16de","date":1310325911,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (!field.omitTermFreqAndPositions) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      builder.add(text, new BytesRef(spare));\n      termCount++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (!field.omitTermFreqAndPositions) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      \n      builder.add(text, new BytesRef(spare));\n      termCount++;\n    }\n\n","bugFix":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      builder.add(text, new BytesRef(spare));\n      termCount++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (!field.omitTermFreqAndPositions) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      builder.add(text, new BytesRef(spare));\n      termCount++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      builder.add(text, new BytesRef(spare));\n      termCount++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert postingsWriter.docCount == stats.docFreq;\n\n      assert buffer2.getFilePointer() == 0;\n\n      buffer2.writeVInt(stats.docFreq);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        buffer2.writeVLong(stats.totalTermFreq-stats.docFreq);\n      }\n      int pos = (int) buffer2.getFilePointer();\n      buffer2.writeTo(finalBuffer, 0);\n      buffer2.reset();\n\n      final int totalBytes = pos + (int) postingsWriter.buffer.getFilePointer();\n      if (totalBytes > finalBuffer.length) {\n        finalBuffer = ArrayUtil.grow(finalBuffer, totalBytes);\n      }\n      postingsWriter.buffer.writeTo(finalBuffer, pos);\n      postingsWriter.buffer.reset();\n\n      spare.bytes = finalBuffer;\n      spare.length = totalBytes;\n      if (VERBOSE) {\n        System.out.println(\"    finishTerm term=\" + text.utf8ToString() + \" \" + totalBytes + \" bytes totalTF=\" + stats.totalTermFreq);\n        for(int i=0;i<totalBytes;i++) {\n          System.out.println(\"      \" + Integer.toHexString(finalBuffer[i]&0xFF));\n        }\n      }\n      builder.add(text, new BytesRef(spare));\n      termCount++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"7b91922b55d15444d554721b352861d028eb8278":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["7b91922b55d15444d554721b352861d028eb8278"],"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}