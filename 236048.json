{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","sourceNew":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","sourceOld":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","sourceNew":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","sourceOld":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","sourceNew":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","sourceOld":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","sourceNew":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","sourceOld":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16b25963ad38ed289ebf0f7af31269fa1ce80a11","date":1442083896,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","sourceNew":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getLiveDocs();\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","sourceOld":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);\n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a == absA) {\n      if (b == absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b == absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getLiveDocs();\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","sourceOld":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getLiveDocs();\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf29cc8a76949bbcbc15b386a9e46a533f5b3332","date":1527778512,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);\n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a == absA) {\n      if (b == absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b == absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getLiveDocSet();\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);\n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a == absA) {\n      if (b == absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b == absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getLiveDocs();\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c26f00b574427b55127e869b935845554afde1fa"],"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}