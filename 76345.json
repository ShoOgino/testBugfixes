{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(AtomicReader,String,FieldCache.IntParser,boolean)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(context.reader(), field, (FieldCache.IntParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(AtomicReader,String,FieldCache.IntParser,boolean)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(context.reader(), field, (FieldCache.IntParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(AtomicReader,String,FieldCache.IntParser,boolean)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final FieldCache.Ints values = FieldCache.DEFAULT.getInts(context.reader(), field, (FieldCache.IntParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final int value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(AtomicReader,String,FieldCache.IntParser,boolean)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(context.reader(), field, (FieldCache.IntParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(AtomicReader,String,FieldCache.IntParser,boolean)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final FieldCache.Ints values = FieldCache.DEFAULT.getInts(context.reader(), field, (FieldCache.IntParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final int value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(AtomicReader,String,FieldCache.IntParser,boolean)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final int[] values = FieldCache.DEFAULT.getInts(context.reader(), field, (FieldCache.IntParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","4f7c8ed26cfbf4007c46fd27a417560e932ab4d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(AtomicReader,String,FieldCache.IntParser,boolean)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final FieldCache.Ints values = FieldCache.DEFAULT.getInts(context.reader(), field, (FieldCache.IntParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final int value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(AtomicReader,String,FieldCache.IntParser,boolean)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final FieldCache.Ints values = FieldCache.DEFAULT.getInts(context.reader(), field, (FieldCache.IntParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final int value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(AtomicReader,String,FieldCache.IntParser,boolean)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final FieldCache.Ints values = FieldCache.DEFAULT.getInts(context.reader(), field, (FieldCache.IntParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final int value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newIntRange(String,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link AtomicReader#getSortedDocValues(String)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<Integer> newIntRange(String field, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<Integer>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final int value = (int) values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(AtomicReader,String,FieldCache.IntParser,boolean)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final FieldCache.Ints values = FieldCache.DEFAULT.getInts(context.reader(), field, (FieldCache.IntParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final int value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newIntRange(String,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newIntRange(String,FieldCache.IntParser,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link AtomicReader#getSortedDocValues(String)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<Integer> newIntRange(String field, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<Integer>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final int value = (int) values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getInts(AtomicReader,String,FieldCache.IntParser,boolean)}. This works with all\n   * int fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Integer> newIntRange(String field, FieldCache.IntParser parser, Integer lowerVal, Integer upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Integer>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          int i = lowerVal.intValue();\n          if (!includeLower && i == Integer.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1);\n        } else {\n          inclusiveLowerPoint = Integer.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          int i = upperVal.intValue();\n          if (!includeUpper && i == Integer.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1);\n        } else {\n          inclusiveUpperPoint = Integer.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final FieldCache.Ints values = FieldCache.DEFAULT.getInts(context.reader(), field, (FieldCache.IntParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final int value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f45457a742a53533c348c4b990b1c579ff364467"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["dc06632ede7e48a5ddc6917badec25c8336feedc","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"56572ec06f1407c066d6b7399413178b33176cd8":["dc06632ede7e48a5ddc6917badec25c8336feedc","93dd449115a9247533e44bab47e8429e5dccbc6d"],"f45457a742a53533c348c4b990b1c579ff364467":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","f45457a742a53533c348c4b990b1c579ff364467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"f45457a742a53533c348c4b990b1c579ff364467":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}