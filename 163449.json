{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForIndividualPivotFacets(ResponseBuilder,ShardRequest,String).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForIndividualPivotFacets(ResponseBuilder,ShardRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  private void modifyRequestForIndividualPivotFacets(ResponseBuilder rb, ShardRequest sreq, \n                                                     String fieldToOverRequest) {\n\n    final SolrParams originalParams = rb.req.getParams();\n    final String paramStart = \"f.\" + fieldToOverRequest + \".\";\n\n    final int requestedLimit = originalParams.getFieldInt(fieldToOverRequest,\n                                                          FacetParams.FACET_LIMIT, 100);\n    sreq.params.remove(paramStart + FacetParams.FACET_LIMIT);\n\n    final int offset = originalParams.getFieldInt(fieldToOverRequest,\n                                                  FacetParams.FACET_OFFSET, 0);\n    sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n    \n    final double overRequestRatio = originalParams.getFieldDouble\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_RATIO, 1.5);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_RATIO);\n    \n    final int overRequestCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_COUNT, 10);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_COUNT);\n    \n    final int requestedMinCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_PIVOT_MINCOUNT, 1);\n    sreq.params.remove(paramStart + FacetParams.FACET_PIVOT_MINCOUNT);\n\n    final String defaultSort = (requestedLimit > 0)\n      ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX;\n    final String sort = originalParams.getFieldParam\n      (fieldToOverRequest, FacetParams.FACET_SORT, defaultSort);\n\n    int shardLimit = requestedLimit + offset;\n    int shardMinCount = requestedMinCount;\n\n    // per-shard mincount & overrequest\n    if ( FacetParams.FACET_SORT_INDEX.equals(sort) && \n         1 < requestedMinCount && \n         0 < requestedLimit) {\n\n      // We can divide the mincount by num shards rounded up, because unless \n      // a single shard has at least that many it can't compete...\n      shardMinCount = (int) Math.ceil((double) requestedMinCount / rb.slices.length);\n\n      // ...but we still need to overrequest to reduce chances of missing something\n      shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n\n      // (for mincount <= 1, no overrequest needed)\n\n    } else if ( FacetParams.FACET_SORT_COUNT.equals(sort) ) {\n      if ( 0 < requestedLimit ) {\n        shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n        shardMinCount = 0; \n      } else {\n        shardMinCount = Math.min(requestedMinCount, 1);\n      }\n    } \n    sreq.params.set(paramStart + FacetParams.FACET_LIMIT, shardLimit);\n    sreq.params.set(paramStart + FacetParams.FACET_PIVOT_MINCOUNT, shardMinCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8db8ed65f6d4c4092be7fe23d820b481b8dec407"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef57266eb048f5d440958e9b0612adf7535e5e8b","date":1513013215,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForIndividualPivotFacets(ResponseBuilder,ShardRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForIndividualPivotFacets(ResponseBuilder,ShardRequest,String).mjava","sourceNew":"  private void modifyRequestForIndividualPivotFacets(ResponseBuilder rb, ShardRequest sreq, \n                                                     String fieldToOverRequest) {\n\n    final SolrParams originalParams = rb.req.getParams();\n    final String paramStart = \"f.\" + fieldToOverRequest + \".\";\n\n    final int requestedLimit = originalParams.getFieldInt(fieldToOverRequest,\n                                                          FacetParams.FACET_LIMIT, 100);\n    sreq.params.remove(paramStart + FacetParams.FACET_LIMIT);\n\n    final int offset = originalParams.getFieldInt(fieldToOverRequest,\n                                                  FacetParams.FACET_OFFSET, 0);\n    sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n    \n    final double overRequestRatio = originalParams.getFieldDouble\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_RATIO, 1.5);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_RATIO);\n    \n    final int overRequestCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_COUNT, 10);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_COUNT);\n    \n    final int requestedMinCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_PIVOT_MINCOUNT, 1);\n    sreq.params.remove(paramStart + FacetParams.FACET_PIVOT_MINCOUNT);\n\n    final String defaultSort = (requestedLimit > 0)\n      ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX;\n    final String sort = originalParams.getFieldParam\n      (fieldToOverRequest, FacetParams.FACET_SORT, defaultSort);\n\n    int shardLimit = requestedLimit + offset;\n    int shardMinCount = requestedMinCount;\n\n    // per-shard mincount & overrequest\n    if ( FacetParams.FACET_SORT_INDEX.equals(sort) && \n         1 < requestedMinCount && \n         0 < requestedLimit) {\n\n      // We can divide the mincount by num shards rounded up, because unless \n      // a single shard has at least that many it can't compete...\n      shardMinCount = (int) Math.ceil((double) requestedMinCount / rb.slices.length);\n\n      // ...but we still need to overrequest to reduce chances of missing something\n      shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n\n      // (for mincount <= 1, no overrequest needed)\n\n    } else if ( FacetParams.FACET_SORT_COUNT.equals(sort) ) {\n      if ( 0 < requestedLimit ) {\n        shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n      }\n      shardMinCount = Math.min(requestedMinCount, 1);\n    } \n    sreq.params.set(paramStart + FacetParams.FACET_LIMIT, shardLimit);\n    sreq.params.set(paramStart + FacetParams.FACET_PIVOT_MINCOUNT, shardMinCount);\n  }\n\n","sourceOld":"  private void modifyRequestForIndividualPivotFacets(ResponseBuilder rb, ShardRequest sreq, \n                                                     String fieldToOverRequest) {\n\n    final SolrParams originalParams = rb.req.getParams();\n    final String paramStart = \"f.\" + fieldToOverRequest + \".\";\n\n    final int requestedLimit = originalParams.getFieldInt(fieldToOverRequest,\n                                                          FacetParams.FACET_LIMIT, 100);\n    sreq.params.remove(paramStart + FacetParams.FACET_LIMIT);\n\n    final int offset = originalParams.getFieldInt(fieldToOverRequest,\n                                                  FacetParams.FACET_OFFSET, 0);\n    sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n    \n    final double overRequestRatio = originalParams.getFieldDouble\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_RATIO, 1.5);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_RATIO);\n    \n    final int overRequestCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_COUNT, 10);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_COUNT);\n    \n    final int requestedMinCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_PIVOT_MINCOUNT, 1);\n    sreq.params.remove(paramStart + FacetParams.FACET_PIVOT_MINCOUNT);\n\n    final String defaultSort = (requestedLimit > 0)\n      ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX;\n    final String sort = originalParams.getFieldParam\n      (fieldToOverRequest, FacetParams.FACET_SORT, defaultSort);\n\n    int shardLimit = requestedLimit + offset;\n    int shardMinCount = requestedMinCount;\n\n    // per-shard mincount & overrequest\n    if ( FacetParams.FACET_SORT_INDEX.equals(sort) && \n         1 < requestedMinCount && \n         0 < requestedLimit) {\n\n      // We can divide the mincount by num shards rounded up, because unless \n      // a single shard has at least that many it can't compete...\n      shardMinCount = (int) Math.ceil((double) requestedMinCount / rb.slices.length);\n\n      // ...but we still need to overrequest to reduce chances of missing something\n      shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n\n      // (for mincount <= 1, no overrequest needed)\n\n    } else if ( FacetParams.FACET_SORT_COUNT.equals(sort) ) {\n      if ( 0 < requestedLimit ) {\n        shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n        shardMinCount = 0; \n      } else {\n        shardMinCount = Math.min(requestedMinCount, 1);\n      }\n    } \n    sreq.params.set(paramStart + FacetParams.FACET_LIMIT, shardLimit);\n    sreq.params.set(paramStart + FacetParams.FACET_PIVOT_MINCOUNT, shardMinCount);\n  }\n\n","bugFix":null,"bugIntro":["8db8ed65f6d4c4092be7fe23d820b481b8dec407"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"927e6deec13723e5fd6fb8f1e0457e8597dae15e","date":1513167013,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForIndividualPivotFacets(ResponseBuilder,ShardRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForIndividualPivotFacets(ResponseBuilder,ShardRequest,String).mjava","sourceNew":"  private void modifyRequestForIndividualPivotFacets(ResponseBuilder rb, ShardRequest sreq, \n                                                     String fieldToOverRequest) {\n\n    final SolrParams originalParams = rb.req.getParams();\n    final String paramStart = \"f.\" + fieldToOverRequest + \".\";\n\n    final int requestedLimit = originalParams.getFieldInt(fieldToOverRequest,\n                                                          FacetParams.FACET_LIMIT, 100);\n    sreq.params.remove(paramStart + FacetParams.FACET_LIMIT);\n\n    final int offset = originalParams.getFieldInt(fieldToOverRequest,\n                                                  FacetParams.FACET_OFFSET, 0);\n    sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n    \n    final double overRequestRatio = originalParams.getFieldDouble\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_RATIO, 1.5);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_RATIO);\n    \n    final int overRequestCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_COUNT, 10);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_COUNT);\n    \n    final int requestedMinCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_PIVOT_MINCOUNT, 1);\n    sreq.params.remove(paramStart + FacetParams.FACET_PIVOT_MINCOUNT);\n\n    final String defaultSort = (requestedLimit > 0)\n      ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX;\n    final String sort = originalParams.getFieldParam\n      (fieldToOverRequest, FacetParams.FACET_SORT, defaultSort);\n\n    int shardLimit = requestedLimit + offset;\n    int shardMinCount = requestedMinCount;\n\n    // per-shard mincount & overrequest\n    if ( FacetParams.FACET_SORT_INDEX.equals(sort) && \n         1 < requestedMinCount && \n         0 < requestedLimit) {\n\n      // We can divide the mincount by num shards rounded up, because unless \n      // a single shard has at least that many it can't compete...\n      shardMinCount = (int) Math.ceil((double) requestedMinCount / rb.slices.length);\n\n      // ...but we still need to overrequest to reduce chances of missing something\n      shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n\n      // (for mincount <= 1, no overrequest needed)\n\n    } else if ( FacetParams.FACET_SORT_COUNT.equals(sort) ) {\n      if ( 0 < requestedLimit ) {\n        shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n      }\n      shardMinCount = Math.min(requestedMinCount, 1);\n    } \n    sreq.params.set(paramStart + FacetParams.FACET_LIMIT, shardLimit);\n    sreq.params.set(paramStart + FacetParams.FACET_PIVOT_MINCOUNT, shardMinCount);\n  }\n\n","sourceOld":"  private void modifyRequestForIndividualPivotFacets(ResponseBuilder rb, ShardRequest sreq, \n                                                     String fieldToOverRequest) {\n\n    final SolrParams originalParams = rb.req.getParams();\n    final String paramStart = \"f.\" + fieldToOverRequest + \".\";\n\n    final int requestedLimit = originalParams.getFieldInt(fieldToOverRequest,\n                                                          FacetParams.FACET_LIMIT, 100);\n    sreq.params.remove(paramStart + FacetParams.FACET_LIMIT);\n\n    final int offset = originalParams.getFieldInt(fieldToOverRequest,\n                                                  FacetParams.FACET_OFFSET, 0);\n    sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n    \n    final double overRequestRatio = originalParams.getFieldDouble\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_RATIO, 1.5);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_RATIO);\n    \n    final int overRequestCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_COUNT, 10);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_COUNT);\n    \n    final int requestedMinCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_PIVOT_MINCOUNT, 1);\n    sreq.params.remove(paramStart + FacetParams.FACET_PIVOT_MINCOUNT);\n\n    final String defaultSort = (requestedLimit > 0)\n      ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX;\n    final String sort = originalParams.getFieldParam\n      (fieldToOverRequest, FacetParams.FACET_SORT, defaultSort);\n\n    int shardLimit = requestedLimit + offset;\n    int shardMinCount = requestedMinCount;\n\n    // per-shard mincount & overrequest\n    if ( FacetParams.FACET_SORT_INDEX.equals(sort) && \n         1 < requestedMinCount && \n         0 < requestedLimit) {\n\n      // We can divide the mincount by num shards rounded up, because unless \n      // a single shard has at least that many it can't compete...\n      shardMinCount = (int) Math.ceil((double) requestedMinCount / rb.slices.length);\n\n      // ...but we still need to overrequest to reduce chances of missing something\n      shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n\n      // (for mincount <= 1, no overrequest needed)\n\n    } else if ( FacetParams.FACET_SORT_COUNT.equals(sort) ) {\n      if ( 0 < requestedLimit ) {\n        shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n        shardMinCount = 0; \n      } else {\n        shardMinCount = Math.min(requestedMinCount, 1);\n      }\n    } \n    sreq.params.set(paramStart + FacetParams.FACET_LIMIT, shardLimit);\n    sreq.params.set(paramStart + FacetParams.FACET_PIVOT_MINCOUNT, shardMinCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8db8ed65f6d4c4092be7fe23d820b481b8dec407","date":1541215952,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForIndividualPivotFacets(ResponseBuilder,ShardRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForIndividualPivotFacets(ResponseBuilder,ShardRequest,String).mjava","sourceNew":"  private void modifyRequestForIndividualPivotFacets(ResponseBuilder rb, ShardRequest sreq, \n                                                     String fieldToOverRequest) {\n\n    final SolrParams originalParams = rb.req.getParams();\n    final String paramStart = \"f.\" + fieldToOverRequest + \".\";\n\n    final int requestedLimit = originalParams.getFieldInt(fieldToOverRequest,\n                                                          FacetParams.FACET_LIMIT, 100);\n    sreq.params.remove(paramStart + FacetParams.FACET_LIMIT);\n\n    final int offset = originalParams.getFieldInt(fieldToOverRequest,\n                                                  FacetParams.FACET_OFFSET, 0);\n    sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n    \n    final double overRequestRatio = originalParams.getFieldDouble\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_RATIO, 1.5);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_RATIO);\n    \n    final int overRequestCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_COUNT, 10);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_COUNT);\n    \n    final int requestedMinCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_PIVOT_MINCOUNT, 1);\n    sreq.params.remove(paramStart + FacetParams.FACET_PIVOT_MINCOUNT);\n\n    final String defaultSort = (requestedLimit > 0)\n      ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX;\n    final String sort = originalParams.getFieldParam\n      (fieldToOverRequest, FacetParams.FACET_SORT, defaultSort);\n\n    int shardLimit = requestedLimit + offset;\n    int shardMinCount = Math.min(requestedMinCount, 1);\n\n    // per-shard mincount & overrequest\n    if ( FacetParams.FACET_SORT_INDEX.equals(sort) && \n         1 < requestedMinCount && \n         0 < requestedLimit) {\n\n      // We can divide the mincount by num shards rounded up, because unless \n      // a single shard has at least that many it can't compete...\n      shardMinCount = (int) Math.ceil((double) requestedMinCount / rb.slices.length);\n\n      // ...but we still need to overrequest to reduce chances of missing something\n      shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n\n      // (for mincount <= 1, no overrequest needed)\n\n    } else if ( FacetParams.FACET_SORT_COUNT.equals(sort) ) {\n      if ( 0 < requestedLimit ) {\n        shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n      }\n    } \n    sreq.params.set(paramStart + FacetParams.FACET_LIMIT, shardLimit);\n    sreq.params.set(paramStart + FacetParams.FACET_PIVOT_MINCOUNT, shardMinCount);\n  }\n\n","sourceOld":"  private void modifyRequestForIndividualPivotFacets(ResponseBuilder rb, ShardRequest sreq, \n                                                     String fieldToOverRequest) {\n\n    final SolrParams originalParams = rb.req.getParams();\n    final String paramStart = \"f.\" + fieldToOverRequest + \".\";\n\n    final int requestedLimit = originalParams.getFieldInt(fieldToOverRequest,\n                                                          FacetParams.FACET_LIMIT, 100);\n    sreq.params.remove(paramStart + FacetParams.FACET_LIMIT);\n\n    final int offset = originalParams.getFieldInt(fieldToOverRequest,\n                                                  FacetParams.FACET_OFFSET, 0);\n    sreq.params.remove(paramStart + FacetParams.FACET_OFFSET);\n    \n    final double overRequestRatio = originalParams.getFieldDouble\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_RATIO, 1.5);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_RATIO);\n    \n    final int overRequestCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_OVERREQUEST_COUNT, 10);\n    sreq.params.remove(paramStart + FacetParams.FACET_OVERREQUEST_COUNT);\n    \n    final int requestedMinCount = originalParams.getFieldInt\n      (fieldToOverRequest, FacetParams.FACET_PIVOT_MINCOUNT, 1);\n    sreq.params.remove(paramStart + FacetParams.FACET_PIVOT_MINCOUNT);\n\n    final String defaultSort = (requestedLimit > 0)\n      ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX;\n    final String sort = originalParams.getFieldParam\n      (fieldToOverRequest, FacetParams.FACET_SORT, defaultSort);\n\n    int shardLimit = requestedLimit + offset;\n    int shardMinCount = requestedMinCount;\n\n    // per-shard mincount & overrequest\n    if ( FacetParams.FACET_SORT_INDEX.equals(sort) && \n         1 < requestedMinCount && \n         0 < requestedLimit) {\n\n      // We can divide the mincount by num shards rounded up, because unless \n      // a single shard has at least that many it can't compete...\n      shardMinCount = (int) Math.ceil((double) requestedMinCount / rb.slices.length);\n\n      // ...but we still need to overrequest to reduce chances of missing something\n      shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n\n      // (for mincount <= 1, no overrequest needed)\n\n    } else if ( FacetParams.FACET_SORT_COUNT.equals(sort) ) {\n      if ( 0 < requestedLimit ) {\n        shardLimit = doOverRequestMath(shardLimit, overRequestRatio, overRequestCount);\n      }\n      shardMinCount = Math.min(requestedMinCount, 1);\n    } \n    sreq.params.set(paramStart + FacetParams.FACET_LIMIT, shardLimit);\n    sreq.params.set(paramStart + FacetParams.FACET_PIVOT_MINCOUNT, shardMinCount);\n  }\n\n","bugFix":["92751ba9273251eab6a2e379ec42a1697a32ff96","ef57266eb048f5d440958e9b0612adf7535e5e8b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8db8ed65f6d4c4092be7fe23d820b481b8dec407":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"ef57266eb048f5d440958e9b0612adf7535e5e8b":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["92751ba9273251eab6a2e379ec42a1697a32ff96","ef57266eb048f5d440958e9b0612adf7535e5e8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8db8ed65f6d4c4092be7fe23d820b481b8dec407"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["ef57266eb048f5d440958e9b0612adf7535e5e8b","927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"8db8ed65f6d4c4092be7fe23d820b481b8dec407":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef57266eb048f5d440958e9b0612adf7535e5e8b":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["8db8ed65f6d4c4092be7fe23d820b481b8dec407"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}