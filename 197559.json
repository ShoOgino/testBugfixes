{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","commits":[{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    super.initializeMetrics(manager, registry, tag, scope);\n\n    manager.registerGauge(this, registry, () -> core != null ? NumberUtils.readableSize(core.getIndexSize()) : \"\",\n        tag, true, \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n        tag, true, \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        tag, true, GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> core != null ? core.getIndexDir() : \"\",\n        tag, true, \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster,\n        tag, true, \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave,\n        tag, true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, tag, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n        tag, true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        tag, true, REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(),\n        tag, true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    super.initializeMetrics(manager, registry, scope);\n\n    manager.registerGauge(this, registry, () -> core != null ? NumberUtils.readableSize(core.getIndexSize()) : \"\", true,\n        \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"), true,\n        \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0), true,\n        GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> core != null ? core.getIndexDir() : \"\", true,\n        \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster, true,\n        \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave, true,\n        \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\", true,\n        \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(), true,\n        REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(), true,\n        \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    super.initializeMetrics(manager, registry, tag, scope);\n\n    manager.registerGauge(this, registry, () -> core != null ? NumberUtils.readableSize(core.getIndexSize()) : \"\",\n        tag, true, \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n        tag, true, \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        tag, true, GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> core != null ? core.getIndexDir() : \"\",\n        tag, true, \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster,\n        tag, true, \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave,\n        tag, true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, tag, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n        tag, true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        tag, true, REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(),\n        tag, true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    super.initializeMetrics(manager, registry, scope);\n\n    manager.registerGauge(this, registry, () -> core != null ? NumberUtils.readableSize(core.getIndexSize()) : \"\", true,\n        \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"), true,\n        \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0), true,\n        GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> core != null ? core.getIndexDir() : \"\", true,\n        \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster, true,\n        \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave, true,\n        \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\", true,\n        \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(), true,\n        REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(), true,\n        \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89b1e01b66a1c90a549873dd7b2a68ca52f62930","date":1533640901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    super.initializeMetrics(manager, registry, tag, scope);\n\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        tag, true, \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n        tag, true, \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        tag, true, GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        tag, true, \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster,\n        tag, true, \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave,\n        tag, true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, tag, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n        tag, true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        tag, true, REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(),\n        tag, true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    super.initializeMetrics(manager, registry, tag, scope);\n\n    manager.registerGauge(this, registry, () -> core != null ? NumberUtils.readableSize(core.getIndexSize()) : \"\",\n        tag, true, \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n        tag, true, \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        tag, true, GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> core != null ? core.getIndexDir() : \"\",\n        tag, true, \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster,\n        tag, true, \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave,\n        tag, true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, tag, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n        tag, true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        tag, true, REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(),\n        tag, true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","bugFix":["bfc52860e6d13d034226a760813c59d984c6817a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetrics).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    super.initializeMetrics(m);\n    solrMetrics.gauge(this,  () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        true, \"indexSize\", getCategory().toString());\n    solrMetrics.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n         true, \"indexVersion\", getCategory().toString());\n    solrMetrics.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        true, GENERATION, getCategory().toString());\n    solrMetrics.gauge(this, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        true, \"indexPath\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isMaster,\n         true, \"isMaster\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isSlave,\n         true, \"isSlave\", getCategory().toString());\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    solrMetrics.gauge(this , fetcherMap, true, \"fetcher\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n         true, \"confFilesToReplicate\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        true, REPLICATE_AFTER, getCategory().toString());\n    solrMetrics.gauge(this,  () -> isMaster && replicationEnabled.get(),\n        true, \"replicationEnabled\", getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    super.initializeMetrics(manager, registry, tag, scope);\n\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        tag, true, \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n        tag, true, \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        tag, true, GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        tag, true, \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster,\n        tag, true, \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave,\n        tag, true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, tag, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n        tag, true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        tag, true, REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(),\n        tag, true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17c468812fc0c60f3d66b176339dc70564d8c3cb","date":1567918667,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetrics).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    super.initializeMetrics(manager, registry, tag, scope);\n\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        tag, true, \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n        tag, true, \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        tag, true, GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        tag, true, \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster,\n        tag, true, \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave,\n        tag, true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, tag, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n        tag, true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        tag, true, REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(),\n        tag, true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    super.initializeMetrics(m);\n    solrMetrics.gauge(this,  () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        true, \"indexSize\", getCategory().toString());\n    solrMetrics.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n         true, \"indexVersion\", getCategory().toString());\n    solrMetrics.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        true, GENERATION, getCategory().toString());\n    solrMetrics.gauge(this, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        true, \"indexPath\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isMaster,\n         true, \"isMaster\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isSlave,\n         true, \"isSlave\", getCategory().toString());\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    solrMetrics.gauge(this , fetcherMap, true, \"fetcher\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n         true, \"confFilesToReplicate\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        true, REPLICATE_AFTER, getCategory().toString());\n    solrMetrics.gauge(this,  () -> isMaster && replicationEnabled.get(),\n        true, \"replicationEnabled\", getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52275555c0ae3b55430cef26ad7fca3f02440944","date":1568033329,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetrics).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    super.initializeMetrics(manager, registry, tag, scope);\n\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        tag, true, \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n        tag, true, \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        tag, true, GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        tag, true, \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster,\n        tag, true, \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave,\n        tag, true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, tag, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n        tag, true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        tag, true, REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(),\n        tag, true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetrics m) {\n    super.initializeMetrics(m);\n    solrMetrics.gauge(this,  () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        true, \"indexSize\", getCategory().toString());\n    solrMetrics.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n         true, \"indexVersion\", getCategory().toString());\n    solrMetrics.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        true, GENERATION, getCategory().toString());\n    solrMetrics.gauge(this, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        true, \"indexPath\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isMaster,\n         true, \"isMaster\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isSlave,\n         true, \"isSlave\", getCategory().toString());\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    solrMetrics.gauge(this , fetcherMap, true, \"fetcher\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n         true, \"confFilesToReplicate\", getCategory().toString());\n    solrMetrics.gauge(this, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        true, REPLICATE_AFTER, getCategory().toString());\n    solrMetrics.gauge(this,  () -> isMaster && replicationEnabled.get(),\n        true, \"replicationEnabled\", getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    super.initializeMetrics(parentContext, scope);\n    solrMetricsContext.gauge(this,  () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        true, \"indexSize\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n         true, \"indexVersion\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        true, GENERATION, getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        true, \"indexPath\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isMaster,\n         true, \"isMaster\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isSlave,\n         true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    solrMetricsContext.gauge(this , fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n         true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        true, REPLICATE_AFTER, getCategory().toString(), scope);\n    solrMetricsContext.gauge(this,  () -> isMaster && replicationEnabled.get(),\n        true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    super.initializeMetrics(manager, registry, tag, scope);\n\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        tag, true, \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n        tag, true, \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        tag, true, GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        tag, true, \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster,\n        tag, true, \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave,\n        tag, true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, tag, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n        tag, true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        tag, true, REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(),\n        tag, true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfc52860e6d13d034226a760813c59d984c6817a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52275555c0ae3b55430cef26ad7fca3f02440944":["a117d95183986014a31f25bb04e5464ca06d6068","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["52275555c0ae3b55430cef26ad7fca3f02440944"],"43564cbb30b064675027cfb569564e8531096e97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a117d95183986014a31f25bb04e5464ca06d6068":["89b1e01b66a1c90a549873dd7b2a68ca52f62930"],"89b1e01b66a1c90a549873dd7b2a68ca52f62930":["43564cbb30b064675027cfb569564e8531096e97"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"]},"commit2Childs":{"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"52275555c0ae3b55430cef26ad7fca3f02440944":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43564cbb30b064675027cfb569564e8531096e97":["89b1e01b66a1c90a549873dd7b2a68ca52f62930"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"a117d95183986014a31f25bb04e5464ca06d6068":["52275555c0ae3b55430cef26ad7fca3f02440944","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["52275555c0ae3b55430cef26ad7fca3f02440944"],"89b1e01b66a1c90a549873dd7b2a68ca52f62930":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}