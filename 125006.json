{"path":"src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","commits":[{"id":"f9a06d6dd4713420efafb5bd917f8bd789482920","date":1181839199,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","pathOld":"src/java/org/apache/solr/util/StrUtils#splitSmart(String,char).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.finest(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.finest(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","pathOld":"src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.finest(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","pathOld":"src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["f9a06d6dd4713420efafb5bd917f8bd789482920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9a06d6dd4713420efafb5bd917f8bd789482920":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f9a06d6dd4713420efafb5bd917f8bd789482920"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"f9a06d6dd4713420efafb5bd917f8bd789482920":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}