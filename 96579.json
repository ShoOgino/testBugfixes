{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#update().mjava","commits":[{"id":"215e40821821b2df2e69355e208532c05ef095a5","date":1510858642,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#update().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Ensures the internal aliases is up to date. If there is a change, return true.\n     *\n     * @return true if an update was performed\n     */\n    public boolean update() throws KeeperException, InterruptedException {\n      Stat stat = new Stat();\n      final byte[] data = zkClient.getData(ALIASES, null, stat, true);\n      return setIfNewer(Aliases.fromJSON(data, stat.getVersion()));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a980795a56f2fcbc94caeb3233071312d5684d59","date":1524255736,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#update().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#update().mjava","sourceNew":"    /**\n     * Ensures the internal aliases is up to date. If there is a change, return true.\n     *\n     * @return true if an update was performed\n     */\n    public boolean update() throws KeeperException, InterruptedException {\n      LOG.debug(\"Checking ZK for most up to date Aliases \" + ALIASES);\n      // Call sync() first to ensure the subsequent read (getData) is up to date.\n      zkClient.getSolrZooKeeper().sync(ALIASES, null, null);\n      Stat stat = new Stat();\n      final byte[] data = zkClient.getData(ALIASES, null, stat, true);\n      return setIfNewer(Aliases.fromJSON(data, stat.getVersion()));\n    }\n\n","sourceOld":"    /**\n     * Ensures the internal aliases is up to date. If there is a change, return true.\n     *\n     * @return true if an update was performed\n     */\n    public boolean update() throws KeeperException, InterruptedException {\n      Stat stat = new Stat();\n      final byte[] data = zkClient.getData(ALIASES, null, stat, true);\n      return setIfNewer(Aliases.fromJSON(data, stat.getVersion()));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db3a95645baea7e03cf8ae62147cba606639004e","date":1525745850,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#update().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#update().mjava","sourceNew":"    /**\n     * Ensures the internal aliases is up to date. If there is a change, return true.\n     *\n     * @return true if an update was performed\n     */\n    public boolean update() throws KeeperException, InterruptedException {\n      LOG.debug(\"Checking ZK for most up to date Aliases {}\", ALIASES);\n      // Call sync() first to ensure the subsequent read (getData) is up to date.\n      zkClient.getSolrZooKeeper().sync(ALIASES, null, null);\n      Stat stat = new Stat();\n      final byte[] data = zkClient.getData(ALIASES, null, stat, true);\n      return setIfNewer(Aliases.fromJSON(data, stat.getVersion()));\n    }\n\n","sourceOld":"    /**\n     * Ensures the internal aliases is up to date. If there is a change, return true.\n     *\n     * @return true if an update was performed\n     */\n    public boolean update() throws KeeperException, InterruptedException {\n      LOG.debug(\"Checking ZK for most up to date Aliases \" + ALIASES);\n      // Call sync() first to ensure the subsequent read (getData) is up to date.\n      zkClient.getSolrZooKeeper().sync(ALIASES, null, null);\n      Stat stat = new Stat();\n      final byte[] data = zkClient.getData(ALIASES, null, stat, true);\n      return setIfNewer(Aliases.fromJSON(data, stat.getVersion()));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#update().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#update().mjava","sourceNew":"    /**\n     * Ensures the internal aliases is up to date. If there is a change, return true.\n     *\n     * @return true if an update was performed\n     */\n    public boolean update() throws KeeperException, InterruptedException {\n      log.debug(\"Checking ZK for most up to date Aliases {}\", ALIASES);\n      // Call sync() first to ensure the subsequent read (getData) is up to date.\n      zkClient.getSolrZooKeeper().sync(ALIASES, null, null);\n      Stat stat = new Stat();\n      final byte[] data = zkClient.getData(ALIASES, null, stat, true);\n      return setIfNewer(Aliases.fromJSON(data, stat.getVersion()));\n    }\n\n","sourceOld":"    /**\n     * Ensures the internal aliases is up to date. If there is a change, return true.\n     *\n     * @return true if an update was performed\n     */\n    public boolean update() throws KeeperException, InterruptedException {\n      LOG.debug(\"Checking ZK for most up to date Aliases {}\", ALIASES);\n      // Call sync() first to ensure the subsequent read (getData) is up to date.\n      zkClient.getSolrZooKeeper().sync(ALIASES, null, null);\n      Stat stat = new Stat();\n      final byte[] data = zkClient.getData(ALIASES, null, stat, true);\n      return setIfNewer(Aliases.fromJSON(data, stat.getVersion()));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a980795a56f2fcbc94caeb3233071312d5684d59":["215e40821821b2df2e69355e208532c05ef095a5"],"215e40821821b2df2e69355e208532c05ef095a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db3a95645baea7e03cf8ae62147cba606639004e":["a980795a56f2fcbc94caeb3233071312d5684d59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["db3a95645baea7e03cf8ae62147cba606639004e"]},"commit2Childs":{"a980795a56f2fcbc94caeb3233071312d5684d59":["db3a95645baea7e03cf8ae62147cba606639004e"],"215e40821821b2df2e69355e208532c05ef095a5":["a980795a56f2fcbc94caeb3233071312d5684d59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["215e40821821b2df2e69355e208532c05ef095a5"],"db3a95645baea7e03cf8ae62147cba606639004e":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}