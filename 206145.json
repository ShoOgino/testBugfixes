{"path":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#nextStartPosition().mjava","commits":[{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#nextStartPosition().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int nextStartPosition() throws IOException {\n    if (atFirstInCurrentDoc) {\n      atFirstInCurrentDoc = false;\n      return minPositionCell().startPosition();\n    }\n    while (minPositionCell().startPosition() == -1) { // initially at current doc\n      minPositionCell().nextStartPosition();\n      spanPositionQueue.updateTop();\n    }\n    assert minPositionCell().startPosition() != NO_MORE_POSITIONS;\n    while (true) {\n      if (minPositionCell().nextStartPosition() == NO_MORE_POSITIONS) {\n        oneExhaustedInCurrentDoc = true;\n        return NO_MORE_POSITIONS;\n      }\n      spanPositionQueue.updateTop();\n      if (atMatch()) {\n        return minPositionCell().startPosition();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c990a47b19c00b21c409e8feb9c273df34d31fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#nextStartPosition().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int nextStartPosition() throws IOException {\n    if (atFirstInCurrentDoc) {\n      atFirstInCurrentDoc = false;\n      return minPositionCell().startPosition();\n    }\n    while (minPositionCell().startPosition() == -1) { // initially at current doc\n      minPositionCell().nextStartPosition();\n      spanPositionQueue.updateTop();\n    }\n    assert minPositionCell().startPosition() != NO_MORE_POSITIONS;\n    while (true) {\n      if (minPositionCell().nextStartPosition() == NO_MORE_POSITIONS) {\n        oneExhaustedInCurrentDoc = true;\n        return NO_MORE_POSITIONS;\n      }\n      spanPositionQueue.updateTop();\n      if (atMatch()) {\n        return minPositionCell().startPosition();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c990a47b19c00b21c409e8feb9c273df34d31fc","date":1488461424,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#nextStartPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#nextStartPosition().mjava","sourceNew":"  @Override\n  public int nextStartPosition() throws IOException {\n    if (atFirstInCurrentDoc) {\n      atFirstInCurrentDoc = false;\n      return spanWindow.top().startPosition();\n    }\n    assert spanWindow.top().startPosition() != -1;\n    assert spanWindow.top().startPosition() != NO_MORE_POSITIONS;\n    while (true) {\n      if (! spanWindow.nextPosition()) {\n        oneExhaustedInCurrentDoc = true;\n        return NO_MORE_POSITIONS;\n      }\n      if (spanWindow.atMatch()) {\n        return spanWindow.top().startPosition();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int nextStartPosition() throws IOException {\n    if (atFirstInCurrentDoc) {\n      atFirstInCurrentDoc = false;\n      return minPositionCell().startPosition();\n    }\n    while (minPositionCell().startPosition() == -1) { // initially at current doc\n      minPositionCell().nextStartPosition();\n      spanPositionQueue.updateTop();\n    }\n    assert minPositionCell().startPosition() != NO_MORE_POSITIONS;\n    while (true) {\n      if (minPositionCell().nextStartPosition() == NO_MORE_POSITIONS) {\n        oneExhaustedInCurrentDoc = true;\n        return NO_MORE_POSITIONS;\n      }\n      spanPositionQueue.updateTop();\n      if (atMatch()) {\n        return minPositionCell().startPosition();\n      }\n    }\n  }\n\n","bugFix":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c990a47b19c00b21c409e8feb9c273df34d31fc":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fab172655716b96f7e42376116235017a922de3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c990a47b19c00b21c409e8feb9c273df34d31fc"]},"commit2Childs":{"1c990a47b19c00b21c409e8feb9c273df34d31fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["1c990a47b19c00b21c409e8feb9c273df34d31fc","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}