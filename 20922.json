{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ENGLISH)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ENGLISH)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ROOT)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ENGLISH)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ROOT)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ENGLISH)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ROOT)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ENGLISH)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ROOT)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ENGLISH)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ROOT)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ROOT)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ROOT)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ROOT)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ROOT)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        sortField0 = new SortField(fieldName, SortField.Type.valueOf(typeString.toUpperCase(Locale.ROOT)));\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["2acf500f78aa12b92e371fd89c719291986b6b90","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fe33227f6805edab2036cbb80645cc4e2d1fa424","81fff83bdb893c1471efd78f6a9a3ce4f98120b9","46d8ada1fff8d18cb197c38c7983225162599948"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","1d3f7ab1a502671bbdb03bcced21e764d2483221"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}