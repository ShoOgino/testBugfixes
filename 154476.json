{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#rewrite(IndexReader).mjava","commits":[{"id":"80ff50a565777c812ef7871453d715713fb6fb9c","date":1430307731,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanContainQuery clone = null;\n    SpanQuery rewrittenBig = (SpanQuery) big.rewrite(reader);\n    if (rewrittenBig != big) {\n      clone = this.clone();\n      clone.big = rewrittenBig;\n    }\n    SpanQuery rewrittenLittle = (SpanQuery) little.rewrite(reader);\n    if (rewrittenLittle != little) {\n      if (clone == null) clone = this.clone();\n      clone.little = rewrittenLittle;\n    }\n    return (clone != null) ? clone : this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanQuery rewrittenBig = (SpanQuery) big.rewrite(reader);\n    SpanQuery rewrittenLittle = (SpanQuery) little.rewrite(reader);\n    if (big != rewrittenBig || little != rewrittenLittle) {\n      try {\n        SpanContainQuery clone = (SpanContainQuery) super.clone();\n        clone.big = rewrittenBig;\n        clone.little = rewrittenLittle;\n        return clone;\n      } catch (CloneNotSupportedException e) {\n        throw new AssertionError(e);\n      }\n    }\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanContainQuery clone = null;\n    SpanQuery rewrittenBig = (SpanQuery) big.rewrite(reader);\n    if (rewrittenBig != big) {\n      clone = this.clone();\n      clone.big = rewrittenBig;\n    }\n    SpanQuery rewrittenLittle = (SpanQuery) little.rewrite(reader);\n    if (rewrittenLittle != little) {\n      if (clone == null) clone = this.clone();\n      clone.little = rewrittenLittle;\n    }\n    return (clone != null) ? clone : this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80ff50a565777c812ef7871453d715713fb6fb9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["80ff50a565777c812ef7871453d715713fb6fb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"80ff50a565777c812ef7871453d715713fb6fb9c":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80ff50a565777c812ef7871453d715713fb6fb9c"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}