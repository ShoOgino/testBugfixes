{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"));\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"));\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"));\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"));\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af527d067afb6ca5bd58afc7b9a5fbc0f80979af","date":1366034882,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\")));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\")));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\")));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\")));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\")));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\")));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\")));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true,  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      DocsAndPositionsEnum disi = reader.termPositionsEnum(new Term(\"foo\", \"bar\"));\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator(null);\n      assertTrue(te.seekExact(new BytesRef(\"bar\")));\n      disi = te.docsAndPositions(null, disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af527d067afb6ca5bd58afc7b9a5fbc0f80979af":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c9fb5f46e264daf5ba3860defe623a89d202dd87","761333d77c7f29123c00c93b107b743f32f012e6"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["af527d067afb6ca5bd58afc7b9a5fbc0f80979af"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"761333d77c7f29123c00c93b107b743f32f012e6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["af527d067afb6ca5bd58afc7b9a5fbc0f80979af"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["761333d77c7f29123c00c93b107b743f32f012e6"]},"commit2Childs":{"af527d067afb6ca5bd58afc7b9a5fbc0f80979af":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["af527d067afb6ca5bd58afc7b9a5fbc0f80979af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"b6a0e3c1c21aac8ecf75706605133012833585c7":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","b6a0e3c1c21aac8ecf75706605133012833585c7","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}