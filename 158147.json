{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader#positionIndex(int,int,PackedInts.Reader,int[]).mjava","commits":[{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader#positionIndex(int,int,PackedInts.Reader,int[]).mjava","pathOld":"/dev/null","sourceNew":"  // field -> term index -> position index\n  private int[][] positionIndex(int skip, int numFields, PackedInts.Reader numTerms, int[] termFreqs) {\n    final int[][] positionIndex = new int[numFields][];\n    int termIndex = 0;\n    for (int i = 0; i < skip; ++i) {\n      final int termCount = (int) numTerms.get(i);\n      termIndex += termCount;\n    }\n    for (int i = 0; i < numFields; ++i) {\n      final int termCount = (int) numTerms.get(skip + i);\n      positionIndex[i] = new int[termCount + 1];\n      for (int j = 0; j < termCount; ++j) {\n        final int freq = termFreqs[termIndex+j];\n        positionIndex[i][j + 1] = positionIndex[i][j] + freq;\n      }\n      termIndex += termCount;\n    }\n    return positionIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader#positionIndex(int,int,PackedInts.Reader,int[]).mjava","pathOld":"/dev/null","sourceNew":"  // field -> term index -> position index\n  private int[][] positionIndex(int skip, int numFields, PackedInts.Reader numTerms, int[] termFreqs) {\n    final int[][] positionIndex = new int[numFields][];\n    int termIndex = 0;\n    for (int i = 0; i < skip; ++i) {\n      final int termCount = (int) numTerms.get(i);\n      termIndex += termCount;\n    }\n    for (int i = 0; i < numFields; ++i) {\n      final int termCount = (int) numTerms.get(skip + i);\n      positionIndex[i] = new int[termCount + 1];\n      for (int j = 0; j < termCount; ++j) {\n        final int freq = termFreqs[termIndex+j];\n        positionIndex[i][j + 1] = positionIndex[i][j] + freq;\n      }\n      termIndex += termCount;\n    }\n    return positionIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eda61b1e90b490cc5837200e04c02639a0d272c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eda61b1e90b490cc5837200e04c02639a0d272c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eda61b1e90b490cc5837200e04c02639a0d272c7"]},"commit2Childs":{"eda61b1e90b490cc5837200e04c02639a0d272c7":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eda61b1e90b490cc5837200e04c02639a0d272c7","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}