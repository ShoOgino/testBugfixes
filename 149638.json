{"path":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n\n    final IndexSearcher searcher = new IndexSearcher(context);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(query, false);\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    for (LeafReaderContext leafReaderContext : context.leaves()) {\n      final Spans spans = w.getSpans(leafReaderContext, SpanWeight.Postings.PAYLOADS);\n      if (spans != null) {\n        while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n          while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n            collector.reset();\n            spans.collect(collector);\n            payloads.addAll(collector.getPayloads());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n\n    final IndexSearcher searcher = new IndexSearcher(context);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(query, false);\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    for (LeafReaderContext leafReaderContext : context.leaves()) {\n      final Spans spans = w.getSpans(leafReaderContext, SpanWeight.Postings.PAYLOADS);\n      if (spans != null) {\n        while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n          while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n            collector.reset();\n            spans.collect(collector);\n            payloads.addAll(collector.getPayloads());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n\n    final IndexSearcher searcher = new IndexSearcher(context);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    for (LeafReaderContext leafReaderContext : context.leaves()) {\n      final Spans spans = w.getSpans(leafReaderContext, SpanWeight.Postings.PAYLOADS);\n      if (spans != null) {\n        while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n          while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n            collector.reset();\n            spans.collect(collector);\n            payloads.addAll(collector.getPayloads());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n\n    final IndexSearcher searcher = new IndexSearcher(context);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(query, false);\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    for (LeafReaderContext leafReaderContext : context.leaves()) {\n      final Spans spans = w.getSpans(leafReaderContext, SpanWeight.Postings.PAYLOADS);\n      if (spans != null) {\n        while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n          while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n            collector.reset();\n            spans.collect(collector);\n            payloads.addAll(collector.getPayloads());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n\n    final IndexSearcher searcher = new IndexSearcher(context);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    for (LeafReaderContext leafReaderContext : context.leaves()) {\n      final Spans spans = w.getSpans(leafReaderContext, SpanWeight.Postings.PAYLOADS);\n      if (spans != null) {\n        while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n          while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n            collector.reset();\n            spans.collect(collector);\n            payloads.addAll(collector.getPayloads());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n\n    final IndexSearcher searcher = new IndexSearcher(context);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(query, false);\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    for (LeafReaderContext leafReaderContext : context.leaves()) {\n      final Spans spans = w.getSpans(leafReaderContext, SpanWeight.Postings.PAYLOADS);\n      if (spans != null) {\n        while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n          while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n            collector.reset();\n            spans.collect(collector);\n            payloads.addAll(collector.getPayloads());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n\n    final IndexSearcher searcher = new IndexSearcher(context);\n    searcher.setQueryCache(null);\n\n    query = (SpanQuery) searcher.rewrite(query);\n    SpanWeight w = (SpanWeight) searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1);\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    for (LeafReaderContext leafReaderContext : context.leaves()) {\n      final Spans spans = w.getSpans(leafReaderContext, SpanWeight.Postings.PAYLOADS);\n      if (spans != null) {\n        while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n          while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n            collector.reset();\n            spans.collect(collector);\n            payloads.addAll(collector.getPayloads());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n\n    final IndexSearcher searcher = new IndexSearcher(context);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    for (LeafReaderContext leafReaderContext : context.leaves()) {\n      final Spans spans = w.getSpans(leafReaderContext, SpanWeight.Postings.PAYLOADS);\n      if (spans != null) {\n        while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n          while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n            collector.reset();\n            spans.collect(collector);\n            payloads.addAll(collector.getPayloads());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n\n    final IndexSearcher searcher = new IndexSearcher(context);\n    searcher.setQueryCache(null);\n\n    query = (SpanQuery) searcher.rewrite(query);\n    SpanWeight w = (SpanWeight) searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1);\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    for (LeafReaderContext leafReaderContext : context.leaves()) {\n      final Spans spans = w.getSpans(leafReaderContext, SpanWeight.Postings.PAYLOADS);\n      if (spans != null) {\n        while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n          while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n            collector.reset();\n            spans.collect(collector);\n            payloads.addAll(collector.getPayloads());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n\n    final IndexSearcher searcher = new IndexSearcher(context);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    for (LeafReaderContext leafReaderContext : context.leaves()) {\n      final Spans spans = w.getSpans(leafReaderContext, SpanWeight.Postings.PAYLOADS);\n      if (spans != null) {\n        while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n          while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n            collector.reset();\n            spans.collect(collector);\n            payloads.addAll(collector.getPayloads());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}