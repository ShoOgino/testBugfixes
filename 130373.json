{"path":"lucene/sandbox/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","commits":[{"id":"1e81e0b2df18b157319eed7be0ffb5d585a34b7c","date":1552378734,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","pathOld":"/dev/null","sourceNew":"  public void testTriangleIntersects() {\n    Line line = new Line(new double[] {0.5, 0, 1, 2, 3}, new double[] {0.5, 0, 0, 2, 2});\n    Line2D line2D = Line2D.create(line);\n    int ax = GeoEncodingUtils.encodeLongitude(0.0);\n    int ay = GeoEncodingUtils.encodeLatitude(0.0);\n    int bx = GeoEncodingUtils.encodeLongitude(1);\n    int by = GeoEncodingUtils.encodeLatitude(0);\n    int cx = GeoEncodingUtils.encodeLongitude(0);\n    int cy = GeoEncodingUtils.encodeLatitude(1);\n    assertEquals(Relation.CELL_CROSSES_QUERY, line2D.componentRelateTriangle(ax, ay, bx, by , cx, cy));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","sourceNew":"  public void testTriangleIntersects() {\n    Line line = new Line(new double[] {0.5, 0, 1, 2, 3}, new double[] {0.5, 0, 0, 2, 2});\n    Component2D line2D = Line2D.create(line);\n    int ax = GeoEncodingUtils.encodeLongitude(0.0);\n    int ay = GeoEncodingUtils.encodeLatitude(0.0);\n    int bx = GeoEncodingUtils.encodeLongitude(1);\n    int by = GeoEncodingUtils.encodeLatitude(0);\n    int cx = GeoEncodingUtils.encodeLongitude(0);\n    int cy = GeoEncodingUtils.encodeLatitude(1);\n    assertEquals(Relation.CELL_CROSSES_QUERY, line2D.relateTriangle(ax, ay, bx, by , cx, cy));\n  }\n\n","sourceOld":"  public void testTriangleIntersects() {\n    Line line = new Line(new double[] {0.5, 0, 1, 2, 3}, new double[] {0.5, 0, 0, 2, 2});\n    Line2D line2D = Line2D.create(line);\n    int ax = GeoEncodingUtils.encodeLongitude(0.0);\n    int ay = GeoEncodingUtils.encodeLatitude(0.0);\n    int bx = GeoEncodingUtils.encodeLongitude(1);\n    int by = GeoEncodingUtils.encodeLatitude(0);\n    int cx = GeoEncodingUtils.encodeLongitude(0);\n    int cy = GeoEncodingUtils.encodeLatitude(1);\n    assertEquals(Relation.CELL_CROSSES_QUERY, line2D.componentRelateTriangle(ax, ay, bx, by , cx, cy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","sourceNew":"  public void testTriangleIntersects() {\n    Line line = new Line(new double[] {0.5, 0, 1, 2, 3}, new double[] {0.5, 0, 0, 2, 2});\n    Component2D line2D = Line2D.create(line);\n    int ax = GeoEncodingUtils.encodeLongitude(0.0);\n    int ay = GeoEncodingUtils.encodeLatitude(0.0);\n    int bx = GeoEncodingUtils.encodeLongitude(1);\n    int by = GeoEncodingUtils.encodeLatitude(0);\n    int cx = GeoEncodingUtils.encodeLongitude(0);\n    int cy = GeoEncodingUtils.encodeLatitude(1);\n    assertEquals(Relation.CELL_CROSSES_QUERY, line2D.relateTriangle(ax, ay, bx, by , cx, cy));\n  }\n\n","sourceOld":"  public void testTriangleIntersects() {\n    Line line = new Line(new double[] {0.5, 0, 1, 2, 3}, new double[] {0.5, 0, 0, 2, 2});\n    Line2D line2D = Line2D.create(line);\n    int ax = GeoEncodingUtils.encodeLongitude(0.0);\n    int ay = GeoEncodingUtils.encodeLatitude(0.0);\n    int bx = GeoEncodingUtils.encodeLongitude(1);\n    int by = GeoEncodingUtils.encodeLatitude(0);\n    int cx = GeoEncodingUtils.encodeLongitude(0);\n    int cy = GeoEncodingUtils.encodeLatitude(1);\n    assertEquals(Relation.CELL_CROSSES_QUERY, line2D.componentRelateTriangle(ax, ay, bx, by , cx, cy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","sourceNew":"  public void testTriangleIntersects() {\n    Line line = new Line(new double[] {0.5, 0, 1, 2, 3}, new double[] {0.5, 0, 0, 2, 2});\n    Component2D line2D = Line2D.create(line);\n    int ax = GeoEncodingUtils.encodeLongitude(0.0);\n    int ay = GeoEncodingUtils.encodeLatitude(0.0);\n    int bx = GeoEncodingUtils.encodeLongitude(1);\n    int by = GeoEncodingUtils.encodeLatitude(0);\n    int cx = GeoEncodingUtils.encodeLongitude(0);\n    int cy = GeoEncodingUtils.encodeLatitude(1);\n    assertEquals(Relation.CELL_CROSSES_QUERY, line2D.relateTriangle(ax, ay, bx, by , cx, cy));\n    assertEquals(Component2D.WithinRelation.NOTWITHIN, line2D.withinTriangle(ax, ay, true, bx, by , true, cx, cy, true));\n  }\n\n","sourceOld":"  public void testTriangleIntersects() {\n    Line line = new Line(new double[] {0.5, 0, 1, 2, 3}, new double[] {0.5, 0, 0, 2, 2});\n    Component2D line2D = Line2D.create(line);\n    int ax = GeoEncodingUtils.encodeLongitude(0.0);\n    int ay = GeoEncodingUtils.encodeLatitude(0.0);\n    int bx = GeoEncodingUtils.encodeLongitude(1);\n    int by = GeoEncodingUtils.encodeLatitude(0);\n    int cx = GeoEncodingUtils.encodeLongitude(0);\n    int cy = GeoEncodingUtils.encodeLatitude(1);\n    assertEquals(Relation.CELL_CROSSES_QUERY, line2D.relateTriangle(ax, ay, bx, by , cx, cy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","sourceNew":"  public void testTriangleIntersects() {\n    Line line = new Line(new double[] {0.5, 0, 1, 2, 3}, new double[] {0.5, 0, 0, 2, 2});\n    Component2D line2D = Line2D.create(line);\n    int ax = GeoEncodingUtils.encodeLongitude(0.0);\n    int ay = GeoEncodingUtils.encodeLatitude(0.0);\n    int bx = GeoEncodingUtils.encodeLongitude(1);\n    int by = GeoEncodingUtils.encodeLatitude(0);\n    int cx = GeoEncodingUtils.encodeLongitude(0);\n    int cy = GeoEncodingUtils.encodeLatitude(1);\n    assertEquals(Relation.CELL_CROSSES_QUERY, line2D.relateTriangle(ax, ay, bx, by , cx, cy));\n    assertEquals(Component2D.WithinRelation.NOTWITHIN, line2D.withinTriangle(ax, ay, true, bx, by , true, cx, cy, true));\n  }\n\n","sourceOld":"  public void testTriangleIntersects() {\n    Line line = new Line(new double[] {0.5, 0, 1, 2, 3}, new double[] {0.5, 0, 0, 2, 2});\n    Component2D line2D = Line2D.create(line);\n    int ax = GeoEncodingUtils.encodeLongitude(0.0);\n    int ay = GeoEncodingUtils.encodeLatitude(0.0);\n    int bx = GeoEncodingUtils.encodeLongitude(1);\n    int by = GeoEncodingUtils.encodeLatitude(0);\n    int cx = GeoEncodingUtils.encodeLongitude(0);\n    int cy = GeoEncodingUtils.encodeLatitude(1);\n    assertEquals(Relation.CELL_CROSSES_QUERY, line2D.relateTriangle(ax, ay, bx, by , cx, cy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestLine2D#testTriangleIntersects().mjava","sourceNew":"  public void testTriangleIntersects() {\n    Line line = new Line(new double[] {0.5, 0, 1, 2, 3}, new double[] {0.5, 0, 0, 2, 2});\n    Component2D line2D = Line2D.create(line);\n    int ax = GeoEncodingUtils.encodeLongitude(0.0);\n    int ay = GeoEncodingUtils.encodeLatitude(0.0);\n    int bx = GeoEncodingUtils.encodeLongitude(1);\n    int by = GeoEncodingUtils.encodeLatitude(0);\n    int cx = GeoEncodingUtils.encodeLongitude(0);\n    int cy = GeoEncodingUtils.encodeLatitude(1);\n    assertEquals(Relation.CELL_CROSSES_QUERY, line2D.relateTriangle(ax, ay, bx, by , cx, cy));\n    assertEquals(Component2D.WithinRelation.NOTWITHIN, line2D.withinTriangle(ax, ay, true, bx, by , true, cx, cy, true));\n  }\n\n","sourceOld":"  public void testTriangleIntersects() {\n    Line line = new Line(new double[] {0.5, 0, 1, 2, 3}, new double[] {0.5, 0, 0, 2, 2});\n    Component2D line2D = Line2D.create(line);\n    int ax = GeoEncodingUtils.encodeLongitude(0.0);\n    int ay = GeoEncodingUtils.encodeLatitude(0.0);\n    int bx = GeoEncodingUtils.encodeLongitude(1);\n    int by = GeoEncodingUtils.encodeLatitude(0);\n    int cx = GeoEncodingUtils.encodeLongitude(0);\n    int cy = GeoEncodingUtils.encodeLatitude(1);\n    assertEquals(Relation.CELL_CROSSES_QUERY, line2D.relateTriangle(ax, ay, bx, by , cx, cy));\n    assertEquals(Component2D.WithinRelation.NOTWITHIN, line2D.withinTriangle(ax, ay, true, bx, by , true, cx, cy, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["1e81e0b2df18b157319eed7be0ffb5d585a34b7c"],"1e81e0b2df18b157319eed7be0ffb5d585a34b7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"b0b597c65628ca9e73913a07e81691f8229bae35":["1e81e0b2df18b157319eed7be0ffb5d585a34b7c","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","b0b597c65628ca9e73913a07e81691f8229bae35"],"1e81e0b2df18b157319eed7be0ffb5d585a34b7c":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e81e0b2df18b157319eed7be0ffb5d585a34b7c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}