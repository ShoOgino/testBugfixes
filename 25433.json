{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#common(TempTermData,TempTermData).mjava","commits":[{"id":"f71b8f76a3876ede75eba21fb109342525c3d9c4","date":1378263923,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#common(TempTermData,TempTermData).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#common(TempMetaData,TempMetaData).mjava","sourceNew":"  @Override\n  //\n  // The return value will be the smaller one, when these two are \n  // 'comparable', i.e. \n  // 1. every value in t1 is not larger than in t2, or\n  // 2. every value in t1 is not smaller than t2.\n  //\n  public TempTermData common(TempTermData t1, TempTermData t2) {\n    //if (TEST) System.out.print(\"common(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT || t2 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+NO_OUTPUT);\n      return NO_OUTPUT;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    long[] min = t1.longs, max = t2.longs;\n    int pos = 0;\n    TempTermData ret;\n\n    while (pos < longsSize && min[pos] == max[pos]) {\n      pos++;\n    }\n    if (pos < longsSize) {  // unequal long[]\n      if (min[pos] > max[pos]) {\n        min = t2.longs;\n        max = t1.longs;\n      }\n      // check whether strictly smaller\n      while (pos < longsSize && min[pos] <= max[pos]) {\n        pos++;\n      }\n      if (pos < longsSize || allZero(min)) {  // not comparable or all-zero\n        ret = NO_OUTPUT;\n      } else {\n        ret = new TempTermData(min, null, 0, -1);\n      }\n    } else {  // equal long[]\n      if (statsEqual(t1, t2) && bytesEqual(t1, t2)) {\n        ret = t1;\n      } else if (allZero(min)) {\n        ret = NO_OUTPUT;\n      } else {\n        ret = new TempTermData(min, null, 0, -1);\n      }\n    }\n    //if (TEST) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  //\n  // The return value will be the smaller one, when these two are \n  // 'comparable', i.e. \n  // 1. every value in t1 is not larger than in t2, or\n  // 2. every value in t1 is not smaller than t2.\n  //\n  public TempMetaData common(TempMetaData t1, TempMetaData t2) {\n    //if (TEST) System.out.print(\"common(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT || t2 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+NO_OUTPUT);\n      return NO_OUTPUT;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    long[] min = t1.longs, max = t2.longs;\n    int pos = 0;\n    TempMetaData ret;\n\n    while (pos < longsSize && min[pos] == max[pos]) {\n      pos++;\n    }\n    if (pos < longsSize) {  // unequal long[]\n      if (min[pos] > max[pos]) {\n        min = t2.longs;\n        max = t1.longs;\n      }\n      // check whether strictly smaller\n      while (pos < longsSize && min[pos] <= max[pos]) {\n        pos++;\n      }\n      if (pos < longsSize || allZero(min)) {  // not comparable or all-zero\n        ret = NO_OUTPUT;\n      } else {\n        ret = new TempMetaData(min, null, 0, -1);\n      }\n    } else {  // equal long[]\n      if (statsEqual(t1, t2) && bytesEqual(t1, t2)) {\n        ret = t1;\n      } else if (allZero(min)) {\n        ret = NO_OUTPUT;\n      } else {\n        ret = new TempMetaData(min, null, 0, -1);\n      }\n    }\n    //if (TEST) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#common(TermData,TermData).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#common(TempTermData,TempTermData).mjava","sourceNew":"  @Override\n  //\n  // The return value will be the smaller one, when these two are \n  // 'comparable', i.e. \n  // 1. every value in t1 is not larger than in t2, or\n  // 2. every value in t1 is not smaller than t2.\n  //\n  public TermData common(TermData t1, TermData t2) {\n    //if (TEST) System.out.print(\"common(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT || t2 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+NO_OUTPUT);\n      return NO_OUTPUT;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    long[] min = t1.longs, max = t2.longs;\n    int pos = 0;\n    TermData ret;\n\n    while (pos < longsSize && min[pos] == max[pos]) {\n      pos++;\n    }\n    if (pos < longsSize) {  // unequal long[]\n      if (min[pos] > max[pos]) {\n        min = t2.longs;\n        max = t1.longs;\n      }\n      // check whether strictly smaller\n      while (pos < longsSize && min[pos] <= max[pos]) {\n        pos++;\n      }\n      if (pos < longsSize || allZero(min)) {  // not comparable or all-zero\n        ret = NO_OUTPUT;\n      } else {\n        ret = new TermData(min, null, 0, -1);\n      }\n    } else {  // equal long[]\n      if (statsEqual(t1, t2) && bytesEqual(t1, t2)) {\n        ret = t1;\n      } else if (allZero(min)) {\n        ret = NO_OUTPUT;\n      } else {\n        ret = new TermData(min, null, 0, -1);\n      }\n    }\n    //if (TEST) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  //\n  // The return value will be the smaller one, when these two are \n  // 'comparable', i.e. \n  // 1. every value in t1 is not larger than in t2, or\n  // 2. every value in t1 is not smaller than t2.\n  //\n  public TempTermData common(TempTermData t1, TempTermData t2) {\n    //if (TEST) System.out.print(\"common(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT || t2 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+NO_OUTPUT);\n      return NO_OUTPUT;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    long[] min = t1.longs, max = t2.longs;\n    int pos = 0;\n    TempTermData ret;\n\n    while (pos < longsSize && min[pos] == max[pos]) {\n      pos++;\n    }\n    if (pos < longsSize) {  // unequal long[]\n      if (min[pos] > max[pos]) {\n        min = t2.longs;\n        max = t1.longs;\n      }\n      // check whether strictly smaller\n      while (pos < longsSize && min[pos] <= max[pos]) {\n        pos++;\n      }\n      if (pos < longsSize || allZero(min)) {  // not comparable or all-zero\n        ret = NO_OUTPUT;\n      } else {\n        ret = new TempTermData(min, null, 0, -1);\n      }\n    } else {  // equal long[]\n      if (statsEqual(t1, t2) && bytesEqual(t1, t2)) {\n        ret = t1;\n      } else if (allZero(min)) {\n        ret = NO_OUTPUT;\n      } else {\n        ret = new TempTermData(min, null, 0, -1);\n      }\n    }\n    //if (TEST) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["f71b8f76a3876ede75eba21fb109342525c3d9c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f71b8f76a3876ede75eba21fb109342525c3d9c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f71b8f76a3876ede75eba21fb109342525c3d9c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f71b8f76a3876ede75eba21fb109342525c3d9c4":["56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56df73d43b6fc340f5332322862382c7e30f4368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}