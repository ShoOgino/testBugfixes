{"path":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","commits":[{"id":"8b49777657109e40eeddc1c8b0f7850d3c06e1ed","date":1428506188,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Creates simple phrase query from the cached tokenstream contents \n   */\n  private Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {\n    PhraseQuery pq = newPhraseQuery();\n    pq.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;    \n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      termAtt.fillBytesRef();\n      \n      if (enablePositionIncrements) {\n        position += posIncrAtt.getPositionIncrement();\n        pq.add(new Term(field, BytesRef.deepCopyOf(bytes)), position);\n      } else {\n        pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n      }\n    }\n    \n    return pq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","sourceNew":"  /** \n   * Creates simple phrase query from the cached tokenstream contents \n   */\n  private Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;    \n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      termAtt.fillBytesRef();\n      \n      if (enablePositionIncrements) {\n        position += posIncrAtt.getPositionIncrement();\n      } else {\n        position += 1;\n      }\n      builder.add(new Term(field, bytes), position);\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  /** \n   * Creates simple phrase query from the cached tokenstream contents \n   */\n  private Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {\n    PhraseQuery pq = newPhraseQuery();\n    pq.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;    \n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      termAtt.fillBytesRef();\n      \n      if (enablePositionIncrements) {\n        position += posIncrAtt.getPositionIncrement();\n        pq.add(new Term(field, BytesRef.deepCopyOf(bytes)), position);\n      } else {\n        pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n      }\n    }\n    \n    return pq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804b857d1066ab5185b3b9101bde41b0b71426ec","date":1435846169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","sourceNew":"  /** \n   * Creates simple phrase query from the cached tokenstream contents \n   */\n  private Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;    \n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      if (enablePositionIncrements) {\n        position += posIncrAtt.getPositionIncrement();\n      } else {\n        position += 1;\n      }\n      builder.add(new Term(field, termAtt.getBytesRef()), position);\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  /** \n   * Creates simple phrase query from the cached tokenstream contents \n   */\n  private Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;    \n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      termAtt.fillBytesRef();\n      \n      if (enablePositionIncrements) {\n        position += posIncrAtt.getPositionIncrement();\n      } else {\n        position += 1;\n      }\n      builder.add(new Term(field, bytes), position);\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd564443cc619840b8e9859c46194b087f94ffce","date":1479727773,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","sourceNew":"  /** \n   * Creates simple phrase query from the cached tokenstream contents \n   */\n  protected Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;    \n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      if (enablePositionIncrements) {\n        position += posIncrAtt.getPositionIncrement();\n      } else {\n        position += 1;\n      }\n      builder.add(new Term(field, termAtt.getBytesRef()), position);\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  /** \n   * Creates simple phrase query from the cached tokenstream contents \n   */\n  private Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;    \n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      if (enablePositionIncrements) {\n        position += posIncrAtt.getPositionIncrement();\n      } else {\n        position += 1;\n      }\n      builder.add(new Term(field, termAtt.getBytesRef()), position);\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd70af1186a18d10a788433cc33be44327a83ce7","date":1479767946,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","sourceNew":"  /** \n   * Creates simple phrase query from the cached tokenstream contents \n   */\n  protected Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;    \n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      if (enablePositionIncrements) {\n        position += posIncrAtt.getPositionIncrement();\n      } else {\n        position += 1;\n      }\n      builder.add(new Term(field, termAtt.getBytesRef()), position);\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  /** \n   * Creates simple phrase query from the cached tokenstream contents \n   */\n  private Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;    \n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      if (enablePositionIncrements) {\n        position += posIncrAtt.getPositionIncrement();\n      } else {\n        position += 1;\n      }\n      builder.add(new Term(field, termAtt.getBytesRef()), position);\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ac99c5ad157ae4ccdb201f140463a90f12f07b3","date":1582540181,"type":3,"author":"Alessandro Benedetti","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzePhrase(String,TokenStream,int).mjava","sourceNew":"  /** \n   * Creates simple phrase query from the cached tokenstream contents \n   */\n  protected Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BoostAttribute boostAtt = stream.addAttribute(BoostAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;\n    float phraseBoost = DEFAULT_BOOST;\n    stream.reset();\n    while (stream.incrementToken()) {\n      if (enablePositionIncrements) {\n        position += posIncrAtt.getPositionIncrement();\n      } else {\n        position += 1;\n      }\n      builder.add(new Term(field, termAtt.getBytesRef()), position);\n      phraseBoost *= boostAtt.getBoost();\n    }\n    PhraseQuery query = builder.build();\n    if (phraseBoost == DEFAULT_BOOST) {\n      return query;\n    }\n    return new BoostQuery(query, phraseBoost);\n  }\n\n","sourceOld":"  /** \n   * Creates simple phrase query from the cached tokenstream contents \n   */\n  protected Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.setSlop(slop);\n    \n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n    int position = -1;    \n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      if (enablePositionIncrements) {\n        position += posIncrAtt.getPositionIncrement();\n      } else {\n        position += 1;\n      }\n      builder.add(new Term(field, termAtt.getBytesRef()), position);\n    }\n\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ac99c5ad157ae4ccdb201f140463a90f12f07b3":["bd564443cc619840b8e9859c46194b087f94ffce"],"804b857d1066ab5185b3b9101bde41b0b71426ec":["e9e1499c5d26c936238506df90a3c02c76707722"],"8b49777657109e40eeddc1c8b0f7850d3c06e1ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd564443cc619840b8e9859c46194b087f94ffce":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"e9e1499c5d26c936238506df90a3c02c76707722":["8b49777657109e40eeddc1c8b0f7850d3c06e1ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd70af1186a18d10a788433cc33be44327a83ce7":["804b857d1066ab5185b3b9101bde41b0b71426ec","bd564443cc619840b8e9859c46194b087f94ffce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ac99c5ad157ae4ccdb201f140463a90f12f07b3"]},"commit2Childs":{"3ac99c5ad157ae4ccdb201f140463a90f12f07b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"804b857d1066ab5185b3b9101bde41b0b71426ec":["bd564443cc619840b8e9859c46194b087f94ffce","cd70af1186a18d10a788433cc33be44327a83ce7"],"8b49777657109e40eeddc1c8b0f7850d3c06e1ed":["e9e1499c5d26c936238506df90a3c02c76707722"],"bd564443cc619840b8e9859c46194b087f94ffce":["3ac99c5ad157ae4ccdb201f140463a90f12f07b3","cd70af1186a18d10a788433cc33be44327a83ce7"],"e9e1499c5d26c936238506df90a3c02c76707722":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b49777657109e40eeddc1c8b0f7850d3c06e1ed"],"cd70af1186a18d10a788433cc33be44327a83ce7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd70af1186a18d10a788433cc33be44327a83ce7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}