{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n    \n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if (filter.accept(null, fileName) &&\n          (segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n    \n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if (filter.accept(null, fileName) &&\n          (segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n    \n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if (filter.accept(null, fileName) &&\n          (segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}