{"path":"src/java/org/apache/lucene/index/IndexDeletionPolicy#onCommit(List).mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexDeletionPolicy#onCommit(List).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>This is called each time the writer commits.  This\n   * gives the policy a chance to remove old commit points\n   * with each commit.</p>\n   *\n   * <p>If writer has <code>autoCommit = true</code> then\n   * this method will in general be called many times during\n   * one instance of {@link IndexWriter}.  If\n   * <code>autoCommit = false</code> then this method is\n   * only called once when {@link IndexWriter#close} is\n   * called, or not at all if the {@link IndexWriter#abort}\n   * is called.  The policy may now choose to delete old\n   * commit points by calling {@link IndexCommitPoint#delete}.\n   *\n   * @param commits List of {@link IndexCommitPoint}>,\n   *  sorted by age (the 0th one is the oldest commit).\n   */\n  public void onCommit(List commits) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b685e89f45e34ea31f9ca89912e4f29038818ff6","date":1173986546,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexDeletionPolicy#onCommit(List).mjava","pathOld":"src/java/org/apache/lucene/index/IndexDeletionPolicy#onCommit(List).mjava","sourceNew":"  /**\n   * <p>This is called each time the writer completed a commit.\n   * This gives the policy a chance to remove old commit points\n   * with each commit.</p>\n   *\n   * <p>The policy may now choose to delete old commit points \n   * by calling method {@link IndexCommitPoint#delete delete()} \n   * of {@link IndexCommitPoint}.</p>\n   * \n   * <p>If writer has <code>autoCommit = true</code> then\n   * this method will in general be called many times during\n   * one instance of {@link IndexWriter}.  If\n   * <code>autoCommit = false</code> then this method is\n   * only called once when {@link IndexWriter#close} is\n   * called, or not at all if the {@link IndexWriter#abort}\n   * is called. \n   *\n   * <p><u>Note:</u> the last CommitPoint is the most recent one,\n   * i.e. the \"front index state\". Be careful not to delete it,\n   * unless you know for sure what you are doing, and unless \n   * you can afford to lose the index content while doing that.\n   *  \n   * @param commits List of {@link IndexCommitPoint},\n   *  sorted by age (the 0th one is the oldest commit).\n   */\n  public void onCommit(List commits) throws IOException;\n\n","sourceOld":"  /**\n   * <p>This is called each time the writer commits.  This\n   * gives the policy a chance to remove old commit points\n   * with each commit.</p>\n   *\n   * <p>If writer has <code>autoCommit = true</code> then\n   * this method will in general be called many times during\n   * one instance of {@link IndexWriter}.  If\n   * <code>autoCommit = false</code> then this method is\n   * only called once when {@link IndexWriter#close} is\n   * called, or not at all if the {@link IndexWriter#abort}\n   * is called.  The policy may now choose to delete old\n   * commit points by calling {@link IndexCommitPoint#delete}.\n   *\n   * @param commits List of {@link IndexCommitPoint}>,\n   *  sorted by age (the 0th one is the oldest commit).\n   */\n  public void onCommit(List commits) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1559506fd82ede79bd8e60facef2a57524e175","date":1204808228,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexDeletionPolicy#onCommit(List).mjava","pathOld":"src/java/org/apache/lucene/index/IndexDeletionPolicy#onCommit(List).mjava","sourceNew":"  /**\n   * <p>This is called each time the writer completed a commit.\n   * This gives the policy a chance to remove old commit points\n   * with each commit.</p>\n   *\n   * <p>The policy may now choose to delete old commit points \n   * by calling method {@link IndexCommit#delete delete()} \n   * of {@link IndexCommit}.</p>\n   * \n   * <p>If writer has <code>autoCommit = true</code> then\n   * this method will in general be called many times during\n   * one instance of {@link IndexWriter}.  If\n   * <code>autoCommit = false</code> then this method is\n   * only called once when {@link IndexWriter#close} is\n   * called, or not at all if the {@link IndexWriter#abort}\n   * is called. \n   *\n   * <p><u>Note:</u> the last CommitPoint is the most recent one,\n   * i.e. the \"front index state\". Be careful not to delete it,\n   * unless you know for sure what you are doing, and unless \n   * you can afford to lose the index content while doing that.\n   *  \n   * @param commits List of {@link IndexCommit},\n   *  sorted by age (the 0th one is the oldest commit).\n   */\n  public void onCommit(List commits) throws IOException;\n\n","sourceOld":"  /**\n   * <p>This is called each time the writer completed a commit.\n   * This gives the policy a chance to remove old commit points\n   * with each commit.</p>\n   *\n   * <p>The policy may now choose to delete old commit points \n   * by calling method {@link IndexCommitPoint#delete delete()} \n   * of {@link IndexCommitPoint}.</p>\n   * \n   * <p>If writer has <code>autoCommit = true</code> then\n   * this method will in general be called many times during\n   * one instance of {@link IndexWriter}.  If\n   * <code>autoCommit = false</code> then this method is\n   * only called once when {@link IndexWriter#close} is\n   * called, or not at all if the {@link IndexWriter#abort}\n   * is called. \n   *\n   * <p><u>Note:</u> the last CommitPoint is the most recent one,\n   * i.e. the \"front index state\". Be careful not to delete it,\n   * unless you know for sure what you are doing, and unless \n   * you can afford to lose the index content while doing that.\n   *  \n   * @param commits List of {@link IndexCommitPoint},\n   *  sorted by age (the 0th one is the oldest commit).\n   */\n  public void onCommit(List commits) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexDeletionPolicy#onCommit(List).mjava","pathOld":"src/java/org/apache/lucene/index/IndexDeletionPolicy#onCommit(List).mjava","sourceNew":"  /**\n   * <p>This is called each time the writer completed a commit.\n   * This gives the policy a chance to remove old commit points\n   * with each commit.</p>\n   *\n   * <p>The policy may now choose to delete old commit points \n   * by calling method {@link IndexCommit#delete delete()} \n   * of {@link IndexCommit}.</p>\n   * \n   * <p>This method is only called when {@link\n   * IndexWriter#commit} or {@link IndexWriter#close} is\n   * called, or possibly not at all if the {@link\n   * IndexWriter#abort} is called.\n   *\n   * <p><u>Note:</u> the last CommitPoint is the most recent one,\n   * i.e. the \"front index state\". Be careful not to delete it,\n   * unless you know for sure what you are doing, and unless \n   * you can afford to lose the index content while doing that.\n   *  \n   * @param commits List of {@link IndexCommit},\n   *  sorted by age (the 0th one is the oldest commit).\n   */\n  public void onCommit(List commits) throws IOException;\n\n","sourceOld":"  /**\n   * <p>This is called each time the writer completed a commit.\n   * This gives the policy a chance to remove old commit points\n   * with each commit.</p>\n   *\n   * <p>The policy may now choose to delete old commit points \n   * by calling method {@link IndexCommit#delete delete()} \n   * of {@link IndexCommit}.</p>\n   * \n   * <p>If writer has <code>autoCommit = true</code> then\n   * this method will in general be called many times during\n   * one instance of {@link IndexWriter}.  If\n   * <code>autoCommit = false</code> then this method is\n   * only called once when {@link IndexWriter#close} is\n   * called, or not at all if the {@link IndexWriter#abort}\n   * is called. \n   *\n   * <p><u>Note:</u> the last CommitPoint is the most recent one,\n   * i.e. the \"front index state\". Be careful not to delete it,\n   * unless you know for sure what you are doing, and unless \n   * you can afford to lose the index content while doing that.\n   *  \n   * @param commits List of {@link IndexCommit},\n   *  sorted by age (the 0th one is the oldest commit).\n   */\n  public void onCommit(List commits) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexDeletionPolicy#onCommit(List[IndexCommit]).mjava","pathOld":"src/java/org/apache/lucene/index/IndexDeletionPolicy#onCommit(List).mjava","sourceNew":"  /**\n   * <p>This is called each time the writer completed a commit.\n   * This gives the policy a chance to remove old commit points\n   * with each commit.</p>\n   *\n   * <p>The policy may now choose to delete old commit points \n   * by calling method {@link IndexCommit#delete delete()} \n   * of {@link IndexCommit}.</p>\n   * \n   * <p>This method is only called when {@link\n   * IndexWriter#commit} or {@link IndexWriter#close} is\n   * called, or possibly not at all if the {@link\n   * IndexWriter#abort} is called.\n   *\n   * <p><u>Note:</u> the last CommitPoint is the most recent one,\n   * i.e. the \"front index state\". Be careful not to delete it,\n   * unless you know for sure what you are doing, and unless \n   * you can afford to lose the index content while doing that.\n   *  \n   * @param commits List of {@link IndexCommit},\n   *  sorted by age (the 0th one is the oldest commit).\n   */\n  public void onCommit(List<IndexCommit> commits) throws IOException;\n\n","sourceOld":"  /**\n   * <p>This is called each time the writer completed a commit.\n   * This gives the policy a chance to remove old commit points\n   * with each commit.</p>\n   *\n   * <p>The policy may now choose to delete old commit points \n   * by calling method {@link IndexCommit#delete delete()} \n   * of {@link IndexCommit}.</p>\n   * \n   * <p>This method is only called when {@link\n   * IndexWriter#commit} or {@link IndexWriter#close} is\n   * called, or possibly not at all if the {@link\n   * IndexWriter#abort} is called.\n   *\n   * <p><u>Note:</u> the last CommitPoint is the most recent one,\n   * i.e. the \"front index state\". Be careful not to delete it,\n   * unless you know for sure what you are doing, and unless \n   * you can afford to lose the index content while doing that.\n   *  \n   * @param commits List of {@link IndexCommit},\n   *  sorted by age (the 0th one is the oldest commit).\n   */\n  public void onCommit(List commits) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["87c966e9308847938a7c905c2e46a56d8df788b8"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["8b6187898fc4413ccd18229711786550a280383c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87c966e9308847938a7c905c2e46a56d8df788b8":["8a1559506fd82ede79bd8e60facef2a57524e175"],"8a1559506fd82ede79bd8e60facef2a57524e175":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"]},"commit2Childs":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["8a1559506fd82ede79bd8e60facef2a57524e175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"87c966e9308847938a7c905c2e46a56d8df788b8":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"8a1559506fd82ede79bd8e60facef2a57524e175":["87c966e9308847938a7c905c2e46a56d8df788b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}