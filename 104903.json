{"path":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#relateRectangleCircleWrapsPole(Rectangle,SpatialContext).mjava","commits":[{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#relateRectangleCircleWrapsPole(Rectangle,SpatialContext).mjava","pathOld":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#relateRectangleCircleWrapsPole(Rectangle,SpatialContext).mjava","sourceNew":"  private SpatialRelation relateRectangleCircleWrapsPole(Rectangle r, SpatialContext ctx) {\n    //This method handles the case where the circle wraps ONE pole, but not both.  For both,\n    // there is the inverseCircle case handled before now.  The only exception is for the case where\n    // the circle covers the entire globe, and we'll check that first.\n    if (distDEG == 180)//whole globe\n      return SpatialRelation.CONTAINS;\n\n    //Check if r is within the pole wrap region:\n    double yTop = getCenter().getY()+ distDEG;\n    if (yTop > 90) {\n      double yTopOverlap = yTop - 90;\n      assert yTopOverlap <= 90;\n      if (r.getMinY() >= 90 - yTopOverlap)\n        return SpatialRelation.CONTAINS;\n    } else {\n      double yBot = point.getY() - distDEG;\n      if (yBot < -90) {\n        double yBotOverlap = -90 - yBot;\n        assert yBotOverlap <= 90;\n        if (r.getMaxY() <= -90 + yBotOverlap)\n          return SpatialRelation.CONTAINS;\n      } else {\n        //This point is probably not reachable ??\n        assert yTop == 90 || yBot == -90;//we simply touch a pole\n        //continue\n      }\n    }\n\n    //If there are no corners to check intersection because r wraps completely...\n    if (r.getWidth() == 360)\n      return SpatialRelation.INTERSECTS;\n\n    //Check corners:\n    int cornersIntersect = numCornersIntersect(r);\n    // (It might be possible to reduce contains() calls within nCI() to exactly two, but this intersection\n    //  code is complicated enough as it is.)\n    if (cornersIntersect == 4) {//all\n      double backX = ctx.normX(getCenter().getX()+180);\n      if (r.relate_xRange(backX, backX, ctx).intersects())\n        return SpatialRelation.INTERSECTS;\n      else\n        return SpatialRelation.CONTAINS;\n    } else if (cornersIntersect == 0) {//none\n      double frontX = getCenter().getX();\n      if (r.relate_xRange(frontX, frontX, ctx).intersects())\n        return SpatialRelation.INTERSECTS;\n      else\n        return SpatialRelation.DISJOINT;\n    } else//partial\n      return SpatialRelation.INTERSECTS;\n  }\n\n","sourceOld":"  private SpatialRelation relateRectangleCircleWrapsPole(Rectangle r, SpatialContext ctx) {\n    //This method handles the case where the circle wraps ONE pole, but not both.  For both,\n    // there is the inverseCircle case handled before now.  The only exception is for the case where\n    // the circle covers the entire globe, and we'll check that first.\n    if (distDEG == 180)//whole globe\n      return SpatialRelation.CONTAINS;\n\n    //Check if r is within the pole wrap region:\n    double yTop = getCenter().getY()+ distDEG;\n    if (yTop > 90) {\n      double yTopOverlap = yTop - 90;\n      assert yTopOverlap <= 90;\n      if (r.getMinY() >= 90 - yTopOverlap)\n        return SpatialRelation.CONTAINS;\n    } else {\n      double yBot = point.getY() - distDEG;\n      if (yBot < -90) {\n        double yBotOverlap = -90 - yBot;\n        assert yBotOverlap <= 90;\n        if (r.getMaxY() <= -90 + yBotOverlap)\n          return SpatialRelation.CONTAINS;\n      } else {\n        //This point is probably not reachable ??\n        assert yTop == 90 || yBot == -90;//we simply touch a pole\n        //continue\n      }\n    }\n\n    //If there are no corners to check intersection because r wraps completely...\n    if (r.getWidth() == 360)\n      return SpatialRelation.INTERSECTS;\n\n    //Check corners:\n    int cornersIntersect = numCornersIntersect(r);\n    // (It might be possible to reduce contains() calls within nCI() to exactly two, but this intersection\n    //  code is complicated enough as it is.)\n    if (cornersIntersect == 4) {//all\n      double backX = ctx.normX(getCenter().getX()+180);\n      if (r.relate_xRange(backX, backX, ctx).intersects())\n        return SpatialRelation.INTERSECTS;\n      else\n        return SpatialRelation.CONTAINS;\n    } else if (cornersIntersect == 0) {//none\n      double frontX = getCenter().getX();\n      if (r.relate_xRange(frontX, frontX, ctx).intersects())\n        return SpatialRelation.INTERSECTS;\n      else\n        return SpatialRelation.DISJOINT;\n    } else//partial\n      return SpatialRelation.INTERSECTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a","date":1329809096,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#relateRectangleCircleWrapsPole(Rectangle,SpatialContext).mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#relateRectangleCircleWrapsPole(Rectangle,SpatialContext).mjava","sourceNew":"  private SpatialRelation relateRectangleCircleWrapsPole(Rectangle r, SpatialContext ctx) {\n    //This method handles the case where the circle wraps ONE pole, but not both.  For both,\n    // there is the inverseCircle case handled before now.  The only exception is for the case where\n    // the circle covers the entire globe, and we'll check that first.\n    if (distDEG == 180)//whole globe\n      return SpatialRelation.CONTAINS;\n\n    //Check if r is within the pole wrap region:\n    double yTop = getCenter().getY()+ distDEG;\n    if (yTop > 90) {\n      double yTopOverlap = yTop - 90;\n      assert yTopOverlap <= 90;\n      if (r.getMinY() >= 90 - yTopOverlap)\n        return SpatialRelation.CONTAINS;\n    } else {\n      double yBot = point.getY() - distDEG;\n      if (yBot < -90) {\n        double yBotOverlap = -90 - yBot;\n        assert yBotOverlap <= 90;\n        if (r.getMaxY() <= -90 + yBotOverlap)\n          return SpatialRelation.CONTAINS;\n      } else {\n        //This point is probably not reachable ??\n        assert yTop == 90 || yBot == -90;//we simply touch a pole\n        //continue\n      }\n    }\n\n    //If there are no corners to check intersection because r wraps completely...\n    if (r.getWidth() == 360)\n      return SpatialRelation.INTERSECTS;\n\n    //Check corners:\n    int cornersIntersect = numCornersIntersect(r);\n    // (It might be possible to reduce contains() calls within nCI() to exactly two, but this intersection\n    //  code is complicated enough as it is.)\n    if (cornersIntersect == 4) {//all\n      double backX = ctx.normX(getCenter().getX()+180);\n      if (r.relate_xRange(backX, backX, ctx).intersects())\n        return SpatialRelation.INTERSECTS;\n      else\n        return SpatialRelation.CONTAINS;\n    } else if (cornersIntersect == 0) {//none\n      double frontX = getCenter().getX();\n      if (r.relate_xRange(frontX, frontX, ctx).intersects())\n        return SpatialRelation.INTERSECTS;\n      else\n        return SpatialRelation.DISJOINT;\n    } else//partial\n      return SpatialRelation.INTERSECTS;\n  }\n\n","sourceOld":"  private SpatialRelation relateRectangleCircleWrapsPole(Rectangle r, SpatialContext ctx) {\n    //This method handles the case where the circle wraps ONE pole, but not both.  For both,\n    // there is the inverseCircle case handled before now.  The only exception is for the case where\n    // the circle covers the entire globe, and we'll check that first.\n    if (distDEG == 180)//whole globe\n      return SpatialRelation.CONTAINS;\n\n    //Check if r is within the pole wrap region:\n    double yTop = getCenter().getY()+ distDEG;\n    if (yTop > 90) {\n      double yTopOverlap = yTop - 90;\n      assert yTopOverlap <= 90;\n      if (r.getMinY() >= 90 - yTopOverlap)\n        return SpatialRelation.CONTAINS;\n    } else {\n      double yBot = point.getY() - distDEG;\n      if (yBot < -90) {\n        double yBotOverlap = -90 - yBot;\n        assert yBotOverlap <= 90;\n        if (r.getMaxY() <= -90 + yBotOverlap)\n          return SpatialRelation.CONTAINS;\n      } else {\n        //This point is probably not reachable ??\n        assert yTop == 90 || yBot == -90;//we simply touch a pole\n        //continue\n      }\n    }\n\n    //If there are no corners to check intersection because r wraps completely...\n    if (r.getWidth() == 360)\n      return SpatialRelation.INTERSECTS;\n\n    //Check corners:\n    int cornersIntersect = numCornersIntersect(r);\n    // (It might be possible to reduce contains() calls within nCI() to exactly two, but this intersection\n    //  code is complicated enough as it is.)\n    if (cornersIntersect == 4) {//all\n      double backX = ctx.normX(getCenter().getX()+180);\n      if (r.relate_xRange(backX, backX, ctx).intersects())\n        return SpatialRelation.INTERSECTS;\n      else\n        return SpatialRelation.CONTAINS;\n    } else if (cornersIntersect == 0) {//none\n      double frontX = getCenter().getX();\n      if (r.relate_xRange(frontX, frontX, ctx).intersects())\n        return SpatialRelation.INTERSECTS;\n      else\n        return SpatialRelation.DISJOINT;\n    } else//partial\n      return SpatialRelation.INTERSECTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}