{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","commits":[{"id":"73c3f3499afb7895a585b82e3273508381608269","date":1380177979,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","pathOld":"/dev/null","sourceNew":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","sourceNew":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","sourceOld":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","sourceNew":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","sourceOld":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","sourceNew":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","sourceOld":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","sourceNew":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","sourceOld":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","sourceNew":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","sourceOld":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScoresWhenNoHits().mjava","sourceNew":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq.build(), 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery.Builder();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq.build(), 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery.Builder();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq.build(), 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","sourceOld":"  @Test // Test for LUCENE-5245: Empty MTQ rewrites should have a consistent norm, so always need to return a CSQ!\n  public void testEqualScoresWhenNoHits() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    TermQuery dummyTerm = new TermQuery(new Term(\"data\", \"1\"));\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    bq = new BooleanQuery();\n    bq.add(dummyTerm, BooleanClause.Occur.SHOULD); // hits one doc\n    bq.add(csrq(\"data\", \"#\", \"#\", T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), BooleanClause.Occur.SHOULD); // hits no docs\n    result = search.search(bq, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 1, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73c3f3499afb7895a585b82e3273508381608269":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2713584a660051cd646423be682771e3bbd99985"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["73c3f3499afb7895a585b82e3273508381608269","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["73c3f3499afb7895a585b82e3273508381608269"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"73c3f3499afb7895a585b82e3273508381608269":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2713584a660051cd646423be682771e3bbd99985":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73c3f3499afb7895a585b82e3273508381608269"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}